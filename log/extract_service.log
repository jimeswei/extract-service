2025-06-27 10:19:03.035 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 60413 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-27 10:19:03.038 [main] INFO  com.datacenter.extract.ExtractServiceApplication - The following 1 profile is active: "default"
2025-06-27 10:19:03.870 [main] WARN  o.s.b.w.r.c.AnnotationConfigReactiveWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.support.BeanDefinitionOverrideException: Invalid bean definition with name 'cacheManager' defined in class path resource [org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.class]: Cannot register bean definition [Root bean: class [null]; scope=; abstract=false; lazyInit=null; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration; factoryMethodName=cacheManager; initMethodNames=null; destroyMethodNames=[(inferred)]; defined in class path resource [org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.class]] for bean 'cacheManager' since there is already [Root bean: class [null]; scope=; abstract=false; lazyInit=null; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=performanceConfig; factoryMethodName=cacheManager; initMethodNames=null; destroyMethodNames=[(inferred)]; defined in class path resource [com/datacenter/extract/config/PerformanceConfig.class]] bound.
2025-06-27 10:19:03.892 [main] INFO  o.s.b.a.logging.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-06-27 10:19:03.905 [main] ERROR o.s.b.diagnostics.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

The bean 'cacheManager', defined in class path resource [org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.class], could not be registered. A bean with that name has already been defined in class path resource [com/datacenter/extract/config/PerformanceConfig.class] and overriding is disabled.

Action:

Consider renaming one of the beans or enabling overriding by setting spring.main.allow-bean-definition-overriding=true

2025-06-27 12:12:37.985 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 7034 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-27 12:12:37.987 [main] INFO  com.datacenter.extract.ExtractServiceApplication - The following 1 profile is active: "default"
2025-06-27 12:12:38.837 [main] WARN  o.s.b.w.r.c.AnnotationConfigReactiveWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.support.BeanDefinitionOverrideException: Invalid bean definition with name 'cacheManager' defined in class path resource [org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.class]: Cannot register bean definition [Root bean: class [null]; scope=; abstract=false; lazyInit=null; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration; factoryMethodName=cacheManager; initMethodNames=null; destroyMethodNames=[(inferred)]; defined in class path resource [org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.class]] for bean 'cacheManager' since there is already [Root bean: class [null]; scope=; abstract=false; lazyInit=null; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=performanceConfig; factoryMethodName=cacheManager; initMethodNames=null; destroyMethodNames=[(inferred)]; defined in class path resource [com/datacenter/extract/config/PerformanceConfig.class]] bound.
2025-06-27 12:12:38.850 [main] INFO  o.s.b.a.logging.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-06-27 12:12:38.865 [main] ERROR o.s.b.diagnostics.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

The bean 'cacheManager', defined in class path resource [org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.class], could not be registered. A bean with that name has already been defined in class path resource [com/datacenter/extract/config/PerformanceConfig.class] and overriding is disabled.

Action:

Consider renaming one of the beans or enabling overriding by setting spring.main.allow-bean-definition-overriding=true

2025-06-27 16:08:49.982 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication v1.0.0 using Java 21.0.4 with PID 23805 (/Users/admin/workspace/AGENT/extract-service/target/extract-service-1.0.0.jar started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-27 16:08:49.985 [main] INFO  com.datacenter.extract.ExtractServiceApplication - The following 1 profile is active: "default"
2025-06-27 16:08:50.394 [main] WARN  o.s.b.w.r.c.AnnotationConfigReactiveWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.support.BeanDefinitionOverrideException: Invalid bean definition with name 'cacheManager' defined in class path resource [org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.class]: Cannot register bean definition [Root bean: class [null]; scope=; abstract=false; lazyInit=null; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration; factoryMethodName=cacheManager; initMethodNames=null; destroyMethodNames=[(inferred)]; defined in class path resource [org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.class]] for bean 'cacheManager' since there is already [Root bean: class [null]; scope=; abstract=false; lazyInit=null; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=performanceConfig; factoryMethodName=cacheManager; initMethodNames=null; destroyMethodNames=[(inferred)]; defined in class path resource [com/datacenter/extract/config/PerformanceConfig.class]] bound.
2025-06-27 16:08:50.408 [main] INFO  o.s.b.a.logging.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-06-27 16:08:50.418 [main] ERROR o.s.b.diagnostics.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

The bean 'cacheManager', defined in class path resource [org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.class], could not be registered. A bean with that name has already been defined in class path resource [com/datacenter/extract/config/PerformanceConfig.class] and overriding is disabled.

Action:

Consider renaming one of the beans or enabling overriding by setting spring.main.allow-bean-definition-overriding=true

2025-06-27 16:09:57.927 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication v1.0.0 using Java 21.0.4 with PID 23898 (/Users/admin/workspace/AGENT/extract-service/target/extract-service-1.0.0.jar started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-27 16:09:57.928 [main] INFO  com.datacenter.extract.ExtractServiceApplication - The following 1 profile is active: "default"
2025-06-27 16:09:58.395 [main] WARN  o.s.b.w.r.c.AnnotationConfigReactiveWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.support.BeanDefinitionOverrideException: Invalid bean definition with name 'cacheManager' defined in class path resource [org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.class]: Cannot register bean definition [Root bean: class [null]; scope=; abstract=false; lazyInit=null; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration; factoryMethodName=cacheManager; initMethodNames=null; destroyMethodNames=[(inferred)]; defined in class path resource [org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.class]] for bean 'cacheManager' since there is already [Root bean: class [null]; scope=; abstract=false; lazyInit=null; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=performanceConfig; factoryMethodName=cacheManager; initMethodNames=null; destroyMethodNames=[(inferred)]; defined in class path resource [com/datacenter/extract/config/PerformanceConfig.class]] bound.
2025-06-27 16:09:58.407 [main] INFO  o.s.b.a.logging.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-06-27 16:09:58.417 [main] ERROR o.s.b.diagnostics.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

The bean 'cacheManager', defined in class path resource [org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.class], could not be registered. A bean with that name has already been defined in class path resource [com/datacenter/extract/config/PerformanceConfig.class] and overriding is disabled.

Action:

Consider renaming one of the beans or enabling overriding by setting spring.main.allow-bean-definition-overriding=true

2025-06-27 16:12:02.200 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication v1.0.0 using Java 21.0.4 with PID 24058 (/Users/admin/workspace/AGENT/extract-service/target/extract-service-1.0.0.jar started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-27 16:12:02.202 [main] INFO  com.datacenter.extract.ExtractServiceApplication - The following 1 profile is active: "default"
2025-06-27 16:12:03.196 [main] ERROR i.n.resolver.dns.DnsServerAddressStreamProviders - Unable to load io.netty.resolver.dns.macos.MacOSDnsServerAddressStreamProvider, fallback to system defaults. This may result in incorrect DNS resolutions on MacOS. Check whether you have a dependency on 'io.netty:netty-resolver-dns-native-macos'. Use DEBUG level to see the full stack: java.lang.UnsatisfiedLinkError: failed to load the required native library
2025-06-27 16:12:03.541 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-27 16:12:03.541 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-27 16:12:03.541 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-27 16:12:03.541 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-27 16:12:03.541 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-27 16:12:03.541 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@586486c
2025-06-27 16:12:03.541 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@586486c
2025-06-27 16:12:03.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-27 16:12:03.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-27 16:12:03.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@7fbbdd8a
2025-06-27 16:12:03.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@7fbbdd8a
2025-06-27 16:12:03.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@7fbbdd8a
2025-06-27 16:12:03.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-27 16:12:03.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-27 16:12:03.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-27 16:12:03.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-27 16:12:03.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-27 16:12:03.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-27 16:12:03.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-27 16:12:03.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-27 16:12:03.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-27 16:12:03.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-27 16:12:03.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-27 16:12:03.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-27 16:12:03.543 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-27 16:12:03.543 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-27 16:12:03.543 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-27 16:12:03.543 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-27 16:12:03.543 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-27 16:12:03.543 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-27 16:12:03.543 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-27 16:12:03.543 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-27 16:12:03.543 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-27 16:12:03.543 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-27 16:12:03.543 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-27 16:12:03.543 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-27 16:12:03.543 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-27 16:12:03.543 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-27 16:12:03.543 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-27 16:12:03.543 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-27 16:12:03.543 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-27 16:12:03.544 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-27 16:12:03.544 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-27 16:12:03.544 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-27 16:12:03.544 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-27 16:12:03.544 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@12200670
2025-06-27 16:12:03.544 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@12200670
2025-06-27 16:12:03.544 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-27 16:12:03.544 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-27 16:12:03.544 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-27 16:12:03.544 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-27 16:12:03.544 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-27 16:12:03.544 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-27 16:12:03.544 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-27 16:12:03.544 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-27 16:12:03.544 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-27 16:12:03.544 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@2a259f6f
2025-06-27 16:12:03.544 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@2a259f6f
2025-06-27 16:12:03.544 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@7ccf6114
2025-06-27 16:12:03.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@3df3410a
2025-06-27 16:12:03.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-27 16:12:03.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@61d42275
2025-06-27 16:12:03.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@6614289a
2025-06-27 16:12:03.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@4148ce43
2025-06-27 16:12:03.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@46fb9581
2025-06-27 16:12:03.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@46fb9581
2025-06-27 16:12:03.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@6fcc0a1
2025-06-27 16:12:03.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@6fcc0a1
2025-06-27 16:12:03.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@416b681c
2025-06-27 16:12:03.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@416b681c
2025-06-27 16:12:03.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@46d69ca4
2025-06-27 16:12:03.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@46d69ca4
2025-06-27 16:12:03.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@5c9b5e62
2025-06-27 16:12:03.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@5c9b5e62
2025-06-27 16:12:03.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@3c826498
2025-06-27 16:12:03.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@2633d09c
2025-06-27 16:12:03.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@54f25b42
2025-06-27 16:12:03.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@54f25b42
2025-06-27 16:12:03.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@521c67f0
2025-06-27 16:12:03.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@7d156f8f
2025-06-27 16:12:03.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@451af781
2025-06-27 16:12:03.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@3749c2b
2025-06-27 16:12:03.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@3749c2b
2025-06-27 16:12:03.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@32e65852
2025-06-27 16:12:03.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@64d93096
2025-06-27 16:12:03.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@76ed7573
2025-06-27 16:12:03.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@76ed7573
2025-06-27 16:12:03.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@51df2a41
2025-06-27 16:12:03.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@51df2a41
2025-06-27 16:12:03.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@517bdce0
2025-06-27 16:12:03.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@517bdce0
2025-06-27 16:12:03.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@517bdce0
2025-06-27 16:12:03.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@7c0b0bd9
2025-06-27 16:12:03.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@7c0b0bd9
2025-06-27 16:12:03.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@7c0b0bd9
2025-06-27 16:12:03.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@6150afc6
2025-06-27 16:12:03.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@49f50c8f
2025-06-27 16:12:03.547 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@46e6458d
2025-06-27 16:12:03.547 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@46e6458d
2025-06-27 16:12:03.547 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@6297cb4b
2025-06-27 16:12:03.547 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@6297cb4b
2025-06-27 16:12:03.547 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@6297cb4b
2025-06-27 16:12:03.547 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@65d6640
2025-06-27 16:12:03.547 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@672d8370
2025-06-27 16:12:03.547 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@13137835
2025-06-27 16:12:03.547 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@13137835
2025-06-27 16:12:03.547 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@4f82248f
2025-06-27 16:12:03.547 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@4f82248f
2025-06-27 16:12:03.547 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@4f82248f
2025-06-27 16:12:03.547 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@22002459
2025-06-27 16:12:03.547 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@22002459
2025-06-27 16:12:03.547 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@29bd056a
2025-06-27 16:12:03.547 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@29bd056a
2025-06-27 16:12:03.547 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@21e702b8
2025-06-27 16:12:03.548 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@21e702b8
2025-06-27 16:12:03.548 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@7f1fec57
2025-06-27 16:12:03.548 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@7f1fec57
2025-06-27 16:12:03.548 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@5c9e3d01
2025-06-27 16:12:03.548 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@5c9e3d01
2025-06-27 16:12:03.548 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@1dc9f5ad
2025-06-27 16:12:03.550 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@72e49f6a
2025-06-27 16:12:03.550 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@72e49f6a
2025-06-27 16:12:03.551 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@d3d5094
2025-06-27 16:12:03.551 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@13714753
2025-06-27 16:12:03.551 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@3c3cd7a5
2025-06-27 16:12:03.551 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@96be1ae
2025-06-27 16:12:03.551 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@6eb5b9e7
2025-06-27 16:12:03.551 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@77e730bd
2025-06-27 16:12:03.551 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@7b8cb283
2025-06-27 16:12:03.551 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@38b54694
2025-06-27 16:12:03.551 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@7619fbe7
2025-06-27 16:12:03.647 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-27 16:12:03.819 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7d4bdbd8
2025-06-27 16:12:03.819 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-27 16:12:03.846 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-27 16:12:03.847 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-27 16:12:03.858 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@29eaf100) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6c1a6db1)
2025-06-27 16:12:03.858 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5dac6bc3) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@a6204e4)
2025-06-27 16:12:03.858 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@747e8659) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4b360a82)
2025-06-27 16:12:03.858 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@75fa9254) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6f25ed2b)
2025-06-27 16:12:03.858 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6f69e2d8) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@147097ad)
2025-06-27 16:12:03.858 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3539cf45) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7535307c)
2025-06-27 16:12:03.859 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@556a6320) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@45375bdf)
2025-06-27 16:12:03.859 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3e8fe7db) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@62e586a6)
2025-06-27 16:12:03.859 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@64908ab9) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1b06dc57)
2025-06-27 16:12:03.859 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-27 16:12:03.859 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-27 16:12:03.859 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-27 16:12:03.860 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-27 16:12:03.860 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-27 16:12:03.862 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@73fe7483
2025-06-27 16:12:03.862 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@d3d5094`
2025-06-27 16:12:03.864 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-27 16:12:03.864 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-27 16:12:03.865 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-27 16:12:03.865 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-27 16:12:03.865 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-27 16:12:03.865 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-27 16:12:03.865 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-27 16:12:03.865 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-27 16:12:03.866 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-27 16:12:03.866 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-27 16:12:03.866 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-27 16:12:03.866 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@271a140c] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@74c23525]
2025-06-27 16:12:04.286 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@271a140c] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@1a507ea0]
2025-06-27 16:12:04.287 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@1a507ea0] for TypeConfiguration
2025-06-27 16:12:04.612 [main] INFO  c.datacenter.extract.service.EntityDisambiguator - EntityDisambiguator initialized successfully
2025-06-27 16:12:04.614 [main] INFO  com.datacenter.extract.service.KnowledgeFusion - KnowledgeFusion initialized successfully
2025-06-27 16:12:04.614 [main] INFO  com.datacenter.extract.service.RelationValidator - RelationValidator initialized successfully
2025-06-27 16:12:04.615 [main] INFO  com.datacenter.extract.service.QualityAssessor - QualityAssessor initialized successfully
2025-06-27 16:12:04.616 [main] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - KnowledgeGraphEngine initialized with all processors
2025-06-27 16:12:04.704 [main] INFO  c.d.extract.service.OptimizedBusinessService - OptimizedBusinessService initialized with enterprise-grade components
2025-06-27 16:12:04.705 [main] INFO  c.d.extract.controller.AsyncExtractController - AsyncExtractController initialized with enterprise-grade business service
2025-06-27 16:12:04.999 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-27 16:12:05.408 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-27 16:12:05.417 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 3.566 seconds (process running for 3.812)
2025-06-27 16:17:24.289 [reactor-http-nio-4] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 43, ExtractParams: triples, KgMode: standard
2025-06-27 16:17:24.290 [reactor-http-nio-4] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012244289_924b, KgMode: standard, TextLength: 43
2025-06-27 16:17:24.292 [reactor-http-nio-4] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 43 字符
2025-06-27 16:17:24.292 [reactor-http-nio-4] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:17:24.292 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 43，当前并发数: 1
2025-06-27 16:17:24.292 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:17:24.420 [reactor-http-nio-4] ERROR com.datacenter.extract.service.AIModelCaller - 💥 AI调用异常: block()/blockFirst()/blockLast() are blocking, which is not supported in thread reactor-http-nio-4
java.lang.IllegalStateException: block()/blockFirst()/blockLast() are blocking, which is not supported in thread reactor-http-nio-4
	at reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:86)
	at reactor.core.publisher.Mono.block(Mono.java:1728)
	at com.datacenter.extract.service.AIModelCaller.callAI(AIModelCaller.java:94)
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:67)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.service.OptimizedBusinessService$StandardProcessingStrategy.aiProcess(OptimizedBusinessService.java:192)
	at com.datacenter.extract.service.OptimizedBusinessService.lambda$standardProcessingTemplate$2(OptimizedBusinessService.java:106)
	at java.base/java.util.concurrent.CompletableFuture.uniApplyNow(CompletableFuture.java:684)
	at java.base/java.util.concurrent.CompletableFuture.uniApplyStage(CompletableFuture.java:662)
	at java.base/java.util.concurrent.CompletableFuture.thenApply(CompletableFuture.java:2200)
	at com.datacenter.extract.service.OptimizedBusinessService.standardProcessingTemplate(OptimizedBusinessService.java:104)
	at com.datacenter.extract.service.OptimizedBusinessService.processAsync(OptimizedBusinessService.java:77)
	at com.datacenter.extract.controller.AsyncExtractController.extractAsync(AsyncExtractController.java:70)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-27 16:17:24.421 [reactor-http-nio-4] ERROR com.datacenter.extract.service.SmartAIProvider - ❌ AI提取失败，类型: triples，文本长度: 43
2025-06-27 16:17:24.421 [reactor-http-nio-4] ERROR com.datacenter.extract.service.SmartAIProvider - 💥 AI提取过程异常: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:77)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.service.OptimizedBusinessService$StandardProcessingStrategy.aiProcess(OptimizedBusinessService.java:192)
	at com.datacenter.extract.service.OptimizedBusinessService.lambda$standardProcessingTemplate$2(OptimizedBusinessService.java:106)
	at java.base/java.util.concurrent.CompletableFuture.uniApplyNow(CompletableFuture.java:684)
	at java.base/java.util.concurrent.CompletableFuture.uniApplyStage(CompletableFuture.java:662)
	at java.base/java.util.concurrent.CompletableFuture.thenApply(CompletableFuture.java:2200)
	at com.datacenter.extract.service.OptimizedBusinessService.standardProcessingTemplate(OptimizedBusinessService.java:104)
	at com.datacenter.extract.service.OptimizedBusinessService.processAsync(OptimizedBusinessService.java:77)
	at com.datacenter.extract.controller.AsyncExtractController.extractAsync(AsyncExtractController.java:70)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-27 16:17:24.422 [reactor-http-nio-4] ERROR c.d.extract.service.OptimizedBusinessService - 处理异常 - RequestId: biz_1751012244289_924b, Error: java.lang.RuntimeException: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-27 16:17:24.423 [reactor-http-nio-4] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012244289_924b, Duration: 0ms
2025-06-27 16:17:24.427 [reactor-http-nio-4] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 43, ExtractParams: triples, KgMode: enhanced
2025-06-27 16:17:24.428 [reactor-http-nio-4] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012244428_c29a, KgMode: enhanced, TextLength: 43
2025-06-27 16:17:24.428 [reactor-http-nio-4] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 43 字符
2025-06-27 16:17:24.428 [reactor-http-nio-4] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:17:24.428 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 43，当前并发数: 1
2025-06-27 16:17:24.428 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:17:24.429 [reactor-http-nio-4] ERROR com.datacenter.extract.service.AIModelCaller - 💥 AI调用异常: block()/blockFirst()/blockLast() are blocking, which is not supported in thread reactor-http-nio-4
java.lang.IllegalStateException: block()/blockFirst()/blockLast() are blocking, which is not supported in thread reactor-http-nio-4
	at reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:86)
	at reactor.core.publisher.Mono.block(Mono.java:1728)
	at com.datacenter.extract.service.AIModelCaller.callAI(AIModelCaller.java:94)
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:67)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.service.OptimizedBusinessService$StandardProcessingStrategy.aiProcess(OptimizedBusinessService.java:192)
	at com.datacenter.extract.service.OptimizedBusinessService.lambda$standardProcessingTemplate$2(OptimizedBusinessService.java:106)
	at java.base/java.util.concurrent.CompletableFuture$UniApply.tryFire(CompletableFuture.java:646)
	at java.base/java.util.concurrent.CompletableFuture.unipush(CompletableFuture.java:593)
	at java.base/java.util.concurrent.CompletableFuture.uniApplyStage(CompletableFuture.java:664)
	at java.base/java.util.concurrent.CompletableFuture.thenApply(CompletableFuture.java:2200)
	at com.datacenter.extract.service.OptimizedBusinessService.standardProcessingTemplate(OptimizedBusinessService.java:104)
	at com.datacenter.extract.service.OptimizedBusinessService.processAsync(OptimizedBusinessService.java:77)
	at com.datacenter.extract.controller.AsyncExtractController.extractAsync(AsyncExtractController.java:70)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-27 16:17:24.430 [reactor-http-nio-4] ERROR com.datacenter.extract.service.SmartAIProvider - ❌ AI提取失败，类型: triples，文本长度: 43
2025-06-27 16:17:24.430 [reactor-http-nio-4] ERROR com.datacenter.extract.service.SmartAIProvider - 💥 AI提取过程异常: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:77)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.service.OptimizedBusinessService$StandardProcessingStrategy.aiProcess(OptimizedBusinessService.java:192)
	at com.datacenter.extract.service.OptimizedBusinessService.lambda$standardProcessingTemplate$2(OptimizedBusinessService.java:106)
	at java.base/java.util.concurrent.CompletableFuture$UniApply.tryFire(CompletableFuture.java:646)
	at java.base/java.util.concurrent.CompletableFuture.unipush(CompletableFuture.java:593)
	at java.base/java.util.concurrent.CompletableFuture.uniApplyStage(CompletableFuture.java:664)
	at java.base/java.util.concurrent.CompletableFuture.thenApply(CompletableFuture.java:2200)
	at com.datacenter.extract.service.OptimizedBusinessService.standardProcessingTemplate(OptimizedBusinessService.java:104)
	at com.datacenter.extract.service.OptimizedBusinessService.processAsync(OptimizedBusinessService.java:77)
	at com.datacenter.extract.controller.AsyncExtractController.extractAsync(AsyncExtractController.java:70)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-27 16:17:24.431 [reactor-http-nio-4] ERROR c.d.extract.service.OptimizedBusinessService - 处理异常 - RequestId: biz_1751012244428_c29a, Error: java.lang.RuntimeException: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-27 16:17:24.431 [reactor-http-nio-4] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012244428_c29a, Duration: 0ms
2025-06-27 16:17:24.438 [reactor-http-nio-4] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 43, ExtractParams: triples, KgMode: fusion
2025-06-27 16:17:24.438 [reactor-http-nio-4] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012244438_9e06, KgMode: fusion, TextLength: 43
2025-06-27 16:17:24.438 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 43 字符
2025-06-27 16:17:24.438 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:17:24.438 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 43，当前并发数: 1
2025-06-27 16:17:24.438 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:17:24.442 [reactor-http-nio-4] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 36, ExtractParams: entities,relations, KgMode: enhanced
2025-06-27 16:17:24.442 [reactor-http-nio-4] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012244442_8bc8, KgMode: enhanced, TextLength: 36
2025-06-27 16:17:24.442 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 36 字符
2025-06-27 16:17:24.442 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:17:24.442 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 36，当前并发数: 2
2025-06-27 16:17:24.442 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:17:26.460 [reactor-http-nio-4] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 39, ExtractParams: entities,relations, KgMode: enhanced
2025-06-27 16:17:26.460 [reactor-http-nio-4] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012246460_9eda, KgMode: enhanced, TextLength: 39
2025-06-27 16:17:26.461 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 39 字符
2025-06-27 16:17:26.461 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:17:26.461 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 39，当前并发数: 3
2025-06-27 16:17:26.461 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:17:28.476 [reactor-http-nio-4] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 39, ExtractParams: entities,relations, KgMode: enhanced
2025-06-27 16:17:28.476 [reactor-http-nio-4] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012248476_3e06, KgMode: enhanced, TextLength: 39
2025-06-27 16:17:30.497 [reactor-http-nio-4] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 42, ExtractParams: entities,relations, KgMode: enhanced
2025-06-27 16:17:30.497 [reactor-http-nio-4] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012250497_8b4f, KgMode: enhanced, TextLength: 42
2025-06-27 16:17:30.498 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 42 字符
2025-06-27 16:17:30.498 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:17:30.498 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 42，当前并发数: 4
2025-06-27 16:17:30.498 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:17:32.517 [reactor-http-nio-4] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 39, ExtractParams: entities,relations, KgMode: enhanced
2025-06-27 16:17:32.517 [reactor-http-nio-4] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012252517_467a, KgMode: enhanced, TextLength: 39
2025-06-27 16:17:32.837 [reactor-http-nio-6] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 8395ms，响应长度: 251
2025-06-27 16:17:32.838 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 36，处理模式: 直接处理
2025-06-27 16:17:32.838 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 39 字符
2025-06-27 16:17:32.839 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:17:32.839 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 39，当前并发数: 4
2025-06-27 16:17:32.839 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:17:32.840 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 开始知识图谱增强处理，模式: enhanced
2025-06-27 16:17:32.855 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.EntityDisambiguator - 开始实体消歧义处理
2025-06-27 16:17:32.965 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:32.980 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:32.983 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:32.987 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:32.997 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:17:33.005 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.EntityDisambiguator - 实体消歧义处理完成，处理了2个三元组
2025-06-27 16:17:33.005 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.RelationValidator - 开始关系验证处理
2025-06-27 16:17:33.005 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.RelationValidator - 关系验证处理完成，验证了2个三元组
2025-06-27 16:17:33.016 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 知识图谱增强处理完成，模式: enhanced
2025-06-27 16:17:33.018 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 652
2025-06-27 16:17:33.018 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"职业","object":"北京电影学院摄影系教授","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012253005,"relation_validation_applied":true,"validation_timestamp":1751012253005,"kg_mode":"enhanced","processed_at":1751012253005,"enhancement_applied":true}
2025-06-27 16:17:33.018 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"职业","object":"北京电影学院摄影系教授","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012253005,"relation_validation_applied":true,"validation_timestamp":1751012253005,"kg_mode":"enhanced","processed_at":1751012253005,"enhancement_applied":true}
2025-06-27 16:17:33.019 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 8 个主要字段: [triples, disambiguation_applied, disambiguation_timestamp, relation_validation_applied, validation_timestamp, kg_mode, processed_at, enhancement_applied]
2025-06-27 16:17:33.019 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组，包括实体和关系保存
2025-06-27 16:17:33.020 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:17:33.022 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:17:33.023 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:17:33.024 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-27 16:17:33.024 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:33.029 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:33.035 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:17:33.056 [ForkJoinPool.commonPool-worker-2] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:17:33.056 [ForkJoinPool.commonPool-worker-2] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:17:33.060 [ForkJoinPool.commonPool-worker-2] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《红高粱》 [导演], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:17:33.061 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《红高粱》
2025-06-27 16:17:33.061 [ForkJoinPool.commonPool-worker-2] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:33.062 [ForkJoinPool.commonPool-worker-2] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:33.062 [ForkJoinPool.commonPool-worker-2] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:33.062 [ForkJoinPool.commonPool-worker-2] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 北京电影学院摄影系教授 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:33.063 [ForkJoinPool.commonPool-worker-2] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:33.063 [ForkJoinPool.commonPool-worker-2] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 北京电影学院摄影系教授 [职业], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:33.063 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[职业]--> 北京电影学院摄影系教授
2025-06-27 16:17:33.063 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:17:33.065 [ForkJoinPool.commonPool-worker-2] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012244442_8bc8, Duration: 8623ms
2025-06-27 16:17:33.643 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 9351ms，响应长度: 356
2025-06-27 16:17:33.988 [reactor-http-nio-7] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 7527ms，响应长度: 246
2025-06-27 16:17:33.989 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 39，处理模式: 直接处理
2025-06-27 16:17:33.989 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 开始知识图谱增强处理，模式: enhanced
2025-06-27 16:17:33.989 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.service.EntityDisambiguator - 开始实体消歧义处理
2025-06-27 16:17:33.995 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:33.999 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:34.004 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:17:34.023 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:34.028 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:34.033 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:17:34.038 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.service.EntityDisambiguator - 实体消歧义处理完成，处理了2个三元组
2025-06-27 16:17:34.038 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.RelationValidator - 开始关系验证处理
2025-06-27 16:17:34.038 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.RelationValidator - 关系验证处理完成，验证了2个三元组
2025-06-27 16:17:34.038 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 知识图谱增强处理完成，模式: enhanced
2025-06-27 16:17:34.040 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 649
2025-06-27 16:17:34.040 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"张艺谋","predicate":"拍摄","object":"《英雄》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"参与拍摄","object":"大红灯笼高高挂","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012254038,"relation_validation_applied":true,"validation_timestamp":1751012254038,"kg_mode":"enhanced","processed_at":1751012254038,"enhancement_applied":true}
2025-06-27 16:17:34.040 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"张艺谋","predicate":"拍摄","object":"《英雄》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"参与拍摄","object":"大红灯笼高高挂","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012254038,"relation_validation_applied":true,"validation_timestamp":1751012254038,"kg_mode":"enhanced","processed_at":1751012254038,"enhancement_applied":true}
2025-06-27 16:17:34.040 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 8 个主要字段: [triples, disambiguation_applied, disambiguation_timestamp, relation_validation_applied, validation_timestamp, kg_mode, processed_at, enhancement_applied]
2025-06-27 16:17:34.040 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组，包括实体和关系保存
2025-06-27 16:17:34.041 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:17:34.042 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:17:34.043 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select w1_0.id from work w1_0 where w1_0.title=? limit ?
2025-06-27 16:17:34.047 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 作品 《英雄》 已存在，跳过插入
2025-06-27 16:17:34.047 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:34.050 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select w1_0.id,w1_0.awards,w1_0.baike,w1_0.description,w1_0.`group`,w1_0.platform,w1_0.release_date,w1_0.role,w1_0.title,w1_0.work_id,w1_0.work_type from work w1_0 where w1_0.title=?
2025-06-27 16:17:34.052 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - insert into celebrity_work (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:17:34.055 [ForkJoinPool.commonPool-worker-3] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:17:34.055 [ForkJoinPool.commonPool-worker-3] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:17:34.056 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《英雄》 [拍摄], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_work (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_work (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:17:34.056 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[拍摄]--> 《英雄》
2025-06-27 16:17:34.057 [ForkJoinPool.commonPool-worker-3] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:34.057 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:34.057 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[参与拍摄]--> 大红灯笼高高挂
2025-06-27 16:17:34.057 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:17:34.059 [ForkJoinPool.commonPool-worker-3] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012246460_9eda, Duration: 7599ms
2025-06-27 16:17:34.165 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 9737ms，响应长度: 360
2025-06-27 16:17:34.165 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 9726ms，响应长度: 360
2025-06-27 16:17:34.166 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 43，处理模式: 直接处理
2025-06-27 16:17:34.166 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 39 字符
2025-06-27 16:17:34.166 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 开始知识图谱增强处理，模式: fusion
2025-06-27 16:17:34.166 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:17:34.166 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 39，当前并发数: 3
2025-06-27 16:17:34.166 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:17:34.166 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.EntityDisambiguator - 开始实体消歧义处理
2025-06-27 16:17:34.170 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:34.174 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:34.177 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:34.180 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:34.183 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:34.186 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:34.189 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:17:34.193 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.EntityDisambiguator - 实体消歧义处理完成，处理了3个三元组
2025-06-27 16:17:34.193 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.KnowledgeFusion - 开始知识融合处理
2025-06-27 16:17:34.193 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.KnowledgeFusion - 知识融合处理完成，处理了3个三元组
2025-06-27 16:17:34.193 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.RelationValidator - 开始关系验证处理
2025-06-27 16:17:34.193 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.RelationValidator - 关系验证处理完成，验证了3个三元组
2025-06-27 16:17:34.193 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.QualityAssessor - 开始质量评估处理
2025-06-27 16:17:34.209 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.QualityAssessor - 质量评估完成，总分: {:.2f}
2025-06-27 16:17:34.209 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 知识图谱增强处理完成，模式: fusion
2025-06-27 16:17:34.210 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 1153
2025-06-27 16:17:34.210 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"巩俐","predicate":"主演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"属于","object":"第五代导演代表人物","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012254193,"knowledge_fusion_applied":true,"fusion_timestamp":1751012254193,"relation_validation_applied":true,"validation_timestamp":1751012254193,"quality_score":0.8000000000000002,"quality_grade":"GOOD","assessment_timestamp":1751012254193,"kg_mode":"fusion","processed_at":1751012254209,"full_processing_applied":true}
2025-06-27 16:17:34.210 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"巩俐","predicate":"主演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"属于","object":"第五代导演代表人物","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012254193,"knowledge_fusion_applied":true,"fusion_timestamp":1751012254193,"relation_validation_applied":true,"validation_timestamp":1751012254193,"quality_score":0.8000000000000002,"quality_grade":"GOOD","assessment_timestamp":1751012254193,"kg_mode":"fusion","processed_at":1751012254209,"full_processing_applied":true}
2025-06-27 16:17:34.211 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 13 个主要字段: [triples, disambiguation_applied, disambiguation_timestamp, knowledge_fusion_applied, fusion_timestamp, relation_validation_applied, validation_timestamp, quality_score, quality_grade, assessment_timestamp, kg_mode, processed_at, full_processing_applied]
2025-06-27 16:17:34.211 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-27 16:17:34.211 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:17:34.212 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:17:34.213 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:17:34.214 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-27 16:17:34.214 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:34.216 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:34.218 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:17:34.218 [ForkJoinPool.commonPool-worker-1] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:17:34.218 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:17:34.219 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《红高粱》 [导演], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:17:34.219 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《红高粱》
2025-06-27 16:17:34.219 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:34.219 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 巩俐 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:34.220 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:34.220 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 《红高粱》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:34.220 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:34.221 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 巩俐 -> 《红高粱》 [主演], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:34.221 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 巩俐 --[主演]--> 《红高粱》
2025-06-27 16:17:34.221 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:34.221 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:34.221 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[属于]--> 第五代导演代表人物
2025-06-27 16:17:34.221 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:17:34.222 [ForkJoinPool.commonPool-worker-1] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012244438_9e06, Duration: 9784ms
2025-06-27 16:17:34.536 [reactor-http-nio-4] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 40, ExtractParams: entities,relations, KgMode: fusion
2025-06-27 16:17:34.536 [reactor-http-nio-4] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012254536_207e, KgMode: fusion, TextLength: 40
2025-06-27 16:17:34.537 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 40 字符
2025-06-27 16:17:34.537 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:17:34.537 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 40，当前并发数: 4
2025-06-27 16:17:34.537 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:17:36.556 [reactor-http-nio-4] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 40, ExtractParams: entities,relations, KgMode: fusion
2025-06-27 16:17:36.557 [reactor-http-nio-4] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012256557_5b97, KgMode: fusion, TextLength: 40
2025-06-27 16:17:38.578 [reactor-http-nio-4] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 47, ExtractParams: entities,relations, KgMode: fusion
2025-06-27 16:17:38.579 [reactor-http-nio-4] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012258579_7f7b, KgMode: fusion, TextLength: 47
2025-06-27 16:17:38.579 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 47 字符
2025-06-27 16:17:38.579 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:17:38.579 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 47，当前并发数: 5
2025-06-27 16:17:38.579 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:17:40.602 [reactor-http-nio-4] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 48, ExtractParams: entities,relations, KgMode: fusion
2025-06-27 16:17:40.602 [reactor-http-nio-4] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012260602_72fb, KgMode: fusion, TextLength: 48
2025-06-27 16:17:40.603 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 48 字符
2025-06-27 16:17:40.603 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:17:41.229 [reactor-http-nio-8] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 10731ms，响应长度: 466
2025-06-27 16:17:41.230 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 42，处理模式: 直接处理
2025-06-27 16:17:41.230 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 48，当前并发数: 5
2025-06-27 16:17:41.230 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:17:41.231 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 40 字符
2025-06-27 16:17:41.231 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:17:41.231 [ForkJoinPool.commonPool-worker-5] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 开始知识图谱增强处理，模式: enhanced
2025-06-27 16:17:41.231 [ForkJoinPool.commonPool-worker-5] INFO  c.datacenter.extract.service.EntityDisambiguator - 开始实体消歧义处理
2025-06-27 16:17:41.238 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:41.245 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:41.251 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:41.256 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:41.262 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:17:41.271 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:41.275 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:41.278 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:41.281 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:41.284 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:17:41.288 [ForkJoinPool.commonPool-worker-5] INFO  c.datacenter.extract.service.EntityDisambiguator - 实体消歧义处理完成，处理了4个三元组
2025-06-27 16:17:41.288 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.RelationValidator - 开始关系验证处理
2025-06-27 16:17:41.288 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.RelationValidator - 关系验证处理完成，验证了4个三元组
2025-06-27 16:17:41.288 [ForkJoinPool.commonPool-worker-5] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 知识图谱增强处理完成，模式: enhanced
2025-06-27 16:17:41.289 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 1056
2025-06-27 16:17:41.289 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"张艺谋","predicate":"职业","object":"导演","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"职业","object":"摄影师","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"作品","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"参与作品","object":"《黄土地》","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012261288,"relation_validation_applied":true,"validation_timestamp":1751012261288,"kg_mode":"enhanced","processed_at":1751012261288,"enhancement_applied":true}
2025-06-27 16:17:41.289 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"张艺谋","predicate":"职业","object":"导演","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"职业","object":"摄影师","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"作品","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"参与作品","object":"《黄土地》","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012261288,"relation_validation_applied":true,"validation_timestamp":1751012261288,"kg_mode":"enhanced","processed_at":1751012261288,"enhancement_applied":true}
2025-06-27 16:17:41.290 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 8 个主要字段: [triples, disambiguation_applied, disambiguation_timestamp, relation_validation_applied, validation_timestamp, kg_mode, processed_at, enhancement_applied]
2025-06-27 16:17:41.290 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-27 16:17:41.290 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:17:41.292 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:17:41.292 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:17:41.293 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 人员 导演 已存在，跳过插入
2025-06-27 16:17:41.294 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:41.296 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:41.297 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:17:41.298 [ForkJoinPool.commonPool-worker-5] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:17:41.298 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:17:41.298 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 导演 [职业], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:17:41.298 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[职业]--> 导演
2025-06-27 16:17:41.299 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:41.299 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:41.300 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:41.300 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 摄影师 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:41.300 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:41.301 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 摄影师 [职业], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:41.301 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[职业]--> 摄影师
2025-06-27 16:17:41.301 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:41.302 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:41.302 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:41.303 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《红高粱》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:41.304 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:41.304 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《红高粱》 [作品], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:41.304 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[作品]--> 《红高粱》
2025-06-27 16:17:41.305 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:41.305 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:41.305 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:41.305 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《黄土地》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:41.306 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:41.306 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《黄土地》 [参与作品], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:41.306 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[参与作品]--> 《黄土地》
2025-06-27 16:17:41.306 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:17:41.308 [ForkJoinPool.commonPool-worker-5] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012250497_8b4f, Duration: 10811ms
2025-06-27 16:17:42.621 [reactor-http-nio-4] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 54, ExtractParams: entities,relations, KgMode: fusion
2025-06-27 16:17:42.621 [reactor-http-nio-4] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012262621_e859, KgMode: fusion, TextLength: 54
2025-06-27 16:17:42.622 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 54 字符
2025-06-27 16:17:42.622 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:17:44.641 [reactor-http-nio-4] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 56, ExtractParams: entities,relations, KgMode: fusion
2025-06-27 16:17:44.641 [reactor-http-nio-4] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012264641_51bd, KgMode: fusion, TextLength: 56
2025-06-27 16:17:44.641 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 56 字符
2025-06-27 16:17:44.642 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:17:45.275 [reactor-http-nio-6] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 11109ms，响应长度: 469
2025-06-27 16:17:45.276 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 40，当前并发数: 5
2025-06-27 16:17:45.276 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 39，处理模式: 直接处理
2025-06-27 16:17:45.276 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:17:45.277 [ForkJoinPool.commonPool-worker-4] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 开始知识图谱增强处理，模式: enhanced
2025-06-27 16:17:45.277 [ForkJoinPool.commonPool-worker-4] INFO  c.datacenter.extract.service.EntityDisambiguator - 开始实体消歧义处理
2025-06-27 16:17:45.285 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:45.290 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:45.295 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:17:45.316 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:45.319 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:17:45.329 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:45.332 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:45.335 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:17:45.341 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:45.344 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:17:45.349 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:45.351 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:17:45.354 [ForkJoinPool.commonPool-worker-4] INFO  c.datacenter.extract.service.EntityDisambiguator - 实体消歧义处理完成，处理了4个三元组
2025-06-27 16:17:45.355 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.RelationValidator - 开始关系验证处理
2025-06-27 16:17:45.355 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.RelationValidator - 关系验证处理完成，验证了4个三元组
2025-06-27 16:17:45.355 [ForkJoinPool.commonPool-worker-4] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 知识图谱增强处理完成，模式: enhanced
2025-06-27 16:17:45.355 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 1061
2025-06-27 16:17:45.355 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"《红高粱》","predicate":"上映时间","object":"1987年","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"导演","object":"满江红","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"满江红","predicate":"上映时间","object":"2023年","confidence":0.95,"subject_confidence":1.0,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012265354,"relation_validation_applied":true,"validation_timestamp":1751012265355,"kg_mode":"enhanced","processed_at":1751012265355,"enhancement_applied":true}
2025-06-27 16:17:45.356 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"《红高粱》","predicate":"上映时间","object":"1987年","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"导演","object":"满江红","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"满江红","predicate":"上映时间","object":"2023年","confidence":0.95,"subject_confidence":1.0,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012265354,"relation_validation_applied":true,"validation_timestamp":1751012265355,"kg_mode":"enhanced","processed_at":1751012265355,"enhancement_applied":true}
2025-06-27 16:17:45.356 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 8 个主要字段: [triples, disambiguation_applied, disambiguation_timestamp, relation_validation_applied, validation_timestamp, kg_mode, processed_at, enhancement_applied]
2025-06-27 16:17:45.356 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-27 16:17:45.356 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:17:45.357 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:17:45.358 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:17:45.359 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-27 16:17:45.359 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:45.360 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:45.361 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:17:45.362 [ForkJoinPool.commonPool-worker-4] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:17:45.362 [ForkJoinPool.commonPool-worker-4] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:17:45.363 [ForkJoinPool.commonPool-worker-4] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《红高粱》 [导演], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:17:45.363 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《红高粱》
2025-06-27 16:17:45.363 [ForkJoinPool.commonPool-worker-4] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:45.363 [ForkJoinPool.commonPool-worker-4] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《红高粱》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:45.363 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《红高粱》 --[上映时间]--> 1987年
2025-06-27 16:17:45.363 [ForkJoinPool.commonPool-worker-4] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:45.363 [ForkJoinPool.commonPool-worker-4] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:45.364 [ForkJoinPool.commonPool-worker-4] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:45.364 [ForkJoinPool.commonPool-worker-4] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 满江红 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:45.364 [ForkJoinPool.commonPool-worker-4] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:45.364 [ForkJoinPool.commonPool-worker-4] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 满江红 [导演], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:45.364 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 满江红
2025-06-27 16:17:45.364 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 满江红 --[上映时间]--> 2023年
2025-06-27 16:17:45.364 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:17:45.366 [ForkJoinPool.commonPool-worker-4] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012248476_3e06, Duration: 16890ms
2025-06-27 16:17:46.044 [reactor-http-nio-9] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 13205ms，响应长度: 578
2025-06-27 16:17:46.045 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 39，处理模式: 直接处理
2025-06-27 16:17:46.045 [ForkJoinPool.commonPool-worker-6] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 开始知识图谱增强处理，模式: enhanced
2025-06-27 16:17:46.045 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 54，当前并发数: 5
2025-06-27 16:17:46.045 [ForkJoinPool.commonPool-worker-6] INFO  c.datacenter.extract.service.EntityDisambiguator - 开始实体消歧义处理
2025-06-27 16:17:46.045 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:17:46.052 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:46.058 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:46.063 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:46.068 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:46.074 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:17:46.082 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:46.085 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:46.088 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:46.091 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:46.094 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:46.098 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:46.101 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:17:46.105 [ForkJoinPool.commonPool-worker-6] INFO  c.datacenter.extract.service.EntityDisambiguator - 实体消歧义处理完成，处理了5个三元组
2025-06-27 16:17:46.105 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.RelationValidator - 开始关系验证处理
2025-06-27 16:17:46.105 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.RelationValidator - 关系验证处理完成，验证了5个三元组
2025-06-27 16:17:46.106 [ForkJoinPool.commonPool-worker-6] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 知识图谱增强处理完成，模式: enhanced
2025-06-27 16:17:46.107 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 1263
2025-06-27 16:17:46.107 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《英雄》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"《英雄》","predicate":"获奖","object":"无数","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"主演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"巩俐","predicate":"主演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"《红高粱》","predicate":"评价","object":"深受好评","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012266105,"relation_validation_applied":true,"validation_timestamp":1751012266105,"kg_mode":"enhanced","processed_at":1751012266105,"enhancement_applied":true}
2025-06-27 16:17:46.107 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《英雄》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"《英雄》","predicate":"获奖","object":"无数","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"主演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"巩俐","predicate":"主演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"《红高粱》","predicate":"评价","object":"深受好评","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012266105,"relation_validation_applied":true,"validation_timestamp":1751012266105,"kg_mode":"enhanced","processed_at":1751012266105,"enhancement_applied":true}
2025-06-27 16:17:46.107 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 8 个主要字段: [triples, disambiguation_applied, disambiguation_timestamp, relation_validation_applied, validation_timestamp, kg_mode, processed_at, enhancement_applied]
2025-06-27 16:17:46.107 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 处理 5 个三元组，包括实体和关系保存
2025-06-27 16:17:46.108 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:17:46.109 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:17:46.109 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:17:46.110 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 人员 《英雄》 已存在，跳过插入
2025-06-27 16:17:46.111 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:46.112 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:46.114 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:17:46.115 [ForkJoinPool.commonPool-worker-6] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:17:46.115 [ForkJoinPool.commonPool-worker-6] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:17:46.116 [ForkJoinPool.commonPool-worker-6] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《英雄》 [导演], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:17:46.116 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《英雄》
2025-06-27 16:17:46.116 [ForkJoinPool.commonPool-worker-6] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:46.116 [ForkJoinPool.commonPool-worker-6] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《英雄》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:46.116 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《英雄》 --[获奖]--> 无数
2025-06-27 16:17:46.117 [ForkJoinPool.commonPool-worker-6] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:46.117 [ForkJoinPool.commonPool-worker-6] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:46.117 [ForkJoinPool.commonPool-worker-6] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:46.117 [ForkJoinPool.commonPool-worker-6] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 《红高粱》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:46.118 [ForkJoinPool.commonPool-worker-6] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:46.118 [ForkJoinPool.commonPool-worker-6] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《红高粱》 [主演], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:46.118 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[主演]--> 《红高粱》
2025-06-27 16:17:46.118 [ForkJoinPool.commonPool-worker-6] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:46.118 [ForkJoinPool.commonPool-worker-6] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 巩俐 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:46.119 [ForkJoinPool.commonPool-worker-6] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:46.119 [ForkJoinPool.commonPool-worker-6] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 《红高粱》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:46.119 [ForkJoinPool.commonPool-worker-6] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:46.119 [ForkJoinPool.commonPool-worker-6] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 巩俐 -> 《红高粱》 [主演], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:46.119 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 巩俐 --[主演]--> 《红高粱》
2025-06-27 16:17:46.120 [ForkJoinPool.commonPool-worker-6] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:46.120 [ForkJoinPool.commonPool-worker-6] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《红高粱》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:46.120 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《红高粱》 --[评价]--> 深受好评
2025-06-27 16:17:46.120 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:17:46.121 [ForkJoinPool.commonPool-worker-6] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012252517_467a, Duration: 13604ms
2025-06-27 16:17:46.664 [reactor-http-nio-4] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 40, ExtractParams: entities,relations, KgMode: fusion
2025-06-27 16:17:46.664 [reactor-http-nio-4] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012266664_f674, KgMode: fusion, TextLength: 40
2025-06-27 16:17:46.665 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 40 字符
2025-06-27 16:17:46.665 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:17:47.169 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 12632ms，响应长度: 577
2025-06-27 16:17:47.169 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 56，当前并发数: 5
2025-06-27 16:17:47.169 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 40，处理模式: 直接处理
2025-06-27 16:17:47.169 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:17:47.169 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 开始知识图谱增强处理，模式: fusion
2025-06-27 16:17:47.169 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.EntityDisambiguator - 开始实体消歧义处理
2025-06-27 16:17:47.174 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:47.178 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:47.181 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:17:47.189 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:47.198 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:47.204 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:47.208 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:47.212 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:17:47.220 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:47.224 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:47.227 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:47.230 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:47.234 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:17:47.238 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.EntityDisambiguator - 实体消歧义处理完成，处理了5个三元组
2025-06-27 16:17:47.238 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.KnowledgeFusion - 开始知识融合处理
2025-06-27 16:17:47.238 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.KnowledgeFusion - 知识融合处理完成，处理了5个三元组
2025-06-27 16:17:47.238 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.RelationValidator - 开始关系验证处理
2025-06-27 16:17:47.238 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.RelationValidator - 关系验证处理完成，验证了5个三元组
2025-06-27 16:17:47.238 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.QualityAssessor - 开始质量评估处理
2025-06-27 16:17:47.258 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.QualityAssessor - 质量评估完成，总分: {:.2f}
2025-06-27 16:17:47.259 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 知识图谱增强处理完成，模式: fusion
2025-06-27 16:17:47.260 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 1633
2025-06-27 16:17:47.260 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"张艺谋","predicate":"性别","object":"男","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"出生于","object":"1950年","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"国籍","object":"中国","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"职业","object":"导演","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"毕业于","object":"北京电影学院摄影系","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012267238,"knowledge_fusion_applied":true,"fusion_timestamp":1751012267238,"relation_validation_applied":true,"validation_timestamp":1751012267238,"quality_score":0.8,"quality_grade":"GOOD","assessment_timestamp":1751012267238,"kg_mode":"fusion","processed_at":1751012267258,"full_processing_applied":true}
2025-06-27 16:17:47.260 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"张艺谋","predicate":"性别","object":"男","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"出生于","object":"1950年","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"国籍","object":"中国","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"职业","object":"导演","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"毕业于","object":"北京电影学院摄影系","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012267238,"knowledge_fusion_applied":true,"fusion_timestamp":1751012267238,"relation_validation_applied":true,"validation_timestamp":1751012267238,"quality_score":0.8,"quality_grade":"GOOD","assessment_timestamp":1751012267238,"kg_mode":"fusion","processed_at":1751012267258,"full_processing_applied":true}
2025-06-27 16:17:47.260 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 13 个主要字段: [triples, disambiguation_applied, disambiguation_timestamp, knowledge_fusion_applied, fusion_timestamp, relation_validation_applied, validation_timestamp, quality_score, quality_grade, assessment_timestamp, kg_mode, processed_at, full_processing_applied]
2025-06-27 16:17:47.260 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 5 个三元组，包括实体和关系保存
2025-06-27 16:17:47.261 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:17:47.262 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:17:47.262 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[性别]--> 男
2025-06-27 16:17:47.263 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:17:47.264 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:17:47.264 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:17:47.265 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 1950年 已存在，跳过插入
2025-06-27 16:17:47.265 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:47.267 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:47.268 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:17:47.269 [ForkJoinPool.commonPool-worker-1] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:17:47.269 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:17:47.269 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 1950年 [出生于], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:17:47.269 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[出生于]--> 1950年
2025-06-27 16:17:47.269 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:47.270 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:47.270 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[国籍]--> 中国
2025-06-27 16:17:47.270 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:47.270 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:47.270 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:47.270 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 导演 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:47.271 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:47.271 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 导演 [职业], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:47.271 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[职业]--> 导演
2025-06-27 16:17:47.271 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:47.272 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:47.272 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:47.272 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 北京电影学院摄影系 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:47.273 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:47.273 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 北京电影学院摄影系 [毕业于], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:47.273 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[毕业于]--> 北京电影学院摄影系
2025-06-27 16:17:47.273 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:17:47.274 [ForkJoinPool.commonPool-worker-1] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012254536_207e, Duration: 12738ms
2025-06-27 16:17:48.689 [reactor-http-nio-4] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 43, ExtractParams: entities,relations, KgMode: fusion
2025-06-27 16:17:48.690 [reactor-http-nio-4] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012268690_cb5e, KgMode: fusion, TextLength: 43
2025-06-27 16:17:48.690 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 43 字符
2025-06-27 16:17:48.690 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:17:50.709 [reactor-http-nio-4] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 36, ExtractParams: entities,relations, KgMode: fusion
2025-06-27 16:17:50.709 [reactor-http-nio-4] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012270709_ad4e, KgMode: fusion, TextLength: 36
2025-06-27 16:17:50.709 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 36 字符
2025-06-27 16:17:50.710 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:17:52.185 [reactor-http-nio-8] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 6140ms，响应长度: 140
2025-06-27 16:17:52.185 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 54，处理模式: 直接处理
2025-06-27 16:17:52.185 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 40，当前并发数: 5
2025-06-27 16:17:52.185 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:17:52.185 [ForkJoinPool.commonPool-worker-5] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 开始知识图谱增强处理，模式: fusion
2025-06-27 16:17:52.186 [ForkJoinPool.commonPool-worker-5] INFO  c.datacenter.extract.service.EntityDisambiguator - 开始实体消歧义处理
2025-06-27 16:17:52.190 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:52.193 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:52.196 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:17:52.199 [ForkJoinPool.commonPool-worker-5] INFO  c.datacenter.extract.service.EntityDisambiguator - 实体消歧义处理完成，处理了1个三元组
2025-06-27 16:17:52.199 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.KnowledgeFusion - 开始知识融合处理
2025-06-27 16:17:52.199 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.KnowledgeFusion - 知识融合处理完成，处理了1个三元组
2025-06-27 16:17:52.199 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.RelationValidator - 开始关系验证处理
2025-06-27 16:17:52.199 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.RelationValidator - 关系验证处理完成，验证了1个三元组
2025-06-27 16:17:52.199 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.QualityAssessor - 开始质量评估处理
2025-06-27 16:17:52.205 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.QualityAssessor - 质量评估完成，总分: {:.2f}
2025-06-27 16:17:52.206 [ForkJoinPool.commonPool-worker-5] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 知识图谱增强处理完成，模式: fusion
2025-06-27 16:17:52.206 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 638
2025-06-27 16:17:52.206 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"张艺谋","predicate":"出生于","object":"1950年11月14日","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012272199,"knowledge_fusion_applied":true,"fusion_timestamp":1751012272199,"relation_validation_applied":true,"validation_timestamp":1751012272199,"quality_score":0.8,"quality_grade":"GOOD","assessment_timestamp":1751012272199,"kg_mode":"fusion","processed_at":1751012272205,"full_processing_applied":true}
2025-06-27 16:17:52.206 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"张艺谋","predicate":"出生于","object":"1950年11月14日","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012272199,"knowledge_fusion_applied":true,"fusion_timestamp":1751012272199,"relation_validation_applied":true,"validation_timestamp":1751012272199,"quality_score":0.8,"quality_grade":"GOOD","assessment_timestamp":1751012272199,"kg_mode":"fusion","processed_at":1751012272205,"full_processing_applied":true}
2025-06-27 16:17:52.207 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 13 个主要字段: [triples, disambiguation_applied, disambiguation_timestamp, knowledge_fusion_applied, fusion_timestamp, relation_validation_applied, validation_timestamp, quality_score, quality_grade, assessment_timestamp, kg_mode, processed_at, full_processing_applied]
2025-06-27 16:17:52.207 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 处理 1 个三元组，包括实体和关系保存
2025-06-27 16:17:52.208 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:17:52.209 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:17:52.209 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:17:52.211 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - insert into celebrity (baike,birthdate,celebrity_id,company,education,gender,`group`,name,nationality,position,profession,relatives,resume,spouse) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-06-27 16:17:52.216 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 1950年11月14日 (通过三元组提取)
2025-06-27 16:17:52.217 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:52.218 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:52.220 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:17:52.221 [ForkJoinPool.commonPool-worker-5] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:17:52.221 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:17:52.221 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 1950年11月14日 [出生于], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:17:52.221 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[出生于]--> 1950年11月14日
2025-06-27 16:17:52.221 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:17:52.223 [ForkJoinPool.commonPool-worker-5] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012262621_e859, Duration: 9602ms
2025-06-27 16:17:52.730 [reactor-http-nio-4] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 65, ExtractParams: entities,relations, KgMode: fusion
2025-06-27 16:17:52.730 [reactor-http-nio-4] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012272730_5fe7, KgMode: fusion, TextLength: 65
2025-06-27 16:17:52.730 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 65 字符
2025-06-27 16:17:52.730 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:17:53.726 [reactor-http-nio-7] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 15146ms，响应长度: 582
2025-06-27 16:17:53.727 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 43，当前并发数: 5
2025-06-27 16:17:53.727 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 47，处理模式: 直接处理
2025-06-27 16:17:53.727 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:17:53.727 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 开始知识图谱增强处理，模式: fusion
2025-06-27 16:17:53.727 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.EntityDisambiguator - 开始实体消歧义处理
2025-06-27 16:17:53.731 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:53.734 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:53.737 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:53.740 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:53.743 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:53.745 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:53.748 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:17:53.752 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:53.754 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:53.756 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:17:53.760 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:53.762 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:53.764 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:17:53.768 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.EntityDisambiguator - 实体消歧义处理完成，处理了5个三元组
2025-06-27 16:17:53.768 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.KnowledgeFusion - 开始知识融合处理
2025-06-27 16:17:53.768 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.KnowledgeFusion - 知识融合处理完成，处理了5个三元组
2025-06-27 16:17:53.768 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.RelationValidator - 开始关系验证处理
2025-06-27 16:17:53.768 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.RelationValidator - 关系验证处理完成，验证了5个三元组
2025-06-27 16:17:53.768 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.QualityAssessor - 开始质量评估处理
2025-06-27 16:17:53.784 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.QualityAssessor - 质量评估完成，总分: {:.2f}
2025-06-27 16:17:53.784 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 知识图谱增强处理完成，模式: fusion
2025-06-27 16:17:53.785 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 1638
2025-06-27 16:17:53.785 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"张艺谋","predicate":"合作","object":"巩俐","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"作品","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"作品","object":"《大红灯笼高高挂》","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"属于","object":"第五代导演","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"陈凯歌","predicate":"属于","object":"第五代导演","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012273768,"knowledge_fusion_applied":true,"fusion_timestamp":1751012273768,"relation_validation_applied":true,"validation_timestamp":1751012273768,"quality_score":0.8,"quality_grade":"GOOD","assessment_timestamp":1751012273768,"kg_mode":"fusion","processed_at":1751012273784,"full_processing_applied":true}
2025-06-27 16:17:53.785 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"张艺谋","predicate":"合作","object":"巩俐","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"作品","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"作品","object":"《大红灯笼高高挂》","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"属于","object":"第五代导演","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"陈凯歌","predicate":"属于","object":"第五代导演","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012273768,"knowledge_fusion_applied":true,"fusion_timestamp":1751012273768,"relation_validation_applied":true,"validation_timestamp":1751012273768,"quality_score":0.8,"quality_grade":"GOOD","assessment_timestamp":1751012273768,"kg_mode":"fusion","processed_at":1751012273784,"full_processing_applied":true}
2025-06-27 16:17:53.785 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 13 个主要字段: [triples, disambiguation_applied, disambiguation_timestamp, knowledge_fusion_applied, fusion_timestamp, relation_validation_applied, validation_timestamp, quality_score, quality_grade, assessment_timestamp, kg_mode, processed_at, full_processing_applied]
2025-06-27 16:17:53.785 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 5 个三元组，包括实体和关系保存
2025-06-27 16:17:53.786 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:17:53.787 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:17:53.787 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:17:53.788 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 巩俐 已存在，跳过插入
2025-06-27 16:17:53.788 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:53.791 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:53.792 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:17:53.792 [ForkJoinPool.commonPool-worker-2] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:17:53.792 [ForkJoinPool.commonPool-worker-2] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:17:53.792 [ForkJoinPool.commonPool-worker-2] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 巩俐 [合作], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:17:53.792 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[合作]--> 巩俐
2025-06-27 16:17:53.793 [ForkJoinPool.commonPool-worker-2] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:53.793 [ForkJoinPool.commonPool-worker-2] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:53.793 [ForkJoinPool.commonPool-worker-2] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:53.793 [ForkJoinPool.commonPool-worker-2] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《红高粱》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:53.794 [ForkJoinPool.commonPool-worker-2] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:53.794 [ForkJoinPool.commonPool-worker-2] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《红高粱》 [作品], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:53.794 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[作品]--> 《红高粱》
2025-06-27 16:17:53.794 [ForkJoinPool.commonPool-worker-2] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:53.794 [ForkJoinPool.commonPool-worker-2] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:53.795 [ForkJoinPool.commonPool-worker-2] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:53.795 [ForkJoinPool.commonPool-worker-2] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《大红灯笼高高挂》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:53.795 [ForkJoinPool.commonPool-worker-2] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:53.795 [ForkJoinPool.commonPool-worker-2] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《大红灯笼高高挂》 [作品], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:53.795 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[作品]--> 《大红灯笼高高挂》
2025-06-27 16:17:53.795 [ForkJoinPool.commonPool-worker-2] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:53.795 [ForkJoinPool.commonPool-worker-2] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:53.795 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[属于]--> 第五代导演
2025-06-27 16:17:53.795 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 陈凯歌 --[属于]--> 第五代导演
2025-06-27 16:17:53.795 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:17:53.796 [ForkJoinPool.commonPool-worker-2] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012258579_7f7b, Duration: 15217ms
2025-06-27 16:17:54.745 [reactor-http-nio-4] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 15, ExtractParams: triples, KgMode: standard
2025-06-27 16:17:54.746 [reactor-http-nio-4] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012274746_5b95, KgMode: standard, TextLength: 15
2025-06-27 16:17:54.751 [reactor-http-nio-12] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 16, ExtractParams: triples, KgMode: standard
2025-06-27 16:17:54.751 [reactor-http-nio-10] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 15, ExtractParams: triples, KgMode: standard
2025-06-27 16:17:54.751 [reactor-http-nio-12] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012274751_715e, KgMode: standard, TextLength: 16
2025-06-27 16:17:54.751 [reactor-http-nio-10] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012274751_9ca6, KgMode: standard, TextLength: 15
2025-06-27 16:17:54.751 [reactor-http-nio-11] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 15, ExtractParams: triples, KgMode: standard
2025-06-27 16:17:54.751 [reactor-http-nio-11] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012274751_e752, KgMode: standard, TextLength: 15
2025-06-27 16:17:54.751 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 16 字符
2025-06-27 16:17:54.752 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:17:54.752 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 15 字符
2025-06-27 16:17:54.752 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:17:54.754 [reactor-http-nio-3] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 13, ExtractParams: triples, KgMode: standard
2025-06-27 16:17:54.757 [reactor-http-nio-3] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012274757_36aa, KgMode: standard, TextLength: 13
2025-06-27 16:17:54.761 [reactor-http-nio-5] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 15, ExtractParams: triples, KgMode: standard
2025-06-27 16:17:54.761 [reactor-http-nio-5] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012274761_7d95, KgMode: standard, TextLength: 15
2025-06-27 16:17:54.763 [reactor-http-nio-4] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 15, ExtractParams: triples, KgMode: standard
2025-06-27 16:17:54.761 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 13, ExtractParams: triples, KgMode: standard
2025-06-27 16:17:54.763 [reactor-http-nio-2] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012274763_634, KgMode: standard, TextLength: 13
2025-06-27 16:17:54.763 [reactor-http-nio-4] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012274763_9d35, KgMode: standard, TextLength: 15
2025-06-27 16:17:54.765 [reactor-http-nio-1] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 15, ExtractParams: triples, KgMode: standard
2025-06-27 16:17:54.766 [reactor-http-nio-1] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012274766_c692, KgMode: standard, TextLength: 15
2025-06-27 16:17:54.776 [reactor-http-nio-6] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 16, ExtractParams: triples, KgMode: standard
2025-06-27 16:17:54.777 [reactor-http-nio-6] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012274777_f4d6, KgMode: standard, TextLength: 16
2025-06-27 16:17:54.792 [reactor-http-nio-6] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 2204, ExtractParams: triples, KgMode: fusion
2025-06-27 16:17:54.793 [reactor-http-nio-6] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012274792_21d9, KgMode: fusion, TextLength: 2204
2025-06-27 16:17:54.806 [reactor-http-nio-6] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 52, ExtractParams: triples, KgMode: batch
2025-06-27 16:17:54.806 [reactor-http-nio-6] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012274806_cbd8, KgMode: batch, TextLength: 52
2025-06-27 16:17:54.813 [reactor-http-nio-6] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 32, ExtractParams: triples, KgMode: standard
2025-06-27 16:17:54.813 [reactor-http-nio-6] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012274813_c388, KgMode: standard, TextLength: 32
2025-06-27 16:17:54.816 [reactor-http-nio-6] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 31, ExtractParams: entities, KgMode: standard
2025-06-27 16:17:54.816 [reactor-http-nio-6] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012274816_8275, KgMode: standard, TextLength: 31
2025-06-27 16:17:54.820 [reactor-http-nio-6] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 34, ExtractParams: relations, KgMode: standard
2025-06-27 16:17:54.820 [reactor-http-nio-6] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012274820_681, KgMode: standard, TextLength: 34
2025-06-27 16:17:54.824 [reactor-http-nio-6] WARN  c.d.extract.controller.AsyncExtractController - 请求参数错误: 文本内容不能为空
2025-06-27 16:17:54.828 [reactor-http-nio-6] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 2, ExtractParams: triples, KgMode: standard
2025-06-27 16:17:54.828 [reactor-http-nio-6] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012274828_dcb5, KgMode: standard, TextLength: 2
2025-06-27 16:17:54.831 [reactor-http-nio-6] WARN  c.d.extract.controller.AsyncExtractController - 请求参数错误: textInput参数是必需的
2025-06-27 16:17:54.833 [reactor-http-nio-6] WARN  c.d.extract.controller.AsyncExtractController - 请求参数错误: textInput参数是必需的
2025-06-27 16:17:54.836 [reactor-http-nio-6] WARN  c.d.extract.controller.AsyncExtractController - 请求参数错误: 不支持的知识图谱模式: invalid
2025-06-27 16:17:56.535 [reactor-http-nio-6] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 9366ms，响应长度: 351
2025-06-27 16:17:56.536 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 36，当前并发数: 5
2025-06-27 16:17:56.536 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 56，处理模式: 直接处理
2025-06-27 16:17:56.536 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:17:56.536 [ForkJoinPool.commonPool-worker-8] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 开始知识图谱增强处理，模式: fusion
2025-06-27 16:17:56.536 [ForkJoinPool.commonPool-worker-8] INFO  c.datacenter.extract.service.EntityDisambiguator - 开始实体消歧义处理
2025-06-27 16:17:56.545 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:56.551 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:56.555 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:56.560 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:56.565 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:56.570 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:56.572 [ForkJoinPool.commonPool-worker-8] INFO  c.datacenter.extract.service.EntityDisambiguator - 实体消歧义处理完成，处理了3个三元组
2025-06-27 16:17:56.572 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.KnowledgeFusion - 开始知识融合处理
2025-06-27 16:17:56.572 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.KnowledgeFusion - 知识融合处理完成，处理了3个三元组
2025-06-27 16:17:56.572 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.RelationValidator - 开始关系验证处理
2025-06-27 16:17:56.572 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.RelationValidator - 关系验证处理完成，验证了3个三元组
2025-06-27 16:17:56.572 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.QualityAssessor - 开始质量评估处理
2025-06-27 16:17:56.581 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.QualityAssessor - 质量评估完成，总分: {:.2f}
2025-06-27 16:17:56.581 [ForkJoinPool.commonPool-worker-8] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 知识图谱增强处理完成，模式: fusion
2025-06-27 16:17:56.582 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 1145
2025-06-27 16:17:56.583 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"结婚","object":"巩俐","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"认识","object":"巩俐","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012276572,"knowledge_fusion_applied":true,"fusion_timestamp":1751012276572,"relation_validation_applied":true,"validation_timestamp":1751012276572,"quality_score":0.8000000000000002,"quality_grade":"GOOD","assessment_timestamp":1751012276572,"kg_mode":"fusion","processed_at":1751012276581,"full_processing_applied":true}
2025-06-27 16:17:56.583 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"结婚","object":"巩俐","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"认识","object":"巩俐","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012276572,"knowledge_fusion_applied":true,"fusion_timestamp":1751012276572,"relation_validation_applied":true,"validation_timestamp":1751012276572,"quality_score":0.8000000000000002,"quality_grade":"GOOD","assessment_timestamp":1751012276572,"kg_mode":"fusion","processed_at":1751012276581,"full_processing_applied":true}
2025-06-27 16:17:56.583 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 13 个主要字段: [triples, disambiguation_applied, disambiguation_timestamp, knowledge_fusion_applied, fusion_timestamp, relation_validation_applied, validation_timestamp, quality_score, quality_grade, assessment_timestamp, kg_mode, processed_at, full_processing_applied]
2025-06-27 16:17:56.583 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-27 16:17:56.584 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:17:56.585 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:17:56.585 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:17:56.586 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-27 16:17:56.587 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:56.589 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:56.590 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:17:56.591 [ForkJoinPool.commonPool-worker-8] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:17:56.591 [ForkJoinPool.commonPool-worker-8] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:17:56.591 [ForkJoinPool.commonPool-worker-8] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《红高粱》 [导演], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:17:56.591 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《红高粱》
2025-06-27 16:17:56.592 [ForkJoinPool.commonPool-worker-8] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:56.592 [ForkJoinPool.commonPool-worker-8] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:56.592 [ForkJoinPool.commonPool-worker-8] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:56.593 [ForkJoinPool.commonPool-worker-8] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 巩俐 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:56.593 [ForkJoinPool.commonPool-worker-8] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:56.593 [ForkJoinPool.commonPool-worker-8] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 巩俐 [结婚], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:56.593 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[结婚]--> 巩俐
2025-06-27 16:17:56.594 [ForkJoinPool.commonPool-worker-8] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:56.594 [ForkJoinPool.commonPool-worker-8] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:56.594 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[认识]--> 巩俐
2025-06-27 16:17:56.594 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:17:56.596 [ForkJoinPool.commonPool-worker-8] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012264641_51bd, Duration: 11955ms
2025-06-27 16:17:56.596 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 15 字符
2025-06-27 16:17:56.596 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:17:57.203 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 15973ms，响应长度: 703
2025-06-27 16:17:57.203 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 48，处理模式: 直接处理
2025-06-27 16:17:57.203 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 65，当前并发数: 5
2025-06-27 16:17:57.203 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:17:57.203 [ForkJoinPool.commonPool-worker-7] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 开始知识图谱增强处理，模式: fusion
2025-06-27 16:17:57.203 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 15 字符
2025-06-27 16:17:57.204 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:17:57.204 [ForkJoinPool.commonPool-worker-7] INFO  c.datacenter.extract.service.EntityDisambiguator - 开始实体消歧义处理
2025-06-27 16:17:57.210 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:57.214 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:57.217 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:57.220 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:57.223 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:57.225 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:57.227 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:17:57.231 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:57.233 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:57.235 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:17:57.239 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:57.241 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:57.243 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:17:57.246 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:57.248 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:17:57.251 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:57.253 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:17:57.256 [ForkJoinPool.commonPool-worker-7] INFO  c.datacenter.extract.service.EntityDisambiguator - 实体消歧义处理完成，处理了6个三元组
2025-06-27 16:17:57.256 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.KnowledgeFusion - 开始知识融合处理
2025-06-27 16:17:57.256 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.KnowledgeFusion - 知识融合处理完成，处理了6个三元组
2025-06-27 16:17:57.256 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.RelationValidator - 开始关系验证处理
2025-06-27 16:17:57.256 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.RelationValidator - 关系验证处理完成，验证了6个三元组
2025-06-27 16:17:57.256 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.QualityAssessor - 开始质量评估处理
2025-06-27 16:17:57.266 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.QualityAssessor - 质量评估完成，总分: {:.2f}
2025-06-27 16:17:57.266 [ForkJoinPool.commonPool-worker-7] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 知识图谱增强处理完成，模式: fusion
2025-06-27 16:17:57.267 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 1912
2025-06-27 16:17:57.267 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"导演","object":"《英雄》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"导演","object":"《满江红》","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"《红高粱》","predicate":"上映时间","object":"1987年","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"《英雄》","predicate":"上映时间","object":"2002年","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"《满江红》","predicate":"上映时间","object":"2023年","confidence":0.95,"subject_confidence":1.0,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012277256,"knowledge_fusion_applied":true,"fusion_timestamp":1751012277256,"relation_validation_applied":true,"validation_timestamp":1751012277256,"quality_score":0.7999999999999999,"quality_grade":"FAIR","assessment_timestamp":1751012277256,"kg_mode":"fusion","processed_at":1751012277266,"full_processing_applied":true}
2025-06-27 16:17:57.267 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"导演","object":"《英雄》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"导演","object":"《满江红》","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"《红高粱》","predicate":"上映时间","object":"1987年","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"《英雄》","predicate":"上映时间","object":"2002年","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"《满江红》","predicate":"上映时间","object":"2023年","confidence":0.95,"subject_confidence":1.0,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012277256,"knowledge_fusion_applied":true,"fusion_timestamp":1751012277256,"relation_validation_applied":true,"validation_timestamp":1751012277256,"quality_score":0.7999999999999999,"quality_grade":"FAIR","assessment_timestamp":1751012277256,"kg_mode":"fusion","processed_at":1751012277266,"full_processing_applied":true}
2025-06-27 16:17:57.267 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 13 个主要字段: [triples, disambiguation_applied, disambiguation_timestamp, knowledge_fusion_applied, fusion_timestamp, relation_validation_applied, validation_timestamp, quality_score, quality_grade, assessment_timestamp, kg_mode, processed_at, full_processing_applied]
2025-06-27 16:17:57.267 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 处理 6 个三元组，包括实体和关系保存
2025-06-27 16:17:57.268 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:17:57.269 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:17:57.269 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:17:57.270 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-27 16:17:57.270 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:57.271 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:17:57.272 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:17:57.272 [ForkJoinPool.commonPool-worker-7] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:17:57.272 [ForkJoinPool.commonPool-worker-7] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:17:57.272 [ForkJoinPool.commonPool-worker-7] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《红高粱》 [导演], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:17:57.272 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《红高粱》
2025-06-27 16:17:57.273 [ForkJoinPool.commonPool-worker-7] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:57.273 [ForkJoinPool.commonPool-worker-7] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:57.273 [ForkJoinPool.commonPool-worker-7] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:57.273 [ForkJoinPool.commonPool-worker-7] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 《英雄》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:57.273 [ForkJoinPool.commonPool-worker-7] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:57.273 [ForkJoinPool.commonPool-worker-7] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《英雄》 [导演], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:57.273 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《英雄》
2025-06-27 16:17:57.274 [ForkJoinPool.commonPool-worker-7] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:57.274 [ForkJoinPool.commonPool-worker-7] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:57.274 [ForkJoinPool.commonPool-worker-7] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:57.274 [ForkJoinPool.commonPool-worker-7] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 《满江红》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:57.274 [ForkJoinPool.commonPool-worker-7] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:57.274 [ForkJoinPool.commonPool-worker-7] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《满江红》 [导演], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:57.274 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《满江红》
2025-06-27 16:17:57.275 [ForkJoinPool.commonPool-worker-7] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:57.275 [ForkJoinPool.commonPool-worker-7] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《红高粱》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:57.275 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《红高粱》 --[上映时间]--> 1987年
2025-06-27 16:17:57.275 [ForkJoinPool.commonPool-worker-7] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:57.275 [ForkJoinPool.commonPool-worker-7] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《英雄》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:57.275 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《英雄》 --[上映时间]--> 2002年
2025-06-27 16:17:57.275 [ForkJoinPool.commonPool-worker-7] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:57.275 [ForkJoinPool.commonPool-worker-7] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《满江红》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:17:57.275 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《满江红》 --[上映时间]--> 2023年
2025-06-27 16:17:57.275 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:17:57.276 [ForkJoinPool.commonPool-worker-7] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012260602_72fb, Duration: 16674ms
2025-06-27 16:18:00.068 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 14792ms，响应长度: 684
2025-06-27 16:18:00.068 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 40，处理模式: 直接处理
2025-06-27 16:18:00.068 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 16，当前并发数: 5
2025-06-27 16:18:00.068 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:18:00.068 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 开始知识图谱增强处理，模式: fusion
2025-06-27 16:18:00.068 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.service.EntityDisambiguator - 开始实体消歧义处理
2025-06-27 16:18:00.072 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:00.074 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:00.078 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:00.081 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:00.084 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:00.087 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:00.090 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:18:00.096 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:00.099 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:00.101 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:00.105 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:00.107 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:00.110 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:00.113 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:18:00.118 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.service.EntityDisambiguator - 实体消歧义处理完成，处理了6个三元组
2025-06-27 16:18:00.118 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.KnowledgeFusion - 开始知识融合处理
2025-06-27 16:18:00.118 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.KnowledgeFusion - 知识融合处理完成，处理了6个三元组
2025-06-27 16:18:00.118 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.RelationValidator - 开始关系验证处理
2025-06-27 16:18:00.118 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.RelationValidator - 关系验证处理完成，验证了6个三元组
2025-06-27 16:18:00.118 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.QualityAssessor - 开始质量评估处理
2025-06-27 16:18:00.137 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.QualityAssessor - 质量评估完成，总分: {:.2f}
2025-06-27 16:18:00.138 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 知识图谱增强处理完成，模式: fusion
2025-06-27 16:18:00.138 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 1896
2025-06-27 16:18:00.138 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"张艺谋","predicate":"职业","object":"导演","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"职业","object":"演员","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"职业","object":"摄影师","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"执导","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"执导","object":"《英雄》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"执导","object":"《满江红》","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012280118,"knowledge_fusion_applied":true,"fusion_timestamp":1751012280118,"relation_validation_applied":true,"validation_timestamp":1751012280118,"quality_score":0.7999999999999999,"quality_grade":"FAIR","assessment_timestamp":1751012280118,"kg_mode":"fusion","processed_at":1751012280137,"full_processing_applied":true}
2025-06-27 16:18:00.139 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"张艺谋","predicate":"职业","object":"导演","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"职业","object":"演员","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"职业","object":"摄影师","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"执导","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"执导","object":"《英雄》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"执导","object":"《满江红》","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012280118,"knowledge_fusion_applied":true,"fusion_timestamp":1751012280118,"relation_validation_applied":true,"validation_timestamp":1751012280118,"quality_score":0.7999999999999999,"quality_grade":"FAIR","assessment_timestamp":1751012280118,"kg_mode":"fusion","processed_at":1751012280137,"full_processing_applied":true}
2025-06-27 16:18:00.139 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 13 个主要字段: [triples, disambiguation_applied, disambiguation_timestamp, knowledge_fusion_applied, fusion_timestamp, relation_validation_applied, validation_timestamp, quality_score, quality_grade, assessment_timestamp, kg_mode, processed_at, full_processing_applied]
2025-06-27 16:18:00.139 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 处理 6 个三元组，包括实体和关系保存
2025-06-27 16:18:00.140 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:18:00.141 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:18:00.141 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:18:00.142 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 导演 已存在，跳过插入
2025-06-27 16:18:00.142 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:00.144 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:00.144 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:18:00.145 [ForkJoinPool.commonPool-worker-3] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:18:00.145 [ForkJoinPool.commonPool-worker-3] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:18:00.145 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 导演 [职业], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:18:00.145 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[职业]--> 导演
2025-06-27 16:18:00.146 [ForkJoinPool.commonPool-worker-3] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:00.146 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:00.146 [ForkJoinPool.commonPool-worker-3] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:00.146 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 演员 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:00.146 [ForkJoinPool.commonPool-worker-3] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:00.146 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 演员 [职业], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:00.146 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[职业]--> 演员
2025-06-27 16:18:00.147 [ForkJoinPool.commonPool-worker-3] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:00.147 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:00.147 [ForkJoinPool.commonPool-worker-3] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:00.147 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 摄影师 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:00.147 [ForkJoinPool.commonPool-worker-3] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:00.147 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 摄影师 [职业], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:00.147 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[职业]--> 摄影师
2025-06-27 16:18:00.148 [ForkJoinPool.commonPool-worker-3] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:00.148 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:00.148 [ForkJoinPool.commonPool-worker-3] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:00.148 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《红高粱》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:00.148 [ForkJoinPool.commonPool-worker-3] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:00.148 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《红高粱》 [执导], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:00.148 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[执导]--> 《红高粱》
2025-06-27 16:18:00.149 [ForkJoinPool.commonPool-worker-3] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:00.149 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:00.149 [ForkJoinPool.commonPool-worker-3] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:00.149 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《英雄》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:00.149 [ForkJoinPool.commonPool-worker-3] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:00.150 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《英雄》 [执导], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:00.150 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[执导]--> 《英雄》
2025-06-27 16:18:00.150 [ForkJoinPool.commonPool-worker-3] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:00.150 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:00.150 [ForkJoinPool.commonPool-worker-3] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:00.150 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《满江红》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:00.150 [ForkJoinPool.commonPool-worker-3] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:00.151 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《满江红》 [执导], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:00.151 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[执导]--> 《满江红》
2025-06-27 16:18:00.151 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:18:00.152 [ForkJoinPool.commonPool-worker-3] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012256557_5b97, Duration: 23594ms
2025-06-27 16:18:00.433 [reactor-http-nio-9] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 8248ms，响应长度: 244
2025-06-27 16:18:00.433 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 40，处理模式: 直接处理
2025-06-27 16:18:00.433 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 15，当前并发数: 5
2025-06-27 16:18:00.433 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:18:00.433 [ForkJoinPool.commonPool-worker-6] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 开始知识图谱增强处理，模式: fusion
2025-06-27 16:18:00.433 [ForkJoinPool.commonPool-worker-6] INFO  c.datacenter.extract.service.EntityDisambiguator - 开始实体消歧义处理
2025-06-27 16:18:00.437 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:00.442 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:00.446 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:00.450 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:00.452 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:18:00.456 [ForkJoinPool.commonPool-worker-6] INFO  c.datacenter.extract.service.EntityDisambiguator - 实体消歧义处理完成，处理了2个三元组
2025-06-27 16:18:00.456 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.KnowledgeFusion - 开始知识融合处理
2025-06-27 16:18:00.456 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.KnowledgeFusion - 知识融合处理完成，处理了2个三元组
2025-06-27 16:18:00.457 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.RelationValidator - 开始关系验证处理
2025-06-27 16:18:00.457 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.RelationValidator - 关系验证处理完成，验证了2个三元组
2025-06-27 16:18:00.457 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.QualityAssessor - 开始质量评估处理
2025-06-27 16:18:00.467 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.QualityAssessor - 质量评估完成，总分: {:.2f}
2025-06-27 16:18:00.467 [ForkJoinPool.commonPool-worker-6] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 知识图谱增强处理完成，模式: fusion
2025-06-27 16:18:00.468 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 882
2025-06-27 16:18:00.468 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《英雄》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"《英雄》","predicate":"类型","object":"武侠电影","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012280456,"knowledge_fusion_applied":true,"fusion_timestamp":1751012280456,"relation_validation_applied":true,"validation_timestamp":1751012280457,"quality_score":0.8,"quality_grade":"GOOD","assessment_timestamp":1751012280457,"kg_mode":"fusion","processed_at":1751012280467,"full_processing_applied":true}
2025-06-27 16:18:00.468 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《英雄》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"《英雄》","predicate":"类型","object":"武侠电影","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012280456,"knowledge_fusion_applied":true,"fusion_timestamp":1751012280456,"relation_validation_applied":true,"validation_timestamp":1751012280457,"quality_score":0.8,"quality_grade":"GOOD","assessment_timestamp":1751012280457,"kg_mode":"fusion","processed_at":1751012280467,"full_processing_applied":true}
2025-06-27 16:18:00.468 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 13 个主要字段: [triples, disambiguation_applied, disambiguation_timestamp, knowledge_fusion_applied, fusion_timestamp, relation_validation_applied, validation_timestamp, quality_score, quality_grade, assessment_timestamp, kg_mode, processed_at, full_processing_applied]
2025-06-27 16:18:00.468 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组，包括实体和关系保存
2025-06-27 16:18:00.469 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:18:00.470 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:18:00.470 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:18:00.471 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 人员 《英雄》 已存在，跳过插入
2025-06-27 16:18:00.471 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:00.474 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:00.475 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:18:00.476 [ForkJoinPool.commonPool-worker-6] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:18:00.476 [ForkJoinPool.commonPool-worker-6] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:18:00.476 [ForkJoinPool.commonPool-worker-6] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《英雄》 [导演], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:18:00.476 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《英雄》
2025-06-27 16:18:00.477 [ForkJoinPool.commonPool-worker-6] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:00.477 [ForkJoinPool.commonPool-worker-6] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《英雄》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:00.477 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《英雄》 --[类型]--> 武侠电影
2025-06-27 16:18:00.477 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:18:00.478 [ForkJoinPool.commonPool-worker-6] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012266664_f674, Duration: 13814ms
2025-06-27 16:18:02.410 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 8683ms，响应长度: 247
2025-06-27 16:18:02.411 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 43，处理模式: 直接处理
2025-06-27 16:18:02.411 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 15，当前并发数: 5
2025-06-27 16:18:02.411 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:18:02.411 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 开始知识图谱增强处理，模式: fusion
2025-06-27 16:18:02.411 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.EntityDisambiguator - 开始实体消歧义处理
2025-06-27 16:18:02.418 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:02.423 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:02.428 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:02.432 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:02.436 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:18:02.439 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.EntityDisambiguator - 实体消歧义处理完成，处理了2个三元组
2025-06-27 16:18:02.440 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.KnowledgeFusion - 开始知识融合处理
2025-06-27 16:18:02.440 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.KnowledgeFusion - 知识融合处理完成，处理了2个三元组
2025-06-27 16:18:02.440 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.RelationValidator - 开始关系验证处理
2025-06-27 16:18:02.440 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.RelationValidator - 关系验证处理完成，验证了2个三元组
2025-06-27 16:18:02.440 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.QualityAssessor - 开始质量评估处理
2025-06-27 16:18:02.451 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.QualityAssessor - 质量评估完成，总分: {:.2f}
2025-06-27 16:18:02.451 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 知识图谱增强处理完成，模式: fusion
2025-06-27 16:18:02.452 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 885
2025-06-27 16:18:02.452 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"饰演","object":"《红高粱》主角","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012282439,"knowledge_fusion_applied":true,"fusion_timestamp":1751012282440,"relation_validation_applied":true,"validation_timestamp":1751012282440,"quality_score":0.8,"quality_grade":"GOOD","assessment_timestamp":1751012282440,"kg_mode":"fusion","processed_at":1751012282451,"full_processing_applied":true}
2025-06-27 16:18:02.452 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"饰演","object":"《红高粱》主角","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012282439,"knowledge_fusion_applied":true,"fusion_timestamp":1751012282440,"relation_validation_applied":true,"validation_timestamp":1751012282440,"quality_score":0.8,"quality_grade":"GOOD","assessment_timestamp":1751012282440,"kg_mode":"fusion","processed_at":1751012282451,"full_processing_applied":true}
2025-06-27 16:18:02.452 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 13 个主要字段: [triples, disambiguation_applied, disambiguation_timestamp, knowledge_fusion_applied, fusion_timestamp, relation_validation_applied, validation_timestamp, quality_score, quality_grade, assessment_timestamp, kg_mode, processed_at, full_processing_applied]
2025-06-27 16:18:02.452 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组，包括实体和关系保存
2025-06-27 16:18:02.453 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:18:02.454 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:18:02.454 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:18:02.455 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-27 16:18:02.455 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:02.457 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:02.458 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:18:02.459 [ForkJoinPool.commonPool-worker-1] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:18:02.459 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:18:02.459 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《红高粱》 [导演], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:18:02.459 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《红高粱》
2025-06-27 16:18:02.459 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:02.459 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:02.460 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[饰演]--> 《红高粱》主角
2025-06-27 16:18:02.460 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:18:02.461 [ForkJoinPool.commonPool-worker-1] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012268690_cb5e, Duration: 13771ms
2025-06-27 16:18:05.653 [reactor-http-nio-6] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 5585ms，响应长度: 134
2025-06-27 16:18:05.654 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 15，当前并发数: 5
2025-06-27 16:18:05.654 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 16，处理模式: 直接处理
2025-06-27 16:18:05.654 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:18:05.654 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 13 字符
2025-06-27 16:18:05.654 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:18:05.656 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 134
2025-06-27 16:18:05.656 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 134
2025-06-27 16:18:05.656 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "陈凯歌",
      "predicate": "拍摄",
      "object": "《霸王别姬》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:18:05.656 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "陈凯歌",
      "predicate": "拍摄",
      "object": "《霸王别姬》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:18:05.656 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "陈凯歌",
      "predicate": "拍摄",
      "object": "《霸王别姬》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:18:05.656 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "陈凯歌",
      "predicate": "拍摄",
      "object": "《霸王别姬》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:18:05.656 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-27 16:18:05.656 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-27 16:18:05.656 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 处理 1 个三元组，包括实体和关系保存
2025-06-27 16:18:05.656 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 处理 1 个三元组，包括实体和关系保存
2025-06-27 16:18:05.657 [ForkJoinPool.commonPool-worker-9] DEBUG org.hibernate.SQL - select w1_0.id from work w1_0 where w1_0.title=? limit ?
2025-06-27 16:18:05.657 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select w1_0.id from work w1_0 where w1_0.title=? limit ?
2025-06-27 16:18:05.659 [ForkJoinPool.commonPool-worker-9] DEBUG org.hibernate.SQL - insert into work (awards,baike,description,`group`,platform,release_date,role,title,work_id,work_type) values (?,?,?,?,?,?,?,?,?,?)
2025-06-27 16:18:05.659 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - insert into work (awards,baike,description,`group`,platform,release_date,role,title,work_id,work_type) values (?,?,?,?,?,?,?,?,?,?)
2025-06-27 16:18:05.661 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《霸王别姬》 (通过三元组提取)
2025-06-27 16:18:05.661 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《霸王别姬》 (通过三元组提取)
2025-06-27 16:18:05.661 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 陈凯歌 --[拍摄]--> 《霸王别姬》
2025-06-27 16:18:05.661 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 陈凯歌 --[拍摄]--> 《霸王别姬》
2025-06-27 16:18:05.661 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:18:05.661 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:18:05.666 [ForkJoinPool.commonPool-worker-9] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012274751_715e, Duration: 10915ms
2025-06-27 16:18:05.666 [ForkJoinPool.commonPool-worker-6] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012274777_f4d6, Duration: 10889ms
2025-06-27 16:18:05.666 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 2204 字符
2025-06-27 16:18:05.666 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.SmartAIProvider - 📄 检测到长文本，启用分批处理模式
2025-06-27 16:18:05.666 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.LongTextProcessor - 🔍 开始处理长文本，长度: 2204 字符
2025-06-27 16:18:05.667 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.LongTextProcessor - 📊 文本分片完成，共 2 个分片
2025-06-27 16:18:05.667 [pool-5-thread-2] INFO  com.datacenter.extract.service.LongTextProcessor - ⚡ 处理分片 2 (410 字符)
2025-06-27 16:18:05.667 [pool-5-thread-1] INFO  com.datacenter.extract.service.LongTextProcessor - ⚡ 处理分片 1 (1993 字符)
2025-06-27 16:18:05.846 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 5413ms，响应长度: 135
2025-06-27 16:18:05.847 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 15，处理模式: 直接处理
2025-06-27 16:18:05.847 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 13，当前并发数: 5
2025-06-27 16:18:05.847 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:18:05.849 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 135
2025-06-27 16:18:05.849 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 135
2025-06-27 16:18:05.849 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "《流浪地球》",
      "predicate": "类型",
      "object": "科幻电影",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:18:05.849 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "《流浪地球》",
      "predicate": "类型",
      "object": "科幻电影",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:18:05.849 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "《流浪地球》",
      "predicate": "类型",
      "object": "科幻电影",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:18:05.849 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "《流浪地球》",
      "predicate": "类型",
      "object": "科幻电影",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:18:05.849 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-27 16:18:05.849 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 1 个三元组，包括实体和关系保存
2025-06-27 16:18:05.849 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-27 16:18:05.849 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 处理 1 个三元组，包括实体和关系保存
2025-06-27 16:18:05.850 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select w1_0.id from work w1_0 where w1_0.title=? limit ?
2025-06-27 16:18:05.850 [ForkJoinPool.commonPool-worker-11] DEBUG org.hibernate.SQL - select w1_0.id from work w1_0 where w1_0.title=? limit ?
2025-06-27 16:18:05.852 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - insert into work (awards,baike,description,`group`,platform,release_date,role,title,work_id,work_type) values (?,?,?,?,?,?,?,?,?,?)
2025-06-27 16:18:05.852 [ForkJoinPool.commonPool-worker-11] DEBUG org.hibernate.SQL - insert into work (awards,baike,description,`group`,platform,release_date,role,title,work_id,work_type) values (?,?,?,?,?,?,?,?,?,?)
2025-06-27 16:18:05.853 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《流浪地球》 (通过三元组提取)
2025-06-27 16:18:05.853 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《流浪地球》 (通过三元组提取)
2025-06-27 16:18:05.853 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《流浪地球》 --[类型]--> 科幻电影
2025-06-27 16:18:05.853 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:18:05.853 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《流浪地球》 --[类型]--> 科幻电影
2025-06-27 16:18:05.853 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:18:05.857 [ForkJoinPool.commonPool-worker-11] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012274751_e752, Duration: 11106ms
2025-06-27 16:18:05.857 [ForkJoinPool.commonPool-worker-1] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012274761_7d95, Duration: 11096ms
2025-06-27 16:18:05.858 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 52 字符
2025-06-27 16:18:05.858 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:18:07.293 [reactor-http-nio-7] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 10090ms，响应长度: 362
2025-06-27 16:18:07.293 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 65，处理模式: 直接处理
2025-06-27 16:18:07.294 [pool-5-thread-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 410，当前并发数: 5
2025-06-27 16:18:07.294 [pool-5-thread-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:18:07.294 [ForkJoinPool.commonPool-worker-5] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 开始知识图谱增强处理，模式: fusion
2025-06-27 16:18:07.295 [ForkJoinPool.commonPool-worker-5] INFO  c.datacenter.extract.service.EntityDisambiguator - 开始实体消歧义处理
2025-06-27 16:18:07.300 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:07.305 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:07.308 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:07.312 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:07.316 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:18:07.321 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:07.324 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:07.327 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:18:07.330 [ForkJoinPool.commonPool-worker-5] INFO  c.datacenter.extract.service.EntityDisambiguator - 实体消歧义处理完成，处理了3个三元组
2025-06-27 16:18:07.330 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.KnowledgeFusion - 开始知识融合处理
2025-06-27 16:18:07.330 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.KnowledgeFusion - 知识融合处理完成，处理了3个三元组
2025-06-27 16:18:07.331 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.RelationValidator - 开始关系验证处理
2025-06-27 16:18:07.331 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.RelationValidator - 关系验证处理完成，验证了3个三元组
2025-06-27 16:18:07.331 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.QualityAssessor - 开始质量评估处理
2025-06-27 16:18:07.342 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.QualityAssessor - 质量评估完成，总分: {:.2f}
2025-06-27 16:18:07.342 [ForkJoinPool.commonPool-worker-5] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 知识图谱增强处理完成，模式: fusion
2025-06-27 16:18:07.343 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 1154
2025-06-27 16:18:07.343 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《英雄》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"《英雄》","predicate":"上映日期","object":"2002年","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"《英雄》","predicate":"完成时间","object":"2001年","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012287330,"knowledge_fusion_applied":true,"fusion_timestamp":1751012287330,"relation_validation_applied":true,"validation_timestamp":1751012287331,"quality_score":0.8000000000000002,"quality_grade":"GOOD","assessment_timestamp":1751012287331,"kg_mode":"fusion","processed_at":1751012287342,"full_processing_applied":true}
2025-06-27 16:18:07.343 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《英雄》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"《英雄》","predicate":"上映日期","object":"2002年","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"《英雄》","predicate":"完成时间","object":"2001年","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012287330,"knowledge_fusion_applied":true,"fusion_timestamp":1751012287330,"relation_validation_applied":true,"validation_timestamp":1751012287331,"quality_score":0.8000000000000002,"quality_grade":"GOOD","assessment_timestamp":1751012287331,"kg_mode":"fusion","processed_at":1751012287342,"full_processing_applied":true}
2025-06-27 16:18:07.344 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 13 个主要字段: [triples, disambiguation_applied, disambiguation_timestamp, knowledge_fusion_applied, fusion_timestamp, relation_validation_applied, validation_timestamp, quality_score, quality_grade, assessment_timestamp, kg_mode, processed_at, full_processing_applied]
2025-06-27 16:18:07.344 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-27 16:18:07.344 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:18:07.346 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:18:07.346 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:18:07.347 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 人员 《英雄》 已存在，跳过插入
2025-06-27 16:18:07.347 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:07.348 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:07.349 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:18:07.350 [ForkJoinPool.commonPool-worker-5] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:18:07.350 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:18:07.350 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《英雄》 [导演], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:18:07.350 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《英雄》
2025-06-27 16:18:07.351 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:07.351 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《英雄》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:07.351 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《英雄》 --[上映日期]--> 2002年
2025-06-27 16:18:07.351 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:07.351 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《英雄》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:07.351 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《英雄》 --[完成时间]--> 2001年
2025-06-27 16:18:07.351 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:18:07.352 [ForkJoinPool.commonPool-worker-5] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012272730_5fe7, Duration: 14622ms
2025-06-27 16:18:07.352 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 31 字符
2025-06-27 16:18:07.352 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:18:07.844 [reactor-http-nio-8] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 11308ms，响应长度: 468
2025-06-27 16:18:07.844 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 36，处理模式: 直接处理
2025-06-27 16:18:07.844 [pool-5-thread-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 1993，当前并发数: 5
2025-06-27 16:18:07.844 [pool-5-thread-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 40秒
2025-06-27 16:18:07.844 [ForkJoinPool.commonPool-worker-4] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 开始知识图谱增强处理，模式: fusion
2025-06-27 16:18:07.845 [ForkJoinPool.commonPool-worker-4] INFO  c.datacenter.extract.service.EntityDisambiguator - 开始实体消歧义处理
2025-06-27 16:18:07.851 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:07.856 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:18:07.863 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:07.868 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:18:07.874 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:07.877 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:07.881 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:18:07.886 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:07.889 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:18:07.893 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:07.896 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:18:07.901 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:07.903 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:18:07.907 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:07.910 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:18:07.912 [ForkJoinPool.commonPool-worker-4] INFO  c.datacenter.extract.service.EntityDisambiguator - 实体消歧义处理完成，处理了4个三元组
2025-06-27 16:18:07.912 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.KnowledgeFusion - 开始知识融合处理
2025-06-27 16:18:07.913 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.KnowledgeFusion - 知识融合处理完成，处理了4个三元组
2025-06-27 16:18:07.913 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.RelationValidator - 开始关系验证处理
2025-06-27 16:18:07.913 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.RelationValidator - 关系验证处理完成，验证了4个三元组
2025-06-27 16:18:07.913 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.QualityAssessor - 开始质量评估处理
2025-06-27 16:18:07.922 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.QualityAssessor - 质量评估完成，总分: {:.2f}
2025-06-27 16:18:07.923 [ForkJoinPool.commonPool-worker-4] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 知识图谱增强处理完成，模式: fusion
2025-06-27 16:18:07.923 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 1380
2025-06-27 16:18:07.923 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"《满江红》","predicate":"类型","object":"电影","confidence":0.95,"subject_confidence":1.0,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"执导","object":"《满江红》","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"沈腾","predicate":"主演","object":"《满江红》","confidence":0.95,"subject_confidence":1.0,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"易烊千玺","predicate":"主演","object":"《满江红》","confidence":0.95,"subject_confidence":1.0,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012287912,"knowledge_fusion_applied":true,"fusion_timestamp":1751012287913,"relation_validation_applied":true,"validation_timestamp":1751012287913,"quality_score":0.8,"quality_grade":"GOOD","assessment_timestamp":1751012287913,"kg_mode":"fusion","processed_at":1751012287922,"full_processing_applied":true}
2025-06-27 16:18:07.923 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"《满江红》","predicate":"类型","object":"电影","confidence":0.95,"subject_confidence":1.0,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"执导","object":"《满江红》","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"沈腾","predicate":"主演","object":"《满江红》","confidence":0.95,"subject_confidence":1.0,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"易烊千玺","predicate":"主演","object":"《满江红》","confidence":0.95,"subject_confidence":1.0,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012287912,"knowledge_fusion_applied":true,"fusion_timestamp":1751012287913,"relation_validation_applied":true,"validation_timestamp":1751012287913,"quality_score":0.8,"quality_grade":"GOOD","assessment_timestamp":1751012287913,"kg_mode":"fusion","processed_at":1751012287922,"full_processing_applied":true}
2025-06-27 16:18:07.924 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 13 个主要字段: [triples, disambiguation_applied, disambiguation_timestamp, knowledge_fusion_applied, fusion_timestamp, relation_validation_applied, validation_timestamp, quality_score, quality_grade, assessment_timestamp, kg_mode, processed_at, full_processing_applied]
2025-06-27 16:18:07.924 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-27 16:18:07.924 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select w1_0.id from work w1_0 where w1_0.title=? limit ?
2025-06-27 16:18:07.925 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - insert into work (awards,baike,description,`group`,platform,release_date,role,title,work_id,work_type) values (?,?,?,?,?,?,?,?,?,?)
2025-06-27 16:18:07.925 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《满江红》 (通过三元组提取)
2025-06-27 16:18:07.925 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《满江红》 --[类型]--> 电影
2025-06-27 16:18:07.926 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:18:07.926 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:18:07.926 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select w1_0.id from work w1_0 where w1_0.title=? limit ?
2025-06-27 16:18:07.927 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 作品 《满江红》 已存在，跳过插入
2025-06-27 16:18:07.927 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:07.928 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select w1_0.id,w1_0.awards,w1_0.baike,w1_0.description,w1_0.`group`,w1_0.platform,w1_0.release_date,w1_0.role,w1_0.title,w1_0.work_id,w1_0.work_type from work w1_0 where w1_0.title=?
2025-06-27 16:18:07.929 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - insert into celebrity_work (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:18:07.929 [ForkJoinPool.commonPool-worker-4] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:18:07.929 [ForkJoinPool.commonPool-worker-4] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:18:07.929 [ForkJoinPool.commonPool-worker-4] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《满江红》 [执导], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_work (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_work (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:18:07.930 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[执导]--> 《满江红》
2025-06-27 16:18:07.930 [ForkJoinPool.commonPool-worker-4] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:07.930 [ForkJoinPool.commonPool-worker-4] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 沈腾 失败: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:07.930 [ForkJoinPool.commonPool-worker-4] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:07.930 [ForkJoinPool.commonPool-worker-4] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 《满江红》 失败: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:07.930 [ForkJoinPool.commonPool-worker-4] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:07.930 [ForkJoinPool.commonPool-worker-4] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 沈腾 -> 《满江红》 [主演], 错误: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:07.930 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 沈腾 --[主演]--> 《满江红》
2025-06-27 16:18:07.931 [ForkJoinPool.commonPool-worker-4] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:07.931 [ForkJoinPool.commonPool-worker-4] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 易烊千玺 失败: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:07.931 [ForkJoinPool.commonPool-worker-4] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:07.931 [ForkJoinPool.commonPool-worker-4] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 《满江红》 失败: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:07.931 [ForkJoinPool.commonPool-worker-4] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:07.931 [ForkJoinPool.commonPool-worker-4] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 易烊千玺 -> 《满江红》 [主演], 错误: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:07.931 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 易烊千玺 --[主演]--> 《满江红》
2025-06-27 16:18:07.931 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:18:07.932 [ForkJoinPool.commonPool-worker-4] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012270709_ad4e, Duration: 17223ms
2025-06-27 16:18:07.933 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 34 字符
2025-06-27 16:18:07.933 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:18:10.071 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 7660ms，响应长度: 134
2025-06-27 16:18:10.071 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 15，处理模式: 直接处理
2025-06-27 16:18:10.071 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 52，当前并发数: 5
2025-06-27 16:18:10.072 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:18:10.075 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 134
2025-06-27 16:18:10.075 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 134
2025-06-27 16:18:10.075 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "《英雄》",
      "predicate": "获得了",
      "object": "票房成功",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:18:10.075 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "《英雄》",
      "predicate": "获得了",
      "object": "票房成功",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:18:10.075 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "《英雄》",
      "predicate": "获得了",
      "object": "票房成功",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:18:10.075 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "《英雄》",
      "predicate": "获得了",
      "object": "票房成功",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:18:10.076 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-27 16:18:10.076 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-27 16:18:10.076 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 处理 1 个三元组，包括实体和关系保存
2025-06-27 16:18:10.076 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 处理 1 个三元组，包括实体和关系保存
2025-06-27 16:18:10.077 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - select w1_0.id from work w1_0 where w1_0.title=? limit ?
2025-06-27 16:18:10.077 [ForkJoinPool.commonPool-worker-9] DEBUG org.hibernate.SQL - select w1_0.id from work w1_0 where w1_0.title=? limit ?
2025-06-27 16:18:10.079 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 作品 《英雄》 已存在，跳过插入
2025-06-27 16:18:10.079 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 作品 《英雄》 已存在，跳过插入
2025-06-27 16:18:10.079 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:18:10.079 [ForkJoinPool.commonPool-worker-9] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:18:10.081 [ForkJoinPool.commonPool-worker-9] DEBUG org.hibernate.SQL - insert into celebrity (baike,birthdate,celebrity_id,company,education,gender,`group`,name,nationality,position,profession,relatives,resume,spouse) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-06-27 16:18:10.081 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - insert into celebrity (baike,birthdate,celebrity_id,company,education,gender,`group`,name,nationality,position,profession,relatives,resume,spouse) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-06-27 16:18:10.083 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 票房成功 (通过三元组提取)
2025-06-27 16:18:10.083 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 票房成功 (通过三元组提取)
2025-06-27 16:18:10.083 [ForkJoinPool.commonPool-worker-9] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:10.084 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:10.085 [ForkJoinPool.commonPool-worker-9] DEBUG org.hibernate.SQL - select w1_0.id,w1_0.awards,w1_0.baike,w1_0.description,w1_0.`group`,w1_0.platform,w1_0.release_date,w1_0.role,w1_0.title,w1_0.work_id,w1_0.work_type from work w1_0 where w1_0.title=?
2025-06-27 16:18:10.085 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - select w1_0.id,w1_0.awards,w1_0.baike,w1_0.description,w1_0.`group`,w1_0.platform,w1_0.release_date,w1_0.role,w1_0.title,w1_0.work_id,w1_0.work_type from work w1_0 where w1_0.title=?
2025-06-27 16:18:10.087 [ForkJoinPool.commonPool-worker-9] DEBUG org.hibernate.SQL - insert into celebrity_work (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:18:10.087 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - insert into celebrity_work (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:18:10.088 [ForkJoinPool.commonPool-worker-8] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:18:10.088 [ForkJoinPool.commonPool-worker-9] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:18:10.088 [ForkJoinPool.commonPool-worker-8] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:18:10.088 [ForkJoinPool.commonPool-worker-9] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:18:10.088 [ForkJoinPool.commonPool-worker-9] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 《英雄》 -> 票房成功 [获得了], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_work (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_work (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:18:10.088 [ForkJoinPool.commonPool-worker-8] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 《英雄》 -> 票房成功 [获得了], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_work (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_work (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:18:10.088 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《英雄》 --[获得了]--> 票房成功
2025-06-27 16:18:10.088 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《英雄》 --[获得了]--> 票房成功
2025-06-27 16:18:10.088 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:18:10.088 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:18:10.092 [ForkJoinPool.commonPool-worker-9] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012274766_c692, Duration: 15326ms
2025-06-27 16:18:10.092 [ForkJoinPool.commonPool-worker-8] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012274763_9d35, Duration: 15329ms
2025-06-27 16:18:10.092 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 2 字符
2025-06-27 16:18:10.092 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:18:11.149 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 5302ms，响应长度: 131
2025-06-27 16:18:11.150 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 31，当前并发数: 5
2025-06-27 16:18:11.150 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 13，处理模式: 直接处理
2025-06-27 16:18:11.150 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:18:11.153 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 131
2025-06-27 16:18:11.153 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 131
2025-06-27 16:18:11.153 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "巩俐",
      "predicate": "出演",
      "object": "《活着》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:18:11.153 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "巩俐",
      "predicate": "出演",
      "object": "《活着》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:18:11.153 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "巩俐",
      "predicate": "出演",
      "object": "《活着》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:18:11.153 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "巩俐",
      "predicate": "出演",
      "object": "《活着》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:18:11.153 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-27 16:18:11.153 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-27 16:18:11.153 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 处理 1 个三元组，包括实体和关系保存
2025-06-27 16:18:11.153 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 处理 1 个三元组，包括实体和关系保存
2025-06-27 16:18:11.154 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select w1_0.id from work w1_0 where w1_0.title=? limit ?
2025-06-27 16:18:11.154 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select w1_0.id from work w1_0 where w1_0.title=? limit ?
2025-06-27 16:18:11.156 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - insert into work (awards,baike,description,`group`,platform,release_date,role,title,work_id,work_type) values (?,?,?,?,?,?,?,?,?,?)
2025-06-27 16:18:11.156 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - insert into work (awards,baike,description,`group`,platform,release_date,role,title,work_id,work_type) values (?,?,?,?,?,?,?,?,?,?)
2025-06-27 16:18:11.158 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《活着》 (通过三元组提取)
2025-06-27 16:18:11.158 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《活着》 (通过三元组提取)
2025-06-27 16:18:11.158 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 巩俐 --[出演]--> 《活着》
2025-06-27 16:18:11.158 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 巩俐 --[出演]--> 《活着》
2025-06-27 16:18:11.158 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:18:11.158 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:18:11.163 [ForkJoinPool.commonPool-worker-3] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012274763_634, Duration: 16400ms
2025-06-27 16:18:11.163 [ForkJoinPool.commonPool-worker-7] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012274757_36aa, Duration: 16406ms
2025-06-27 16:18:11.255 [reactor-http-nio-9] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 5601ms，响应长度: 133
2025-06-27 16:18:11.255 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 15，处理模式: 直接处理
2025-06-27 16:18:11.255 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 34，当前并发数: 5
2025-06-27 16:18:11.255 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:18:11.255 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 32 字符
2025-06-27 16:18:11.255 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:18:11.257 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 133
2025-06-27 16:18:11.257 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《红高粱》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:18:11.257 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《红高粱》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:18:11.258 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-27 16:18:11.258 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.DatabaseService - 处理 1 个三元组，包括实体和关系保存
2025-06-27 16:18:11.259 [ForkJoinPool.commonPool-worker-10] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:18:11.260 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:18:11.261 [ForkJoinPool.commonPool-worker-10] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:18:11.262 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-27 16:18:11.263 [ForkJoinPool.commonPool-worker-10] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:11.264 [ForkJoinPool.commonPool-worker-10] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:11.266 [ForkJoinPool.commonPool-worker-10] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:18:11.267 [ForkJoinPool.commonPool-worker-10] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:18:11.267 [ForkJoinPool.commonPool-worker-10] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:18:11.267 [ForkJoinPool.commonPool-worker-10] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《红高粱》 [导演], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:18:11.267 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《红高粱》
2025-06-27 16:18:11.267 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:18:11.269 [ForkJoinPool.commonPool-worker-10] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012274751_9ca6, Duration: 16518ms
2025-06-27 16:18:16.593 [reactor-http-nio-6] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 9299ms，响应长度: 347
2025-06-27 16:18:16.593 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 2，当前并发数: 5
2025-06-27 16:18:16.594 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:18:18.992 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 7737ms，响应长度: 254
2025-06-27 16:18:18.992 [reactor-http-nio-8] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 7842ms，响应长度: 247
2025-06-27 16:18:18.993 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 34，处理模式: 直接处理
2025-06-27 16:18:18.993 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 31，处理模式: 直接处理
2025-06-27 16:18:18.993 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 32，当前并发数: 4
2025-06-27 16:18:18.994 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:18:19.000 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 254
2025-06-27 16:18:19.000 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 247
2025-06-27 16:18:19.000 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "发行",
      "object": "《叶惠美》",
      "confidence": 0.95
    },
    {
      "subject": "《叶惠美》",
      "predicate": "收录",
      "object": "《东风破》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:18:19.000 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "获得",
      "object": "最佳男主角奖",
      "confidence": 0.95
    },
    {
      "subject": "2023年金马奖颁奖典礼",
      "predicate": "举行地点",
      "object": "台北",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:18:19.000 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "发行",
      "object": "《叶惠美》",
      "confidence": 0.95
    },
    {
      "subject": "《叶惠美》",
      "predicate": "收录",
      "object": "《东风破》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:18:19.000 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "获得",
      "object": "最佳男主角奖",
      "confidence": 0.95
    },
    {
      "subject": "2023年金马奖颁奖典礼",
      "predicate": "举行地点",
      "object": "台北",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:18:19.001 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-27 16:18:19.001 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-27 16:18:19.001 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组，包括实体和关系保存
2025-06-27 16:18:19.001 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组，包括实体和关系保存
2025-06-27 16:18:19.002 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:18:19.002 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:18:19.004 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-27 16:18:19.004 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-27 16:18:19.004 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[获得]--> 最佳男主角奖
2025-06-27 16:18:19.005 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select e1_0.id from event e1_0 where e1_0.event_name=? limit ?
2025-06-27 16:18:19.005 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select w1_0.id from work w1_0 where w1_0.title=? limit ?
2025-06-27 16:18:19.008 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 作品 《叶惠美》 已存在，跳过插入
2025-06-27 16:18:19.009 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:19.011 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 事件 2023年金马奖颁奖典礼 已存在，跳过插入
2025-06-27 16:18:19.011 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select e1_0.id from event e1_0 where e1_0.event_name=? limit ?
2025-06-27 16:18:19.012 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select w1_0.id,w1_0.awards,w1_0.baike,w1_0.description,w1_0.`group`,w1_0.platform,w1_0.release_date,w1_0.role,w1_0.title,w1_0.work_id,w1_0.work_type from work w1_0 where w1_0.title=?
2025-06-27 16:18:19.013 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 事件 台北 已存在，跳过插入
2025-06-27 16:18:19.013 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 2023年金马奖颁奖典礼 --[举行地点]--> 台北
2025-06-27 16:18:19.013 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - insert into celebrity_work (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:18:19.013 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:18:19.015 [ForkJoinPool.commonPool-worker-5] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:18:19.015 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:18:19.015 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 周杰伦 -> 《叶惠美》 [发行], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_work (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_work (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:18:19.015 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[发行]--> 《叶惠美》
2025-06-27 16:18:19.015 [ForkJoinPool.commonPool-worker-4] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012274820_681, Duration: 24195ms
2025-06-27 16:18:19.016 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:19.016 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《叶惠美》 失败: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:19.016 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:19.016 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《东风破》 失败: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:19.017 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《叶惠美》 --[收录]--> 《东风破》
2025-06-27 16:18:19.017 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:18:19.019 [ForkJoinPool.commonPool-worker-5] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012274816_8275, Duration: 24202ms
2025-06-27 16:18:19.922 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 3328ms，响应长度: 14
2025-06-27 16:18:19.923 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 2，处理模式: 直接处理
2025-06-27 16:18:20.520 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 12676ms，响应长度: 346
2025-06-27 16:18:20.524 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.LongTextProcessor - ✅ 分片合并完成，成功率: 2/2 ({:.1f}%)，提取三元组: 100.0
2025-06-27 16:18:20.524 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 2204，处理模式: 分批处理
2025-06-27 16:18:20.525 [ForkJoinPool.commonPool-worker-6] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 开始知识图谱增强处理，模式: fusion
2025-06-27 16:18:20.529 [ForkJoinPool.commonPool-worker-6] INFO  c.datacenter.extract.service.EntityDisambiguator - 开始实体消歧义处理
2025-06-27 16:18:20.537 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:20.544 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:20.551 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:20.555 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:20.561 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:18:20.569 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:20.574 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:20.578 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:18:20.584 [ForkJoinPool.commonPool-worker-6] INFO  c.datacenter.extract.service.EntityDisambiguator - 实体消歧义处理完成，处理了3个三元组
2025-06-27 16:18:20.584 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.KnowledgeFusion - 开始知识融合处理
2025-06-27 16:18:20.584 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.KnowledgeFusion - 知识融合处理完成，处理了3个三元组
2025-06-27 16:18:20.584 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.RelationValidator - 开始关系验证处理
2025-06-27 16:18:20.584 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.RelationValidator - 关系验证处理完成，验证了3个三元组
2025-06-27 16:18:20.584 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.QualityAssessor - 开始质量评估处理
2025-06-27 16:18:20.600 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.QualityAssessor - 质量评估完成，总分: {:.2f}
2025-06-27 16:18:20.601 [ForkJoinPool.commonPool-worker-6] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 知识图谱增强处理完成，模式: fusion
2025-06-27 16:18:20.602 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 1378
2025-06-27 16:18:20.602 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"张艺谋","predicate":"职业","object":"导演","confidence":1.0,"chunk_index":0,"chunk_start":0,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"国籍","object":"中国","confidence":1.0,"chunk_index":0,"chunk_start":0,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"知名度","object":"著名","confidence":1.0,"chunk_index":0,"chunk_start":0,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"total_chunks":2,"success_chunks":2,"success_rate":"100.00%","total_triples":3,"processing_method":"batch_processing","timestamp":1751012300523,"disambiguation_applied":true,"disambiguation_timestamp":1751012300584,"knowledge_fusion_applied":true,"fusion_timestamp":1751012300584,"relation_validation_applied":true,"validation_timestamp":1751012300584,"quality_score":0.8000000000000002,"quality_grade":"GOOD","assessment_timestamp":1751012300584,"kg_mode":"fusion","processed_at":1751012300601,"full_processing_applied":true}
2025-06-27 16:18:20.602 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"张艺谋","predicate":"职业","object":"导演","confidence":1.0,"chunk_index":0,"chunk_start":0,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"国籍","object":"中国","confidence":1.0,"chunk_index":0,"chunk_start":0,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"知名度","object":"著名","confidence":1.0,"chunk_index":0,"chunk_start":0,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"total_chunks":2,"success_chunks":2,"success_rate":"100.00%","total_triples":3,"processing_method":"batch_processing","timestamp":1751012300523,"disambiguation_applied":true,"disambiguation_timestamp":1751012300584,"knowledge_fusion_applied":true,"fusion_timestamp":1751012300584,"relation_validation_applied":true,"validation_timestamp":1751012300584,"quality_score":0.8000000000000002,"quality_grade":"GOOD","assessment_timestamp":1751012300584,"kg_mode":"fusion","processed_at":1751012300601,"full_processing_applied":true}
2025-06-27 16:18:20.603 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 19 个主要字段: [triples, total_chunks, success_chunks, success_rate, total_triples, processing_method, timestamp, disambiguation_applied, disambiguation_timestamp, knowledge_fusion_applied, fusion_timestamp, relation_validation_applied, validation_timestamp, quality_score, quality_grade, assessment_timestamp, kg_mode, processed_at, full_processing_applied]
2025-06-27 16:18:20.603 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-27 16:18:20.604 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:18:20.606 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:18:20.607 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:18:20.608 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 人员 导演 已存在，跳过插入
2025-06-27 16:18:20.608 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:20.610 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:20.612 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:18:20.613 [ForkJoinPool.commonPool-worker-6] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:18:20.613 [ForkJoinPool.commonPool-worker-6] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:18:20.613 [ForkJoinPool.commonPool-worker-6] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 导演 [职业], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:18:20.613 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[职业]--> 导演
2025-06-27 16:18:20.614 [ForkJoinPool.commonPool-worker-6] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:20.614 [ForkJoinPool.commonPool-worker-6] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:20.614 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[国籍]--> 中国
2025-06-27 16:18:20.615 [ForkJoinPool.commonPool-worker-6] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:20.615 [ForkJoinPool.commonPool-worker-6] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:20.615 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[知名度]--> 著名
2025-06-27 16:18:20.615 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:18:20.617 [ForkJoinPool.commonPool-worker-6] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012274792_21d9, Duration: 25824ms
2025-06-27 16:18:22.514 [reactor-http-nio-7] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 12442ms，响应长度: 467
2025-06-27 16:18:22.515 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 52，处理模式: 直接处理
2025-06-27 16:18:22.521 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 467
2025-06-27 16:18:22.521 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "巩俐",
      "predicate": "职业",
      "object": "女演员",
      "confidence": 0.95
    },
    {
      "subject": "《英雄》",
      "predicate": "类型",
      "object": "武侠电影",
      "confidence": 0.95
    },
    {
      "subject": "陈凯歌",
      "predicate": "导演",
      "object": "《霸王别姬》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:18:22.521 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "巩俐",
      "predicate": "职业",
      "object": "女演员",
      "confidence": 0.95
    },
    {
      "subject": "《英雄》",
      "predicate": "类型",
      "object": "武侠电影",
      "confidence": 0.95
    },
    {
      "subject": "陈凯歌",
      "predicate": "导演",
      "object": "《霸王别姬》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:18:22.522 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-27 16:18:22.522 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-27 16:18:22.523 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:18:22.526 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:18:22.527 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:18:22.530 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-27 16:18:22.531 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:22.535 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:22.538 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:18:22.539 [ForkJoinPool.commonPool-worker-1] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:18:22.540 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:18:22.540 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《红高粱》 [导演], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:18:22.540 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《红高粱》
2025-06-27 16:18:22.541 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:22.541 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 巩俐 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:22.541 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:22.541 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 女演员 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:22.542 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:22.542 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 巩俐 -> 女演员 [职业], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:22.542 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 巩俐 --[职业]--> 女演员
2025-06-27 16:18:22.542 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:22.542 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《英雄》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:22.542 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《英雄》 --[类型]--> 武侠电影
2025-06-27 16:18:22.543 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:22.543 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 陈凯歌 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:22.543 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:22.543 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 《霸王别姬》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:22.543 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:22.543 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 陈凯歌 -> 《霸王别姬》 [导演], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:22.543 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 陈凯歌 --[导演]--> 《霸王别姬》
2025-06-27 16:18:22.543 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:18:22.545 [ForkJoinPool.commonPool-worker-1] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012274806_cbd8, Duration: 27739ms
2025-06-27 16:18:29.853 [reactor-http-nio-9] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 10859ms，响应长度: 461
2025-06-27 16:18:29.854 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 32，处理模式: 直接处理
2025-06-27 16:18:29.856 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 14
2025-06-27 16:18:29.856 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 133
2025-06-27 16:18:29.856 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 461
2025-06-27 16:18:29.856 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《红高粱》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:18:29.856 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[]}
2025-06-27 16:18:29.856 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《红高粱》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:18:29.856 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[]}
2025-06-27 16:18:29.856 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "演员",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "歌手",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出生地",
      "object": "香港",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出演",
      "object": "《无间道》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:18:29.856 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "演员",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "歌手",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出生地",
      "object": "香港",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出演",
      "object": "《无间道》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:18:29.857 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-27 16:18:29.857 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-27 16:18:29.857 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-27 16:18:29.857 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 1 个三元组，包括实体和关系保存
2025-06-27 16:18:29.857 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-27 16:18:29.857 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - triples为空，跳过处理
2025-06-27 16:18:29.857 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:18:29.857 [ForkJoinPool.commonPool-worker-11] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:18:29.858 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:18:29.859 [ForkJoinPool.commonPool-worker-9] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012274828_dcb5, Duration: 35031ms
2025-06-27 16:18:29.859 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:18:29.859 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-27 16:18:29.859 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:18:29.859 [ForkJoinPool.commonPool-worker-11] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:18:29.861 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 人员 演员 已存在，跳过插入
2025-06-27 16:18:29.861 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-27 16:18:29.861 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:29.861 [ForkJoinPool.commonPool-worker-11] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:29.863 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:29.863 [ForkJoinPool.commonPool-worker-11] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:18:29.864 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:18:29.864 [ForkJoinPool.commonPool-worker-11] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:18:29.865 [ForkJoinPool.commonPool-worker-2] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:18:29.865 [ForkJoinPool.commonPool-worker-11] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:18:29.865 [ForkJoinPool.commonPool-worker-2] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:18:29.865 [ForkJoinPool.commonPool-worker-11] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:18:29.865 [ForkJoinPool.commonPool-worker-2] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《红高粱》 [导演], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:18:29.865 [ForkJoinPool.commonPool-worker-11] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 刘德华 -> 演员 [职业], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:18:29.865 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《红高粱》
2025-06-27 16:18:29.865 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[职业]--> 演员
2025-06-27 16:18:29.865 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:18:29.865 [ForkJoinPool.commonPool-worker-11] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:29.866 [ForkJoinPool.commonPool-worker-11] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 刘德华 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:29.866 [ForkJoinPool.commonPool-worker-11] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:29.866 [ForkJoinPool.commonPool-worker-11] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 歌手 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:29.866 [ForkJoinPool.commonPool-worker-11] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:29.866 [ForkJoinPool.commonPool-worker-2] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012274746_5b95, Duration: 35120ms
2025-06-27 16:18:29.867 [ForkJoinPool.commonPool-worker-11] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 刘德华 -> 歌手 [职业], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:29.867 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[职业]--> 歌手
2025-06-27 16:18:29.867 [ForkJoinPool.commonPool-worker-11] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:29.867 [ForkJoinPool.commonPool-worker-11] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 刘德华 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:29.867 [ForkJoinPool.commonPool-worker-11] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:29.867 [ForkJoinPool.commonPool-worker-11] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 香港 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:29.868 [ForkJoinPool.commonPool-worker-11] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:29.868 [ForkJoinPool.commonPool-worker-11] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 刘德华 -> 香港 [出生地], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:29.868 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[出生地]--> 香港
2025-06-27 16:18:29.868 [ForkJoinPool.commonPool-worker-11] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:29.868 [ForkJoinPool.commonPool-worker-11] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 刘德华 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:29.868 [ForkJoinPool.commonPool-worker-11] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:29.869 [ForkJoinPool.commonPool-worker-11] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《无间道》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:29.869 [ForkJoinPool.commonPool-worker-11] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:29.869 [ForkJoinPool.commonPool-worker-11] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 刘德华 -> 《无间道》 [出演], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:18:29.869 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[出演]--> 《无间道》
2025-06-27 16:18:29.869 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:18:29.870 [ForkJoinPool.commonPool-worker-11] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012274813_c388, Duration: 35057ms
2025-06-27 16:25:40.213 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 24572 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-27 16:25:40.216 [main] INFO  com.datacenter.extract.ExtractServiceApplication - The following 1 profile is active: "default"
2025-06-27 16:25:42.585 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@23933031
2025-06-27 16:25:42.586 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@23933031
2025-06-27 16:25:42.586 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@23933031
2025-06-27 16:25:42.586 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@415262a0
2025-06-27 16:25:42.587 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@415262a0
2025-06-27 16:25:42.587 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@19c1f6f4
2025-06-27 16:25:42.587 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@19c1f6f4
2025-06-27 16:25:42.587 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@46fa2a7e
2025-06-27 16:25:42.587 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@46fa2a7e
2025-06-27 16:25:42.588 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@3d02ff64
2025-06-27 16:25:42.588 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@3d02ff64
2025-06-27 16:25:42.588 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@3d02ff64
2025-06-27 16:25:42.588 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@6f17dd06
2025-06-27 16:25:42.588 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@6f17dd06
2025-06-27 16:25:42.589 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@6f17dd06
2025-06-27 16:25:42.590 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@7977f046
2025-06-27 16:25:42.590 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@7977f046
2025-06-27 16:25:42.590 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@1534bdc6
2025-06-27 16:25:42.590 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@53079ae6
2025-06-27 16:25:42.590 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@53079ae6
2025-06-27 16:25:42.590 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@718ad3a6
2025-06-27 16:25:42.591 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@603c2dee
2025-06-27 16:25:42.592 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@50d666a2
2025-06-27 16:25:42.592 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@50d666a2
2025-06-27 16:25:42.592 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@50d666a2
2025-06-27 16:25:42.592 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@3f6906f4
2025-06-27 16:25:42.592 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@3f6906f4
2025-06-27 16:25:42.592 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@3f6906f4
2025-06-27 16:25:42.592 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@1859e55c
2025-06-27 16:25:42.592 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@1859e55c
2025-06-27 16:25:42.592 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@1859e55c
2025-06-27 16:25:42.593 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@190bf8e4
2025-06-27 16:25:42.594 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@190bf8e4
2025-06-27 16:25:42.594 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@190bf8e4
2025-06-27 16:25:42.594 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@7a8b7e11
2025-06-27 16:25:42.594 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@7a8b7e11
2025-06-27 16:25:42.594 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@7a8b7e11
2025-06-27 16:25:42.594 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@d229912
2025-06-27 16:25:42.594 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@d229912
2025-06-27 16:25:42.594 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@5a06eeef
2025-06-27 16:25:42.594 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@5a06eeef
2025-06-27 16:25:42.594 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@1c0cf193
2025-06-27 16:25:42.595 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@1c0cf193
2025-06-27 16:25:42.595 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@1c0cf193
2025-06-27 16:25:42.595 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@3dd66ff5
2025-06-27 16:25:42.596 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@24258b54
2025-06-27 16:25:42.596 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@24258b54
2025-06-27 16:25:42.596 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@493968a9
2025-06-27 16:25:42.596 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@32428874
2025-06-27 16:25:42.596 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@32428874
2025-06-27 16:25:42.596 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@32428874
2025-06-27 16:25:42.597 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@3c65f00e
2025-06-27 16:25:42.597 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@3412a3fd
2025-06-27 16:25:42.598 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@36ecf9f6
2025-06-27 16:25:42.598 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@104bc677
2025-06-27 16:25:42.598 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@104bc677
2025-06-27 16:25:42.598 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@3bda1f0
2025-06-27 16:25:42.598 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@3bda1f0
2025-06-27 16:25:42.598 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@2211e731
2025-06-27 16:25:42.598 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@73e399cc
2025-06-27 16:25:42.598 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@3dd591b9
2025-06-27 16:25:42.599 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@538905d2
2025-06-27 16:25:42.599 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@7e8c58fd
2025-06-27 16:25:42.599 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@11ce9319
2025-06-27 16:25:42.600 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@780c0
2025-06-27 16:25:42.600 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@780c0
2025-06-27 16:25:42.600 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@1b3bb287
2025-06-27 16:25:42.600 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@1b3bb287
2025-06-27 16:25:42.600 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@7ec5aad
2025-06-27 16:25:42.600 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@7ec5aad
2025-06-27 16:25:42.600 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@625f5712
2025-06-27 16:25:42.600 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@625f5712
2025-06-27 16:25:42.600 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@5e62ca19
2025-06-27 16:25:42.600 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@5e62ca19
2025-06-27 16:25:42.601 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@188bf4d8
2025-06-27 16:25:42.601 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@7dd7ec56
2025-06-27 16:25:42.601 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@6528d339
2025-06-27 16:25:42.601 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@6528d339
2025-06-27 16:25:42.601 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@2dd2ff87
2025-06-27 16:25:42.602 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@6a38e3d1
2025-06-27 16:25:42.602 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@28cf179c
2025-06-27 16:25:42.602 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@bdda8a7
2025-06-27 16:25:42.602 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@bdda8a7
2025-06-27 16:25:42.602 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@3149409c
2025-06-27 16:25:42.602 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@1c421b0f
2025-06-27 16:25:42.602 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@4ce18cec
2025-06-27 16:25:42.602 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@4ce18cec
2025-06-27 16:25:42.603 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@2a9f8d47
2025-06-27 16:25:42.605 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@2a9f8d47
2025-06-27 16:25:42.605 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@51297528
2025-06-27 16:25:42.605 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@51297528
2025-06-27 16:25:42.605 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@51297528
2025-06-27 16:25:42.606 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@5d3f8661
2025-06-27 16:25:42.606 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@5d3f8661
2025-06-27 16:25:42.606 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@5d3f8661
2025-06-27 16:25:42.606 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@1df9f7c6
2025-06-27 16:25:42.606 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@4b5aa48b
2025-06-27 16:25:42.607 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@51c008fd
2025-06-27 16:25:42.607 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@51c008fd
2025-06-27 16:25:42.607 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@70ed902a
2025-06-27 16:25:42.607 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@70ed902a
2025-06-27 16:25:42.607 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@70ed902a
2025-06-27 16:25:42.607 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@22f80e36
2025-06-27 16:25:42.607 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@3c98981e
2025-06-27 16:25:42.607 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@6dcee890
2025-06-27 16:25:42.607 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@6dcee890
2025-06-27 16:25:42.607 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@713e49c3
2025-06-27 16:25:42.608 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@713e49c3
2025-06-27 16:25:42.608 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@713e49c3
2025-06-27 16:25:42.608 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@13d5606c
2025-06-27 16:25:42.608 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@13d5606c
2025-06-27 16:25:42.608 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@6bf54260
2025-06-27 16:25:42.608 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@6bf54260
2025-06-27 16:25:42.608 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@7165bde6
2025-06-27 16:25:42.608 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@7165bde6
2025-06-27 16:25:42.608 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@72168258
2025-06-27 16:25:42.608 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@72168258
2025-06-27 16:25:42.608 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@4af84a76
2025-06-27 16:25:42.609 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@4af84a76
2025-06-27 16:25:42.610 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@b5ff70b
2025-06-27 16:25:42.612 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@5a9051fd
2025-06-27 16:25:42.612 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@5a9051fd
2025-06-27 16:25:42.612 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@642c5bb3
2025-06-27 16:25:42.612 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@4e79c25
2025-06-27 16:25:42.612 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@2ace1cd3
2025-06-27 16:25:42.613 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@5e46a125
2025-06-27 16:25:42.613 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@5831989d
2025-06-27 16:25:42.615 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@608f310a
2025-06-27 16:25:42.616 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@3a7d914c
2025-06-27 16:25:42.616 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@515940af
2025-06-27 16:25:42.616 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@5f8df69
2025-06-27 16:25:42.705 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-27 16:25:42.791 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@3ec211cc
2025-06-27 16:25:42.793 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-27 16:25:42.835 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-27 16:25:42.836 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-27 16:25:42.852 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@25ee3caa) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3fecb076)
2025-06-27 16:25:42.853 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@62159fd) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@28e8dee7)
2025-06-27 16:25:42.855 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7c37ac3c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2682cccc)
2025-06-27 16:25:42.855 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2ae08750) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@44117b0d)
2025-06-27 16:25:42.855 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@58679ff) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@35d2312f)
2025-06-27 16:25:42.856 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1b26fac2) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@54a033b8)
2025-06-27 16:25:42.856 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@62dfe152) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@46a0ef6f)
2025-06-27 16:25:42.856 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6afced93) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3f142e87)
2025-06-27 16:25:42.856 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@22dc9d46) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@63c6c5e5)
2025-06-27 16:25:42.857 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-27 16:25:42.857 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-27 16:25:42.857 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-27 16:25:42.858 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-27 16:25:42.859 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-27 16:25:42.860 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@593354fa
2025-06-27 16:25:42.860 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@642c5bb3`
2025-06-27 16:25:42.863 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-27 16:25:42.863 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-27 16:25:42.865 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-27 16:25:42.865 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-27 16:25:42.865 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-27 16:25:42.865 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-27 16:25:42.865 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-27 16:25:42.865 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-27 16:25:42.866 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-27 16:25:42.866 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-27 16:25:42.866 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-27 16:25:42.866 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@c247363] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@c6d7256]
2025-06-27 16:25:43.484 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@c247363] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@73b71935]
2025-06-27 16:25:43.488 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@73b71935] for TypeConfiguration
2025-06-27 16:25:43.965 [main] INFO  c.datacenter.extract.service.EntityDisambiguator - EntityDisambiguator initialized successfully
2025-06-27 16:25:43.967 [main] INFO  com.datacenter.extract.service.KnowledgeFusion - KnowledgeFusion initialized successfully
2025-06-27 16:25:43.968 [main] INFO  com.datacenter.extract.service.RelationValidator - RelationValidator initialized successfully
2025-06-27 16:25:43.976 [main] INFO  com.datacenter.extract.service.QualityAssessor - QualityAssessor initialized successfully
2025-06-27 16:25:43.978 [main] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - KnowledgeGraphEngine initialized with all processors
2025-06-27 16:25:44.140 [main] INFO  c.d.extract.service.OptimizedBusinessService - OptimizedBusinessService initialized with enterprise-grade components
2025-06-27 16:25:44.142 [main] INFO  c.d.extract.controller.AsyncExtractController - AsyncExtractController initialized with enterprise-grade business service
2025-06-27 16:25:44.584 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-27 16:25:47.218 [main] WARN  o.s.b.w.r.c.AnnotationConfigReactiveWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
2025-06-27 16:25:47.233 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@73b71935] for TypeConfiguration
2025-06-27 16:25:47.233 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@418f2af3] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@73b71935]
2025-06-27 16:25:47.235 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-27 16:25:47.243 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-27 16:25:47.262 [main] INFO  o.s.b.a.logging.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-06-27 16:25:47.272 [main] ERROR o.s.b.diagnostics.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 2701 was already in use.

Action:

Identify and stop the process that's listening on port 2701 or configure this application to listen on another port.

2025-06-27 16:26:55.868 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 27413 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-27 16:26:55.870 [main] INFO  com.datacenter.extract.ExtractServiceApplication - The following 1 profile is active: "default"
2025-06-27 16:26:59.381 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@6fc28e5b
2025-06-27 16:26:59.382 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@6fc28e5b
2025-06-27 16:26:59.383 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@6fc28e5b
2025-06-27 16:26:59.383 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@7977f046
2025-06-27 16:26:59.383 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@7977f046
2025-06-27 16:26:59.383 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@6ec98ccc
2025-06-27 16:26:59.383 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@6ec98ccc
2025-06-27 16:26:59.383 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@441aa7ae
2025-06-27 16:26:59.383 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@441aa7ae
2025-06-27 16:26:59.384 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@1534bdc6
2025-06-27 16:26:59.384 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@1534bdc6
2025-06-27 16:26:59.385 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@1534bdc6
2025-06-27 16:26:59.385 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@53079ae6
2025-06-27 16:26:59.386 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@53079ae6
2025-06-27 16:26:59.387 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@53079ae6
2025-06-27 16:26:59.387 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@718ad3a6
2025-06-27 16:26:59.387 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@718ad3a6
2025-06-27 16:26:59.387 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@3f6906f4
2025-06-27 16:26:59.387 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@1859e55c
2025-06-27 16:26:59.388 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@1859e55c
2025-06-27 16:26:59.389 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@190bf8e4
2025-06-27 16:26:59.390 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@7a8b7e11
2025-06-27 16:26:59.390 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@d229912
2025-06-27 16:26:59.390 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@d229912
2025-06-27 16:26:59.390 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@d229912
2025-06-27 16:26:59.390 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@5a06eeef
2025-06-27 16:26:59.390 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@5a06eeef
2025-06-27 16:26:59.390 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@5a06eeef
2025-06-27 16:26:59.391 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@1c0cf193
2025-06-27 16:26:59.391 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@1c0cf193
2025-06-27 16:26:59.391 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@1c0cf193
2025-06-27 16:26:59.391 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@3dd66ff5
2025-06-27 16:26:59.391 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@3dd66ff5
2025-06-27 16:26:59.391 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@3dd66ff5
2025-06-27 16:26:59.391 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@24258b54
2025-06-27 16:26:59.391 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@24258b54
2025-06-27 16:26:59.392 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@24258b54
2025-06-27 16:26:59.392 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@493968a9
2025-06-27 16:26:59.392 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@493968a9
2025-06-27 16:26:59.392 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@32428874
2025-06-27 16:26:59.392 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@32428874
2025-06-27 16:26:59.392 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@3c65f00e
2025-06-27 16:26:59.392 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@3c65f00e
2025-06-27 16:26:59.392 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@3c65f00e
2025-06-27 16:26:59.392 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@3412a3fd
2025-06-27 16:26:59.392 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@36ecf9f6
2025-06-27 16:26:59.392 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@36ecf9f6
2025-06-27 16:26:59.392 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@104bc677
2025-06-27 16:26:59.392 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@3bda1f0
2025-06-27 16:26:59.393 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@3bda1f0
2025-06-27 16:26:59.393 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@3bda1f0
2025-06-27 16:26:59.394 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@2211e731
2025-06-27 16:26:59.395 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@73e399cc
2025-06-27 16:26:59.395 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@3dd591b9
2025-06-27 16:26:59.395 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@538905d2
2025-06-27 16:26:59.395 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@538905d2
2025-06-27 16:26:59.395 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@7e8c58fd
2025-06-27 16:26:59.395 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@7e8c58fd
2025-06-27 16:26:59.395 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@11ce9319
2025-06-27 16:26:59.396 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@780c0
2025-06-27 16:26:59.396 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@1b3bb287
2025-06-27 16:26:59.396 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@7ec5aad
2025-06-27 16:26:59.396 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@625f5712
2025-06-27 16:26:59.396 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@5e62ca19
2025-06-27 16:26:59.396 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@188bf4d8
2025-06-27 16:26:59.397 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@188bf4d8
2025-06-27 16:26:59.397 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@7dd7ec56
2025-06-27 16:26:59.397 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@7dd7ec56
2025-06-27 16:26:59.397 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@6528d339
2025-06-27 16:26:59.397 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@6528d339
2025-06-27 16:26:59.397 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@2dd2ff87
2025-06-27 16:26:59.397 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@2dd2ff87
2025-06-27 16:26:59.397 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@6a38e3d1
2025-06-27 16:26:59.398 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@6a38e3d1
2025-06-27 16:26:59.398 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@28cf179c
2025-06-27 16:26:59.398 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@bdda8a7
2025-06-27 16:26:59.398 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@3149409c
2025-06-27 16:26:59.398 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@3149409c
2025-06-27 16:26:59.398 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@1c421b0f
2025-06-27 16:26:59.399 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@4ce18cec
2025-06-27 16:26:59.399 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@2a9f8d47
2025-06-27 16:26:59.399 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@51297528
2025-06-27 16:26:59.399 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@51297528
2025-06-27 16:26:59.399 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@5d3f8661
2025-06-27 16:26:59.399 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@1df9f7c6
2025-06-27 16:26:59.399 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@4b5aa48b
2025-06-27 16:26:59.400 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@4b5aa48b
2025-06-27 16:26:59.402 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@51c008fd
2025-06-27 16:26:59.402 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@51c008fd
2025-06-27 16:26:59.402 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@70ed902a
2025-06-27 16:26:59.402 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@70ed902a
2025-06-27 16:26:59.403 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@70ed902a
2025-06-27 16:26:59.403 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@22f80e36
2025-06-27 16:26:59.403 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@22f80e36
2025-06-27 16:26:59.403 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@22f80e36
2025-06-27 16:26:59.403 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@3c98981e
2025-06-27 16:26:59.403 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@6dcee890
2025-06-27 16:26:59.404 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@713e49c3
2025-06-27 16:26:59.404 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@713e49c3
2025-06-27 16:26:59.404 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@13d5606c
2025-06-27 16:26:59.404 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@13d5606c
2025-06-27 16:26:59.404 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@13d5606c
2025-06-27 16:26:59.404 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@6bf54260
2025-06-27 16:26:59.404 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@7165bde6
2025-06-27 16:26:59.404 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@72168258
2025-06-27 16:26:59.404 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@72168258
2025-06-27 16:26:59.404 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@4af84a76
2025-06-27 16:26:59.405 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@4af84a76
2025-06-27 16:26:59.405 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@4af84a76
2025-06-27 16:26:59.405 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@b5ff70b
2025-06-27 16:26:59.405 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@b5ff70b
2025-06-27 16:26:59.405 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@5709e10b
2025-06-27 16:26:59.405 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@5709e10b
2025-06-27 16:26:59.405 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@114badf0
2025-06-27 16:26:59.405 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@114badf0
2025-06-27 16:26:59.405 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@19e8fe55
2025-06-27 16:26:59.405 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@19e8fe55
2025-06-27 16:26:59.405 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@6d7bb5cc
2025-06-27 16:26:59.407 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@6d7bb5cc
2025-06-27 16:26:59.407 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@756200d1
2025-06-27 16:26:59.409 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@7337bd2e
2025-06-27 16:26:59.409 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@7337bd2e
2025-06-27 16:26:59.410 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@608f310a
2025-06-27 16:26:59.410 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@3a7d914c
2025-06-27 16:26:59.410 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@515940af
2025-06-27 16:26:59.410 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@5f8df69
2025-06-27 16:26:59.410 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@1ce6a9bd
2025-06-27 16:26:59.412 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@4a47bc9c
2025-06-27 16:26:59.413 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@5100c143
2025-06-27 16:26:59.413 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@12404f9d
2025-06-27 16:26:59.413 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@3b42b729
2025-06-27 16:26:59.502 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-27 16:26:59.595 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@65021bb4
2025-06-27 16:26:59.596 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-27 16:26:59.626 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-27 16:26:59.627 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-27 16:26:59.644 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2682cccc) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2ae08750)
2025-06-27 16:26:59.644 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@44117b0d) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@58679ff)
2025-06-27 16:26:59.645 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@35d2312f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1b26fac2)
2025-06-27 16:26:59.646 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@54a033b8) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@62dfe152)
2025-06-27 16:26:59.646 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@46a0ef6f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6afced93)
2025-06-27 16:26:59.647 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3f142e87) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@22dc9d46)
2025-06-27 16:26:59.648 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@63c6c5e5) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6edb2c7b)
2025-06-27 16:26:59.648 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@70a54731) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@36d5c2ce)
2025-06-27 16:26:59.648 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6369d01c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@54e680fe)
2025-06-27 16:26:59.649 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-27 16:26:59.649 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-27 16:26:59.649 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-27 16:26:59.650 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-27 16:26:59.651 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-27 16:26:59.653 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@406808eb
2025-06-27 16:26:59.653 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@608f310a`
2025-06-27 16:26:59.655 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-27 16:26:59.655 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-27 16:26:59.656 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-27 16:26:59.657 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-27 16:26:59.657 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-27 16:26:59.657 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-27 16:26:59.657 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-27 16:26:59.657 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-27 16:26:59.657 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-27 16:26:59.657 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-27 16:26:59.657 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-27 16:26:59.658 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@e88e14] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@c157abf]
2025-06-27 16:27:00.234 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@e88e14] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@36995784]
2025-06-27 16:27:00.248 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@36995784] for TypeConfiguration
2025-06-27 16:27:00.788 [main] INFO  c.datacenter.extract.service.EntityDisambiguator - EntityDisambiguator initialized successfully
2025-06-27 16:27:00.791 [main] INFO  com.datacenter.extract.service.KnowledgeFusion - KnowledgeFusion initialized successfully
2025-06-27 16:27:00.793 [main] INFO  com.datacenter.extract.service.RelationValidator - RelationValidator initialized successfully
2025-06-27 16:27:00.803 [main] INFO  com.datacenter.extract.service.QualityAssessor - QualityAssessor initialized successfully
2025-06-27 16:27:00.804 [main] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - KnowledgeGraphEngine initialized with all processors
2025-06-27 16:27:00.999 [main] INFO  c.d.extract.service.OptimizedBusinessService - OptimizedBusinessService initialized with enterprise-grade components
2025-06-27 16:27:01.001 [main] INFO  c.d.extract.controller.AsyncExtractController - AsyncExtractController initialized with enterprise-grade business service
2025-06-27 16:27:01.479 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-27 16:27:02.031 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-27 16:27:02.044 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 6.872 seconds (process running for 7.455)
2025-06-27 16:28:52.393 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 43, ExtractParams: triples, KgMode: standard
2025-06-27 16:28:52.404 [reactor-http-nio-2] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012932398_d45a, KgMode: standard, TextLength: 43
2025-06-27 16:28:52.412 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 43 字符
2025-06-27 16:28:52.412 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:28:52.413 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 43，当前并发数: 1
2025-06-27 16:28:52.413 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:28:52.434 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 43, ExtractParams: triples, KgMode: enhanced
2025-06-27 16:28:52.435 [reactor-http-nio-2] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012932435_8823, KgMode: enhanced, TextLength: 43
2025-06-27 16:28:52.440 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 43, ExtractParams: triples, KgMode: fusion
2025-06-27 16:28:52.441 [reactor-http-nio-2] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012932441_780, KgMode: fusion, TextLength: 43
2025-06-27 16:28:52.445 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 36, ExtractParams: entities,relations, KgMode: enhanced
2025-06-27 16:28:52.445 [reactor-http-nio-2] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012932445_6128, KgMode: enhanced, TextLength: 36
2025-06-27 16:28:52.446 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 36 字符
2025-06-27 16:28:52.446 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:28:52.446 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 36，当前并发数: 2
2025-06-27 16:28:52.447 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:28:54.492 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 39, ExtractParams: entities,relations, KgMode: enhanced
2025-06-27 16:28:54.496 [reactor-http-nio-2] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012934496_7913, KgMode: enhanced, TextLength: 39
2025-06-27 16:28:54.498 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 39 字符
2025-06-27 16:28:54.498 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:28:54.498 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 39，当前并发数: 3
2025-06-27 16:28:54.499 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:28:56.538 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 39, ExtractParams: entities,relations, KgMode: enhanced
2025-06-27 16:28:56.539 [reactor-http-nio-2] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012936539_61cd, KgMode: enhanced, TextLength: 39
2025-06-27 16:28:58.578 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 42, ExtractParams: entities,relations, KgMode: enhanced
2025-06-27 16:28:58.580 [reactor-http-nio-2] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012938579_24e8, KgMode: enhanced, TextLength: 42
2025-06-27 16:28:58.581 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 42 字符
2025-06-27 16:28:58.582 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:28:58.584 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 42，当前并发数: 4
2025-06-27 16:28:58.584 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:29:00.617 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 39, ExtractParams: entities,relations, KgMode: enhanced
2025-06-27 16:29:00.618 [reactor-http-nio-2] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012940618_8010, KgMode: enhanced, TextLength: 39
2025-06-27 16:29:01.030 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 8580ms，响应长度: 251
2025-06-27 16:29:01.031 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 36，处理模式: 直接处理
2025-06-27 16:29:01.032 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 39 字符
2025-06-27 16:29:01.032 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:29:01.032 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 39，当前并发数: 4
2025-06-27 16:29:01.032 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:29:01.034 [ForkJoinPool.commonPool-worker-4] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 开始知识图谱增强处理，模式: enhanced
2025-06-27 16:29:01.052 [ForkJoinPool.commonPool-worker-4] INFO  c.datacenter.extract.service.EntityDisambiguator - 开始实体消歧义处理
2025-06-27 16:29:01.168 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:01.193 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:01.198 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:01.202 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:01.218 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:01.233 [ForkJoinPool.commonPool-worker-4] INFO  c.datacenter.extract.service.EntityDisambiguator - 实体消歧义处理完成，处理了2个三元组
2025-06-27 16:29:01.234 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.RelationValidator - 开始关系验证处理
2025-06-27 16:29:01.234 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.RelationValidator - 关系验证处理完成，验证了2个三元组
2025-06-27 16:29:01.260 [ForkJoinPool.commonPool-worker-4] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 知识图谱增强处理完成，模式: enhanced
2025-06-27 16:29:01.264 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 652
2025-06-27 16:29:01.264 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"职业","object":"北京电影学院摄影系教授","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012941233,"relation_validation_applied":true,"validation_timestamp":1751012941234,"kg_mode":"enhanced","processed_at":1751012941234,"enhancement_applied":true}
2025-06-27 16:29:01.264 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"职业","object":"北京电影学院摄影系教授","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012941233,"relation_validation_applied":true,"validation_timestamp":1751012941234,"kg_mode":"enhanced","processed_at":1751012941234,"enhancement_applied":true}
2025-06-27 16:29:01.268 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 8 个主要字段: [triples, disambiguation_applied, disambiguation_timestamp, relation_validation_applied, validation_timestamp, kg_mode, processed_at, enhancement_applied]
2025-06-27 16:29:01.268 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组，包括实体和关系保存
2025-06-27 16:29:01.271 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:01.274 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:29:01.275 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:01.277 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-27 16:29:01.279 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:01.287 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:01.297 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:29:01.305 [ForkJoinPool.commonPool-worker-4] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:29:01.305 [ForkJoinPool.commonPool-worker-4] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:29:01.309 [ForkJoinPool.commonPool-worker-4] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《红高粱》 [导演], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:29:01.310 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《红高粱》
2025-06-27 16:29:01.311 [ForkJoinPool.commonPool-worker-4] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:01.311 [ForkJoinPool.commonPool-worker-4] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:01.312 [ForkJoinPool.commonPool-worker-4] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:01.312 [ForkJoinPool.commonPool-worker-4] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 北京电影学院摄影系教授 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:01.314 [ForkJoinPool.commonPool-worker-4] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:01.315 [ForkJoinPool.commonPool-worker-4] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 北京电影学院摄影系教授 [职业], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:01.320 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[职业]--> 北京电影学院摄影系教授
2025-06-27 16:29:01.320 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:29:01.324 [ForkJoinPool.commonPool-worker-4] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012932445_6128, Duration: 8878ms
2025-06-27 16:29:02.597 [reactor-http-nio-6] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 10184ms，响应长度: 360
2025-06-27 16:29:02.598 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 43，处理模式: 直接处理
2025-06-27 16:29:02.599 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 39 字符
2025-06-27 16:29:02.600 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:29:02.600 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 39，当前并发数: 4
2025-06-27 16:29:02.601 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:29:02.606 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 360
2025-06-27 16:29:02.608 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "巩俐",
      "predicate": "主演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "属于",
      "object": "第五代导演代表人物",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:29:02.609 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "巩俐",
      "predicate": "主演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "属于",
      "object": "第五代导演代表人物",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:29:02.611 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-27 16:29:02.611 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-27 16:29:02.613 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:02.620 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:29:02.621 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:02.624 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-27 16:29:02.626 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:02.634 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:02.647 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:29:02.648 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 40, ExtractParams: entities,relations, KgMode: fusion
2025-06-27 16:29:02.648 [reactor-http-nio-2] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012942648_6ef6, KgMode: fusion, TextLength: 40
2025-06-27 16:29:02.649 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 40 字符
2025-06-27 16:29:02.649 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:29:02.649 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 40，当前并发数: 5
2025-06-27 16:29:02.649 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:29:02.654 [ForkJoinPool.commonPool-worker-1] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:29:02.654 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:29:02.655 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《红高粱》 [导演], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:29:02.655 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《红高粱》
2025-06-27 16:29:02.657 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:02.657 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 巩俐 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:02.660 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:02.661 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 《红高粱》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:02.662 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:02.662 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 巩俐 -> 《红高粱》 [主演], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:02.662 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 巩俐 --[主演]--> 《红高粱》
2025-06-27 16:29:02.665 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:02.665 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:02.666 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[属于]--> 第五代导演代表人物
2025-06-27 16:29:02.666 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:29:02.669 [ForkJoinPool.commonPool-worker-1] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012932398_d45a, Duration: 10265ms
2025-06-27 16:29:04.686 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 40, ExtractParams: entities,relations, KgMode: fusion
2025-06-27 16:29:04.686 [reactor-http-nio-2] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012944686_213f, KgMode: fusion, TextLength: 40
2025-06-27 16:29:05.786 [reactor-http-nio-7] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 11287ms，响应长度: 469
2025-06-27 16:29:05.788 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 39，处理模式: 直接处理
2025-06-27 16:29:05.788 [ForkJoinPool.commonPool-worker-5] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 开始知识图谱增强处理，模式: enhanced
2025-06-27 16:29:05.788 [ForkJoinPool.commonPool-worker-5] INFO  c.datacenter.extract.service.EntityDisambiguator - 开始实体消歧义处理
2025-06-27 16:29:05.795 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:05.801 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:05.808 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:05.817 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:05.827 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:05.842 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:05.848 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:05.855 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:05.860 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:05.866 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:05.872 [ForkJoinPool.commonPool-worker-5] INFO  c.datacenter.extract.service.EntityDisambiguator - 实体消歧义处理完成，处理了4个三元组
2025-06-27 16:29:05.872 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.RelationValidator - 开始关系验证处理
2025-06-27 16:29:05.872 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.RelationValidator - 关系验证处理完成，验证了4个三元组
2025-06-27 16:29:05.873 [ForkJoinPool.commonPool-worker-5] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 知识图谱增强处理完成，模式: enhanced
2025-06-27 16:29:05.874 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 1059
2025-06-27 16:29:05.874 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"张艺谋","predicate":"拍摄","object":"《英雄》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"参与拍摄","object":"《大红灯笼高高挂》","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"职业","object":"导演","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"职业","object":"摄影师","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012945872,"relation_validation_applied":true,"validation_timestamp":1751012945872,"kg_mode":"enhanced","processed_at":1751012945872,"enhancement_applied":true}
2025-06-27 16:29:05.874 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"张艺谋","predicate":"拍摄","object":"《英雄》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"参与拍摄","object":"《大红灯笼高高挂》","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"职业","object":"导演","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"职业","object":"摄影师","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012945872,"relation_validation_applied":true,"validation_timestamp":1751012945872,"kg_mode":"enhanced","processed_at":1751012945872,"enhancement_applied":true}
2025-06-27 16:29:05.874 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 8 个主要字段: [triples, disambiguation_applied, disambiguation_timestamp, relation_validation_applied, validation_timestamp, kg_mode, processed_at, enhancement_applied]
2025-06-27 16:29:05.874 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-27 16:29:05.875 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:05.878 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:29:05.880 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select w1_0.id from work w1_0 where w1_0.title=? limit ?
2025-06-27 16:29:05.882 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 作品 《英雄》 已存在，跳过插入
2025-06-27 16:29:05.884 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:05.888 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select w1_0.id,w1_0.awards,w1_0.baike,w1_0.description,w1_0.`group`,w1_0.platform,w1_0.release_date,w1_0.role,w1_0.title,w1_0.work_id,w1_0.work_type from work w1_0 where w1_0.title=?
2025-06-27 16:29:05.891 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - insert into celebrity_work (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:29:05.893 [ForkJoinPool.commonPool-worker-5] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:29:05.893 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:29:05.894 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《英雄》 [拍摄], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_work (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_work (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:29:05.894 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[拍摄]--> 《英雄》
2025-06-27 16:29:05.896 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:05.896 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:05.897 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:05.898 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《大红灯笼高高挂》 失败: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:05.901 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:05.901 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《大红灯笼高高挂》 [参与拍摄], 错误: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:05.901 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[参与拍摄]--> 《大红灯笼高高挂》
2025-06-27 16:29:05.902 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:05.902 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:05.903 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:05.903 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 导演 失败: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:05.903 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:05.903 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 导演 [职业], 错误: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:05.903 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[职业]--> 导演
2025-06-27 16:29:05.904 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:05.904 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:05.904 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:05.904 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 摄影师 失败: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:05.905 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:05.905 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 摄影师 [职业], 错误: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:05.905 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[职业]--> 摄影师
2025-06-27 16:29:05.905 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:29:05.908 [ForkJoinPool.commonPool-worker-5] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012934496_7913, Duration: 11412ms
2025-06-27 16:29:06.720 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 47, ExtractParams: entities,relations, KgMode: fusion
2025-06-27 16:29:06.720 [reactor-http-nio-2] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012946720_bbc5, KgMode: fusion, TextLength: 47
2025-06-27 16:29:06.720 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 47 字符
2025-06-27 16:29:06.720 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:29:06.720 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 47，当前并发数: 5
2025-06-27 16:29:06.720 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:29:08.763 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 48, ExtractParams: entities,relations, KgMode: fusion
2025-06-27 16:29:08.763 [reactor-http-nio-2] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012948763_b8c6, KgMode: fusion, TextLength: 48
2025-06-27 16:29:08.764 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 48 字符
2025-06-27 16:29:08.764 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:29:10.799 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 54, ExtractParams: entities,relations, KgMode: fusion
2025-06-27 16:29:10.799 [reactor-http-nio-2] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012950799_5bc9, KgMode: fusion, TextLength: 54
2025-06-27 16:29:10.800 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 54 字符
2025-06-27 16:29:10.800 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:29:12.239 [reactor-http-nio-8] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 13655ms，响应长度: 578
2025-06-27 16:29:12.240 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 48，当前并发数: 5
2025-06-27 16:29:12.240 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:29:12.240 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 42，处理模式: 直接处理
2025-06-27 16:29:12.242 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 40 字符
2025-06-27 16:29:12.242 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:29:12.243 [ForkJoinPool.commonPool-worker-7] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 开始知识图谱增强处理，模式: enhanced
2025-06-27 16:29:12.243 [ForkJoinPool.commonPool-worker-7] INFO  c.datacenter.extract.service.EntityDisambiguator - 开始实体消歧义处理
2025-06-27 16:29:12.254 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:12.261 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:12.269 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:12.280 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:12.286 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:12.296 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:12.303 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:12.307 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:12.313 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:12.319 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:12.329 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:12.333 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:12.336 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:12.341 [ForkJoinPool.commonPool-worker-7] INFO  c.datacenter.extract.service.EntityDisambiguator - 实体消歧义处理完成，处理了5个三元组
2025-06-27 16:29:12.342 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.RelationValidator - 开始关系验证处理
2025-06-27 16:29:12.342 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.RelationValidator - 关系验证处理完成，验证了5个三元组
2025-06-27 16:29:12.346 [ForkJoinPool.commonPool-worker-7] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 知识图谱增强处理完成，模式: enhanced
2025-06-27 16:29:12.347 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 1262
2025-06-27 16:29:12.347 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"张艺谋","predicate":"职业","object":"导演","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"职业","object":"摄影师","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"作品","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"参与作品","object":"《黄土地》","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"参与角色","object":"摄影师","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012952341,"relation_validation_applied":true,"validation_timestamp":1751012952342,"kg_mode":"enhanced","processed_at":1751012952342,"enhancement_applied":true}
2025-06-27 16:29:12.347 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"张艺谋","predicate":"职业","object":"导演","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"职业","object":"摄影师","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"作品","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"参与作品","object":"《黄土地》","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"参与角色","object":"摄影师","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012952341,"relation_validation_applied":true,"validation_timestamp":1751012952342,"kg_mode":"enhanced","processed_at":1751012952342,"enhancement_applied":true}
2025-06-27 16:29:12.351 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 8 个主要字段: [triples, disambiguation_applied, disambiguation_timestamp, relation_validation_applied, validation_timestamp, kg_mode, processed_at, enhancement_applied]
2025-06-27 16:29:12.351 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 处理 5 个三元组，包括实体和关系保存
2025-06-27 16:29:12.352 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:12.355 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:29:12.356 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:12.357 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 人员 导演 已存在，跳过插入
2025-06-27 16:29:12.358 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:12.360 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:12.361 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:29:12.362 [ForkJoinPool.commonPool-worker-7] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:29:12.362 [ForkJoinPool.commonPool-worker-7] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:29:12.362 [ForkJoinPool.commonPool-worker-7] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 导演 [职业], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:29:12.362 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[职业]--> 导演
2025-06-27 16:29:12.363 [ForkJoinPool.commonPool-worker-7] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:12.364 [ForkJoinPool.commonPool-worker-7] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:12.364 [ForkJoinPool.commonPool-worker-7] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:12.365 [ForkJoinPool.commonPool-worker-7] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 摄影师 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:12.365 [ForkJoinPool.commonPool-worker-7] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:12.365 [ForkJoinPool.commonPool-worker-7] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 摄影师 [职业], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:12.365 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[职业]--> 摄影师
2025-06-27 16:29:12.366 [ForkJoinPool.commonPool-worker-7] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:12.366 [ForkJoinPool.commonPool-worker-7] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:12.367 [ForkJoinPool.commonPool-worker-7] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:12.368 [ForkJoinPool.commonPool-worker-7] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《红高粱》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:12.368 [ForkJoinPool.commonPool-worker-7] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:12.368 [ForkJoinPool.commonPool-worker-7] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《红高粱》 [作品], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:12.368 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[作品]--> 《红高粱》
2025-06-27 16:29:12.369 [ForkJoinPool.commonPool-worker-7] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:12.369 [ForkJoinPool.commonPool-worker-7] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:12.370 [ForkJoinPool.commonPool-worker-7] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:12.370 [ForkJoinPool.commonPool-worker-7] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《黄土地》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:12.370 [ForkJoinPool.commonPool-worker-7] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:12.370 [ForkJoinPool.commonPool-worker-7] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《黄土地》 [参与作品], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:12.370 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[参与作品]--> 《黄土地》
2025-06-27 16:29:12.371 [ForkJoinPool.commonPool-worker-7] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:12.372 [ForkJoinPool.commonPool-worker-7] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:12.372 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[参与角色]--> 摄影师
2025-06-27 16:29:12.372 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:29:12.373 [ForkJoinPool.commonPool-worker-7] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012938579_24e8, Duration: 13794ms
2025-06-27 16:29:12.843 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 56, ExtractParams: entities,relations, KgMode: fusion
2025-06-27 16:29:12.843 [reactor-http-nio-2] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012952843_e08, KgMode: fusion, TextLength: 56
2025-06-27 16:29:12.844 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 56 字符
2025-06-27 16:29:12.844 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:29:14.606 [reactor-http-nio-9] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 13573ms，响应长度: 578
2025-06-27 16:29:14.606 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 54，当前并发数: 5
2025-06-27 16:29:14.606 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 39，处理模式: 直接处理
2025-06-27 16:29:14.606 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:29:14.607 [ForkJoinPool.commonPool-worker-8] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 开始知识图谱增强处理，模式: enhanced
2025-06-27 16:29:14.607 [ForkJoinPool.commonPool-worker-8] INFO  c.datacenter.extract.service.EntityDisambiguator - 开始实体消歧义处理
2025-06-27 16:29:14.620 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.627 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.633 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.638 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.643 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:14.649 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 12048ms，响应长度: 469
2025-06-27 16:29:14.649 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 39，处理模式: 直接处理
2025-06-27 16:29:14.649 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 40，当前并发数: 5
2025-06-27 16:29:14.649 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:29:14.650 [ForkJoinPool.commonPool-worker-6] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 开始知识图谱增强处理，模式: enhanced
2025-06-27 16:29:14.650 [ForkJoinPool.commonPool-worker-6] INFO  c.datacenter.extract.service.EntityDisambiguator - 开始实体消歧义处理
2025-06-27 16:29:14.652 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 开始知识图谱增强处理，模式: fusion
2025-06-27 16:29:14.652 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 开始知识图谱增强处理，模式: enhanced
2025-06-27 16:29:14.653 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.EntityDisambiguator - 开始实体消歧义处理
2025-06-27 16:29:14.653 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.service.EntityDisambiguator - 开始实体消歧义处理
2025-06-27 16:29:14.657 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.660 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.660 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.662 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.668 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.668 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.668 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.672 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.673 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.673 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.680 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.680 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.680 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.695 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.695 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.695 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.695 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.701 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.702 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:14.703 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.703 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.705 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:14.707 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:14.707 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:14.708 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.EntityDisambiguator - 实体消歧义处理完成，处理了3个三元组
2025-06-27 16:29:14.708 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.RelationValidator - 开始关系验证处理
2025-06-27 16:29:14.708 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.RelationValidator - 关系验证处理完成，验证了3个三元组
2025-06-27 16:29:14.710 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 知识图谱增强处理完成，模式: enhanced
2025-06-27 16:29:14.711 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 856
2025-06-27 16:29:14.711 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"巩俐","predicate":"主演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"属于","object":"第五代导演代表人物","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012954708,"relation_validation_applied":true,"validation_timestamp":1751012954708,"kg_mode":"enhanced","processed_at":1751012954708,"enhancement_applied":true}
2025-06-27 16:29:14.711 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"巩俐","predicate":"主演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"属于","object":"第五代导演代表人物","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012954708,"relation_validation_applied":true,"validation_timestamp":1751012954708,"kg_mode":"enhanced","processed_at":1751012954708,"enhancement_applied":true}
2025-06-27 16:29:14.717 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 8 个主要字段: [triples, disambiguation_applied, disambiguation_timestamp, relation_validation_applied, validation_timestamp, kg_mode, processed_at, enhancement_applied]
2025-06-27 16:29:14.717 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-27 16:29:14.719 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:14.719 [ForkJoinPool.commonPool-worker-8] INFO  c.datacenter.extract.service.EntityDisambiguator - 实体消歧义处理完成，处理了5个三元组
2025-06-27 16:29:14.719 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.service.EntityDisambiguator - 实体消歧义处理完成，处理了3个三元组
2025-06-27 16:29:14.719 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.KnowledgeFusion - 开始知识融合处理
2025-06-27 16:29:14.719 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.RelationValidator - 开始关系验证处理
2025-06-27 16:29:14.719 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.KnowledgeFusion - 知识融合处理完成，处理了3个三元组
2025-06-27 16:29:14.719 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.RelationValidator - 关系验证处理完成，验证了5个三元组
2025-06-27 16:29:14.719 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.RelationValidator - 开始关系验证处理
2025-06-27 16:29:14.719 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.RelationValidator - 关系验证处理完成，验证了3个三元组
2025-06-27 16:29:14.719 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.QualityAssessor - 开始质量评估处理
2025-06-27 16:29:14.722 [ForkJoinPool.commonPool-worker-8] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 知识图谱增强处理完成，模式: enhanced
2025-06-27 16:29:14.723 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 1263
2025-06-27 16:29:14.723 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《英雄》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"《英雄》","predicate":"获奖","object":"无数","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"主演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"巩俐","predicate":"主演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"《红高粱》","predicate":"评价","object":"深受好评","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012954719,"relation_validation_applied":true,"validation_timestamp":1751012954719,"kg_mode":"enhanced","processed_at":1751012954719,"enhancement_applied":true}
2025-06-27 16:29:14.723 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《英雄》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"《英雄》","predicate":"获奖","object":"无数","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"主演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"巩俐","predicate":"主演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"《红高粱》","predicate":"评价","object":"深受好评","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012954719,"relation_validation_applied":true,"validation_timestamp":1751012954719,"kg_mode":"enhanced","processed_at":1751012954719,"enhancement_applied":true}
2025-06-27 16:29:14.723 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 8 个主要字段: [triples, disambiguation_applied, disambiguation_timestamp, relation_validation_applied, validation_timestamp, kg_mode, processed_at, enhancement_applied]
2025-06-27 16:29:14.724 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 处理 5 个三元组，包括实体和关系保存
2025-06-27 16:29:14.724 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.724 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:14.724 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:29:14.725 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:14.725 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:29:14.726 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-27 16:29:14.726 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:14.727 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.729 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 人员 《英雄》 已存在，跳过插入
2025-06-27 16:29:14.730 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.730 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.730 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.732 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:29:14.732 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.733 [ForkJoinPool.commonPool-worker-2] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:29:14.733 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:14.733 [ForkJoinPool.commonPool-worker-2] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:29:14.733 [ForkJoinPool.commonPool-worker-2] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《红高粱》 [导演], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:29:14.733 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《红高粱》
2025-06-27 16:29:14.733 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:29:14.734 [ForkJoinPool.commonPool-worker-8] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:29:14.734 [ForkJoinPool.commonPool-worker-8] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:29:14.735 [ForkJoinPool.commonPool-worker-8] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《英雄》 [导演], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:29:14.735 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《英雄》
2025-06-27 16:29:14.735 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.QualityAssessor - 质量评估完成，总分: {:.2f}
2025-06-27 16:29:14.735 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 知识图谱增强处理完成，模式: fusion
2025-06-27 16:29:14.737 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 1153
2025-06-27 16:29:14.737 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"巩俐","predicate":"主演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"属于","object":"第五代导演代表人物","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012954719,"knowledge_fusion_applied":true,"fusion_timestamp":1751012954719,"relation_validation_applied":true,"validation_timestamp":1751012954719,"quality_score":0.8000000000000002,"quality_grade":"GOOD","assessment_timestamp":1751012954720,"kg_mode":"fusion","processed_at":1751012954735,"full_processing_applied":true}
2025-06-27 16:29:14.737 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"巩俐","predicate":"主演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"属于","object":"第五代导演代表人物","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012954719,"knowledge_fusion_applied":true,"fusion_timestamp":1751012954719,"relation_validation_applied":true,"validation_timestamp":1751012954719,"quality_score":0.8000000000000002,"quality_grade":"GOOD","assessment_timestamp":1751012954720,"kg_mode":"fusion","processed_at":1751012954735,"full_processing_applied":true}
2025-06-27 16:29:14.739 [ForkJoinPool.commonPool-worker-2] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.739 [ForkJoinPool.commonPool-worker-8] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.740 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 13 个主要字段: [triples, disambiguation_applied, disambiguation_timestamp, knowledge_fusion_applied, fusion_timestamp, relation_validation_applied, validation_timestamp, quality_score, quality_grade, assessment_timestamp, kg_mode, processed_at, full_processing_applied]
2025-06-27 16:29:14.740 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-27 16:29:14.740 [ForkJoinPool.commonPool-worker-8] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《英雄》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.740 [ForkJoinPool.commonPool-worker-2] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 巩俐 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.740 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《英雄》 --[获奖]--> 无数
2025-06-27 16:29:14.742 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:14.743 [ForkJoinPool.commonPool-worker-2] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.743 [ForkJoinPool.commonPool-worker-8] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.743 [ForkJoinPool.commonPool-worker-2] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 《红高粱》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.743 [ForkJoinPool.commonPool-worker-8] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.743 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.744 [ForkJoinPool.commonPool-worker-2] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.744 [ForkJoinPool.commonPool-worker-8] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.744 [ForkJoinPool.commonPool-worker-2] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 巩俐 -> 《红高粱》 [主演], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.744 [ForkJoinPool.commonPool-worker-8] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 《红高粱》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.744 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 巩俐 --[主演]--> 《红高粱》
2025-06-27 16:29:14.748 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:29:14.750 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:14.750 [ForkJoinPool.commonPool-worker-2] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.750 [ForkJoinPool.commonPool-worker-2] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.750 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[属于]--> 第五代导演代表人物
2025-06-27 16:29:14.750 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:29:14.750 [ForkJoinPool.commonPool-worker-8] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.750 [ForkJoinPool.commonPool-worker-8] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《红高粱》 [主演], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.750 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[主演]--> 《红高粱》
2025-06-27 16:29:14.751 [ForkJoinPool.commonPool-worker-2] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012932435_8823, Duration: 22316ms
2025-06-27 16:29:14.752 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-27 16:29:14.752 [ForkJoinPool.commonPool-worker-8] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.752 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:14.752 [ForkJoinPool.commonPool-worker-8] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 巩俐 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.753 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.753 [ForkJoinPool.commonPool-worker-8] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.753 [ForkJoinPool.commonPool-worker-8] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 《红高粱》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.753 [ForkJoinPool.commonPool-worker-8] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.754 [ForkJoinPool.commonPool-worker-8] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 巩俐 -> 《红高粱》 [主演], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.754 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 巩俐 --[主演]--> 《红高粱》
2025-06-27 16:29:14.756 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.756 [ForkJoinPool.commonPool-worker-8] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.756 [ForkJoinPool.commonPool-worker-8] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《红高粱》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.756 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《红高粱》 --[评价]--> 深受好评
2025-06-27 16:29:14.756 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:29:14.758 [ForkJoinPool.commonPool-worker-8] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012940618_8010, Duration: 14140ms
2025-06-27 16:29:14.758 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:29:14.760 [ForkJoinPool.commonPool-worker-3] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:29:14.760 [ForkJoinPool.commonPool-worker-3] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:29:14.760 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《红高粱》 [导演], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:29:14.760 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《红高粱》
2025-06-27 16:29:14.763 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.763 [ForkJoinPool.commonPool-worker-3] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.763 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 巩俐 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.763 [ForkJoinPool.commonPool-worker-3] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.764 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 《红高粱》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.764 [ForkJoinPool.commonPool-worker-3] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.764 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 巩俐 -> 《红高粱》 [主演], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.764 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 巩俐 --[主演]--> 《红高粱》
2025-06-27 16:29:14.765 [ForkJoinPool.commonPool-worker-3] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.765 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.765 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[属于]--> 第五代导演代表人物
2025-06-27 16:29:14.765 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:29:14.766 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:14.767 [ForkJoinPool.commonPool-worker-3] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012932441_780, Duration: 22326ms
2025-06-27 16:29:14.773 [ForkJoinPool.commonPool-worker-6] INFO  c.datacenter.extract.service.EntityDisambiguator - 实体消歧义处理完成，处理了4个三元组
2025-06-27 16:29:14.773 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.RelationValidator - 开始关系验证处理
2025-06-27 16:29:14.773 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.RelationValidator - 关系验证处理完成，验证了4个三元组
2025-06-27 16:29:14.773 [ForkJoinPool.commonPool-worker-6] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 知识图谱增强处理完成，模式: enhanced
2025-06-27 16:29:14.773 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 1061
2025-06-27 16:29:14.773 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"《红高粱》","predicate":"上映时间","object":"1987年","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"导演","object":"满江红","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"满江红","predicate":"上映时间","object":"2023年","confidence":0.95,"subject_confidence":1.0,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012954773,"relation_validation_applied":true,"validation_timestamp":1751012954773,"kg_mode":"enhanced","processed_at":1751012954773,"enhancement_applied":true}
2025-06-27 16:29:14.774 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"《红高粱》","predicate":"上映时间","object":"1987年","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"导演","object":"满江红","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9},{"subject":"满江红","predicate":"上映时间","object":"2023年","confidence":0.95,"subject_confidence":1.0,"object_confidence":1.0,"disambiguation_applied":true,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012954773,"relation_validation_applied":true,"validation_timestamp":1751012954773,"kg_mode":"enhanced","processed_at":1751012954773,"enhancement_applied":true}
2025-06-27 16:29:14.775 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 8 个主要字段: [triples, disambiguation_applied, disambiguation_timestamp, relation_validation_applied, validation_timestamp, kg_mode, processed_at, enhancement_applied]
2025-06-27 16:29:14.775 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-27 16:29:14.775 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:14.777 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:29:14.778 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:14.780 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-27 16:29:14.781 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.784 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:14.786 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:29:14.787 [ForkJoinPool.commonPool-worker-6] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:29:14.787 [ForkJoinPool.commonPool-worker-6] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:29:14.787 [ForkJoinPool.commonPool-worker-6] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《红高粱》 [导演], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:29:14.787 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《红高粱》
2025-06-27 16:29:14.788 [ForkJoinPool.commonPool-worker-6] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.788 [ForkJoinPool.commonPool-worker-6] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《红高粱》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.788 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《红高粱》 --[上映时间]--> 1987年
2025-06-27 16:29:14.788 [ForkJoinPool.commonPool-worker-6] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.789 [ForkJoinPool.commonPool-worker-6] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.789 [ForkJoinPool.commonPool-worker-6] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.789 [ForkJoinPool.commonPool-worker-6] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 满江红 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.790 [ForkJoinPool.commonPool-worker-6] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.790 [ForkJoinPool.commonPool-worker-6] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 满江红 [导演], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:14.790 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 满江红
2025-06-27 16:29:14.790 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 满江红 --[上映时间]--> 2023年
2025-06-27 16:29:14.790 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:29:14.792 [ForkJoinPool.commonPool-worker-6] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012936539_61cd, Duration: 18253ms
2025-06-27 16:29:14.865 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 40, ExtractParams: entities,relations, KgMode: fusion
2025-06-27 16:29:14.865 [reactor-http-nio-2] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012954865_d7ea, KgMode: fusion, TextLength: 40
2025-06-27 16:29:14.865 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 40 字符
2025-06-27 16:29:14.865 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:29:15.689 [reactor-http-nio-6] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 13040ms，响应长度: 577
2025-06-27 16:29:15.690 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 40，处理模式: 直接处理
2025-06-27 16:29:15.690 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 56，当前并发数: 5
2025-06-27 16:29:15.690 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:29:15.690 [ForkJoinPool.commonPool-worker-4] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 开始知识图谱增强处理，模式: fusion
2025-06-27 16:29:15.691 [ForkJoinPool.commonPool-worker-4] INFO  c.datacenter.extract.service.EntityDisambiguator - 开始实体消歧义处理
2025-06-27 16:29:15.711 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:15.718 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:15.724 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:15.732 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:15.738 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:15.743 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:15.748 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:15.751 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:15.757 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:15.764 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:15.770 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:15.773 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:15.777 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:15.781 [ForkJoinPool.commonPool-worker-4] INFO  c.datacenter.extract.service.EntityDisambiguator - 实体消歧义处理完成，处理了5个三元组
2025-06-27 16:29:15.781 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.KnowledgeFusion - 开始知识融合处理
2025-06-27 16:29:15.781 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.KnowledgeFusion - 知识融合处理完成，处理了5个三元组
2025-06-27 16:29:15.781 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.RelationValidator - 开始关系验证处理
2025-06-27 16:29:15.781 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.RelationValidator - 关系验证处理完成，验证了5个三元组
2025-06-27 16:29:15.781 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.QualityAssessor - 开始质量评估处理
2025-06-27 16:29:15.796 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.QualityAssessor - 质量评估完成，总分: {:.2f}
2025-06-27 16:29:15.797 [ForkJoinPool.commonPool-worker-4] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 知识图谱增强处理完成，模式: fusion
2025-06-27 16:29:15.797 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 1633
2025-06-27 16:29:15.798 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"张艺谋","predicate":"性别","object":"男","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"出生于","object":"1950年","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"职业","object":"导演","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"国籍","object":"中国","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"毕业于","object":"北京电影学院摄影系","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012955781,"knowledge_fusion_applied":true,"fusion_timestamp":1751012955781,"relation_validation_applied":true,"validation_timestamp":1751012955781,"quality_score":0.8,"quality_grade":"GOOD","assessment_timestamp":1751012955781,"kg_mode":"fusion","processed_at":1751012955796,"full_processing_applied":true}
2025-06-27 16:29:15.798 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"张艺谋","predicate":"性别","object":"男","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"出生于","object":"1950年","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"职业","object":"导演","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"国籍","object":"中国","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"毕业于","object":"北京电影学院摄影系","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012955781,"knowledge_fusion_applied":true,"fusion_timestamp":1751012955781,"relation_validation_applied":true,"validation_timestamp":1751012955781,"quality_score":0.8,"quality_grade":"GOOD","assessment_timestamp":1751012955781,"kg_mode":"fusion","processed_at":1751012955796,"full_processing_applied":true}
2025-06-27 16:29:15.799 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 13 个主要字段: [triples, disambiguation_applied, disambiguation_timestamp, knowledge_fusion_applied, fusion_timestamp, relation_validation_applied, validation_timestamp, quality_score, quality_grade, assessment_timestamp, kg_mode, processed_at, full_processing_applied]
2025-06-27 16:29:15.799 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 处理 5 个三元组，包括实体和关系保存
2025-06-27 16:29:15.800 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:15.802 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:29:15.802 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[性别]--> 男
2025-06-27 16:29:15.802 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:15.803 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:29:15.804 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:15.804 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 人员 1950年 已存在，跳过插入
2025-06-27 16:29:15.805 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:15.809 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:15.810 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:29:15.811 [ForkJoinPool.commonPool-worker-4] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:29:15.812 [ForkJoinPool.commonPool-worker-4] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:29:15.812 [ForkJoinPool.commonPool-worker-4] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 1950年 [出生于], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:29:15.812 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[出生于]--> 1950年
2025-06-27 16:29:15.813 [ForkJoinPool.commonPool-worker-4] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:15.813 [ForkJoinPool.commonPool-worker-4] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:15.813 [ForkJoinPool.commonPool-worker-4] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:15.814 [ForkJoinPool.commonPool-worker-4] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 导演 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:15.814 [ForkJoinPool.commonPool-worker-4] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:15.814 [ForkJoinPool.commonPool-worker-4] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 导演 [职业], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:15.814 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[职业]--> 导演
2025-06-27 16:29:15.815 [ForkJoinPool.commonPool-worker-4] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:15.815 [ForkJoinPool.commonPool-worker-4] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:15.815 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[国籍]--> 中国
2025-06-27 16:29:15.819 [ForkJoinPool.commonPool-worker-4] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:15.819 [ForkJoinPool.commonPool-worker-4] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:15.820 [ForkJoinPool.commonPool-worker-4] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:15.820 [ForkJoinPool.commonPool-worker-4] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 北京电影学院摄影系 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:15.821 [ForkJoinPool.commonPool-worker-4] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:15.821 [ForkJoinPool.commonPool-worker-4] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 北京电影学院摄影系 [毕业于], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:15.821 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[毕业于]--> 北京电影学院摄影系
2025-06-27 16:29:15.821 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:29:15.823 [ForkJoinPool.commonPool-worker-4] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012942648_6ef6, Duration: 13175ms
2025-06-27 16:29:16.896 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 43, ExtractParams: entities,relations, KgMode: fusion
2025-06-27 16:29:16.896 [reactor-http-nio-2] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012956896_5a2b, KgMode: fusion, TextLength: 43
2025-06-27 16:29:16.896 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 43 字符
2025-06-27 16:29:16.896 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:29:18.926 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 36, ExtractParams: entities,relations, KgMode: fusion
2025-06-27 16:29:18.926 [reactor-http-nio-2] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012958926_2b0c, KgMode: fusion, TextLength: 36
2025-06-27 16:29:18.926 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 36 字符
2025-06-27 16:29:18.926 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:29:20.364 [reactor-http-nio-7] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 13644ms，响应长度: 582
2025-06-27 16:29:20.364 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 47，处理模式: 直接处理
2025-06-27 16:29:20.364 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 40，当前并发数: 5
2025-06-27 16:29:20.365 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:29:20.365 [ForkJoinPool.commonPool-worker-5] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 开始知识图谱增强处理，模式: fusion
2025-06-27 16:29:20.365 [ForkJoinPool.commonPool-worker-5] INFO  c.datacenter.extract.service.EntityDisambiguator - 开始实体消歧义处理
2025-06-27 16:29:20.378 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:20.384 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:20.392 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:20.397 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:20.400 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:20.405 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:20.412 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:20.420 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:20.425 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:20.430 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:20.438 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:20.442 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:20.446 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:20.451 [ForkJoinPool.commonPool-worker-5] INFO  c.datacenter.extract.service.EntityDisambiguator - 实体消歧义处理完成，处理了5个三元组
2025-06-27 16:29:20.451 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.KnowledgeFusion - 开始知识融合处理
2025-06-27 16:29:20.451 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.KnowledgeFusion - 知识融合处理完成，处理了5个三元组
2025-06-27 16:29:20.451 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.RelationValidator - 开始关系验证处理
2025-06-27 16:29:20.451 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.RelationValidator - 关系验证处理完成，验证了5个三元组
2025-06-27 16:29:20.451 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.QualityAssessor - 开始质量评估处理
2025-06-27 16:29:20.475 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.QualityAssessor - 质量评估完成，总分: {:.2f}
2025-06-27 16:29:20.476 [ForkJoinPool.commonPool-worker-5] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 知识图谱增强处理完成，模式: fusion
2025-06-27 16:29:20.477 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 1638
2025-06-27 16:29:20.478 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"张艺谋","predicate":"合作","object":"巩俐","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"作品","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"作品","object":"《大红灯笼高高挂》","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"属于","object":"第五代导演","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"陈凯歌","predicate":"属于","object":"第五代导演","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012960451,"knowledge_fusion_applied":true,"fusion_timestamp":1751012960451,"relation_validation_applied":true,"validation_timestamp":1751012960451,"quality_score":0.8,"quality_grade":"GOOD","assessment_timestamp":1751012960451,"kg_mode":"fusion","processed_at":1751012960475,"full_processing_applied":true}
2025-06-27 16:29:20.478 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"张艺谋","predicate":"合作","object":"巩俐","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"作品","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"作品","object":"《大红灯笼高高挂》","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"属于","object":"第五代导演","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"陈凯歌","predicate":"属于","object":"第五代导演","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012960451,"knowledge_fusion_applied":true,"fusion_timestamp":1751012960451,"relation_validation_applied":true,"validation_timestamp":1751012960451,"quality_score":0.8,"quality_grade":"GOOD","assessment_timestamp":1751012960451,"kg_mode":"fusion","processed_at":1751012960475,"full_processing_applied":true}
2025-06-27 16:29:20.481 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 13 个主要字段: [triples, disambiguation_applied, disambiguation_timestamp, knowledge_fusion_applied, fusion_timestamp, relation_validation_applied, validation_timestamp, quality_score, quality_grade, assessment_timestamp, kg_mode, processed_at, full_processing_applied]
2025-06-27 16:29:20.481 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 处理 5 个三元组，包括实体和关系保存
2025-06-27 16:29:20.483 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:20.485 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:29:20.486 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:20.488 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 人员 巩俐 已存在，跳过插入
2025-06-27 16:29:20.489 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:20.491 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:20.492 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:29:20.493 [ForkJoinPool.commonPool-worker-5] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:29:20.494 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:29:20.494 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 巩俐 [合作], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:29:20.494 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[合作]--> 巩俐
2025-06-27 16:29:20.495 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:20.496 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:20.497 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:20.497 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《红高粱》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:20.497 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:20.497 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《红高粱》 [作品], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:20.497 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[作品]--> 《红高粱》
2025-06-27 16:29:20.498 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:20.498 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:20.499 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:20.499 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《大红灯笼高高挂》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:20.499 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:20.500 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《大红灯笼高高挂》 [作品], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:20.500 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[作品]--> 《大红灯笼高高挂》
2025-06-27 16:29:20.500 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:20.500 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:20.500 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[属于]--> 第五代导演
2025-06-27 16:29:20.500 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 陈凯歌 --[属于]--> 第五代导演
2025-06-27 16:29:20.500 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:29:20.503 [ForkJoinPool.commonPool-worker-5] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012946720_bbc5, Duration: 13783ms
2025-06-27 16:29:20.952 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 65, ExtractParams: entities,relations, KgMode: fusion
2025-06-27 16:29:20.953 [reactor-http-nio-2] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012960952_147d, KgMode: fusion, TextLength: 65
2025-06-27 16:29:20.953 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 65 字符
2025-06-27 16:29:20.953 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:29:22.006 [reactor-http-nio-8] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 9765ms，响应长度: 356
2025-06-27 16:29:22.008 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 48，处理模式: 直接处理
2025-06-27 16:29:22.008 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 43，当前并发数: 5
2025-06-27 16:29:22.008 [ForkJoinPool.commonPool-worker-9] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 开始知识图谱增强处理，模式: fusion
2025-06-27 16:29:22.008 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:29:22.009 [ForkJoinPool.commonPool-worker-9] INFO  c.datacenter.extract.service.EntityDisambiguator - 开始实体消歧义处理
2025-06-27 16:29:22.018 [ForkJoinPool.commonPool-worker-9] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:22.026 [ForkJoinPool.commonPool-worker-9] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:22.030 [ForkJoinPool.commonPool-worker-9] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:22.037 [ForkJoinPool.commonPool-worker-9] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:22.044 [ForkJoinPool.commonPool-worker-9] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:22.050 [ForkJoinPool.commonPool-worker-9] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:22.055 [ForkJoinPool.commonPool-worker-9] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:22.061 [ForkJoinPool.commonPool-worker-9] INFO  c.datacenter.extract.service.EntityDisambiguator - 实体消歧义处理完成，处理了3个三元组
2025-06-27 16:29:22.061 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.KnowledgeFusion - 开始知识融合处理
2025-06-27 16:29:22.061 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.KnowledgeFusion - 知识融合处理完成，处理了3个三元组
2025-06-27 16:29:22.061 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.RelationValidator - 开始关系验证处理
2025-06-27 16:29:22.061 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.RelationValidator - 关系验证处理完成，验证了3个三元组
2025-06-27 16:29:22.061 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.QualityAssessor - 开始质量评估处理
2025-06-27 16:29:22.080 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.QualityAssessor - 质量评估完成，总分: {:.2f}
2025-06-27 16:29:22.080 [ForkJoinPool.commonPool-worker-9] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 知识图谱增强处理完成，模式: fusion
2025-06-27 16:29:22.081 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 1149
2025-06-27 16:29:22.081 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"导演","object":"《英雄》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"导演","object":"《满江红》","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012962061,"knowledge_fusion_applied":true,"fusion_timestamp":1751012962061,"relation_validation_applied":true,"validation_timestamp":1751012962061,"quality_score":0.8000000000000002,"quality_grade":"GOOD","assessment_timestamp":1751012962061,"kg_mode":"fusion","processed_at":1751012962080,"full_processing_applied":true}
2025-06-27 16:29:22.081 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"导演","object":"《英雄》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"导演","object":"《满江红》","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012962061,"knowledge_fusion_applied":true,"fusion_timestamp":1751012962061,"relation_validation_applied":true,"validation_timestamp":1751012962061,"quality_score":0.8000000000000002,"quality_grade":"GOOD","assessment_timestamp":1751012962061,"kg_mode":"fusion","processed_at":1751012962080,"full_processing_applied":true}
2025-06-27 16:29:22.089 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 13 个主要字段: [triples, disambiguation_applied, disambiguation_timestamp, knowledge_fusion_applied, fusion_timestamp, relation_validation_applied, validation_timestamp, quality_score, quality_grade, assessment_timestamp, kg_mode, processed_at, full_processing_applied]
2025-06-27 16:29:22.089 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-27 16:29:22.090 [ForkJoinPool.commonPool-worker-9] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:22.091 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:29:22.092 [ForkJoinPool.commonPool-worker-9] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:22.093 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-27 16:29:22.093 [ForkJoinPool.commonPool-worker-9] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:22.099 [ForkJoinPool.commonPool-worker-9] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:22.103 [ForkJoinPool.commonPool-worker-9] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:29:22.105 [ForkJoinPool.commonPool-worker-9] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:29:22.105 [ForkJoinPool.commonPool-worker-9] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:29:22.106 [ForkJoinPool.commonPool-worker-9] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《红高粱》 [导演], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:29:22.106 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《红高粱》
2025-06-27 16:29:22.107 [ForkJoinPool.commonPool-worker-9] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:22.107 [ForkJoinPool.commonPool-worker-9] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:22.109 [ForkJoinPool.commonPool-worker-9] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:22.109 [ForkJoinPool.commonPool-worker-9] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 《英雄》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:22.110 [ForkJoinPool.commonPool-worker-9] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:22.110 [ForkJoinPool.commonPool-worker-9] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《英雄》 [导演], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:22.110 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《英雄》
2025-06-27 16:29:22.111 [ForkJoinPool.commonPool-worker-9] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:22.111 [ForkJoinPool.commonPool-worker-9] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:22.112 [ForkJoinPool.commonPool-worker-9] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:22.112 [ForkJoinPool.commonPool-worker-9] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 《满江红》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:22.117 [ForkJoinPool.commonPool-worker-9] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:22.117 [ForkJoinPool.commonPool-worker-9] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《满江红》 [导演], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:22.117 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《满江红》
2025-06-27 16:29:22.117 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:29:22.121 [ForkJoinPool.commonPool-worker-9] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012948763_b8c6, Duration: 13358ms
2025-06-27 16:29:22.980 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 15, ExtractParams: triples, KgMode: standard
2025-06-27 16:29:22.980 [reactor-http-nio-2] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012962980_dde1, KgMode: standard, TextLength: 15
2025-06-27 16:29:22.980 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 15 字符
2025-06-27 16:29:22.981 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:29:23.046 [reactor-http-nio-9] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 8440ms，响应长度: 140
2025-06-27 16:29:23.046 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 54，处理模式: 直接处理
2025-06-27 16:29:23.046 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 36，当前并发数: 5
2025-06-27 16:29:23.046 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:29:23.046 [ForkJoinPool.commonPool-worker-10] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 开始知识图谱增强处理，模式: fusion
2025-06-27 16:29:23.046 [ForkJoinPool.commonPool-worker-10] INFO  c.datacenter.extract.service.EntityDisambiguator - 开始实体消歧义处理
2025-06-27 16:29:23.049 [reactor-http-nio-10] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 13, ExtractParams: triples, KgMode: standard
2025-06-27 16:29:23.049 [reactor-http-nio-10] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012963049_df79, KgMode: standard, TextLength: 13
2025-06-27 16:29:23.049 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 13 字符
2025-06-27 16:29:23.049 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:29:23.053 [reactor-http-nio-6] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 16, ExtractParams: triples, KgMode: standard
2025-06-27 16:29:23.053 [reactor-http-nio-6] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012963053_8c3d, KgMode: standard, TextLength: 16
2025-06-27 16:29:23.056 [reactor-http-nio-4] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 15, ExtractParams: triples, KgMode: standard
2025-06-27 16:29:23.056 [reactor-http-nio-4] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012963056_cfb6, KgMode: standard, TextLength: 15
2025-06-27 16:29:23.056 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 15 字符
2025-06-27 16:29:23.056 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:29:23.057 [reactor-http-nio-1] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 15, ExtractParams: triples, KgMode: standard
2025-06-27 16:29:23.057 [reactor-http-nio-1] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012963057_d53e, KgMode: standard, TextLength: 15
2025-06-27 16:29:23.057 [reactor-http-nio-12] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 15, ExtractParams: triples, KgMode: standard
2025-06-27 16:29:23.057 [reactor-http-nio-12] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012963057_9374, KgMode: standard, TextLength: 15
2025-06-27 16:29:23.057 [reactor-http-nio-5] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 13, ExtractParams: triples, KgMode: standard
2025-06-27 16:29:23.058 [reactor-http-nio-5] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012963058_9eec, KgMode: standard, TextLength: 13
2025-06-27 16:29:23.064 [reactor-http-nio-3] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 15, ExtractParams: triples, KgMode: standard
2025-06-27 16:29:23.065 [reactor-http-nio-3] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012963065_935a, KgMode: standard, TextLength: 15
2025-06-27 16:29:23.065 [reactor-http-nio-11] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 16, ExtractParams: triples, KgMode: standard
2025-06-27 16:29:23.065 [reactor-http-nio-11] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012963065_71da, KgMode: standard, TextLength: 16
2025-06-27 16:29:23.071 [ForkJoinPool.commonPool-worker-10] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:23.075 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 15, ExtractParams: triples, KgMode: standard
2025-06-27 16:29:23.076 [reactor-http-nio-2] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012963076_5d4b, KgMode: standard, TextLength: 15
2025-06-27 16:29:23.083 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 2204, ExtractParams: triples, KgMode: fusion
2025-06-27 16:29:23.083 [reactor-http-nio-2] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012963083_4ece, KgMode: fusion, TextLength: 2204
2025-06-27 16:29:23.087 [ForkJoinPool.commonPool-worker-10] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:23.087 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 52, ExtractParams: triples, KgMode: batch
2025-06-27 16:29:23.087 [reactor-http-nio-2] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012963087_cfaf, KgMode: batch, TextLength: 52
2025-06-27 16:29:23.093 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 32, ExtractParams: triples, KgMode: standard
2025-06-27 16:29:23.093 [reactor-http-nio-2] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012963093_f46, KgMode: standard, TextLength: 32
2025-06-27 16:29:23.098 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 31, ExtractParams: entities, KgMode: standard
2025-06-27 16:29:23.098 [reactor-http-nio-2] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012963098_f7ec, KgMode: standard, TextLength: 31
2025-06-27 16:29:23.100 [ForkJoinPool.commonPool-worker-10] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:23.103 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 34, ExtractParams: relations, KgMode: standard
2025-06-27 16:29:23.103 [reactor-http-nio-2] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012963103_3653, KgMode: standard, TextLength: 34
2025-06-27 16:29:23.106 [reactor-http-nio-2] WARN  c.d.extract.controller.AsyncExtractController - 请求参数错误: 文本内容不能为空
2025-06-27 16:29:23.109 [ForkJoinPool.commonPool-worker-10] INFO  c.datacenter.extract.service.EntityDisambiguator - 实体消歧义处理完成，处理了1个三元组
2025-06-27 16:29:23.109 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.KnowledgeFusion - 开始知识融合处理
2025-06-27 16:29:23.109 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.KnowledgeFusion - 知识融合处理完成，处理了1个三元组
2025-06-27 16:29:23.109 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.RelationValidator - 开始关系验证处理
2025-06-27 16:29:23.109 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - 收到异步提取请求 - TextLength: 2, ExtractParams: triples, KgMode: standard
2025-06-27 16:29:23.109 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.RelationValidator - 关系验证处理完成，验证了1个三元组
2025-06-27 16:29:23.109 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.QualityAssessor - 开始质量评估处理
2025-06-27 16:29:23.109 [reactor-http-nio-2] INFO  c.d.extract.service.OptimizedBusinessService - 开始业务处理 - RequestId: biz_1751012963109_38bd, KgMode: standard, TextLength: 2
2025-06-27 16:29:23.112 [reactor-http-nio-2] WARN  c.d.extract.controller.AsyncExtractController - 请求参数错误: textInput参数是必需的
2025-06-27 16:29:23.117 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.QualityAssessor - 质量评估完成，总分: {:.2f}
2025-06-27 16:29:23.117 [ForkJoinPool.commonPool-worker-10] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 知识图谱增强处理完成，模式: fusion
2025-06-27 16:29:23.118 [reactor-http-nio-2] WARN  c.d.extract.controller.AsyncExtractController - 请求参数错误: textInput参数是必需的
2025-06-27 16:29:23.118 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 638
2025-06-27 16:29:23.118 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"张艺谋","predicate":"出生于","object":"1950年11月14日","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012963109,"knowledge_fusion_applied":true,"fusion_timestamp":1751012963109,"relation_validation_applied":true,"validation_timestamp":1751012963109,"quality_score":0.8,"quality_grade":"GOOD","assessment_timestamp":1751012963109,"kg_mode":"fusion","processed_at":1751012963117,"full_processing_applied":true}
2025-06-27 16:29:23.118 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"张艺谋","predicate":"出生于","object":"1950年11月14日","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012963109,"knowledge_fusion_applied":true,"fusion_timestamp":1751012963109,"relation_validation_applied":true,"validation_timestamp":1751012963109,"quality_score":0.8,"quality_grade":"GOOD","assessment_timestamp":1751012963109,"kg_mode":"fusion","processed_at":1751012963117,"full_processing_applied":true}
2025-06-27 16:29:23.120 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 13 个主要字段: [triples, disambiguation_applied, disambiguation_timestamp, knowledge_fusion_applied, fusion_timestamp, relation_validation_applied, validation_timestamp, quality_score, quality_grade, assessment_timestamp, kg_mode, processed_at, full_processing_applied]
2025-06-27 16:29:23.120 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.DatabaseService - 处理 1 个三元组，包括实体和关系保存
2025-06-27 16:29:23.122 [ForkJoinPool.commonPool-worker-10] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:23.123 [reactor-http-nio-2] WARN  c.d.extract.controller.AsyncExtractController - 请求参数错误: 不支持的知识图谱模式: invalid
2025-06-27 16:29:23.123 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:29:23.124 [ForkJoinPool.commonPool-worker-10] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:23.130 [ForkJoinPool.commonPool-worker-10] DEBUG org.hibernate.SQL - insert into celebrity (baike,birthdate,celebrity_id,company,education,gender,`group`,name,nationality,position,profession,relatives,resume,spouse) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-06-27 16:29:23.135 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 1950年11月14日 (通过三元组提取)
2025-06-27 16:29:23.136 [ForkJoinPool.commonPool-worker-10] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:23.139 [ForkJoinPool.commonPool-worker-10] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:23.141 [ForkJoinPool.commonPool-worker-10] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:29:23.142 [ForkJoinPool.commonPool-worker-10] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:29:23.142 [ForkJoinPool.commonPool-worker-10] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:29:23.143 [ForkJoinPool.commonPool-worker-10] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 1950年11月14日 [出生于], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:29:23.143 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[出生于]--> 1950年11月14日
2025-06-27 16:29:23.143 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:29:23.145 [ForkJoinPool.commonPool-worker-10] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012950799_5bc9, Duration: 12346ms
2025-06-27 16:29:23.146 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 15 字符
2025-06-27 16:29:23.146 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:29:25.961 [reactor-http-nio-6] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 10271ms，响应长度: 351
2025-06-27 16:29:25.962 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 56，处理模式: 直接处理
2025-06-27 16:29:25.962 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 65，当前并发数: 5
2025-06-27 16:29:25.962 [ForkJoinPool.commonPool-worker-7] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 开始知识图谱增强处理，模式: fusion
2025-06-27 16:29:25.962 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:29:25.963 [ForkJoinPool.commonPool-worker-7] INFO  c.datacenter.extract.service.EntityDisambiguator - 开始实体消歧义处理
2025-06-27 16:29:25.973 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:25.982 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:25.989 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:25.993 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:26.005 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:26.011 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:26.013 [ForkJoinPool.commonPool-worker-7] INFO  c.datacenter.extract.service.EntityDisambiguator - 实体消歧义处理完成，处理了3个三元组
2025-06-27 16:29:26.013 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.KnowledgeFusion - 开始知识融合处理
2025-06-27 16:29:26.014 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.KnowledgeFusion - 知识融合处理完成，处理了3个三元组
2025-06-27 16:29:26.014 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.RelationValidator - 开始关系验证处理
2025-06-27 16:29:26.014 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.RelationValidator - 关系验证处理完成，验证了3个三元组
2025-06-27 16:29:26.014 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.QualityAssessor - 开始质量评估处理
2025-06-27 16:29:26.035 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.QualityAssessor - 质量评估完成，总分: {:.2f}
2025-06-27 16:29:26.036 [ForkJoinPool.commonPool-worker-7] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 知识图谱增强处理完成，模式: fusion
2025-06-27 16:29:26.038 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 1145
2025-06-27 16:29:26.039 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"配偶","object":"巩俐","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"认识","object":"巩俐","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012966013,"knowledge_fusion_applied":true,"fusion_timestamp":1751012966014,"relation_validation_applied":true,"validation_timestamp":1751012966014,"quality_score":0.8000000000000002,"quality_grade":"GOOD","assessment_timestamp":1751012966014,"kg_mode":"fusion","processed_at":1751012966035,"full_processing_applied":true}
2025-06-27 16:29:26.039 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"配偶","object":"巩俐","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"认识","object":"巩俐","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012966013,"knowledge_fusion_applied":true,"fusion_timestamp":1751012966014,"relation_validation_applied":true,"validation_timestamp":1751012966014,"quality_score":0.8000000000000002,"quality_grade":"GOOD","assessment_timestamp":1751012966014,"kg_mode":"fusion","processed_at":1751012966035,"full_processing_applied":true}
2025-06-27 16:29:26.040 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 13 个主要字段: [triples, disambiguation_applied, disambiguation_timestamp, knowledge_fusion_applied, fusion_timestamp, relation_validation_applied, validation_timestamp, quality_score, quality_grade, assessment_timestamp, kg_mode, processed_at, full_processing_applied]
2025-06-27 16:29:26.040 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-27 16:29:26.041 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:26.043 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:29:26.044 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:26.045 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-27 16:29:26.047 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:26.051 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:26.054 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:29:26.055 [ForkJoinPool.commonPool-worker-7] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:29:26.055 [ForkJoinPool.commonPool-worker-7] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:29:26.055 [ForkJoinPool.commonPool-worker-7] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《红高粱》 [导演], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:29:26.055 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《红高粱》
2025-06-27 16:29:26.056 [ForkJoinPool.commonPool-worker-7] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:26.056 [ForkJoinPool.commonPool-worker-7] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:26.057 [ForkJoinPool.commonPool-worker-7] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:26.057 [ForkJoinPool.commonPool-worker-7] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 巩俐 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:26.059 [ForkJoinPool.commonPool-worker-7] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:26.059 [ForkJoinPool.commonPool-worker-7] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 巩俐 [配偶], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:26.059 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[配偶]--> 巩俐
2025-06-27 16:29:26.062 [ForkJoinPool.commonPool-worker-7] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:26.062 [ForkJoinPool.commonPool-worker-7] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:26.062 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[认识]--> 巩俐
2025-06-27 16:29:26.062 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:29:26.064 [ForkJoinPool.commonPool-worker-7] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012952843_e08, Duration: 13221ms
2025-06-27 16:29:26.065 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 2204 字符
2025-06-27 16:29:26.065 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.SmartAIProvider - 📄 检测到长文本，启用分批处理模式
2025-06-27 16:29:26.065 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.LongTextProcessor - 🔍 开始处理长文本，长度: 2204 字符
2025-06-27 16:29:26.067 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.LongTextProcessor - 📊 文本分片完成，共 2 个分片
2025-06-27 16:29:26.068 [pool-5-thread-1] INFO  com.datacenter.extract.service.LongTextProcessor - ⚡ 处理分片 1 (1993 字符)
2025-06-27 16:29:26.068 [pool-5-thread-2] INFO  com.datacenter.extract.service.LongTextProcessor - ⚡ 处理分片 2 (410 字符)
2025-06-27 16:29:27.904 [reactor-http-nio-7] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 7539ms，响应长度: 244
2025-06-27 16:29:27.905 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 40，处理模式: 直接处理
2025-06-27 16:29:27.905 [ForkJoinPool.commonPool-worker-6] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 开始知识图谱增强处理，模式: fusion
2025-06-27 16:29:27.906 [ForkJoinPool.commonPool-worker-6] INFO  c.datacenter.extract.service.EntityDisambiguator - 开始实体消歧义处理
2025-06-27 16:29:27.907 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 15，当前并发数: 5
2025-06-27 16:29:27.908 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:29:27.923 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:27.962 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:27.993 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:27.998 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:28.004 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:28.009 [ForkJoinPool.commonPool-worker-6] INFO  c.datacenter.extract.service.EntityDisambiguator - 实体消歧义处理完成，处理了2个三元组
2025-06-27 16:29:28.009 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.KnowledgeFusion - 开始知识融合处理
2025-06-27 16:29:28.009 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.KnowledgeFusion - 知识融合处理完成，处理了2个三元组
2025-06-27 16:29:28.009 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.RelationValidator - 开始关系验证处理
2025-06-27 16:29:28.009 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.RelationValidator - 关系验证处理完成，验证了2个三元组
2025-06-27 16:29:28.009 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.QualityAssessor - 开始质量评估处理
2025-06-27 16:29:28.022 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.QualityAssessor - 质量评估完成，总分: {:.2f}
2025-06-27 16:29:28.022 [ForkJoinPool.commonPool-worker-6] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 知识图谱增强处理完成，模式: fusion
2025-06-27 16:29:28.024 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 882
2025-06-27 16:29:28.024 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《英雄》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"《英雄》","predicate":"类型","object":"武侠电影","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012968009,"knowledge_fusion_applied":true,"fusion_timestamp":1751012968009,"relation_validation_applied":true,"validation_timestamp":1751012968009,"quality_score":0.8,"quality_grade":"GOOD","assessment_timestamp":1751012968009,"kg_mode":"fusion","processed_at":1751012968022,"full_processing_applied":true}
2025-06-27 16:29:28.024 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《英雄》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"《英雄》","predicate":"类型","object":"武侠电影","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012968009,"knowledge_fusion_applied":true,"fusion_timestamp":1751012968009,"relation_validation_applied":true,"validation_timestamp":1751012968009,"quality_score":0.8,"quality_grade":"GOOD","assessment_timestamp":1751012968009,"kg_mode":"fusion","processed_at":1751012968022,"full_processing_applied":true}
2025-06-27 16:29:28.027 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 13 个主要字段: [triples, disambiguation_applied, disambiguation_timestamp, knowledge_fusion_applied, fusion_timestamp, relation_validation_applied, validation_timestamp, quality_score, quality_grade, assessment_timestamp, kg_mode, processed_at, full_processing_applied]
2025-06-27 16:29:28.027 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组，包括实体和关系保存
2025-06-27 16:29:28.028 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:28.035 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:29:28.035 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:28.037 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 人员 《英雄》 已存在，跳过插入
2025-06-27 16:29:28.038 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:28.043 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:28.045 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:29:28.047 [ForkJoinPool.commonPool-worker-6] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:29:28.047 [ForkJoinPool.commonPool-worker-6] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:29:28.047 [ForkJoinPool.commonPool-worker-6] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《英雄》 [导演], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:29:28.047 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《英雄》
2025-06-27 16:29:28.049 [ForkJoinPool.commonPool-worker-6] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:28.049 [ForkJoinPool.commonPool-worker-6] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《英雄》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:28.049 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《英雄》 --[类型]--> 武侠电影
2025-06-27 16:29:28.049 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:29:28.050 [ForkJoinPool.commonPool-worker-6] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012954865_d7ea, Duration: 13185ms
2025-06-27 16:29:28.051 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 52 字符
2025-06-27 16:29:28.051 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:29:29.235 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 14585ms，响应长度: 684
2025-06-27 16:29:29.236 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 40，处理模式: 直接处理
2025-06-27 16:29:29.237 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 开始知识图谱增强处理，模式: fusion
2025-06-27 16:29:29.237 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 13，当前并发数: 5
2025-06-27 16:29:29.237 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:29:29.237 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.EntityDisambiguator - 开始实体消歧义处理
2025-06-27 16:29:29.246 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:29.252 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:29.260 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:29.270 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:29.278 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:29.286 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:29.291 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:29.299 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:29.307 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:29.312 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:29.320 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:29.328 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:29.332 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:29.336 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:29.341 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.EntityDisambiguator - 实体消歧义处理完成，处理了6个三元组
2025-06-27 16:29:29.341 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.KnowledgeFusion - 开始知识融合处理
2025-06-27 16:29:29.341 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.KnowledgeFusion - 知识融合处理完成，处理了6个三元组
2025-06-27 16:29:29.341 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.RelationValidator - 开始关系验证处理
2025-06-27 16:29:29.341 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.RelationValidator - 关系验证处理完成，验证了6个三元组
2025-06-27 16:29:29.341 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.QualityAssessor - 开始质量评估处理
2025-06-27 16:29:29.364 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.QualityAssessor - 质量评估完成，总分: {:.2f}
2025-06-27 16:29:29.365 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 知识图谱增强处理完成，模式: fusion
2025-06-27 16:29:29.366 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 1896
2025-06-27 16:29:29.366 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"张艺谋","predicate":"职业","object":"导演","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"职业","object":"演员","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"职业","object":"摄影师","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"执导","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"执导","object":"《英雄》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"执导","object":"《满江红》","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012969341,"knowledge_fusion_applied":true,"fusion_timestamp":1751012969341,"relation_validation_applied":true,"validation_timestamp":1751012969341,"quality_score":0.7999999999999999,"quality_grade":"FAIR","assessment_timestamp":1751012969341,"kg_mode":"fusion","processed_at":1751012969364,"full_processing_applied":true}
2025-06-27 16:29:29.366 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"张艺谋","predicate":"职业","object":"导演","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"职业","object":"演员","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"职业","object":"摄影师","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"执导","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"执导","object":"《英雄》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"执导","object":"《满江红》","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012969341,"knowledge_fusion_applied":true,"fusion_timestamp":1751012969341,"relation_validation_applied":true,"validation_timestamp":1751012969341,"quality_score":0.7999999999999999,"quality_grade":"FAIR","assessment_timestamp":1751012969341,"kg_mode":"fusion","processed_at":1751012969364,"full_processing_applied":true}
2025-06-27 16:29:29.370 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 13 个主要字段: [triples, disambiguation_applied, disambiguation_timestamp, knowledge_fusion_applied, fusion_timestamp, relation_validation_applied, validation_timestamp, quality_score, quality_grade, assessment_timestamp, kg_mode, processed_at, full_processing_applied]
2025-06-27 16:29:29.370 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 6 个三元组，包括实体和关系保存
2025-06-27 16:29:29.370 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:29.372 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:29:29.372 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:29.373 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 导演 已存在，跳过插入
2025-06-27 16:29:29.374 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:29.381 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:29.384 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:29:29.385 [ForkJoinPool.commonPool-worker-1] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:29:29.385 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:29:29.386 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 导演 [职业], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:29:29.386 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[职业]--> 导演
2025-06-27 16:29:29.388 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.388 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.389 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.389 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 演员 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.390 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.390 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 演员 [职业], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.390 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[职业]--> 演员
2025-06-27 16:29:29.390 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.390 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.391 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.391 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 摄影师 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.392 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.393 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 摄影师 [职业], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.393 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[职业]--> 摄影师
2025-06-27 16:29:29.393 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.394 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.394 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.394 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《红高粱》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.394 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.394 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《红高粱》 [执导], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.394 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[执导]--> 《红高粱》
2025-06-27 16:29:29.396 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.397 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.397 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.398 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《英雄》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.398 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.398 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《英雄》 [执导], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.398 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[执导]--> 《英雄》
2025-06-27 16:29:29.398 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.399 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.401 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.401 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《满江红》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.402 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.402 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《满江红》 [执导], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.402 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[执导]--> 《满江红》
2025-06-27 16:29:29.402 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:29:29.405 [ForkJoinPool.commonPool-worker-1] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012944686_213f, Duration: 24719ms
2025-06-27 16:29:29.454 [reactor-http-nio-8] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 7446ms，响应长度: 245
2025-06-27 16:29:29.454 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 15，当前并发数: 5
2025-06-27 16:29:29.454 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 43，处理模式: 直接处理
2025-06-27 16:29:29.455 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:29:29.455 [ForkJoinPool.commonPool-worker-4] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 开始知识图谱增强处理，模式: fusion
2025-06-27 16:29:29.455 [ForkJoinPool.commonPool-worker-4] INFO  c.datacenter.extract.service.EntityDisambiguator - 开始实体消歧义处理
2025-06-27 16:29:29.460 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:29.464 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:29.468 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:29.471 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:29.473 [ForkJoinPool.commonPool-worker-4] INFO  c.datacenter.extract.service.EntityDisambiguator - 实体消歧义处理完成，处理了2个三元组
2025-06-27 16:29:29.474 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.KnowledgeFusion - 开始知识融合处理
2025-06-27 16:29:29.474 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.KnowledgeFusion - 知识融合处理完成，处理了2个三元组
2025-06-27 16:29:29.474 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.RelationValidator - 开始关系验证处理
2025-06-27 16:29:29.474 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.RelationValidator - 关系验证处理完成，验证了2个三元组
2025-06-27 16:29:29.474 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.QualityAssessor - 开始质量评估处理
2025-06-27 16:29:29.484 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.QualityAssessor - 质量评估完成，总分: {:.2f}
2025-06-27 16:29:29.484 [ForkJoinPool.commonPool-worker-4] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 知识图谱增强处理完成，模式: fusion
2025-06-27 16:29:29.486 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 884
2025-06-27 16:29:29.486 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"主演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012969473,"knowledge_fusion_applied":true,"fusion_timestamp":1751012969474,"relation_validation_applied":true,"validation_timestamp":1751012969474,"quality_score":0.8,"quality_grade":"GOOD","assessment_timestamp":1751012969474,"kg_mode":"fusion","processed_at":1751012969484,"full_processing_applied":true}
2025-06-27 16:29:29.486 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"主演","object":"《红高粱》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012969473,"knowledge_fusion_applied":true,"fusion_timestamp":1751012969474,"relation_validation_applied":true,"validation_timestamp":1751012969474,"quality_score":0.8,"quality_grade":"GOOD","assessment_timestamp":1751012969474,"kg_mode":"fusion","processed_at":1751012969484,"full_processing_applied":true}
2025-06-27 16:29:29.487 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 13 个主要字段: [triples, disambiguation_applied, disambiguation_timestamp, knowledge_fusion_applied, fusion_timestamp, relation_validation_applied, validation_timestamp, quality_score, quality_grade, assessment_timestamp, kg_mode, processed_at, full_processing_applied]
2025-06-27 16:29:29.487 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组，包括实体和关系保存
2025-06-27 16:29:29.488 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:29.490 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:29:29.490 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:29.492 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-27 16:29:29.493 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:29.495 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:29.496 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:29:29.497 [ForkJoinPool.commonPool-worker-4] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:29:29.497 [ForkJoinPool.commonPool-worker-4] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:29:29.497 [ForkJoinPool.commonPool-worker-4] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《红高粱》 [导演], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:29:29.497 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《红高粱》
2025-06-27 16:29:29.498 [ForkJoinPool.commonPool-worker-4] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.498 [ForkJoinPool.commonPool-worker-4] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.500 [ForkJoinPool.commonPool-worker-4] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.500 [ForkJoinPool.commonPool-worker-4] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 《红高粱》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.501 [ForkJoinPool.commonPool-worker-4] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.501 [ForkJoinPool.commonPool-worker-4] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《红高粱》 [主演], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:29.501 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[主演]--> 《红高粱》
2025-06-27 16:29:29.501 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:29:29.503 [ForkJoinPool.commonPool-worker-4] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012956896_5a2b, Duration: 12607ms
2025-06-27 16:29:29.503 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 31 字符
2025-06-27 16:29:29.503 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:29:33.849 [reactor-http-nio-7] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 5941ms，响应长度: 133
2025-06-27 16:29:33.850 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 15，处理模式: 直接处理
2025-06-27 16:29:33.850 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 15，当前并发数: 5
2025-06-27 16:29:33.850 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:29:33.850 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 32 字符
2025-06-27 16:29:33.850 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:29:33.858 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 133
2025-06-27 16:29:33.859 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《红高粱》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:29:33.859 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《红高粱》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:29:33.860 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-27 16:29:33.861 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 处理 1 个三元组，包括实体和关系保存
2025-06-27 16:29:33.864 [ForkJoinPool.commonPool-worker-9] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:33.867 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:29:33.869 [ForkJoinPool.commonPool-worker-9] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:33.874 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-27 16:29:33.875 [ForkJoinPool.commonPool-worker-9] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:33.878 [ForkJoinPool.commonPool-worker-9] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:33.881 [ForkJoinPool.commonPool-worker-9] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:29:33.883 [ForkJoinPool.commonPool-worker-9] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:29:33.883 [ForkJoinPool.commonPool-worker-9] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:29:33.884 [ForkJoinPool.commonPool-worker-9] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《红高粱》 [导演], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:29:33.884 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《红高粱》
2025-06-27 16:29:33.884 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:29:33.886 [ForkJoinPool.commonPool-worker-9] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012962980_dde1, Duration: 10906ms
2025-06-27 16:29:33.886 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 34 字符
2025-06-27 16:29:33.886 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:29:35.426 [reactor-http-nio-6] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 9464ms，响应长度: 362
2025-06-27 16:29:35.426 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 65，处理模式: 直接处理
2025-06-27 16:29:35.426 [pool-5-thread-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 1993，当前并发数: 5
2025-06-27 16:29:35.427 [pool-5-thread-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 40秒
2025-06-27 16:29:35.427 [ForkJoinPool.commonPool-worker-5] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 开始知识图谱增强处理，模式: fusion
2025-06-27 16:29:35.427 [ForkJoinPool.commonPool-worker-5] INFO  c.datacenter.extract.service.EntityDisambiguator - 开始实体消歧义处理
2025-06-27 16:29:35.438 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:35.445 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:35.447 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 6210ms，响应长度: 131
2025-06-27 16:29:35.447 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 13，处理模式: 直接处理
2025-06-27 16:29:35.448 [pool-5-thread-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 410，当前并发数: 5
2025-06-27 16:29:35.448 [pool-5-thread-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:29:35.448 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 16 字符
2025-06-27 16:29:35.448 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:29:35.450 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 131
2025-06-27 16:29:35.450 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "巩俐",
      "predicate": "出演",
      "object": "《活着》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:29:35.450 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "巩俐",
      "predicate": "出演",
      "object": "《活着》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:29:35.451 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:35.451 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-27 16:29:35.451 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 处理 1 个三元组，包括实体和关系保存
2025-06-27 16:29:35.452 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - select w1_0.id from work w1_0 where w1_0.title=? limit ?
2025-06-27 16:29:35.455 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:35.455 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 作品 《活着》 已存在，跳过插入
2025-06-27 16:29:35.455 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 巩俐 --[出演]--> 《活着》
2025-06-27 16:29:35.455 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:29:35.457 [ForkJoinPool.commonPool-worker-8] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012963049_df79, Duration: 12408ms
2025-06-27 16:29:35.460 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:35.467 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:35.470 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:35.475 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:35.491 [ForkJoinPool.commonPool-worker-5] INFO  c.datacenter.extract.service.EntityDisambiguator - 实体消歧义处理完成，处理了3个三元组
2025-06-27 16:29:35.491 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.KnowledgeFusion - 开始知识融合处理
2025-06-27 16:29:35.491 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.KnowledgeFusion - 知识融合处理完成，处理了3个三元组
2025-06-27 16:29:35.491 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.RelationValidator - 开始关系验证处理
2025-06-27 16:29:35.491 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.RelationValidator - 关系验证处理完成，验证了3个三元组
2025-06-27 16:29:35.491 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.QualityAssessor - 开始质量评估处理
2025-06-27 16:29:35.507 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.QualityAssessor - 质量评估完成，总分: {:.2f}
2025-06-27 16:29:35.507 [ForkJoinPool.commonPool-worker-5] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 知识图谱增强处理完成，模式: fusion
2025-06-27 16:29:35.508 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 1154
2025-06-27 16:29:35.509 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《英雄》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"《英雄》","predicate":"上映日期","object":"2002年","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"《英雄》","predicate":"完成时间","object":"2001年","confidence":0.90,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012975491,"knowledge_fusion_applied":true,"fusion_timestamp":1751012975491,"relation_validation_applied":true,"validation_timestamp":1751012975491,"quality_score":0.8000000000000002,"quality_grade":"GOOD","assessment_timestamp":1751012975491,"kg_mode":"fusion","processed_at":1751012975507,"full_processing_applied":true}
2025-06-27 16:29:35.509 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"张艺谋","predicate":"导演","object":"《英雄》","confidence":0.95,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"《英雄》","predicate":"上映日期","object":"2002年","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"《英雄》","predicate":"完成时间","object":"2001年","confidence":0.90,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012975491,"knowledge_fusion_applied":true,"fusion_timestamp":1751012975491,"relation_validation_applied":true,"validation_timestamp":1751012975491,"quality_score":0.8000000000000002,"quality_grade":"GOOD","assessment_timestamp":1751012975491,"kg_mode":"fusion","processed_at":1751012975507,"full_processing_applied":true}
2025-06-27 16:29:35.511 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 13 个主要字段: [triples, disambiguation_applied, disambiguation_timestamp, knowledge_fusion_applied, fusion_timestamp, relation_validation_applied, validation_timestamp, quality_score, quality_grade, assessment_timestamp, kg_mode, processed_at, full_processing_applied]
2025-06-27 16:29:35.511 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-27 16:29:35.512 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:35.514 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:29:35.514 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:35.515 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 人员 《英雄》 已存在，跳过插入
2025-06-27 16:29:35.516 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:35.517 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:35.519 [ForkJoinPool.commonPool-worker-5] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:29:35.521 [ForkJoinPool.commonPool-worker-5] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:29:35.521 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:29:35.522 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《英雄》 [导演], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:29:35.522 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《英雄》
2025-06-27 16:29:35.522 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:35.522 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《英雄》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:35.523 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《英雄》 --[上映日期]--> 2002年
2025-06-27 16:29:35.523 [ForkJoinPool.commonPool-worker-5] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:35.523 [ForkJoinPool.commonPool-worker-5] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《英雄》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:35.523 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《英雄》 --[完成时间]--> 2001年
2025-06-27 16:29:35.523 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:29:35.525 [ForkJoinPool.commonPool-worker-5] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012960952_147d, Duration: 14573ms
2025-06-27 16:29:35.525 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 2 字符
2025-06-27 16:29:35.525 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-27 16:29:35.698 [reactor-http-nio-8] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 6243ms，响应长度: 134
2025-06-27 16:29:35.698 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 15，处理模式: 直接处理
2025-06-27 16:29:35.698 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 52，当前并发数: 5
2025-06-27 16:29:35.698 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:29:35.701 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 134
2025-06-27 16:29:35.701 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "《英雄》",
      "predicate": "获得了",
      "object": "票房成功",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:29:35.701 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "《英雄》",
      "predicate": "获得了",
      "object": "票房成功",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:29:35.701 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-27 16:29:35.701 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 处理 1 个三元组，包括实体和关系保存
2025-06-27 16:29:35.702 [ForkJoinPool.commonPool-worker-11] DEBUG org.hibernate.SQL - select w1_0.id from work w1_0 where w1_0.title=? limit ?
2025-06-27 16:29:35.704 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 作品 《英雄》 已存在，跳过插入
2025-06-27 16:29:35.704 [ForkJoinPool.commonPool-worker-11] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:35.706 [ForkJoinPool.commonPool-worker-11] DEBUG org.hibernate.SQL - insert into celebrity (baike,birthdate,celebrity_id,company,education,gender,`group`,name,nationality,position,profession,relatives,resume,spouse) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-06-27 16:29:35.708 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 票房成功 (通过三元组提取)
2025-06-27 16:29:35.709 [ForkJoinPool.commonPool-worker-11] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:35.711 [ForkJoinPool.commonPool-worker-11] DEBUG org.hibernate.SQL - select w1_0.id,w1_0.awards,w1_0.baike,w1_0.description,w1_0.`group`,w1_0.platform,w1_0.release_date,w1_0.role,w1_0.title,w1_0.work_id,w1_0.work_type from work w1_0 where w1_0.title=?
2025-06-27 16:29:35.713 [ForkJoinPool.commonPool-worker-11] DEBUG org.hibernate.SQL - insert into celebrity_work (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:29:35.714 [ForkJoinPool.commonPool-worker-11] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:29:35.714 [ForkJoinPool.commonPool-worker-11] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:29:35.714 [ForkJoinPool.commonPool-worker-11] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 《英雄》 -> 票房成功 [获得了], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_work (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_work (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:29:35.714 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《英雄》 --[获得了]--> 票房成功
2025-06-27 16:29:35.714 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:29:35.717 [ForkJoinPool.commonPool-worker-11] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012963056_cfb6, Duration: 12661ms
2025-06-27 16:29:35.718 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 131
2025-06-27 16:29:35.718 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "巩俐",
      "predicate": "出演",
      "object": "《活着》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:29:35.718 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "巩俐",
      "predicate": "出演",
      "object": "《活着》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:29:35.719 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-27 16:29:35.719 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 处理 1 个三元组，包括实体和关系保存
2025-06-27 16:29:35.722 [ForkJoinPool.commonPool-worker-11] DEBUG org.hibernate.SQL - select w1_0.id from work w1_0 where w1_0.title=? limit ?
2025-06-27 16:29:35.723 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 作品 《活着》 已存在，跳过插入
2025-06-27 16:29:35.723 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 巩俐 --[出演]--> 《活着》
2025-06-27 16:29:35.723 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:29:35.725 [ForkJoinPool.commonPool-worker-11] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012963058_9eec, Duration: 12667ms
2025-06-27 16:29:35.726 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 133
2025-06-27 16:29:35.726 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《红高粱》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:29:35.726 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《红高粱》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:29:35.726 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-27 16:29:35.727 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 处理 1 个三元组，包括实体和关系保存
2025-06-27 16:29:35.729 [ForkJoinPool.commonPool-worker-11] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:35.730 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:29:35.731 [ForkJoinPool.commonPool-worker-11] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:35.732 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-27 16:29:35.732 [ForkJoinPool.commonPool-worker-11] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:35.734 [ForkJoinPool.commonPool-worker-11] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:35.735 [ForkJoinPool.commonPool-worker-11] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:29:35.736 [ForkJoinPool.commonPool-worker-11] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:29:35.736 [ForkJoinPool.commonPool-worker-11] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:29:35.736 [ForkJoinPool.commonPool-worker-11] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《红高粱》 [导演], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:29:35.736 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《红高粱》
2025-06-27 16:29:35.736 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:29:35.737 [ForkJoinPool.commonPool-worker-11] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012963057_9374, Duration: 12680ms
2025-06-27 16:29:36.219 [reactor-http-nio-9] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 13173ms，响应长度: 468
2025-06-27 16:29:36.219 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 36，处理模式: 直接处理
2025-06-27 16:29:36.219 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 31，当前并发数: 5
2025-06-27 16:29:36.219 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:29:36.219 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 开始知识图谱增强处理，模式: fusion
2025-06-27 16:29:36.221 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.service.EntityDisambiguator - 开始实体消歧义处理
2025-06-27 16:29:36.229 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:36.236 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:36.246 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:36.255 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:36.264 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:36.268 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:36.272 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:36.280 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:36.284 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:36.292 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:36.296 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:36.303 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:36.307 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:36.316 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:36.321 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:36.331 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.service.EntityDisambiguator - 实体消歧义处理完成，处理了4个三元组
2025-06-27 16:29:36.331 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.KnowledgeFusion - 开始知识融合处理
2025-06-27 16:29:36.331 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.KnowledgeFusion - 知识融合处理完成，处理了4个三元组
2025-06-27 16:29:36.331 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.RelationValidator - 开始关系验证处理
2025-06-27 16:29:36.331 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.RelationValidator - 关系验证处理完成，验证了4个三元组
2025-06-27 16:29:36.331 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.QualityAssessor - 开始质量评估处理
2025-06-27 16:29:36.351 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.QualityAssessor - 质量评估完成，总分: {:.2f}
2025-06-27 16:29:36.354 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 知识图谱增强处理完成，模式: fusion
2025-06-27 16:29:36.355 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 1380
2025-06-27 16:29:36.355 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"《满江红》","predicate":"类型","object":"电影","confidence":0.95,"subject_confidence":1.0,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"执导","object":"《满江红》","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"沈腾","predicate":"主演","object":"《满江红》","confidence":0.95,"subject_confidence":1.0,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"易烊千玺","predicate":"主演","object":"《满江红》","confidence":0.95,"subject_confidence":1.0,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012976331,"knowledge_fusion_applied":true,"fusion_timestamp":1751012976331,"relation_validation_applied":true,"validation_timestamp":1751012976331,"quality_score":0.8,"quality_grade":"GOOD","assessment_timestamp":1751012976331,"kg_mode":"fusion","processed_at":1751012976351,"full_processing_applied":true}
2025-06-27 16:29:36.355 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"《满江红》","predicate":"类型","object":"电影","confidence":0.95,"subject_confidence":1.0,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"执导","object":"《满江红》","confidence":0.95,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"沈腾","predicate":"主演","object":"《满江红》","confidence":0.95,"subject_confidence":1.0,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"易烊千玺","predicate":"主演","object":"《满江红》","confidence":0.95,"subject_confidence":1.0,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"disambiguation_applied":true,"disambiguation_timestamp":1751012976331,"knowledge_fusion_applied":true,"fusion_timestamp":1751012976331,"relation_validation_applied":true,"validation_timestamp":1751012976331,"quality_score":0.8,"quality_grade":"GOOD","assessment_timestamp":1751012976331,"kg_mode":"fusion","processed_at":1751012976351,"full_processing_applied":true}
2025-06-27 16:29:36.356 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 13 个主要字段: [triples, disambiguation_applied, disambiguation_timestamp, knowledge_fusion_applied, fusion_timestamp, relation_validation_applied, validation_timestamp, quality_score, quality_grade, assessment_timestamp, kg_mode, processed_at, full_processing_applied]
2025-06-27 16:29:36.356 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-27 16:29:36.361 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select w1_0.id from work w1_0 where w1_0.title=? limit ?
2025-06-27 16:29:36.368 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - insert into work (awards,baike,description,`group`,platform,release_date,role,title,work_id,work_type) values (?,?,?,?,?,?,?,?,?,?)
2025-06-27 16:29:36.373 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《满江红》 (通过三元组提取)
2025-06-27 16:29:36.373 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《满江红》 --[类型]--> 电影
2025-06-27 16:29:36.374 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:36.376 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:29:36.377 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select w1_0.id from work w1_0 where w1_0.title=? limit ?
2025-06-27 16:29:36.378 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 作品 《满江红》 已存在，跳过插入
2025-06-27 16:29:36.379 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:36.381 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select w1_0.id,w1_0.awards,w1_0.baike,w1_0.description,w1_0.`group`,w1_0.platform,w1_0.release_date,w1_0.role,w1_0.title,w1_0.work_id,w1_0.work_type from work w1_0 where w1_0.title=?
2025-06-27 16:29:36.382 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - insert into celebrity_work (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:29:36.383 [ForkJoinPool.commonPool-worker-3] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:29:36.383 [ForkJoinPool.commonPool-worker-3] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:29:36.384 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《满江红》 [执导], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_work (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_work (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:29:36.384 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[执导]--> 《满江红》
2025-06-27 16:29:36.385 [ForkJoinPool.commonPool-worker-3] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:36.385 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 沈腾 失败: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:36.385 [ForkJoinPool.commonPool-worker-3] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:36.385 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 《满江红》 失败: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:36.386 [ForkJoinPool.commonPool-worker-3] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:36.386 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 沈腾 -> 《满江红》 [主演], 错误: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:36.386 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 沈腾 --[主演]--> 《满江红》
2025-06-27 16:29:36.386 [ForkJoinPool.commonPool-worker-3] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:36.386 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 易烊千玺 失败: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:36.387 [ForkJoinPool.commonPool-worker-3] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:36.387 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 《满江红》 失败: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:36.387 [ForkJoinPool.commonPool-worker-3] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:36.387 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 易烊千玺 -> 《满江红》 [主演], 错误: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:36.387 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 易烊千玺 --[主演]--> 《满江红》
2025-06-27 16:29:36.387 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:29:36.391 [ForkJoinPool.commonPool-worker-3] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012958926_2b0c, Duration: 17465ms
2025-06-27 16:29:36.393 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 134
2025-06-27 16:29:36.393 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "《英雄》",
      "predicate": "获得了",
      "object": "票房成功",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:29:36.393 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "《英雄》",
      "predicate": "获得了",
      "object": "票房成功",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:29:36.393 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-27 16:29:36.393 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 处理 1 个三元组，包括实体和关系保存
2025-06-27 16:29:36.394 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select w1_0.id from work w1_0 where w1_0.title=? limit ?
2025-06-27 16:29:36.395 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 作品 《英雄》 已存在，跳过插入
2025-06-27 16:29:36.395 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:36.397 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - insert into celebrity (baike,birthdate,celebrity_id,company,education,gender,`group`,name,nationality,position,profession,relatives,resume,spouse) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2025-06-27 16:29:36.398 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 票房成功 (通过三元组提取)
2025-06-27 16:29:36.399 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:36.400 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - select w1_0.id,w1_0.awards,w1_0.baike,w1_0.description,w1_0.`group`,w1_0.platform,w1_0.release_date,w1_0.role,w1_0.title,w1_0.work_id,w1_0.work_type from work w1_0 where w1_0.title=?
2025-06-27 16:29:36.401 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - insert into celebrity_work (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:29:36.401 [ForkJoinPool.commonPool-worker-3] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:29:36.402 [ForkJoinPool.commonPool-worker-3] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:29:36.402 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 《英雄》 -> 票房成功 [获得了], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_work (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_work (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:29:36.402 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《英雄》 --[获得了]--> 票房成功
2025-06-27 16:29:36.402 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:29:36.403 [ForkJoinPool.commonPool-worker-3] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012963057_d53e, Duration: 13346ms
2025-06-27 16:29:40.832 [reactor-http-nio-7] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 6981ms，响应长度: 135
2025-06-27 16:29:40.832 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 15，处理模式: 直接处理
2025-06-27 16:29:40.832 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 32，当前并发数: 5
2025-06-27 16:29:40.832 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:29:40.836 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 135
2025-06-27 16:29:40.836 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 135
2025-06-27 16:29:40.836 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "《流浪地球》",
      "predicate": "类型",
      "object": "科幻电影",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:29:40.836 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "《流浪地球》",
      "predicate": "类型",
      "object": "科幻电影",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:29:40.836 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "《流浪地球》",
      "predicate": "类型",
      "object": "科幻电影",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:29:40.836 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "《流浪地球》",
      "predicate": "类型",
      "object": "科幻电影",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:29:40.838 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-27 16:29:40.838 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.DatabaseService - 处理 1 个三元组，包括实体和关系保存
2025-06-27 16:29:40.838 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-27 16:29:40.838 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 处理 1 个三元组，包括实体和关系保存
2025-06-27 16:29:40.839 [ForkJoinPool.commonPool-worker-10] DEBUG org.hibernate.SQL - select w1_0.id from work w1_0 where w1_0.title=? limit ?
2025-06-27 16:29:40.840 [ForkJoinPool.commonPool-worker-11] DEBUG org.hibernate.SQL - select w1_0.id from work w1_0 where w1_0.title=? limit ?
2025-06-27 16:29:40.842 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.DatabaseService - 作品 《流浪地球》 已存在，跳过插入
2025-06-27 16:29:40.842 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《流浪地球》 --[类型]--> 科幻电影
2025-06-27 16:29:40.842 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 作品 《流浪地球》 已存在，跳过插入
2025-06-27 16:29:40.842 [ForkJoinPool.commonPool-worker-10] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:29:40.842 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《流浪地球》 --[类型]--> 科幻电影
2025-06-27 16:29:40.842 [ForkJoinPool.commonPool-worker-11] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:29:40.844 [ForkJoinPool.commonPool-worker-10] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012963076_5d4b, Duration: 17768ms
2025-06-27 16:29:40.844 [ForkJoinPool.commonPool-worker-11] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012963065_935a, Duration: 17779ms
2025-06-27 16:29:44.082 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 8634ms，响应长度: 346
2025-06-27 16:29:44.083 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 34，当前并发数: 5
2025-06-27 16:29:44.083 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:29:44.302 [reactor-http-nio-9] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 8083ms，响应长度: 247
2025-06-27 16:29:44.302 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 31，处理模式: 直接处理
2025-06-27 16:29:44.302 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 16，当前并发数: 5
2025-06-27 16:29:44.303 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:29:44.308 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 247
2025-06-27 16:29:44.308 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "发行",
      "object": "《叶惠美》",
      "confidence": 0.95
    },
    {
      "subject": "《叶惠美》",
      "predicate": "收录",
      "object": "《东风破》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:29:44.308 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "发行",
      "object": "《叶惠美》",
      "confidence": 0.95
    },
    {
      "subject": "《叶惠美》",
      "predicate": "收录",
      "object": "《东风破》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:29:44.309 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-27 16:29:44.309 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组，包括实体和关系保存
2025-06-27 16:29:44.310 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:44.313 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-27 16:29:44.314 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select w1_0.id from work w1_0 where w1_0.title=? limit ?
2025-06-27 16:29:44.315 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 作品 《叶惠美》 已存在，跳过插入
2025-06-27 16:29:44.317 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:44.320 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - select w1_0.id,w1_0.awards,w1_0.baike,w1_0.description,w1_0.`group`,w1_0.platform,w1_0.release_date,w1_0.role,w1_0.title,w1_0.work_id,w1_0.work_type from work w1_0 where w1_0.title=?
2025-06-27 16:29:44.322 [ForkJoinPool.commonPool-worker-4] DEBUG org.hibernate.SQL - insert into celebrity_work (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:29:44.323 [ForkJoinPool.commonPool-worker-4] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:29:44.324 [ForkJoinPool.commonPool-worker-4] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:29:44.324 [ForkJoinPool.commonPool-worker-4] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 周杰伦 -> 《叶惠美》 [发行], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_work (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_work (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:29:44.324 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[发行]--> 《叶惠美》
2025-06-27 16:29:44.325 [ForkJoinPool.commonPool-worker-4] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:44.325 [ForkJoinPool.commonPool-worker-4] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《叶惠美》 失败: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:44.326 [ForkJoinPool.commonPool-worker-4] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:44.327 [ForkJoinPool.commonPool-worker-4] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《东风破》 失败: null id in com.datacenter.extract.entity.CelebrityWork entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:44.327 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《叶惠美》 --[收录]--> 《东风破》
2025-06-27 16:29:44.327 [ForkJoinPool.commonPool-worker-4] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:29:44.331 [ForkJoinPool.commonPool-worker-4] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012963098_f7ec, Duration: 21232ms
2025-06-27 16:29:44.463 [reactor-http-nio-6] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 9036ms，响应长度: 346
2025-06-27 16:29:44.464 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 2，当前并发数: 5
2025-06-27 16:29:44.464 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-27 16:29:44.467 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.LongTextProcessor - ✅ 分片合并完成，成功率: 2/2 ({:.1f}%)，提取三元组: 100.0
2025-06-27 16:29:44.470 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 2204，处理模式: 分批处理
2025-06-27 16:29:44.471 [ForkJoinPool.commonPool-worker-7] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 开始知识图谱增强处理，模式: fusion
2025-06-27 16:29:44.475 [ForkJoinPool.commonPool-worker-7] INFO  c.datacenter.extract.service.EntityDisambiguator - 开始实体消歧义处理
2025-06-27 16:29:44.480 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:44.485 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:44.489 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:44.494 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:44.506 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:44.516 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:44.523 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:44.529 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0
2025-06-27 16:29:44.541 [ForkJoinPool.commonPool-worker-7] INFO  c.datacenter.extract.service.EntityDisambiguator - 实体消歧义处理完成，处理了3个三元组
2025-06-27 16:29:44.541 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.KnowledgeFusion - 开始知识融合处理
2025-06-27 16:29:44.541 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.KnowledgeFusion - 知识融合处理完成，处理了3个三元组
2025-06-27 16:29:44.541 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.RelationValidator - 开始关系验证处理
2025-06-27 16:29:44.541 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.RelationValidator - 关系验证处理完成，验证了3个三元组
2025-06-27 16:29:44.541 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.QualityAssessor - 开始质量评估处理
2025-06-27 16:29:44.557 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.QualityAssessor - 质量评估完成，总分: {:.2f}
2025-06-27 16:29:44.557 [ForkJoinPool.commonPool-worker-7] INFO  c.datacenter.extract.service.KnowledgeGraphEngine - 知识图谱增强处理完成，模式: fusion
2025-06-27 16:29:44.558 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 1378
2025-06-27 16:29:44.558 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"张艺谋","predicate":"职业","object":"导演","confidence":1.0,"chunk_index":0,"chunk_start":0,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"国籍","object":"中国","confidence":1.0,"chunk_index":0,"chunk_start":0,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"知名度","object":"著名","confidence":1.0,"chunk_index":0,"chunk_start":0,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"total_chunks":2,"success_chunks":2,"success_rate":"100.00%","total_triples":3,"processing_method":"batch_processing","timestamp":1751012984467,"disambiguation_applied":true,"disambiguation_timestamp":1751012984541,"knowledge_fusion_applied":true,"fusion_timestamp":1751012984541,"relation_validation_applied":true,"validation_timestamp":1751012984541,"quality_score":0.8000000000000002,"quality_grade":"GOOD","assessment_timestamp":1751012984541,"kg_mode":"fusion","processed_at":1751012984557,"full_processing_applied":true}
2025-06-27 16:29:44.558 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"张艺谋","predicate":"职业","object":"导演","confidence":1.0,"chunk_index":0,"chunk_start":0,"subject_confidence":0.95,"object_confidence":0.95,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"国籍","object":"中国","confidence":1.0,"chunk_index":0,"chunk_start":0,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9},{"subject":"张艺谋","predicate":"知名度","object":"著名","confidence":1.0,"chunk_index":0,"chunk_start":0,"subject_confidence":0.95,"object_confidence":1.0,"disambiguation_applied":true,"fusion_action":"NEW","confidence_score":0.8,"validation_status":"VALID","validation_confidence":0.9}],"total_chunks":2,"success_chunks":2,"success_rate":"100.00%","total_triples":3,"processing_method":"batch_processing","timestamp":1751012984467,"disambiguation_applied":true,"disambiguation_timestamp":1751012984541,"knowledge_fusion_applied":true,"fusion_timestamp":1751012984541,"relation_validation_applied":true,"validation_timestamp":1751012984541,"quality_score":0.8000000000000002,"quality_grade":"GOOD","assessment_timestamp":1751012984541,"kg_mode":"fusion","processed_at":1751012984557,"full_processing_applied":true}
2025-06-27 16:29:44.561 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 19 个主要字段: [triples, total_chunks, success_chunks, success_rate, total_triples, processing_method, timestamp, disambiguation_applied, disambiguation_timestamp, knowledge_fusion_applied, fusion_timestamp, relation_validation_applied, validation_timestamp, quality_score, quality_grade, assessment_timestamp, kg_mode, processed_at, full_processing_applied]
2025-06-27 16:29:44.561 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-27 16:29:44.562 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:44.565 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:29:44.566 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:44.568 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 人员 导演 已存在，跳过插入
2025-06-27 16:29:44.569 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:44.571 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:44.572 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:29:44.574 [ForkJoinPool.commonPool-worker-7] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:29:44.574 [ForkJoinPool.commonPool-worker-7] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:29:44.574 [ForkJoinPool.commonPool-worker-7] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 导演 [职业], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:29:44.574 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[职业]--> 导演
2025-06-27 16:29:44.575 [ForkJoinPool.commonPool-worker-7] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:44.576 [ForkJoinPool.commonPool-worker-7] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:44.576 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[国籍]--> 中国
2025-06-27 16:29:44.576 [ForkJoinPool.commonPool-worker-7] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:44.576 [ForkJoinPool.commonPool-worker-7] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 张艺谋 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:44.576 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[知名度]--> 著名
2025-06-27 16:29:44.576 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:29:44.579 [ForkJoinPool.commonPool-worker-7] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012963083_4ece, Duration: 21496ms
2025-06-27 16:29:46.649 [reactor-http-nio-8] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 10951ms，响应长度: 467
2025-06-27 16:29:46.649 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 52，处理模式: 直接处理
2025-06-27 16:29:46.656 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 467
2025-06-27 16:29:46.656 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "巩俐",
      "predicate": "职业",
      "object": "女演员",
      "confidence": 0.95
    },
    {
      "subject": "《英雄》",
      "predicate": "类型",
      "object": "武侠电影",
      "confidence": 0.95
    },
    {
      "subject": "陈凯歌",
      "predicate": "导演",
      "object": "《霸王别姬》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:29:46.656 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "巩俐",
      "predicate": "职业",
      "object": "女演员",
      "confidence": 0.95
    },
    {
      "subject": "《英雄》",
      "predicate": "类型",
      "object": "武侠电影",
      "confidence": 0.95
    },
    {
      "subject": "陈凯歌",
      "predicate": "导演",
      "object": "《霸王别姬》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:29:46.657 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-27 16:29:46.657 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-27 16:29:46.660 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:46.664 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-27 16:29:46.666 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:46.671 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-27 16:29:46.673 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:46.677 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:46.680 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:29:46.682 [ForkJoinPool.commonPool-worker-6] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:29:46.682 [ForkJoinPool.commonPool-worker-6] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:29:46.683 [ForkJoinPool.commonPool-worker-6] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 张艺谋 -> 《红高粱》 [导演], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:29:46.683 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《红高粱》
2025-06-27 16:29:46.684 [ForkJoinPool.commonPool-worker-6] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:46.684 [ForkJoinPool.commonPool-worker-6] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 巩俐 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:46.685 [ForkJoinPool.commonPool-worker-6] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:46.685 [ForkJoinPool.commonPool-worker-6] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 女演员 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:46.686 [ForkJoinPool.commonPool-worker-6] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:46.686 [ForkJoinPool.commonPool-worker-6] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 巩俐 -> 女演员 [职业], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:46.686 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 巩俐 --[职业]--> 女演员
2025-06-27 16:29:46.687 [ForkJoinPool.commonPool-worker-6] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:46.687 [ForkJoinPool.commonPool-worker-6] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《英雄》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:46.687 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《英雄》 --[类型]--> 武侠电影
2025-06-27 16:29:46.687 [ForkJoinPool.commonPool-worker-6] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:46.687 [ForkJoinPool.commonPool-worker-6] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 陈凯歌 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:46.688 [ForkJoinPool.commonPool-worker-6] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:46.688 [ForkJoinPool.commonPool-worker-6] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 《霸王别姬》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:46.689 [ForkJoinPool.commonPool-worker-6] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:46.689 [ForkJoinPool.commonPool-worker-6] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 陈凯歌 -> 《霸王别姬》 [导演], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:46.689 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 陈凯歌 --[导演]--> 《霸王别姬》
2025-06-27 16:29:46.689 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:29:46.695 [ForkJoinPool.commonPool-worker-6] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012963087_cfaf, Duration: 23608ms
2025-06-27 16:29:48.590 [reactor-http-nio-6] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 4126ms，响应长度: 14
2025-06-27 16:29:48.591 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 2，处理模式: 直接处理
2025-06-27 16:29:50.796 [reactor-http-nio-9] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 6493ms，响应长度: 134
2025-06-27 16:29:50.796 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 16，处理模式: 直接处理
2025-06-27 16:29:50.801 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 134
2025-06-27 16:29:50.801 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 134
2025-06-27 16:29:50.801 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "陈凯歌",
      "predicate": "拍摄",
      "object": "《霸王别姬》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:29:50.801 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "陈凯歌",
      "predicate": "拍摄",
      "object": "《霸王别姬》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:29:50.801 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "陈凯歌",
      "predicate": "拍摄",
      "object": "《霸王别姬》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:29:50.801 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "陈凯歌",
      "predicate": "拍摄",
      "object": "《霸王别姬》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:29:50.802 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-27 16:29:50.802 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-27 16:29:50.802 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 处理 1 个三元组，包括实体和关系保存
2025-06-27 16:29:50.802 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 1 个三元组，包括实体和关系保存
2025-06-27 16:29:50.804 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - select w1_0.id from work w1_0 where w1_0.title=? limit ?
2025-06-27 16:29:50.804 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - select w1_0.id from work w1_0 where w1_0.title=? limit ?
2025-06-27 16:29:50.808 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 作品 《霸王别姬》 已存在，跳过插入
2025-06-27 16:29:50.808 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《霸王别姬》 已存在，跳过插入
2025-06-27 16:29:50.808 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 陈凯歌 --[拍摄]--> 《霸王别姬》
2025-06-27 16:29:50.808 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 陈凯歌 --[拍摄]--> 《霸王别姬》
2025-06-27 16:29:50.809 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:29:50.809 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:29:50.811 [ForkJoinPool.commonPool-worker-2] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012963053_8c3d, Duration: 27758ms
2025-06-27 16:29:50.811 [ForkJoinPool.commonPool-worker-8] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012963065_71da, Duration: 27746ms
2025-06-27 16:29:51.762 [reactor-http-nio-7] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 10930ms，响应长度: 461
2025-06-27 16:29:51.762 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 32，处理模式: 直接处理
2025-06-27 16:29:51.767 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 461
2025-06-27 16:29:51.767 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "演员",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "歌手",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出生地",
      "object": "香港",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "作品",
      "object": "《无间道》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:29:51.767 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "演员",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "歌手",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出生地",
      "object": "香港",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "作品",
      "object": "《无间道》",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:29:51.773 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-27 16:29:51.773 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-27 16:29:51.774 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:51.776 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-27 16:29:51.782 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:51.784 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 演员 已存在，跳过插入
2025-06-27 16:29:51.794 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:51.798 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - select c1_0.id,c1_0.baike,c1_0.birthdate,c1_0.celebrity_id,c1_0.company,c1_0.education,c1_0.gender,c1_0.`group`,c1_0.name,c1_0.nationality,c1_0.position,c1_0.profession,c1_0.relatives,c1_0.resume,c1_0.spouse from celebrity c1_0 where c1_0.name=?
2025-06-27 16:29:51.800 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)
2025-06-27 16:29:51.802 [ForkJoinPool.commonPool-worker-1] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-27 16:29:51.802 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Unknown column 'from' in 'field list'
2025-06-27 16:29:51.802 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 刘德华 -> 演员 [职业], 错误: could not execute statement [Unknown column 'from' in 'field list'] [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]; SQL [insert into celebrity_celebrity (e_type,`from`,`to`) values (?,?,?)]
2025-06-27 16:29:51.802 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[职业]--> 演员
2025-06-27 16:29:51.805 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:51.805 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 刘德华 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:51.807 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:51.807 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 歌手 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:51.808 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:51.808 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 刘德华 -> 歌手 [职业], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:51.808 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[职业]--> 歌手
2025-06-27 16:29:51.810 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:51.810 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 刘德华 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:51.818 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:51.818 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 香港 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:51.823 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:51.824 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 刘德华 -> 香港 [出生地], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:51.824 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[出生地]--> 香港
2025-06-27 16:29:51.825 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:51.825 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存人员 刘德华 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:51.826 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:51.826 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存作品 《无间道》 失败: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:51.826 [ForkJoinPool.commonPool-worker-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:51.826 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.DatabaseService - 保存关系失败: 刘德华 -> 《无间道》 [作品], 错误: null id in com.datacenter.extract.entity.CelebrityCelebrity entry (don't flush the Session after an exception occurs)
2025-06-27 16:29:51.826 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[作品]--> 《无间道》
2025-06-27 16:29:51.826 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:29:51.829 [ForkJoinPool.commonPool-worker-1] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012963093_f46, Duration: 28736ms
2025-06-27 16:29:52.755 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 8672ms，响应长度: 254
2025-06-27 16:29:52.756 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 34，处理模式: 直接处理
2025-06-27 16:29:52.763 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 14
2025-06-27 16:29:52.763 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 254
2025-06-27 16:29:52.763 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[]}
2025-06-27 16:29:52.763 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "获得",
      "object": "最佳男主角奖",
      "confidence": 0.95
    },
    {
      "subject": "2023年金马奖颁奖典礼",
      "predicate": "举行地点",
      "object": "台北",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:29:52.763 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[]}
2025-06-27 16:29:52.763 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "获得",
      "object": "最佳男主角奖",
      "confidence": 0.95
    },
    {
      "subject": "2023年金马奖颁奖典礼",
      "predicate": "举行地点",
      "object": "台北",
      "confidence": 0.95
    }
  ]
}
2025-06-27 16:29:52.764 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-27 16:29:52.765 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组，包括实体和关系保存
2025-06-27 16:29:52.765 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-27 16:29:52.765 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - triples为空，跳过处理
2025-06-27 16:29:52.765 [ForkJoinPool.commonPool-worker-5] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:29:52.767 [ForkJoinPool.commonPool-worker-5] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012963109_38bd, Duration: 29658ms
2025-06-27 16:29:52.768 [ForkJoinPool.commonPool-worker-9] DEBUG org.hibernate.SQL - select c1_0.id from celebrity c1_0 where c1_0.name=? limit ?
2025-06-27 16:29:52.770 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-27 16:29:52.771 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[获得]--> 最佳男主角奖
2025-06-27 16:29:52.774 [ForkJoinPool.commonPool-worker-9] DEBUG org.hibernate.SQL - select e1_0.id from event e1_0 where e1_0.event_name=? limit ?
2025-06-27 16:29:52.779 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 事件 2023年金马奖颁奖典礼 已存在，跳过插入
2025-06-27 16:29:52.780 [ForkJoinPool.commonPool-worker-9] DEBUG org.hibernate.SQL - select e1_0.id from event e1_0 where e1_0.event_name=? limit ?
2025-06-27 16:29:52.783 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 事件 台北 已存在，跳过插入
2025-06-27 16:29:52.783 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 2023年金马奖颁奖典礼 --[举行地点]--> 台北
2025-06-27 16:29:52.783 [ForkJoinPool.commonPool-worker-9] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-27 16:29:52.788 [ForkJoinPool.commonPool-worker-9] INFO  c.d.extract.service.OptimizedBusinessService - 业务处理成功 - RequestId: biz_1751012963103_3653, Duration: 29685ms
2025-06-27 17:20:22.067 [SpringApplicationShutdownHook] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@36995784] for TypeConfiguration
2025-06-27 17:20:22.067 [SpringApplicationShutdownHook] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@5dc8a4d7] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@36995784]
2025-06-27 17:20:22.069 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-27 17:20:22.072 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
