2025-06-24 15:26:23.328 [main] ERROR org.springframework.boot.SpringApplication - Application run failed
java.lang.IllegalStateException: java.lang.IllegalStateException: Logback configuration error detected: 
ERROR in ch.qos.logback.core.pattern.parser.Compiler@77192705 - There is no conversion class registered for composite conversion word [clr]
ERROR in ch.qos.logback.core.pattern.parser.Compiler@77192705 - Failed to create converter for [%clr] keyword
ERROR in ch.qos.logback.core.pattern.parser.Compiler@77192705 - There is no conversion class registered for composite conversion word [clr]
ERROR in ch.qos.logback.core.pattern.parser.Compiler@77192705 - Failed to create converter for [%clr] keyword
ERROR in ch.qos.logback.core.pattern.parser.Compiler@77192705 - There is no conversion class registered for composite conversion word [clr]
ERROR in ch.qos.logback.core.pattern.parser.Compiler@77192705 - Failed to create converter for [%clr] keyword
ERROR in ch.qos.logback.core.pattern.parser.Compiler@77192705 - There is no conversion class registered for composite conversion word [clr]
ERROR in ch.qos.logback.core.pattern.parser.Compiler@77192705 - Failed to create converter for [%clr] keyword
ERROR in ch.qos.logback.core.pattern.parser.Compiler@77192705 - There is no conversion class registered for composite conversion word [clr]
ERROR in ch.qos.logback.core.pattern.parser.Compiler@77192705 - Failed to create converter for [%clr] keyword
ERROR in ch.qos.logback.core.pattern.parser.Compiler@77192705 - There is no conversion class registered for composite conversion word [clr]
ERROR in ch.qos.logback.core.pattern.parser.Compiler@77192705 - Failed to create converter for [%clr] keyword
ERROR in ch.qos.logback.core.pattern.parser.Compiler@77192705 - There is no conversion class registered for composite conversion word [clr]
ERROR in ch.qos.logback.core.pattern.parser.Compiler@77192705 - Failed to create converter for [%clr] keyword
ERROR in ch.qos.logback.core.pattern.parser.Compiler@77192705 - There is no conversion class registered for conversion word [wEx]
ERROR in ch.qos.logback.core.pattern.parser.Compiler@77192705 - [wEx] is not a valid conversion word
	at org.springframework.boot.context.logging.LoggingApplicationListener.initializeSystem(LoggingApplicationListener.java:347)
	at org.springframework.boot.context.logging.LoggingApplicationListener.initialize(LoggingApplicationListener.java:298)
	at org.springframework.boot.context.logging.LoggingApplicationListener.onApplicationEnvironmentPreparedEvent(LoggingApplicationListener.java:246)
	at org.springframework.boot.context.logging.LoggingApplicationListener.onApplicationEvent(LoggingApplicationListener.java:223)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:178)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:171)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:149)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:137)
	at org.springframework.boot.context.event.EventPublishingRunListener.multicastInitialEvent(EventPublishingRunListener.java:136)
	at org.springframework.boot.context.event.EventPublishingRunListener.environmentPrepared(EventPublishingRunListener.java:81)
	at org.springframework.boot.SpringApplicationRunListeners.lambda$environmentPrepared$2(SpringApplicationRunListeners.java:64)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at org.springframework.boot.SpringApplicationRunListeners.doWithListeners(SpringApplicationRunListeners.java:118)
	at org.springframework.boot.SpringApplicationRunListeners.doWithListeners(SpringApplicationRunListeners.java:112)
	at org.springframework.boot.SpringApplicationRunListeners.environmentPrepared(SpringApplicationRunListeners.java:63)
	at org.springframework.boot.SpringApplication.prepareEnvironment(SpringApplication.java:366)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:318)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.datacenter.extract.ExtractServiceApplication.main(ExtractServiceApplication.java:21)
Caused by: java.lang.IllegalStateException: Logback configuration error detected: 
ERROR in ch.qos.logback.core.pattern.parser.Compiler@77192705 - There is no conversion class registered for composite conversion word [clr]
ERROR in ch.qos.logback.core.pattern.parser.Compiler@77192705 - Failed to create converter for [%clr] keyword
ERROR in ch.qos.logback.core.pattern.parser.Compiler@77192705 - There is no conversion class registered for composite conversion word [clr]
ERROR in ch.qos.logback.core.pattern.parser.Compiler@77192705 - Failed to create converter for [%clr] keyword
ERROR in ch.qos.logback.core.pattern.parser.Compiler@77192705 - There is no conversion class registered for composite conversion word [clr]
ERROR in ch.qos.logback.core.pattern.parser.Compiler@77192705 - Failed to create converter for [%clr] keyword
ERROR in ch.qos.logback.core.pattern.parser.Compiler@77192705 - There is no conversion class registered for composite conversion word [clr]
ERROR in ch.qos.logback.core.pattern.parser.Compiler@77192705 - Failed to create converter for [%clr] keyword
ERROR in ch.qos.logback.core.pattern.parser.Compiler@77192705 - There is no conversion class registered for composite conversion word [clr]
ERROR in ch.qos.logback.core.pattern.parser.Compiler@77192705 - Failed to create converter for [%clr] keyword
ERROR in ch.qos.logback.core.pattern.parser.Compiler@77192705 - There is no conversion class registered for composite conversion word [clr]
ERROR in ch.qos.logback.core.pattern.parser.Compiler@77192705 - Failed to create converter for [%clr] keyword
ERROR in ch.qos.logback.core.pattern.parser.Compiler@77192705 - There is no conversion class registered for composite conversion word [clr]
ERROR in ch.qos.logback.core.pattern.parser.Compiler@77192705 - Failed to create converter for [%clr] keyword
ERROR in ch.qos.logback.core.pattern.parser.Compiler@77192705 - There is no conversion class registered for conversion word [wEx]
ERROR in ch.qos.logback.core.pattern.parser.Compiler@77192705 - [wEx] is not a valid conversion word
	at org.springframework.boot.logging.logback.LogbackLoggingSystem.reportConfigurationErrorsIfNecessary(LogbackLoggingSystem.java:277)
	at org.springframework.boot.logging.logback.LogbackLoggingSystem.loadConfiguration(LogbackLoggingSystem.java:255)
	at org.springframework.boot.logging.AbstractLoggingSystem.initializeWithConventions(AbstractLoggingSystem.java:81)
	at org.springframework.boot.logging.AbstractLoggingSystem.initialize(AbstractLoggingSystem.java:61)
	at org.springframework.boot.logging.logback.LogbackLoggingSystem.initialize(LogbackLoggingSystem.java:189)
	at org.springframework.boot.context.logging.LoggingApplicationListener.initializeSystem(LoggingApplicationListener.java:332)
	... 19 common frames omitted
2025-06-24 15:27:35.841 [main] ERROR org.springframework.boot.SpringApplication - Application run failed
java.lang.IllegalStateException: java.lang.IllegalStateException: Logback configuration error detected: 
ERROR in ch.qos.logback.core.pattern.parser.Compiler@62452cc9 - There is no conversion class registered for composite conversion word [clr]
ERROR in ch.qos.logback.core.pattern.parser.Compiler@62452cc9 - Failed to create converter for [%clr] keyword
ERROR in ch.qos.logback.core.pattern.parser.Compiler@62452cc9 - There is no conversion class registered for composite conversion word [clr]
ERROR in ch.qos.logback.core.pattern.parser.Compiler@62452cc9 - Failed to create converter for [%clr] keyword
ERROR in ch.qos.logback.core.pattern.parser.Compiler@62452cc9 - There is no conversion class registered for composite conversion word [clr]
ERROR in ch.qos.logback.core.pattern.parser.Compiler@62452cc9 - Failed to create converter for [%clr] keyword
ERROR in ch.qos.logback.core.pattern.parser.Compiler@62452cc9 - There is no conversion class registered for composite conversion word [clr]
ERROR in ch.qos.logback.core.pattern.parser.Compiler@62452cc9 - Failed to create converter for [%clr] keyword
ERROR in ch.qos.logback.core.pattern.parser.Compiler@62452cc9 - There is no conversion class registered for composite conversion word [clr]
ERROR in ch.qos.logback.core.pattern.parser.Compiler@62452cc9 - Failed to create converter for [%clr] keyword
ERROR in ch.qos.logback.core.pattern.parser.Compiler@62452cc9 - There is no conversion class registered for composite conversion word [clr]
ERROR in ch.qos.logback.core.pattern.parser.Compiler@62452cc9 - Failed to create converter for [%clr] keyword
ERROR in ch.qos.logback.core.pattern.parser.Compiler@62452cc9 - There is no conversion class registered for composite conversion word [clr]
ERROR in ch.qos.logback.core.pattern.parser.Compiler@62452cc9 - Failed to create converter for [%clr] keyword
ERROR in ch.qos.logback.core.pattern.parser.Compiler@62452cc9 - There is no conversion class registered for conversion word [wEx]
ERROR in ch.qos.logback.core.pattern.parser.Compiler@62452cc9 - [wEx] is not a valid conversion word
	at org.springframework.boot.context.logging.LoggingApplicationListener.initializeSystem(LoggingApplicationListener.java:347)
	at org.springframework.boot.context.logging.LoggingApplicationListener.initialize(LoggingApplicationListener.java:298)
	at org.springframework.boot.context.logging.LoggingApplicationListener.onApplicationEnvironmentPreparedEvent(LoggingApplicationListener.java:246)
	at org.springframework.boot.context.logging.LoggingApplicationListener.onApplicationEvent(LoggingApplicationListener.java:223)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:178)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:171)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:149)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:137)
	at org.springframework.boot.context.event.EventPublishingRunListener.multicastInitialEvent(EventPublishingRunListener.java:136)
	at org.springframework.boot.context.event.EventPublishingRunListener.environmentPrepared(EventPublishingRunListener.java:81)
	at org.springframework.boot.SpringApplicationRunListeners.lambda$environmentPrepared$2(SpringApplicationRunListeners.java:64)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at org.springframework.boot.SpringApplicationRunListeners.doWithListeners(SpringApplicationRunListeners.java:118)
	at org.springframework.boot.SpringApplicationRunListeners.doWithListeners(SpringApplicationRunListeners.java:112)
	at org.springframework.boot.SpringApplicationRunListeners.environmentPrepared(SpringApplicationRunListeners.java:63)
	at org.springframework.boot.SpringApplication.prepareEnvironment(SpringApplication.java:366)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:318)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.datacenter.extract.ExtractServiceApplication.main(ExtractServiceApplication.java:21)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.boot.loader.launch.Launcher.launch(Launcher.java:91)
	at org.springframework.boot.loader.launch.Launcher.launch(Launcher.java:53)
	at org.springframework.boot.loader.launch.JarLauncher.main(JarLauncher.java:58)
Caused by: java.lang.IllegalStateException: Logback configuration error detected: 
ERROR in ch.qos.logback.core.pattern.parser.Compiler@62452cc9 - There is no conversion class registered for composite conversion word [clr]
ERROR in ch.qos.logback.core.pattern.parser.Compiler@62452cc9 - Failed to create converter for [%clr] keyword
ERROR in ch.qos.logback.core.pattern.parser.Compiler@62452cc9 - There is no conversion class registered for composite conversion word [clr]
ERROR in ch.qos.logback.core.pattern.parser.Compiler@62452cc9 - Failed to create converter for [%clr] keyword
ERROR in ch.qos.logback.core.pattern.parser.Compiler@62452cc9 - There is no conversion class registered for composite conversion word [clr]
ERROR in ch.qos.logback.core.pattern.parser.Compiler@62452cc9 - Failed to create converter for [%clr] keyword
ERROR in ch.qos.logback.core.pattern.parser.Compiler@62452cc9 - There is no conversion class registered for composite conversion word [clr]
ERROR in ch.qos.logback.core.pattern.parser.Compiler@62452cc9 - Failed to create converter for [%clr] keyword
ERROR in ch.qos.logback.core.pattern.parser.Compiler@62452cc9 - There is no conversion class registered for composite conversion word [clr]
ERROR in ch.qos.logback.core.pattern.parser.Compiler@62452cc9 - Failed to create converter for [%clr] keyword
ERROR in ch.qos.logback.core.pattern.parser.Compiler@62452cc9 - There is no conversion class registered for composite conversion word [clr]
ERROR in ch.qos.logback.core.pattern.parser.Compiler@62452cc9 - Failed to create converter for [%clr] keyword
ERROR in ch.qos.logback.core.pattern.parser.Compiler@62452cc9 - There is no conversion class registered for composite conversion word [clr]
ERROR in ch.qos.logback.core.pattern.parser.Compiler@62452cc9 - Failed to create converter for [%clr] keyword
ERROR in ch.qos.logback.core.pattern.parser.Compiler@62452cc9 - There is no conversion class registered for conversion word [wEx]
ERROR in ch.qos.logback.core.pattern.parser.Compiler@62452cc9 - [wEx] is not a valid conversion word
	at org.springframework.boot.logging.logback.LogbackLoggingSystem.reportConfigurationErrorsIfNecessary(LogbackLoggingSystem.java:277)
	at org.springframework.boot.logging.logback.LogbackLoggingSystem.loadConfiguration(LogbackLoggingSystem.java:255)
	at org.springframework.boot.logging.AbstractLoggingSystem.initializeWithConventions(AbstractLoggingSystem.java:81)
	at org.springframework.boot.logging.AbstractLoggingSystem.initialize(AbstractLoggingSystem.java:61)
	at org.springframework.boot.logging.logback.LogbackLoggingSystem.initialize(LogbackLoggingSystem.java:189)
	at org.springframework.boot.context.logging.LoggingApplicationListener.initializeSystem(LoggingApplicationListener.java:332)
	... 24 common frames omitted
2025-06-24 15:29:52.246 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication v1.0.0 using Java 21.0.4 with PID 6712 (/Users/admin/workspace/AGENT/extract-service/target/extract-service-1.0.0.jar started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-24 15:29:52.247 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-24 15:29:52.766 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 15:29:52.767 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-24 15:29:52.857 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 85 ms. Found 3 JPA repository interfaces.
2025-06-24 15:29:52.867 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 15:29:52.868 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-24 15:29:52.876 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 15:29:52.877 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 15:29:52.877 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 15:29:52.877 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 3 ms. Found 0 Redis repository interfaces.
2025-06-24 15:29:53.347 [main] ERROR i.n.resolver.dns.DnsServerAddressStreamProviders - Unable to load io.netty.resolver.dns.macos.MacOSDnsServerAddressStreamProvider, fallback to system defaults. This may result in incorrect DNS resolutions on MacOS. Check whether you have a dependency on 'io.netty:netty-resolver-dns-native-macos'. Use DEBUG level to see the full stack: java.lang.UnsatisfiedLinkError: failed to load the required native library
2025-06-24 15:29:53.697 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@684b26b7
2025-06-24 15:29:53.698 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@684b26b7
2025-06-24 15:29:53.698 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@684b26b7
2025-06-24 15:29:53.698 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@6c75e3bc
2025-06-24 15:29:53.698 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@6c75e3bc
2025-06-24 15:29:53.698 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@186f7434
2025-06-24 15:29:53.698 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@186f7434
2025-06-24 15:29:53.698 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@2374452a
2025-06-24 15:29:53.698 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@2374452a
2025-06-24 15:29:53.698 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@6ffc6ea7
2025-06-24 15:29:53.698 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@6ffc6ea7
2025-06-24 15:29:53.698 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@6ffc6ea7
2025-06-24 15:29:53.698 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@2c5708e7
2025-06-24 15:29:53.698 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@2c5708e7
2025-06-24 15:29:53.698 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@2c5708e7
2025-06-24 15:29:53.698 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@4ffa078d
2025-06-24 15:29:53.698 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@4ffa078d
2025-06-24 15:29:53.699 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@4e26564d
2025-06-24 15:29:53.699 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@42238078
2025-06-24 15:29:53.699 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@42238078
2025-06-24 15:29:53.699 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@5627b8eb
2025-06-24 15:29:53.699 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@49fe0bcd
2025-06-24 15:29:53.699 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@3516b881
2025-06-24 15:29:53.699 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@3516b881
2025-06-24 15:29:53.699 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@3516b881
2025-06-24 15:29:53.699 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@6be8ce1b
2025-06-24 15:29:53.700 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@6be8ce1b
2025-06-24 15:29:53.700 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@6be8ce1b
2025-06-24 15:29:53.700 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@e3c36d
2025-06-24 15:29:53.700 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@e3c36d
2025-06-24 15:29:53.700 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@e3c36d
2025-06-24 15:29:53.700 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@397a10df
2025-06-24 15:29:53.700 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@397a10df
2025-06-24 15:29:53.700 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@397a10df
2025-06-24 15:29:53.700 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@39a865c1
2025-06-24 15:29:53.700 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@39a865c1
2025-06-24 15:29:53.701 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@39a865c1
2025-06-24 15:29:53.701 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@141dfcf9
2025-06-24 15:29:53.701 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@141dfcf9
2025-06-24 15:29:53.701 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@a7bbdbc
2025-06-24 15:29:53.701 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@a7bbdbc
2025-06-24 15:29:53.701 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@63eea8c4
2025-06-24 15:29:53.701 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@63eea8c4
2025-06-24 15:29:53.701 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@63eea8c4
2025-06-24 15:29:53.701 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@19924f15
2025-06-24 15:29:53.701 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@621392ea
2025-06-24 15:29:53.701 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@621392ea
2025-06-24 15:29:53.701 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@35524549
2025-06-24 15:29:53.701 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@23ec63af
2025-06-24 15:29:53.702 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@23ec63af
2025-06-24 15:29:53.702 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@23ec63af
2025-06-24 15:29:53.702 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@280d6a20
2025-06-24 15:29:53.702 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@56f72909
2025-06-24 15:29:53.702 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@71285693
2025-06-24 15:29:53.702 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@3199a202
2025-06-24 15:29:53.702 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@3199a202
2025-06-24 15:29:53.702 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@7286827b
2025-06-24 15:29:53.702 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@7286827b
2025-06-24 15:29:53.702 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@1dd64243
2025-06-24 15:29:53.702 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@2ef913a4
2025-06-24 15:29:53.702 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@520c3dcb
2025-06-24 15:29:53.703 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@145fe8ab
2025-06-24 15:29:53.703 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@3b347439
2025-06-24 15:29:53.703 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@5d3634c8
2025-06-24 15:29:53.703 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@6e67a8c0
2025-06-24 15:29:53.703 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@6e67a8c0
2025-06-24 15:29:53.703 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@5960f17
2025-06-24 15:29:53.703 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@5960f17
2025-06-24 15:29:53.703 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@1d1b3620
2025-06-24 15:29:53.703 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@1d1b3620
2025-06-24 15:29:53.703 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@71e7c13f
2025-06-24 15:29:53.703 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@71e7c13f
2025-06-24 15:29:53.703 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@2295566b
2025-06-24 15:29:53.703 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@2295566b
2025-06-24 15:29:53.703 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@174e1b99
2025-06-24 15:29:53.703 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@53a09566
2025-06-24 15:29:53.703 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@1c815814
2025-06-24 15:29:53.704 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@1c815814
2025-06-24 15:29:53.704 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@14af73e1
2025-06-24 15:29:53.704 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@73da303e
2025-06-24 15:29:53.704 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@24068086
2025-06-24 15:29:53.704 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@32513dea
2025-06-24 15:29:53.704 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@32513dea
2025-06-24 15:29:53.704 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@5d0e703a
2025-06-24 15:29:53.704 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@7f77e065
2025-06-24 15:29:53.704 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@6f655dbd
2025-06-24 15:29:53.704 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@6f655dbd
2025-06-24 15:29:53.704 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@546083d6
2025-06-24 15:29:53.704 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@546083d6
2025-06-24 15:29:53.704 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@7ac1b6c0
2025-06-24 15:29:53.704 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@7ac1b6c0
2025-06-24 15:29:53.705 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@7ac1b6c0
2025-06-24 15:29:53.705 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@3a751535
2025-06-24 15:29:53.705 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@3a751535
2025-06-24 15:29:53.705 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@3a751535
2025-06-24 15:29:53.705 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@7fb82f73
2025-06-24 15:29:53.705 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@2f166d61
2025-06-24 15:29:53.705 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@5896b9f5
2025-06-24 15:29:53.705 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@5896b9f5
2025-06-24 15:29:53.705 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@4ad8d36f
2025-06-24 15:29:53.705 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@4ad8d36f
2025-06-24 15:29:53.705 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@4ad8d36f
2025-06-24 15:29:53.705 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@74a5bef0
2025-06-24 15:29:53.706 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@68c4a860
2025-06-24 15:29:53.706 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@570ed9c
2025-06-24 15:29:53.706 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@570ed9c
2025-06-24 15:29:53.706 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@93f15f6
2025-06-24 15:29:53.706 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@93f15f6
2025-06-24 15:29:53.706 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@93f15f6
2025-06-24 15:29:53.706 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@5034681f
2025-06-24 15:29:53.706 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@5034681f
2025-06-24 15:29:53.707 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@1dfe5dd1
2025-06-24 15:29:53.707 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@1dfe5dd1
2025-06-24 15:29:53.707 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@1fe05fff
2025-06-24 15:29:53.707 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@1fe05fff
2025-06-24 15:29:53.707 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@6e017950
2025-06-24 15:29:53.707 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@6e017950
2025-06-24 15:29:53.707 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@1d06801f
2025-06-24 15:29:53.707 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@1d06801f
2025-06-24 15:29:53.707 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@727956bb
2025-06-24 15:29:53.710 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@3dfc59c5
2025-06-24 15:29:53.710 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@3dfc59c5
2025-06-24 15:29:53.711 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@2fea9a7b
2025-06-24 15:29:53.711 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@2aa07d80
2025-06-24 15:29:53.711 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@69c1ea07
2025-06-24 15:29:53.711 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@5cbe72b9
2025-06-24 15:29:53.711 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@27fc0217
2025-06-24 15:29:53.711 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@e993715
2025-06-24 15:29:53.711 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@47eae91d
2025-06-24 15:29:53.711 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@c1a74d
2025-06-24 15:29:53.712 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@472719df
2025-06-24 15:29:53.818 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-24 15:29:53.840 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-24 15:29:53.966 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4070c4ff
2025-06-24 15:29:53.967 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-24 15:29:53.991 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-24 15:29:53.992 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-24 15:29:54.006 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4c3fcbe7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1e592ef2)
2025-06-24 15:29:54.006 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@96dfcbb) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@34ede267)
2025-06-24 15:29:54.006 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6bf77ee) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@51c6e775)
2025-06-24 15:29:54.006 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@372841d2) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6c8d638a)
2025-06-24 15:29:54.006 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@117069f2) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@77ebc9e6)
2025-06-24 15:29:54.006 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2b82018) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@52e92f6)
2025-06-24 15:29:54.006 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@17034458) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3e0e0ba7)
2025-06-24 15:29:54.007 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7df5549e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@cbdc0f4)
2025-06-24 15:29:54.007 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@11174bf) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4f0c1409)
2025-06-24 15:29:54.007 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-24 15:29:54.007 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-24 15:29:54.008 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-24 15:29:54.009 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 15:29:54.009 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 15:29:54.010 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@3987a1e8
2025-06-24 15:29:54.010 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@2fea9a7b`
2025-06-24 15:29:54.012 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-24 15:29:54.012 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-24 15:29:54.014 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 15:29:54.014 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 15:29:54.014 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 15:29:54.014 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 15:29:54.014 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 15:29:54.014 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 15:29:54.014 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 15:29:54.014 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 15:29:54.014 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 15:29:54.015 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@66130c3b] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@789d8fd6]
2025-06-24 15:29:54.472 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@66130c3b] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@3c1ef806]
2025-06-24 15:29:54.473 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@3c1ef806] for TypeConfiguration
2025-06-24 15:29:54.474 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-24 15:29:54.958 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-24 15:29:55.191 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-24 15:29:55.274 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-24 15:29:55.313 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 4
2025-06-24 15:29:55.313 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-24 15:29:55.314 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-24 15:29:55.314 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-24 15:29:55.603 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-24 15:29:55.611 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 3.726 seconds (process running for 3.993)
2025-06-24 15:32:29.646 [SpringApplicationShutdownHook] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-24 15:32:29.646 [SpringApplicationShutdownHook] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@3c1ef806] for TypeConfiguration
2025-06-24 15:32:29.647 [SpringApplicationShutdownHook] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@504ead67] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@3c1ef806]
2025-06-24 15:32:29.649 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-24 15:32:29.655 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-24 15:32:35.382 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 7622 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-24 15:32:35.384 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-24 15:32:36.439 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 15:32:36.440 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-24 15:32:36.549 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 104 ms. Found 3 JPA repository interfaces.
2025-06-24 15:32:36.572 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 15:32:36.573 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-24 15:32:36.587 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 15:32:36.588 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 15:32:36.588 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 15:32:36.588 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 10 ms. Found 0 Redis repository interfaces.
2025-06-24 15:32:38.121 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@74a74070
2025-06-24 15:32:38.124 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@74a74070
2025-06-24 15:32:38.124 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@74a74070
2025-06-24 15:32:38.125 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@215a0264
2025-06-24 15:32:38.125 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@215a0264
2025-06-24 15:32:38.125 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@45832b85
2025-06-24 15:32:38.125 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@45832b85
2025-06-24 15:32:38.125 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@103478b8
2025-06-24 15:32:38.125 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@103478b8
2025-06-24 15:32:38.125 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@270f7b4d
2025-06-24 15:32:38.126 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@270f7b4d
2025-06-24 15:32:38.127 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@270f7b4d
2025-06-24 15:32:38.127 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@56b704ea
2025-06-24 15:32:38.127 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@56b704ea
2025-06-24 15:32:38.127 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@56b704ea
2025-06-24 15:32:38.128 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@ab4d2ba
2025-06-24 15:32:38.128 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@ab4d2ba
2025-06-24 15:32:38.128 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@b81938d
2025-06-24 15:32:38.128 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@278cb145
2025-06-24 15:32:38.128 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@278cb145
2025-06-24 15:32:38.128 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@2aa0feb2
2025-06-24 15:32:38.128 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@351c6341
2025-06-24 15:32:38.129 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@32069394
2025-06-24 15:32:38.129 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@32069394
2025-06-24 15:32:38.129 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@32069394
2025-06-24 15:32:38.129 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@70421a08
2025-06-24 15:32:38.130 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@70421a08
2025-06-24 15:32:38.130 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@70421a08
2025-06-24 15:32:38.130 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@5dba3fdc
2025-06-24 15:32:38.130 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@5dba3fdc
2025-06-24 15:32:38.130 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@5dba3fdc
2025-06-24 15:32:38.130 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@bea5941
2025-06-24 15:32:38.131 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@bea5941
2025-06-24 15:32:38.131 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@bea5941
2025-06-24 15:32:38.132 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@df6f19b
2025-06-24 15:32:38.132 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@df6f19b
2025-06-24 15:32:38.132 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@df6f19b
2025-06-24 15:32:38.132 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@6d842877
2025-06-24 15:32:38.132 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@6d842877
2025-06-24 15:32:38.133 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@614cbec4
2025-06-24 15:32:38.133 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@614cbec4
2025-06-24 15:32:38.133 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@3835d3fd
2025-06-24 15:32:38.133 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@3835d3fd
2025-06-24 15:32:38.134 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@3835d3fd
2025-06-24 15:32:38.135 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@2759749
2025-06-24 15:32:38.135 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@4efed0e0
2025-06-24 15:32:38.135 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@4efed0e0
2025-06-24 15:32:38.135 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@4ac0ed65
2025-06-24 15:32:38.135 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@5c7c75fb
2025-06-24 15:32:38.135 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@5c7c75fb
2025-06-24 15:32:38.136 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@5c7c75fb
2025-06-24 15:32:38.136 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@729d6ee2
2025-06-24 15:32:38.136 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@4adcc981
2025-06-24 15:32:38.136 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@73aae7a
2025-06-24 15:32:38.136 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@3856d0cb
2025-06-24 15:32:38.136 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@3856d0cb
2025-06-24 15:32:38.136 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@2125535d
2025-06-24 15:32:38.136 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@2125535d
2025-06-24 15:32:38.136 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@d190639
2025-06-24 15:32:38.136 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@5f82209e
2025-06-24 15:32:38.136 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@515c732d
2025-06-24 15:32:38.137 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@5ae87de0
2025-06-24 15:32:38.137 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@1f85904a
2025-06-24 15:32:38.138 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@514dc5f4
2025-06-24 15:32:38.138 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@633a11eb
2025-06-24 15:32:38.138 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@633a11eb
2025-06-24 15:32:38.138 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@7a247711
2025-06-24 15:32:38.138 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@7a247711
2025-06-24 15:32:38.138 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@4910afdf
2025-06-24 15:32:38.138 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@4910afdf
2025-06-24 15:32:38.138 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@764db16c
2025-06-24 15:32:38.138 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@764db16c
2025-06-24 15:32:38.138 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@45cb5307
2025-06-24 15:32:38.138 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@45cb5307
2025-06-24 15:32:38.138 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@1c8e2850
2025-06-24 15:32:38.138 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@50ac1249
2025-06-24 15:32:38.138 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@4bf10fe1
2025-06-24 15:32:38.138 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@4bf10fe1
2025-06-24 15:32:38.139 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@543d2ef3
2025-06-24 15:32:38.139 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@399c408c
2025-06-24 15:32:38.140 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@99223ac
2025-06-24 15:32:38.141 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@4a5fab78
2025-06-24 15:32:38.141 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@4a5fab78
2025-06-24 15:32:38.141 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@77a85e76
2025-06-24 15:32:38.141 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@2cebf82f
2025-06-24 15:32:38.141 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@34fc315d
2025-06-24 15:32:38.141 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@34fc315d
2025-06-24 15:32:38.142 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@34f48d1
2025-06-24 15:32:38.142 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@34f48d1
2025-06-24 15:32:38.143 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@36a1fd20
2025-06-24 15:32:38.144 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@36a1fd20
2025-06-24 15:32:38.144 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@36a1fd20
2025-06-24 15:32:38.144 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@45f8415b
2025-06-24 15:32:38.144 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@45f8415b
2025-06-24 15:32:38.144 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@45f8415b
2025-06-24 15:32:38.144 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@10dbf660
2025-06-24 15:32:38.145 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@69ab2d6a
2025-06-24 15:32:38.146 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@505a8582
2025-06-24 15:32:38.146 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@505a8582
2025-06-24 15:32:38.147 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@57afe44b
2025-06-24 15:32:38.147 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@57afe44b
2025-06-24 15:32:38.147 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@57afe44b
2025-06-24 15:32:38.147 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@18887028
2025-06-24 15:32:38.147 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@28f8ce2e
2025-06-24 15:32:38.147 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@2c0a3826
2025-06-24 15:32:38.147 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@2c0a3826
2025-06-24 15:32:38.147 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@4af0c50
2025-06-24 15:32:38.147 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@4af0c50
2025-06-24 15:32:38.148 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@4af0c50
2025-06-24 15:32:38.148 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@5ffd35dd
2025-06-24 15:32:38.148 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@5ffd35dd
2025-06-24 15:32:38.148 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@311a09b2
2025-06-24 15:32:38.148 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@311a09b2
2025-06-24 15:32:38.148 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@4cacccbf
2025-06-24 15:32:38.148 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@4cacccbf
2025-06-24 15:32:38.149 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@301d84f6
2025-06-24 15:32:38.149 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@301d84f6
2025-06-24 15:32:38.150 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@6f80cf5
2025-06-24 15:32:38.153 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@6f80cf5
2025-06-24 15:32:38.155 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@674ed201
2025-06-24 15:32:38.159 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@4888d1ea
2025-06-24 15:32:38.159 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@4888d1ea
2025-06-24 15:32:38.159 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@1ce2029b
2025-06-24 15:32:38.159 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@43090195
2025-06-24 15:32:38.159 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@7921a37d
2025-06-24 15:32:38.159 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@6fc28e5b
2025-06-24 15:32:38.159 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@6338afe2
2025-06-24 15:32:38.159 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@68360fb9
2025-06-24 15:32:38.159 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@1c787389
2025-06-24 15:32:38.160 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@67b3960b
2025-06-24 15:32:38.160 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@415262a0
2025-06-24 15:32:38.255 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-24 15:32:38.271 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-24 15:32:38.384 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@21022cbb
2025-06-24 15:32:38.386 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-24 15:32:38.417 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-24 15:32:38.417 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-24 15:32:38.433 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3d2b13f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@58c36104)
2025-06-24 15:32:38.434 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1fc8047f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@29fc83c5)
2025-06-24 15:32:38.434 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3fb1948c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7c39193f)
2025-06-24 15:32:38.434 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@230d013b) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6e225c34)
2025-06-24 15:32:38.434 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5d84b088) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@69c0bae6)
2025-06-24 15:32:38.434 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@220f6a3c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5eb041b5)
2025-06-24 15:32:38.434 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2648aa1b) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4a3333be)
2025-06-24 15:32:38.434 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@13b4ee4e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4f55a864)
2025-06-24 15:32:38.434 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2c2edbe7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7f53a31f)
2025-06-24 15:32:38.435 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-24 15:32:38.435 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-24 15:32:38.435 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-24 15:32:38.436 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 15:32:38.436 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 15:32:38.438 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@558aa1f1
2025-06-24 15:32:38.438 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@1ce2029b`
2025-06-24 15:32:38.440 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-24 15:32:38.440 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-24 15:32:38.442 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 15:32:38.442 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 15:32:38.442 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 15:32:38.442 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 15:32:38.442 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 15:32:38.442 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 15:32:38.443 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 15:32:38.443 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 15:32:38.443 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 15:32:38.443 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@2ee1b017] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@7f9e6167]
2025-06-24 15:32:39.108 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@2ee1b017] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@3bbb3c84]
2025-06-24 15:32:39.114 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@3bbb3c84] for TypeConfiguration
2025-06-24 15:32:39.114 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-24 15:32:40.167 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-24 15:32:40.578 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-24 15:32:40.721 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-24 15:32:40.775 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 4
2025-06-24 15:32:40.776 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-24 15:32:40.777 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-24 15:32:40.783 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-24 15:32:41.201 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-24 15:32:41.225 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 6.486 seconds (process running for 7.315)
2025-06-24 15:34:59.593 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 10218 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-24 15:34:59.595 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-24 15:35:00.526 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 15:35:00.527 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-24 15:35:00.641 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 106 ms. Found 3 JPA repository interfaces.
2025-06-24 15:35:00.662 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 15:35:00.663 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-24 15:35:00.675 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 15:35:00.676 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 15:35:00.676 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 15:35:00.676 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 0 Redis repository interfaces.
2025-06-24 15:35:03.568 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@215a0264
2025-06-24 15:35:03.571 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@215a0264
2025-06-24 15:35:03.571 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@215a0264
2025-06-24 15:35:03.571 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@2aa0feb2
2025-06-24 15:35:03.571 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@2aa0feb2
2025-06-24 15:35:03.572 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@351c6341
2025-06-24 15:35:03.572 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@351c6341
2025-06-24 15:35:03.572 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@32069394
2025-06-24 15:35:03.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@32069394
2025-06-24 15:35:03.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@70421a08
2025-06-24 15:35:03.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@70421a08
2025-06-24 15:35:03.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@70421a08
2025-06-24 15:35:03.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@5dba3fdc
2025-06-24 15:35:03.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@5dba3fdc
2025-06-24 15:35:03.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@5dba3fdc
2025-06-24 15:35:03.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@bea5941
2025-06-24 15:35:03.575 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@bea5941
2025-06-24 15:35:03.575 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@614cbec4
2025-06-24 15:35:03.575 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@3835d3fd
2025-06-24 15:35:03.575 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@3835d3fd
2025-06-24 15:35:03.575 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@2759749
2025-06-24 15:35:03.575 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@4efed0e0
2025-06-24 15:35:03.575 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@4ac0ed65
2025-06-24 15:35:03.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@4ac0ed65
2025-06-24 15:35:03.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@4ac0ed65
2025-06-24 15:35:03.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@5c7c75fb
2025-06-24 15:35:03.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@5c7c75fb
2025-06-24 15:35:03.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@5c7c75fb
2025-06-24 15:35:03.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@729d6ee2
2025-06-24 15:35:03.577 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@729d6ee2
2025-06-24 15:35:03.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@729d6ee2
2025-06-24 15:35:03.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@4adcc981
2025-06-24 15:35:03.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@4adcc981
2025-06-24 15:35:03.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@4adcc981
2025-06-24 15:35:03.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@73aae7a
2025-06-24 15:35:03.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@73aae7a
2025-06-24 15:35:03.579 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@73aae7a
2025-06-24 15:35:03.579 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@3856d0cb
2025-06-24 15:35:03.579 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@3856d0cb
2025-06-24 15:35:03.579 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@2125535d
2025-06-24 15:35:03.579 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@2125535d
2025-06-24 15:35:03.579 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@d190639
2025-06-24 15:35:03.580 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@d190639
2025-06-24 15:35:03.581 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@d190639
2025-06-24 15:35:03.581 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@5f82209e
2025-06-24 15:35:03.581 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@515c732d
2025-06-24 15:35:03.581 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@515c732d
2025-06-24 15:35:03.581 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@5ae87de0
2025-06-24 15:35:03.581 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@1f85904a
2025-06-24 15:35:03.581 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@1f85904a
2025-06-24 15:35:03.581 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@1f85904a
2025-06-24 15:35:03.581 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@514dc5f4
2025-06-24 15:35:03.581 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@633a11eb
2025-06-24 15:35:03.581 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@7a247711
2025-06-24 15:35:03.583 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@4910afdf
2025-06-24 15:35:03.583 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@4910afdf
2025-06-24 15:35:03.583 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@764db16c
2025-06-24 15:35:03.583 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@764db16c
2025-06-24 15:35:03.583 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@45cb5307
2025-06-24 15:35:03.583 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@1c8e2850
2025-06-24 15:35:03.583 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@50ac1249
2025-06-24 15:35:03.583 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@4bf10fe1
2025-06-24 15:35:03.583 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@543d2ef3
2025-06-24 15:35:03.584 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@399c408c
2025-06-24 15:35:03.584 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@99223ac
2025-06-24 15:35:03.584 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@99223ac
2025-06-24 15:35:03.584 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@4a5fab78
2025-06-24 15:35:03.584 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@4a5fab78
2025-06-24 15:35:03.584 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@77a85e76
2025-06-24 15:35:03.584 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@77a85e76
2025-06-24 15:35:03.584 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@2cebf82f
2025-06-24 15:35:03.584 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@2cebf82f
2025-06-24 15:35:03.584 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@34fc315d
2025-06-24 15:35:03.584 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@34fc315d
2025-06-24 15:35:03.584 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@34f48d1
2025-06-24 15:35:03.584 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@36a1fd20
2025-06-24 15:35:03.584 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@45f8415b
2025-06-24 15:35:03.584 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@45f8415b
2025-06-24 15:35:03.584 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@10dbf660
2025-06-24 15:35:03.584 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@69ab2d6a
2025-06-24 15:35:03.584 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@505a8582
2025-06-24 15:35:03.585 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@57afe44b
2025-06-24 15:35:03.586 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@57afe44b
2025-06-24 15:35:03.586 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@18887028
2025-06-24 15:35:03.587 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@28f8ce2e
2025-06-24 15:35:03.587 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@2c0a3826
2025-06-24 15:35:03.587 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@2c0a3826
2025-06-24 15:35:03.588 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@4af0c50
2025-06-24 15:35:03.588 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@4af0c50
2025-06-24 15:35:03.588 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@5ffd35dd
2025-06-24 15:35:03.588 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@5ffd35dd
2025-06-24 15:35:03.588 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@5ffd35dd
2025-06-24 15:35:03.588 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@311a09b2
2025-06-24 15:35:03.588 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@311a09b2
2025-06-24 15:35:03.588 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@311a09b2
2025-06-24 15:35:03.589 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@4cacccbf
2025-06-24 15:35:03.589 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@301d84f6
2025-06-24 15:35:03.589 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@6f80cf5
2025-06-24 15:35:03.589 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@6f80cf5
2025-06-24 15:35:03.591 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@674ed201
2025-06-24 15:35:03.591 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@674ed201
2025-06-24 15:35:03.591 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@674ed201
2025-06-24 15:35:03.591 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@4dad2363
2025-06-24 15:35:03.592 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@114b2414
2025-06-24 15:35:03.592 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@57920d6c
2025-06-24 15:35:03.592 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@57920d6c
2025-06-24 15:35:03.592 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@465d1345
2025-06-24 15:35:03.592 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@465d1345
2025-06-24 15:35:03.592 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@465d1345
2025-06-24 15:35:03.593 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@62cf86d6
2025-06-24 15:35:03.593 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@62cf86d6
2025-06-24 15:35:03.593 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@2a6c751f
2025-06-24 15:35:03.593 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@2a6c751f
2025-06-24 15:35:03.593 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@6dd2e453
2025-06-24 15:35:03.593 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@6dd2e453
2025-06-24 15:35:03.593 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@433b1597
2025-06-24 15:35:03.593 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@433b1597
2025-06-24 15:35:03.594 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@5d5cd210
2025-06-24 15:35:03.597 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@5d5cd210
2025-06-24 15:35:03.599 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@14d18029
2025-06-24 15:35:03.603 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@4d0b7fd5
2025-06-24 15:35:03.603 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@4d0b7fd5
2025-06-24 15:35:03.604 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@46fa2a7e
2025-06-24 15:35:03.604 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@3d02ff64
2025-06-24 15:35:03.604 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@6f17dd06
2025-06-24 15:35:03.604 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@7977f046
2025-06-24 15:35:03.604 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@6ec98ccc
2025-06-24 15:35:03.604 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@441aa7ae
2025-06-24 15:35:03.605 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@1534bdc6
2025-06-24 15:35:03.606 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@53079ae6
2025-06-24 15:35:03.608 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@718ad3a6
2025-06-24 15:35:03.688 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-24 15:35:03.701 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-24 15:35:03.801 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@dd77e0d
2025-06-24 15:35:03.802 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-24 15:35:03.838 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-24 15:35:03.838 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-24 15:35:03.856 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@220f6a3c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5eb041b5)
2025-06-24 15:35:03.856 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2648aa1b) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4a3333be)
2025-06-24 15:35:03.856 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@13b4ee4e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4f55a864)
2025-06-24 15:35:03.856 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2c2edbe7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7f53a31f)
2025-06-24 15:35:03.857 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4ba1f425) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@29d563bd)
2025-06-24 15:35:03.857 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@73fe7483) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@11577ab8)
2025-06-24 15:35:03.857 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5513a46b) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5759edff)
2025-06-24 15:35:03.857 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5703c1fb) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7d2be319)
2025-06-24 15:35:03.857 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@35d3202b) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@2dfd157b)
2025-06-24 15:35:03.858 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-24 15:35:03.858 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-24 15:35:03.858 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-24 15:35:03.859 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 15:35:03.859 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 15:35:03.861 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@27e3dc9a
2025-06-24 15:35:03.861 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@46fa2a7e`
2025-06-24 15:35:03.863 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-24 15:35:03.863 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-24 15:35:03.865 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 15:35:03.866 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 15:35:03.866 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 15:35:03.866 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 15:35:03.866 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 15:35:03.866 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 15:35:03.866 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 15:35:03.866 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 15:35:03.866 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 15:35:03.867 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@3c8e4a82] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@1896299b]
2025-06-24 15:35:04.474 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@3c8e4a82] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@292b7a02]
2025-06-24 15:35:04.480 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@292b7a02] for TypeConfiguration
2025-06-24 15:35:04.480 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-24 15:35:05.455 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-24 15:35:05.850 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-24 15:35:06.006 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-24 15:35:06.065 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 4
2025-06-24 15:35:06.066 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-24 15:35:06.070 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-24 15:35:06.075 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-24 15:35:06.527 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-24 15:35:06.541 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 7.589 seconds (process running for 8.458)
2025-06-24 15:35:14.002 [SpringApplicationShutdownHook] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-24 15:35:14.006 [SpringApplicationShutdownHook] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@292b7a02] for TypeConfiguration
2025-06-24 15:35:14.006 [SpringApplicationShutdownHook] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@3bf45579] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@292b7a02]
2025-06-24 15:35:14.008 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-24 15:35:14.016 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-24 15:46:52.221 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 11472 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-24 15:46:52.223 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-24 15:46:53.462 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 15:46:53.464 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-24 15:46:53.574 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 105 ms. Found 3 JPA repository interfaces.
2025-06-24 15:46:53.598 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 15:46:53.599 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-24 15:46:53.615 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 15:46:53.615 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 15:46:53.615 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 15:46:53.616 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 0 Redis repository interfaces.
2025-06-24 15:46:57.541 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@3dea1ecc
2025-06-24 15:46:57.543 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@3dea1ecc
2025-06-24 15:46:57.544 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@3dea1ecc
2025-06-24 15:46:57.544 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@40d10264
2025-06-24 15:46:57.544 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@40d10264
2025-06-24 15:46:57.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@6edd4fe2
2025-06-24 15:46:57.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@6edd4fe2
2025-06-24 15:46:57.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@53918b5e
2025-06-24 15:46:57.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@53918b5e
2025-06-24 15:46:57.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@5366575d
2025-06-24 15:46:57.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@5366575d
2025-06-24 15:46:57.547 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@5366575d
2025-06-24 15:46:57.547 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@1b6cad77
2025-06-24 15:46:57.547 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@1b6cad77
2025-06-24 15:46:57.548 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@1b6cad77
2025-06-24 15:46:57.548 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@1fca53a7
2025-06-24 15:46:57.548 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@1fca53a7
2025-06-24 15:46:57.548 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@5f9a8ddc
2025-06-24 15:46:57.548 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@1280bae3
2025-06-24 15:46:57.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@1280bae3
2025-06-24 15:46:57.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@256a5df0
2025-06-24 15:46:57.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@1868ed54
2025-06-24 15:46:57.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@131777e8
2025-06-24 15:46:57.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@131777e8
2025-06-24 15:46:57.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@131777e8
2025-06-24 15:46:57.550 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@45790cb
2025-06-24 15:46:57.550 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@45790cb
2025-06-24 15:46:57.550 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@45790cb
2025-06-24 15:46:57.550 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@73a5d86c
2025-06-24 15:46:57.550 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@73a5d86c
2025-06-24 15:46:57.550 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@73a5d86c
2025-06-24 15:46:57.550 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@2cf88901
2025-06-24 15:46:57.551 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@2cf88901
2025-06-24 15:46:57.551 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@2cf88901
2025-06-24 15:46:57.552 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@4780341
2025-06-24 15:46:57.552 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@4780341
2025-06-24 15:46:57.552 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@4780341
2025-06-24 15:46:57.552 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@3c910acd
2025-06-24 15:46:57.552 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@3c910acd
2025-06-24 15:46:57.552 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@612ac38b
2025-06-24 15:46:57.553 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@612ac38b
2025-06-24 15:46:57.553 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@9f2fe2e
2025-06-24 15:46:57.553 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@9f2fe2e
2025-06-24 15:46:57.553 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@9f2fe2e
2025-06-24 15:46:57.553 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@4dd4965a
2025-06-24 15:46:57.553 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@79273a4f
2025-06-24 15:46:57.554 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@79273a4f
2025-06-24 15:46:57.554 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@4e26987b
2025-06-24 15:46:57.554 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@50bb1c1f
2025-06-24 15:46:57.554 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@50bb1c1f
2025-06-24 15:46:57.554 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@50bb1c1f
2025-06-24 15:46:57.554 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@39342614
2025-06-24 15:46:57.555 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@7981963f
2025-06-24 15:46:57.555 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@31e3c34
2025-06-24 15:46:57.555 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@b4d83ac
2025-06-24 15:46:57.555 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@b4d83ac
2025-06-24 15:46:57.555 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@13d10057
2025-06-24 15:46:57.556 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@13d10057
2025-06-24 15:46:57.556 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@66944c7c
2025-06-24 15:46:57.556 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@14993306
2025-06-24 15:46:57.556 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@73ae82da
2025-06-24 15:46:57.556 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@6866e740
2025-06-24 15:46:57.557 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@2cd5b19c
2025-06-24 15:46:57.557 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@7109b603
2025-06-24 15:46:57.557 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@76b642aa
2025-06-24 15:46:57.557 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@76b642aa
2025-06-24 15:46:57.557 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@29b5e7db
2025-06-24 15:46:57.557 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@29b5e7db
2025-06-24 15:46:57.557 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@286dfa20
2025-06-24 15:46:57.557 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@286dfa20
2025-06-24 15:46:57.557 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@1468e880
2025-06-24 15:46:57.557 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@1468e880
2025-06-24 15:46:57.557 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@508f4bb5
2025-06-24 15:46:57.558 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@508f4bb5
2025-06-24 15:46:57.558 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@5602e540
2025-06-24 15:46:57.558 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@11f9b95a
2025-06-24 15:46:57.558 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@42066f0d
2025-06-24 15:46:57.558 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@42066f0d
2025-06-24 15:46:57.558 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@687e561b
2025-06-24 15:46:57.558 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@299786b1
2025-06-24 15:46:57.559 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@75f8d9b0
2025-06-24 15:46:57.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@4f7ae05
2025-06-24 15:46:57.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@4f7ae05
2025-06-24 15:46:57.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@1e23ee0e
2025-06-24 15:46:57.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@b144175
2025-06-24 15:46:57.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@38923cfe
2025-06-24 15:46:57.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@38923cfe
2025-06-24 15:46:57.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@1ac3a6f
2025-06-24 15:46:57.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@1ac3a6f
2025-06-24 15:46:57.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@fee7ca
2025-06-24 15:46:57.562 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@fee7ca
2025-06-24 15:46:57.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@fee7ca
2025-06-24 15:46:57.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@29c80149
2025-06-24 15:46:57.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@29c80149
2025-06-24 15:46:57.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@29c80149
2025-06-24 15:46:57.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@14ad42
2025-06-24 15:46:57.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@608b906d
2025-06-24 15:46:57.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@173cfb01
2025-06-24 15:46:57.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@173cfb01
2025-06-24 15:46:57.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@7e1762e6
2025-06-24 15:46:57.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@7e1762e6
2025-06-24 15:46:57.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@7e1762e6
2025-06-24 15:46:57.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@5bccaedb
2025-06-24 15:46:57.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@67784537
2025-06-24 15:46:57.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@17ec5e2a
2025-06-24 15:46:57.564 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@17ec5e2a
2025-06-24 15:46:57.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@52290e63
2025-06-24 15:46:57.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@52290e63
2025-06-24 15:46:57.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@52290e63
2025-06-24 15:46:57.566 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@6c2dd88b
2025-06-24 15:46:57.566 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@6c2dd88b
2025-06-24 15:46:57.566 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@49d979c4
2025-06-24 15:46:57.566 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@49d979c4
2025-06-24 15:46:57.566 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@3cb173db
2025-06-24 15:46:57.566 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@3cb173db
2025-06-24 15:46:57.566 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@26712838
2025-06-24 15:46:57.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@26712838
2025-06-24 15:46:57.568 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@249a45fd
2025-06-24 15:46:57.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@249a45fd
2025-06-24 15:46:57.571 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@268f0ff3
2025-06-24 15:46:57.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@3df3410a
2025-06-24 15:46:57.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@3df3410a
2025-06-24 15:46:57.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@2633d09c
2025-06-24 15:46:57.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@54f25b42
2025-06-24 15:46:57.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@521c67f0
2025-06-24 15:46:57.577 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@7d156f8f
2025-06-24 15:46:57.577 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@451af781
2025-06-24 15:46:57.577 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@3749c2b
2025-06-24 15:46:57.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@32e65852
2025-06-24 15:46:57.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@64d93096
2025-06-24 15:46:57.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@76ed7573
2025-06-24 15:46:57.661 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-24 15:46:57.673 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-24 15:46:57.761 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7d43f1c9
2025-06-24 15:46:57.762 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-24 15:46:57.795 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-24 15:46:57.795 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-24 15:46:57.811 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1d33e72e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@26a202ae)
2025-06-24 15:46:57.811 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@46bdc55e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6e12f38c)
2025-06-24 15:46:57.811 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6c1a63f7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5a9baba8)
2025-06-24 15:46:57.812 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@72240290) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@b5311cb)
2025-06-24 15:46:57.812 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@34e9de8d) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@33a8f553)
2025-06-24 15:46:57.812 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@61ca5134) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7204d98f)
2025-06-24 15:46:57.812 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@8636cf4) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7c9512c6)
2025-06-24 15:46:57.812 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4f65af91) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1b79df53)
2025-06-24 15:46:57.812 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@8ee1404) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5c3924fd)
2025-06-24 15:46:57.813 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-24 15:46:57.813 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-24 15:46:57.814 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-24 15:46:57.814 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 15:46:57.815 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 15:46:57.816 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@6787bd41
2025-06-24 15:46:57.816 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@2633d09c`
2025-06-24 15:46:57.818 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-24 15:46:57.818 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-24 15:46:57.820 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 15:46:57.820 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 15:46:57.820 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 15:46:57.820 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 15:46:57.821 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 15:46:57.821 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 15:46:57.822 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 15:46:57.822 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 15:46:57.822 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 15:46:57.822 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@1adf387e] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@72b53f27]
2025-06-24 15:46:58.421 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@1adf387e] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@247877f3]
2025-06-24 15:46:58.427 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@247877f3] for TypeConfiguration
2025-06-24 15:46:58.428 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-24 15:46:59.234 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-24 15:46:59.563 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-24 15:46:59.709 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-24 15:46:59.743 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 4
2025-06-24 15:46:59.744 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-24 15:46:59.747 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-24 15:46:59.749 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-24 15:47:00.116 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-24 15:47:00.129 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 8.504 seconds (process running for 9.123)
2025-06-24 15:47:30.000 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractType: triples, textLength: 0
2025-06-24 15:47:30.006 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-24 15:47:30.034 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractType: triples, textLength: 0
2025-06-24 15:47:30.035 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-24 15:47:30.047 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received batch extract request - extractType: triples, textsCount: 0
2025-06-24 15:47:30.050 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Batch extract request failed - empty texts list
2025-06-24 15:47:30.059 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received social extract request - extractTypes: entities,relations, maskSensitive: null, textLength: 0
2025-06-24 15:47:30.060 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Social extract request failed - empty text content
2025-06-24 15:47:30.070 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received social extract request - extractTypes: entities,relations, maskSensitive: false, textLength: 46
2025-06-24 15:47:42.726 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 405
2025-06-24 15:47:42.759 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 571
2025-06-24 15:47:42.760 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "马云",
      "predicate": "创始人",
      "object": "阿里巴巴",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "共同创立",
      "object": "彭蕾",
      "confidence": 0.90
    },
    {
      "subject": "马云",
      "predicate": "共同创立",
      "object": "蔡崇信",
      "confidence": 0.90
    },
    {
      "subject": "马云",
      "predicate": "结婚",
      "object": "张瑛",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "育有",
      "object": "三个孩子",
      "confidence": 0.90
    }
  ]
}
2025-06-24 15:47:42.760 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "马云",
      "predicate": "创始人",
      "object": "阿里巴巴",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "共同创立",
      "object": "彭蕾",
      "confidence": 0.90
    },
    {
      "subject": "马云",
      "predicate": "共同创立",
      "object": "蔡崇信",
      "confidence": 0.90
    },
    {
      "subject": "马云",
      "predicate": "结婚",
      "object": "张瑛",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "育有",
      "object": "三个孩子",
      "confidence": 0.90
    }
  ]
}
2025-06-24 15:47:42.765 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 15:47:42.766 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 5 个三元组
2025-06-24 15:47:42.847 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 15:47:42.892 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 15:47:42.903 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 马云 (通过三元组提取)
2025-06-24 15:47:42.903 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 马云 --[创始人]--> 阿里巴巴
2025-06-24 15:47:42.906 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 15:47:42.910 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 马云 已存在，跳过插入
2025-06-24 15:47:42.910 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 马云 --[共同创立]--> 彭蕾
2025-06-24 15:47:42.912 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 15:47:42.916 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 马云 已存在，跳过插入
2025-06-24 15:47:42.916 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 马云 --[共同创立]--> 蔡崇信
2025-06-24 15:47:42.917 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 15:47:42.919 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 马云 已存在，跳过插入
2025-06-24 15:47:42.919 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 15:47:42.921 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 15:47:42.925 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 张瑛 (通过三元组提取)
2025-06-24 15:47:42.925 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 马云 --[结婚]--> 张瑛
2025-06-24 15:47:42.926 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 15:47:42.929 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 马云 已存在，跳过插入
2025-06-24 15:47:42.929 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 马云 --[育有]--> 三个孩子
2025-06-24 15:47:42.929 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 15:47:42.938 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Social extract request completed successfully in 12869ms
2025-06-24 15:47:42.967 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received batch extract request - extractType: triples, textsCount: 3
2025-06-24 15:47:49.942 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 21
2025-06-24 15:47:49.949 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 246
2025-06-24 15:47:49.950 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "是",
      "object": "国际知名的动作演员",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "主演过",
      "object": "《醉拳》",
      "confidence": 0.95
    }
  ]
}
2025-06-24 15:47:49.950 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "是",
      "object": "国际知名的动作演员",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "主演过",
      "object": "《醉拳》",
      "confidence": 0.95
    }
  ]
}
2025-06-24 15:47:49.952 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 15:47:49.953 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组
2025-06-24 15:47:49.960 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 15:47:49.966 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 15:47:49.974 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 成龙 (通过三元组提取)
2025-06-24 15:47:49.974 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[是]--> 国际知名的动作演员
2025-06-24 15:47:49.976 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 15:47:49.980 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-24 15:47:49.981 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 15:47:49.984 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 15:47:49.987 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 《醉拳》 (通过三元组提取)
2025-06-24 15:47:49.988 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[主演过]--> 《醉拳》
2025-06-24 15:47:49.988 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 15:47:50.034 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 24
2025-06-24 15:47:50.039 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 249
2025-06-24 15:47:50.040 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "出演",
      "object": "电影《无间道》",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "是",
      "object": "香港四大天王之一",
      "confidence": 0.95
    }
  ]
}
2025-06-24 15:47:50.042 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "出演",
      "object": "电影《无间道》",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "是",
      "object": "香港四大天王之一",
      "confidence": 0.95
    }
  ]
}
2025-06-24 15:47:50.044 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 15:47:50.044 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组
2025-06-24 15:47:50.045 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 15:47:50.049 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 15:47:50.052 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 刘德华 (通过三元组提取)
2025-06-24 15:47:50.053 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[出演]--> 电影《无间道》
2025-06-24 15:47:50.054 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 15:47:50.057 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-24 15:47:50.057 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[是]--> 香港四大天王之一
2025-06-24 15:47:50.058 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 15:47:50.270 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 23
2025-06-24 15:47:50.275 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 248
2025-06-24 15:47:50.275 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "是",
      "object": "著名的华语歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "代表作品",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-24 15:47:50.275 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "是",
      "object": "著名的华语歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "代表作品",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-24 15:47:50.276 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 15:47:50.276 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组
2025-06-24 15:47:50.277 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 15:47:50.280 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 15:47:50.283 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 周杰伦 (通过三元组提取)
2025-06-24 15:47:50.284 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 15:47:50.286 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 15:47:50.288 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 著名的华语歌手 (通过三元组提取)
2025-06-24 15:47:50.288 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[是]--> 著名的华语歌手
2025-06-24 15:47:50.290 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 15:47:50.292 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-24 15:47:50.292 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[代表作品]--> 《青花瓷》
2025-06-24 15:47:50.292 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 15:47:50.301 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Batch extract request completed successfully in 7334ms
2025-06-24 15:47:50.313 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractType: triples, textLength: 408
2025-06-24 15:48:52.336 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractType: triples, textLength: 402
2025-06-24 15:49:22.363 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 408
2025-06-24 15:49:22.363 [ForkJoinPool.commonPool-worker-1] ERROR c.datacenter.extract.service.TextExtractionService - 提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 15:49:22.364 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 92051ms
2025-06-24 15:49:54.348 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractType: triples, textLength: 331
2025-06-24 15:50:24.364 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 402
2025-06-24 15:50:24.372 [ForkJoinPool.commonPool-worker-3] ERROR c.datacenter.extract.service.TextExtractionService - 提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 15:50:24.376 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 92040ms
2025-06-24 15:50:56.354 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractType: triples, textLength: 442
2025-06-24 15:51:26.385 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 331
2025-06-24 15:51:26.392 [ForkJoinPool.commonPool-worker-1] ERROR c.datacenter.extract.service.TextExtractionService - 提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 15:51:26.393 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 92045ms
2025-06-24 15:51:58.365 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractType: triples, textLength: 461
2025-06-24 15:52:28.395 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 442
2025-06-24 15:52:28.402 [ForkJoinPool.commonPool-worker-3] ERROR c.datacenter.extract.service.TextExtractionService - 提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 15:52:28.404 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 92051ms
2025-06-24 15:53:00.374 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractType: triples, textLength: 400
2025-06-24 15:53:30.398 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 461
2025-06-24 15:53:30.399 [ForkJoinPool.commonPool-worker-1] ERROR c.datacenter.extract.service.TextExtractionService - 提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 15:53:30.400 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 92035ms
2025-06-24 15:54:00.932 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 400
2025-06-24 15:54:00.951 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 1638
2025-06-24 15:54:00.951 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "《奔跑吧》",
      "predicate": "是",
      "object": "浙江卫视推出的户外竞技真人秀节目",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧》",
      "predicate": "开播时间",
      "object": "2014年",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧》",
      "predicate": "制作单位",
      "object": "浙江卫视节目中心",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧》",
      "predicate": "总导演",
      "object": "姚译添",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧》",
      "predicate": "执行导演",
      "object": "刘在石",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧》",
      "predicate": "固定成员",
      "object": "邓超、Angelababy（杨颖）、李晨、陈赫、郑恺、王祖蓝、包贝尔等",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧》",
      "predicate": "邀请嘉宾",
      "object": "范冰冰、黄晓明、赵丽颖、迪丽热巴、鹿晗、易烊千玺等",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧》",
      "predicate": "拍摄地点",
      "object": "北京、上海、杭州、成都、青岛、厦门、长沙等城市",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧》",
      "predicate": "获奖",
      "object": "国家广播电视总局优秀节目奖（2016年）",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧》",
      "predicate": "获奖",
      "object": "亚洲电视节最佳综艺节目奖（2017年）",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧》",
      "predicate": "首播平台",
      "object": "浙江卫视",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧》",
      "predicate": "网络独播平台",
      "object": "爱奇艺、优酷、腾讯视频",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧》",
      "predicate": "收视率",
      "object": "长期位居同时段第一",
      "confidence": 0.95
    }
  ]
}
2025-06-24 15:54:00.952 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "《奔跑吧》",
      "predicate": "是",
      "object": "浙江卫视推出的户外竞技真人秀节目",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧》",
      "predicate": "开播时间",
      "object": "2014年",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧》",
      "predicate": "制作单位",
      "object": "浙江卫视节目中心",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧》",
      "predicate": "总导演",
      "object": "姚译添",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧》",
      "predicate": "执行导演",
      "object": "刘在石",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧》",
      "predicate": "固定成员",
      "object": "邓超、Angelababy（杨颖）、李晨、陈赫、郑恺、王祖蓝、包贝尔等",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧》",
      "predicate": "邀请嘉宾",
      "object": "范冰冰、黄晓明、赵丽颖、迪丽热巴、鹿晗、易烊千玺等",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧》",
      "predicate": "拍摄地点",
      "object": "北京、上海、杭州、成都、青岛、厦门、长沙等城市",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧》",
      "predicate": "获奖",
      "object": "国家广播电视总局优秀节目奖（2016年）",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧》",
      "predicate": "获奖",
      "object": "亚洲电视节最佳综艺节目奖（2017年）",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧》",
      "predicate": "首播平台",
      "object": "浙江卫视",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧》",
      "predicate": "网络独播平台",
      "object": "爱奇艺、优酷、腾讯视频",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧》",
      "predicate": "收视率",
      "object": "长期位居同时段第一",
      "confidence": 0.95
    }
  ]
}
2025-06-24 15:54:00.957 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 15:54:00.957 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 处理 13 个三元组
2025-06-24 15:54:00.977 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 15:54:00.992 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 15:54:00.998 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《奔跑吧》 (通过三元组提取)
2025-06-24 15:54:00.998 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧》 --[是]--> 浙江卫视推出的户外竞技真人秀节目
2025-06-24 15:54:01.002 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 15:54:01.009 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 作品 《奔跑吧》 已存在，跳过插入
2025-06-24 15:54:01.009 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧》 --[开播时间]--> 2014年
2025-06-24 15:54:01.010 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 15:54:01.014 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 作品 《奔跑吧》 已存在，跳过插入
2025-06-24 15:54:01.014 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧》 --[制作单位]--> 浙江卫视节目中心
2025-06-24 15:54:01.015 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 15:54:01.019 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 15:54:01.021 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 《奔跑吧》 (通过三元组提取)
2025-06-24 15:54:01.022 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 15:54:01.027 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 15:54:01.029 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 姚译添 (通过三元组提取)
2025-06-24 15:54:01.029 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧》 --[总导演]--> 姚译添
2025-06-24 15:54:01.030 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 15:54:01.032 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 《奔跑吧》 已存在，跳过插入
2025-06-24 15:54:01.033 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 15:54:01.036 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 15:54:01.037 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 刘在石 (通过三元组提取)
2025-06-24 15:54:01.037 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧》 --[执行导演]--> 刘在石
2025-06-24 15:54:01.039 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 15:54:01.041 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 作品 《奔跑吧》 已存在，跳过插入
2025-06-24 15:54:01.041 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧》 --[固定成员]--> 邓超、Angelababy（杨颖）、李晨、陈赫、郑恺、王祖蓝、包贝尔等
2025-06-24 15:54:01.042 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 15:54:01.044 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 作品 《奔跑吧》 已存在，跳过插入
2025-06-24 15:54:01.045 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 15:54:01.047 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 15:54:01.048 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 范冰冰、黄晓明、赵丽颖、迪丽热巴、鹿晗、易烊千玺等 (通过三元组提取)
2025-06-24 15:54:01.048 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧》 --[邀请嘉宾]--> 范冰冰、黄晓明、赵丽颖、迪丽热巴、鹿晗、易烊千玺等
2025-06-24 15:54:01.050 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 15:54:01.052 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 作品 《奔跑吧》 已存在，跳过插入
2025-06-24 15:54:01.052 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧》 --[拍摄地点]--> 北京、上海、杭州、成都、青岛、厦门、长沙等城市
2025-06-24 15:54:01.053 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 15:54:01.054 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 作品 《奔跑吧》 已存在，跳过插入
2025-06-24 15:54:01.055 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧》 --[获奖]--> 国家广播电视总局优秀节目奖（2016年）
2025-06-24 15:54:01.056 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 15:54:01.057 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 作品 《奔跑吧》 已存在，跳过插入
2025-06-24 15:54:01.057 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧》 --[获奖]--> 亚洲电视节最佳综艺节目奖（2017年）
2025-06-24 15:54:01.059 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 15:54:01.060 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 作品 《奔跑吧》 已存在，跳过插入
2025-06-24 15:54:01.060 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧》 --[首播平台]--> 浙江卫视
2025-06-24 15:54:01.061 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 15:54:01.062 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 作品 《奔跑吧》 已存在，跳过插入
2025-06-24 15:54:01.062 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧》 --[网络独播平台]--> 爱奇艺、优酷、腾讯视频
2025-06-24 15:54:01.063 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 15:54:01.064 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 作品 《奔跑吧》 已存在，跳过插入
2025-06-24 15:54:01.064 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧》 --[收视率]--> 长期位居同时段第一
2025-06-24 15:54:01.064 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 15:54:01.068 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 60696ms
2025-06-24 15:54:02.377 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractType: triples, textLength: 465
2025-06-24 15:55:04.386 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractType: triples, textLength: 489
2025-06-24 15:55:34.401 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 465
2025-06-24 15:55:34.401 [ForkJoinPool.commonPool-worker-3] ERROR c.datacenter.extract.service.TextExtractionService - 提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 15:55:34.402 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 92025ms
2025-06-24 15:56:06.385 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractType: triples, textLength: 404
2025-06-24 15:56:36.410 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 489
2025-06-24 15:56:36.411 [ForkJoinPool.commonPool-worker-1] ERROR c.datacenter.extract.service.TextExtractionService - 提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 15:56:36.411 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 92025ms
2025-06-24 15:57:08.396 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractType: triples, textLength: 346
2025-06-24 15:57:38.414 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 404
2025-06-24 15:57:38.415 [ForkJoinPool.commonPool-worker-3] ERROR c.datacenter.extract.service.TextExtractionService - 提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 15:57:38.416 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 92031ms
2025-06-24 15:58:40.428 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 346
2025-06-24 15:58:40.428 [ForkJoinPool.commonPool-worker-1] ERROR c.datacenter.extract.service.TextExtractionService - 提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 15:58:40.429 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 92033ms
2025-06-24 16:00:12.394 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractType: triples, textLength: 22
2025-06-24 16:00:21.447 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 22
2025-06-24 16:00:21.454 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 352
2025-06-24 16:00:21.455 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "是",
      "object": "著名歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "与",
      "object": "昆凌结婚",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "育有",
      "object": "两个孩子",
      "confidence": 0.95
    }
  ]
}
2025-06-24 16:00:21.455 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "是",
      "object": "著名歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "与",
      "object": "昆凌结婚",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "育有",
      "object": "两个孩子",
      "confidence": 0.95
    }
  ]
}
2025-06-24 16:00:21.457 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 16:00:21.457 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组
2025-06-24 16:00:21.461 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 16:00:21.466 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-24 16:00:21.467 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[是]--> 著名歌手
2025-06-24 16:00:21.468 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 16:00:21.472 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-24 16:00:21.472 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[与]--> 昆凌结婚
2025-06-24 16:00:21.473 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 16:00:21.475 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-24 16:00:21.475 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[育有]--> 两个孩子
2025-06-24 16:00:21.475 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 16:00:21.479 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 9085ms
2025-06-24 16:04:03.272 [ForkJoinPool.commonPool-worker-6] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractType: triples, textLength: 0
2025-06-24 16:04:03.274 [ForkJoinPool.commonPool-worker-6] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-24 16:04:03.278 [ForkJoinPool.commonPool-worker-6] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractType: triples, textLength: 0
2025-06-24 16:04:03.278 [ForkJoinPool.commonPool-worker-6] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-24 16:04:03.282 [ForkJoinPool.commonPool-worker-6] INFO  c.datacenter.extract.controller.ExtractController - Received batch extract request - extractType: triples, textsCount: 0
2025-06-24 16:04:03.282 [ForkJoinPool.commonPool-worker-6] WARN  c.datacenter.extract.controller.ExtractController - Batch extract request failed - empty texts list
2025-06-24 16:04:03.285 [ForkJoinPool.commonPool-worker-6] INFO  c.datacenter.extract.controller.ExtractController - Received social extract request - extractTypes: entities,relations, maskSensitive: null, textLength: 0
2025-06-24 16:04:03.285 [ForkJoinPool.commonPool-worker-6] WARN  c.datacenter.extract.controller.ExtractController - Social extract request failed - empty text content
2025-06-24 16:04:03.292 [ForkJoinPool.commonPool-worker-6] INFO  c.datacenter.extract.controller.ExtractController - Received social extract request - extractTypes: entities,relations, maskSensitive: false, textLength: 46
2025-06-24 16:04:03.295 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 571
2025-06-24 16:04:03.295 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "马云",
      "predicate": "创始人",
      "object": "阿里巴巴",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "共同创立",
      "object": "彭蕾",
      "confidence": 0.90
    },
    {
      "subject": "马云",
      "predicate": "共同创立",
      "object": "蔡崇信",
      "confidence": 0.90
    },
    {
      "subject": "马云",
      "predicate": "结婚",
      "object": "张瑛",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "育有",
      "object": "三个孩子",
      "confidence": 0.90
    }
  ]
}
2025-06-24 16:04:03.295 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "马云",
      "predicate": "创始人",
      "object": "阿里巴巴",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "共同创立",
      "object": "彭蕾",
      "confidence": 0.90
    },
    {
      "subject": "马云",
      "predicate": "共同创立",
      "object": "蔡崇信",
      "confidence": 0.90
    },
    {
      "subject": "马云",
      "predicate": "结婚",
      "object": "张瑛",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "育有",
      "object": "三个孩子",
      "confidence": 0.90
    }
  ]
}
2025-06-24 16:04:03.296 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 16:04:03.296 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 处理 5 个三元组
2025-06-24 16:04:03.298 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 16:04:03.301 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 人员 马云 已存在，跳过插入
2025-06-24 16:04:03.301 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 马云 --[创始人]--> 阿里巴巴
2025-06-24 16:04:03.302 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 16:04:03.304 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 人员 马云 已存在，跳过插入
2025-06-24 16:04:03.305 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 马云 --[共同创立]--> 彭蕾
2025-06-24 16:04:03.306 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 16:04:03.309 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 人员 马云 已存在，跳过插入
2025-06-24 16:04:03.309 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 马云 --[共同创立]--> 蔡崇信
2025-06-24 16:04:03.310 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 16:04:03.312 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 人员 马云 已存在，跳过插入
2025-06-24 16:04:03.313 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 16:04:03.316 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 人员 张瑛 已存在，跳过插入
2025-06-24 16:04:03.316 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 马云 --[结婚]--> 张瑛
2025-06-24 16:04:03.317 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 16:04:03.318 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 人员 马云 已存在，跳过插入
2025-06-24 16:04:03.318 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 马云 --[育有]--> 三个孩子
2025-06-24 16:04:03.318 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 16:04:03.321 [ForkJoinPool.commonPool-worker-6] INFO  c.datacenter.extract.controller.ExtractController - Social extract request completed successfully in 28ms
2025-06-24 16:04:03.328 [ForkJoinPool.commonPool-worker-6] INFO  c.datacenter.extract.controller.ExtractController - Received batch extract request - extractType: triples, textsCount: 3
2025-06-24 16:04:03.331 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 246
2025-06-24 16:04:03.332 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "是",
      "object": "国际知名的动作演员",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "主演过",
      "object": "《醉拳》",
      "confidence": 0.95
    }
  ]
}
2025-06-24 16:04:03.332 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "是",
      "object": "国际知名的动作演员",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "主演过",
      "object": "《醉拳》",
      "confidence": 0.95
    }
  ]
}
2025-06-24 16:04:03.332 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 16:04:03.332 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组
2025-06-24 16:04:03.333 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 16:04:03.333 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 249
2025-06-24 16:04:03.333 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "出演",
      "object": "电影《无间道》",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "是",
      "object": "香港四大天王之一",
      "confidence": 0.95
    }
  ]
}
2025-06-24 16:04:03.333 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "出演",
      "object": "电影《无间道》",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "是",
      "object": "香港四大天王之一",
      "confidence": 0.95
    }
  ]
}
2025-06-24 16:04:03.334 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 16:04:03.334 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组
2025-06-24 16:04:03.334 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 16:04:03.334 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-24 16:04:03.335 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[是]--> 国际知名的动作演员
2025-06-24 16:04:03.335 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 248
2025-06-24 16:04:03.335 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "是",
      "object": "著名的华语歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "代表作品",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-24 16:04:03.335 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "是",
      "object": "著名的华语歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "代表作品",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-24 16:04:03.336 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 16:04:03.337 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-24 16:04:03.338 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[出演]--> 电影《无间道》
2025-06-24 16:04:03.339 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-24 16:04:03.339 [ForkJoinPool.commonPool-worker-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 16:04:03.340 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 16:04:03.340 [ForkJoinPool.commonPool-worker-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 16:04:03.340 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组
2025-06-24 16:04:03.340 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-24 16:04:03.340 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[是]--> 香港四大天王之一
2025-06-24 16:04:03.340 [ForkJoinPool.commonPool-worker-8] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 16:04:03.341 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 16:04:03.341 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 人员 《醉拳》 已存在，跳过插入
2025-06-24 16:04:03.341 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[主演过]--> 《醉拳》
2025-06-24 16:04:03.341 [ForkJoinPool.commonPool-worker-6] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 16:04:03.342 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-24 16:04:03.343 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 16:04:03.344 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 人员 著名的华语歌手 已存在，跳过插入
2025-06-24 16:04:03.344 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[是]--> 著名的华语歌手
2025-06-24 16:04:03.344 [ForkJoinPool.commonPool-worker-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 16:04:03.348 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-24 16:04:03.348 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[代表作品]--> 《青花瓷》
2025-06-24 16:04:03.348 [ForkJoinPool.commonPool-worker-7] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 16:04:03.349 [ForkJoinPool.commonPool-worker-6] INFO  c.datacenter.extract.controller.ExtractController - Batch extract request completed successfully in 22ms
2025-06-24 16:04:03.354 [ForkJoinPool.commonPool-worker-6] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractType: triples, textLength: 408
2025-06-24 16:05:35.380 [ForkJoinPool.commonPool-worker-6] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 408
2025-06-24 16:05:35.381 [ForkJoinPool.commonPool-worker-6] ERROR c.datacenter.extract.service.TextExtractionService - 提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 16:05:35.382 [ForkJoinPool.commonPool-worker-6] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 92028ms
2025-06-24 16:09:50.939 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication v1.0.0 using Java 21.0.4 with PID 16093 (/Users/admin/workspace/AGENT/extract-service/target/extract-service-1.0.0.jar started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-24 16:09:50.941 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-24 16:09:51.474 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 16:09:51.476 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-24 16:09:51.579 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 99 ms. Found 3 JPA repository interfaces.
2025-06-24 16:09:51.590 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 16:09:51.591 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-24 16:09:51.599 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 16:09:51.599 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 16:09:51.599 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 16:09:51.599 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 3 ms. Found 0 Redis repository interfaces.
2025-06-24 16:09:52.078 [main] ERROR i.n.resolver.dns.DnsServerAddressStreamProviders - Unable to load io.netty.resolver.dns.macos.MacOSDnsServerAddressStreamProvider, fallback to system defaults. This may result in incorrect DNS resolutions on MacOS. Check whether you have a dependency on 'io.netty:netty-resolver-dns-native-macos'. Use DEBUG level to see the full stack: java.lang.UnsatisfiedLinkError: failed to load the required native library
2025-06-24 16:09:52.452 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@e3c36d
2025-06-24 16:09:52.452 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@e3c36d
2025-06-24 16:09:52.453 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@e3c36d
2025-06-24 16:09:52.453 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@3199a202
2025-06-24 16:09:52.453 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@3199a202
2025-06-24 16:09:52.453 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@7286827b
2025-06-24 16:09:52.453 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@7286827b
2025-06-24 16:09:52.453 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@1dd64243
2025-06-24 16:09:52.453 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@1dd64243
2025-06-24 16:09:52.453 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@2ef913a4
2025-06-24 16:09:52.453 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@2ef913a4
2025-06-24 16:09:52.453 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@2ef913a4
2025-06-24 16:09:52.453 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@520c3dcb
2025-06-24 16:09:52.453 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@520c3dcb
2025-06-24 16:09:52.453 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@520c3dcb
2025-06-24 16:09:52.454 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@145fe8ab
2025-06-24 16:09:52.454 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@145fe8ab
2025-06-24 16:09:52.454 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@3b347439
2025-06-24 16:09:52.454 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@5d3634c8
2025-06-24 16:09:52.454 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@5d3634c8
2025-06-24 16:09:52.454 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@6e67a8c0
2025-06-24 16:09:52.454 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@5960f17
2025-06-24 16:09:52.454 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@1d1b3620
2025-06-24 16:09:52.454 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@1d1b3620
2025-06-24 16:09:52.454 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@1d1b3620
2025-06-24 16:09:52.454 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@71e7c13f
2025-06-24 16:09:52.454 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@71e7c13f
2025-06-24 16:09:52.454 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@71e7c13f
2025-06-24 16:09:52.454 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@2295566b
2025-06-24 16:09:52.454 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@2295566b
2025-06-24 16:09:52.454 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@2295566b
2025-06-24 16:09:52.455 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@174e1b99
2025-06-24 16:09:52.455 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@174e1b99
2025-06-24 16:09:52.455 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@174e1b99
2025-06-24 16:09:52.455 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@53a09566
2025-06-24 16:09:52.455 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@53a09566
2025-06-24 16:09:52.455 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@53a09566
2025-06-24 16:09:52.455 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@1c815814
2025-06-24 16:09:52.455 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@1c815814
2025-06-24 16:09:52.455 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@14af73e1
2025-06-24 16:09:52.455 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@14af73e1
2025-06-24 16:09:52.455 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@73da303e
2025-06-24 16:09:52.455 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@73da303e
2025-06-24 16:09:52.455 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@73da303e
2025-06-24 16:09:52.455 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@24068086
2025-06-24 16:09:52.455 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@32513dea
2025-06-24 16:09:52.455 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@32513dea
2025-06-24 16:09:52.456 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@5d0e703a
2025-06-24 16:09:52.456 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@7f77e065
2025-06-24 16:09:52.456 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@7f77e065
2025-06-24 16:09:52.456 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@7f77e065
2025-06-24 16:09:52.456 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@6f655dbd
2025-06-24 16:09:52.456 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@546083d6
2025-06-24 16:09:52.456 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@7ac1b6c0
2025-06-24 16:09:52.456 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@3a751535
2025-06-24 16:09:52.456 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@3a751535
2025-06-24 16:09:52.456 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@7fb82f73
2025-06-24 16:09:52.456 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@7fb82f73
2025-06-24 16:09:52.456 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@2f166d61
2025-06-24 16:09:52.456 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@5896b9f5
2025-06-24 16:09:52.456 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@4ad8d36f
2025-06-24 16:09:52.456 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@74a5bef0
2025-06-24 16:09:52.456 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@68c4a860
2025-06-24 16:09:52.456 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@570ed9c
2025-06-24 16:09:52.456 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@93f15f6
2025-06-24 16:09:52.457 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@93f15f6
2025-06-24 16:09:52.457 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@5034681f
2025-06-24 16:09:52.457 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@5034681f
2025-06-24 16:09:52.457 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@1dfe5dd1
2025-06-24 16:09:52.457 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@1dfe5dd1
2025-06-24 16:09:52.457 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@1fe05fff
2025-06-24 16:09:52.457 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@1fe05fff
2025-06-24 16:09:52.457 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@6e017950
2025-06-24 16:09:52.457 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@6e017950
2025-06-24 16:09:52.457 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@1d06801f
2025-06-24 16:09:52.457 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@727956bb
2025-06-24 16:09:52.457 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@6ffbf0ac
2025-06-24 16:09:52.457 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@6ffbf0ac
2025-06-24 16:09:52.457 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@ad5cffa
2025-06-24 16:09:52.457 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@237aa0c7
2025-06-24 16:09:52.457 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@1b8ee69d
2025-06-24 16:09:52.457 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@2b400bd0
2025-06-24 16:09:52.457 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@2b400bd0
2025-06-24 16:09:52.457 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@fceab5d
2025-06-24 16:09:52.457 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@79445efb
2025-06-24 16:09:52.458 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@1592e540
2025-06-24 16:09:52.458 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@1592e540
2025-06-24 16:09:52.458 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@3e2772a9
2025-06-24 16:09:52.458 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@3e2772a9
2025-06-24 16:09:52.458 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@4449b273
2025-06-24 16:09:52.458 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@4449b273
2025-06-24 16:09:52.458 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@4449b273
2025-06-24 16:09:52.458 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@1fa18f87
2025-06-24 16:09:52.458 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@1fa18f87
2025-06-24 16:09:52.458 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@1fa18f87
2025-06-24 16:09:52.458 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@1d9bd1d6
2025-06-24 16:09:52.458 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@18ac4af6
2025-06-24 16:09:52.458 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@117fb9ba
2025-06-24 16:09:52.458 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@117fb9ba
2025-06-24 16:09:52.458 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@2b1d1a5
2025-06-24 16:09:52.458 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@2b1d1a5
2025-06-24 16:09:52.458 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@2b1d1a5
2025-06-24 16:09:52.459 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@41e7a544
2025-06-24 16:09:52.459 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@3b66ac74
2025-06-24 16:09:52.459 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@573870cb
2025-06-24 16:09:52.459 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@573870cb
2025-06-24 16:09:52.459 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@5b88af70
2025-06-24 16:09:52.459 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@5b88af70
2025-06-24 16:09:52.459 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@5b88af70
2025-06-24 16:09:52.459 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@2739ecc0
2025-06-24 16:09:52.459 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@2739ecc0
2025-06-24 16:09:52.459 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@2932e15f
2025-06-24 16:09:52.459 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@2932e15f
2025-06-24 16:09:52.459 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@3d98729a
2025-06-24 16:09:52.459 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@3d98729a
2025-06-24 16:09:52.459 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@2375a976
2025-06-24 16:09:52.459 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@2375a976
2025-06-24 16:09:52.460 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@4bc21e34
2025-06-24 16:09:52.460 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@4bc21e34
2025-06-24 16:09:52.460 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@7544260a
2025-06-24 16:09:52.463 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@33891646
2025-06-24 16:09:52.463 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@33891646
2025-06-24 16:09:52.463 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@a63643e
2025-06-24 16:09:52.464 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@43294e9b
2025-06-24 16:09:52.464 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@26d24d7a
2025-06-24 16:09:52.464 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@5a78b52b
2025-06-24 16:09:52.464 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@4bab78ce
2025-06-24 16:09:52.464 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@42ffbab6
2025-06-24 16:09:52.464 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@69bca406
2025-06-24 16:09:52.464 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@79c1ccf7
2025-06-24 16:09:52.464 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@4654e373
2025-06-24 16:09:52.560 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-24 16:09:52.576 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-24 16:09:52.688 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@6dc2e473
2025-06-24 16:09:52.689 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-24 16:09:52.714 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-24 16:09:52.715 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-24 16:09:52.730 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4b9ed99d) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@39b95a80)
2025-06-24 16:09:52.730 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3ec62141) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@402c9a60)
2025-06-24 16:09:52.730 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7d43f1c9) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@eddc9bb)
2025-06-24 16:09:52.730 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@11e3d08) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@25c548d1)
2025-06-24 16:09:52.730 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@476a2819) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@279ab15e)
2025-06-24 16:09:52.730 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@571c2ed8) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5810772a)
2025-06-24 16:09:52.730 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4eacb6d1) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3ccefe1b)
2025-06-24 16:09:52.730 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@a926db4) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@51e0f2eb)
2025-06-24 16:09:52.730 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7a51dc38) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@31a4db4f)
2025-06-24 16:09:52.731 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-24 16:09:52.731 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-24 16:09:52.731 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-24 16:09:52.732 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 16:09:52.732 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 16:09:52.734 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@7c8689e
2025-06-24 16:09:52.734 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@a63643e`
2025-06-24 16:09:52.736 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-24 16:09:52.736 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-24 16:09:52.737 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 16:09:52.738 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 16:09:52.738 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 16:09:52.738 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 16:09:52.738 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 16:09:52.738 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 16:09:52.738 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 16:09:52.738 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 16:09:52.738 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 16:09:52.739 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@5dfec221] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@5e9cb95]
2025-06-24 16:09:53.202 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@5dfec221] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@627cb3ed]
2025-06-24 16:09:53.203 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@627cb3ed] for TypeConfiguration
2025-06-24 16:09:53.203 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-24 16:09:53.580 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-24 16:09:53.870 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-24 16:09:53.961 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-24 16:09:53.999 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 4
2025-06-24 16:09:53.999 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-24 16:09:54.000 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-24 16:09:54.000 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-24 16:09:54.271 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-24 16:09:54.283 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 3.702 seconds (process running for 4.07)
2025-06-24 16:10:04.125 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractType: triples, textLength: 40
2025-06-24 16:10:04.126 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 40，当前并发数: 1
2025-06-24 16:10:04.127 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 16:10:21.447 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 17320ms，响应长度: 573
2025-06-24 16:10:21.448 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 40
2025-06-24 16:10:21.460 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 573
2025-06-24 16:10:21.460 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "职业",
      "object": "导演",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "执导",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "执导",
      "object": "《英雄》",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "配偶",
      "object": "陈婷",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "育有",
      "object": "三个孩子",
      "confidence": 0.95
    }
  ]
}
2025-06-24 16:10:21.460 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "职业",
      "object": "导演",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "执导",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "执导",
      "object": "《英雄》",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "配偶",
      "object": "陈婷",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "育有",
      "object": "三个孩子",
      "confidence": 0.95
    }
  ]
}
2025-06-24 16:10:21.461 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 16:10:21.461 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 5 个三元组
2025-06-24 16:10:21.528 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 16:10:21.550 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 16:10:21.562 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 张艺谋 (通过三元组提取)
2025-06-24 16:10:21.565 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 16:10:21.568 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 16:10:21.570 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 导演 (通过三元组提取)
2025-06-24 16:10:21.570 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[职业]--> 导演
2025-06-24 16:10:21.570 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[执导]--> 《红高粱》
2025-06-24 16:10:21.570 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[执导]--> 《英雄》
2025-06-24 16:10:21.571 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[配偶]--> 陈婷
2025-06-24 16:10:21.571 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[育有]--> 三个孩子
2025-06-24 16:10:21.571 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 16:10:21.576 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 17451ms
2025-06-24 16:10:49.372 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 16292 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-24 16:10:49.374 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-24 16:10:50.369 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 16:10:50.370 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-24 16:10:50.466 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 92 ms. Found 3 JPA repository interfaces.
2025-06-24 16:10:50.486 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 16:10:50.488 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-24 16:10:50.500 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 16:10:50.501 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 16:10:50.501 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 16:10:50.501 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 0 Redis repository interfaces.
2025-06-24 16:10:53.802 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@b4d83ac
2025-06-24 16:10:53.804 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@b4d83ac
2025-06-24 16:10:53.804 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@b4d83ac
2025-06-24 16:10:53.804 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@286dfa20
2025-06-24 16:10:53.804 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@286dfa20
2025-06-24 16:10:53.804 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@1468e880
2025-06-24 16:10:53.804 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@1468e880
2025-06-24 16:10:53.805 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@508f4bb5
2025-06-24 16:10:53.806 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@508f4bb5
2025-06-24 16:10:53.807 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@5602e540
2025-06-24 16:10:53.807 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@5602e540
2025-06-24 16:10:53.807 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@5602e540
2025-06-24 16:10:53.807 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@11f9b95a
2025-06-24 16:10:53.807 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@11f9b95a
2025-06-24 16:10:53.807 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@11f9b95a
2025-06-24 16:10:53.808 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@42066f0d
2025-06-24 16:10:53.808 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@42066f0d
2025-06-24 16:10:53.808 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@75f8d9b0
2025-06-24 16:10:53.808 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@4f7ae05
2025-06-24 16:10:53.808 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@4f7ae05
2025-06-24 16:10:53.808 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@1e23ee0e
2025-06-24 16:10:53.808 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@b144175
2025-06-24 16:10:53.809 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@38923cfe
2025-06-24 16:10:53.809 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@38923cfe
2025-06-24 16:10:53.809 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@38923cfe
2025-06-24 16:10:53.809 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@1ac3a6f
2025-06-24 16:10:53.809 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@1ac3a6f
2025-06-24 16:10:53.809 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@1ac3a6f
2025-06-24 16:10:53.809 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@fee7ca
2025-06-24 16:10:53.810 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@fee7ca
2025-06-24 16:10:53.811 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@fee7ca
2025-06-24 16:10:53.811 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@29c80149
2025-06-24 16:10:53.811 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@29c80149
2025-06-24 16:10:53.811 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@29c80149
2025-06-24 16:10:53.811 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@14ad42
2025-06-24 16:10:53.812 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@14ad42
2025-06-24 16:10:53.812 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@14ad42
2025-06-24 16:10:53.813 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@608b906d
2025-06-24 16:10:53.813 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@608b906d
2025-06-24 16:10:53.813 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@173cfb01
2025-06-24 16:10:53.813 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@173cfb01
2025-06-24 16:10:53.813 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@7e1762e6
2025-06-24 16:10:53.813 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@7e1762e6
2025-06-24 16:10:53.813 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@7e1762e6
2025-06-24 16:10:53.813 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@5bccaedb
2025-06-24 16:10:53.813 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@67784537
2025-06-24 16:10:53.813 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@67784537
2025-06-24 16:10:53.813 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@17ec5e2a
2025-06-24 16:10:53.813 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@52290e63
2025-06-24 16:10:53.813 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@52290e63
2025-06-24 16:10:53.814 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@52290e63
2025-06-24 16:10:53.814 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@6c2dd88b
2025-06-24 16:10:53.815 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@49d979c4
2025-06-24 16:10:53.815 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@3cb173db
2025-06-24 16:10:53.816 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@26712838
2025-06-24 16:10:53.816 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@26712838
2025-06-24 16:10:53.816 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@249a45fd
2025-06-24 16:10:53.816 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@249a45fd
2025-06-24 16:10:53.816 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@268f0ff3
2025-06-24 16:10:53.817 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@11978f52
2025-06-24 16:10:53.818 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@3e0855b0
2025-06-24 16:10:53.818 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@484b5a21
2025-06-24 16:10:53.818 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@16e5344c
2025-06-24 16:10:53.818 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@3ba5c4dd
2025-06-24 16:10:53.818 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@47fca3cc
2025-06-24 16:10:53.818 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@47fca3cc
2025-06-24 16:10:53.818 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@55746340
2025-06-24 16:10:53.818 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@55746340
2025-06-24 16:10:53.818 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@6a0c7af6
2025-06-24 16:10:53.818 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@6a0c7af6
2025-06-24 16:10:53.818 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@7f1ad846
2025-06-24 16:10:53.818 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@7f1ad846
2025-06-24 16:10:53.818 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-24 16:10:53.818 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-24 16:10:53.818 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-24 16:10:53.818 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-24 16:10:53.818 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-24 16:10:53.818 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-24 16:10:53.818 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-24 16:10:53.818 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-24 16:10:53.818 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-24 16:10:53.819 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-24 16:10:53.819 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-24 16:10:53.819 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-24 16:10:53.819 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-24 16:10:53.819 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-24 16:10:53.820 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-24 16:10:53.822 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@5e7e7a7e
2025-06-24 16:10:53.822 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@5e7e7a7e
2025-06-24 16:10:53.822 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-24 16:10:53.822 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-24 16:10:53.822 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-24 16:10:53.823 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-24 16:10:53.823 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-24 16:10:53.823 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-24 16:10:53.823 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-24 16:10:53.823 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@5abc5854
2025-06-24 16:10:53.823 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-24 16:10:53.823 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-24 16:10:53.823 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-24 16:10:53.823 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-24 16:10:53.823 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-24 16:10:53.824 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-24 16:10:53.824 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-24 16:10:53.824 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-24 16:10:53.825 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-24 16:10:53.825 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-24 16:10:53.825 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-24 16:10:53.825 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-24 16:10:53.825 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-24 16:10:53.825 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-24 16:10:53.825 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-24 16:10:53.826 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-24 16:10:53.826 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-24 16:10:53.826 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-24 16:10:53.826 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-24 16:10:53.826 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-24 16:10:53.826 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-24 16:10:53.827 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-24 16:10:53.828 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@586486c
2025-06-24 16:10:53.830 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@4a2d66e
2025-06-24 16:10:53.830 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@4a2d66e
2025-06-24 16:10:53.831 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@7793b55d
2025-06-24 16:10:53.831 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@2ac9e53c
2025-06-24 16:10:53.832 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@4ac7856f
2025-06-24 16:10:53.832 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@432f4626
2025-06-24 16:10:53.832 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@297c3a43
2025-06-24 16:10:53.832 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@4c79ca55
2025-06-24 16:10:53.832 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@3a63d248
2025-06-24 16:10:53.832 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@3c4ad54
2025-06-24 16:10:53.832 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@4b22214d
2025-06-24 16:10:53.903 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-24 16:10:53.914 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-24 16:10:54.000 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@2626aa35
2025-06-24 16:10:54.001 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-24 16:10:54.034 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-24 16:10:54.036 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-24 16:10:54.053 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6ee186f3) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@49fb693d)
2025-06-24 16:10:54.055 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@38197e82) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5516ee5)
2025-06-24 16:10:54.055 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6765b6a2) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@75c589f2)
2025-06-24 16:10:54.055 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6db04a6) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@8f374de)
2025-06-24 16:10:54.055 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@426913c4) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1bba9862)
2025-06-24 16:10:54.056 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@451a4187) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@565c887e)
2025-06-24 16:10:54.056 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5c215642) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1317ac2c)
2025-06-24 16:10:54.056 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@416c1b0) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@363ba634)
2025-06-24 16:10:54.056 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@60fe75f7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4e26c308)
2025-06-24 16:10:54.057 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-24 16:10:54.057 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-24 16:10:54.057 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-24 16:10:54.058 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 16:10:54.058 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 16:10:54.059 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@259c6ab8
2025-06-24 16:10:54.059 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@7793b55d`
2025-06-24 16:10:54.061 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-24 16:10:54.061 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-24 16:10:54.063 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 16:10:54.063 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 16:10:54.063 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 16:10:54.063 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 16:10:54.063 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 16:10:54.063 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 16:10:54.064 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 16:10:54.065 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 16:10:54.065 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 16:10:54.065 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@3892802b] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@4745bcc6]
2025-06-24 16:10:54.629 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@3892802b] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@62682ece]
2025-06-24 16:10:54.634 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@62682ece] for TypeConfiguration
2025-06-24 16:10:54.634 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-24 16:10:55.180 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-24 16:10:55.698 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-24 16:10:55.840 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-24 16:10:55.885 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 4
2025-06-24 16:10:55.886 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-24 16:10:55.888 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-24 16:10:55.888 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-24 16:10:58.419 [main] WARN  o.s.b.w.r.c.AnnotationConfigReactiveWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
2025-06-24 16:10:58.429 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-24 16:10:58.430 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@62682ece] for TypeConfiguration
2025-06-24 16:10:58.431 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@794a3410] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@62682ece]
2025-06-24 16:10:58.432 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-24 16:10:58.442 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-24 16:10:58.475 [main] INFO  o.s.b.a.logging.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-06-24 16:10:58.486 [main] ERROR o.s.b.diagnostics.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 2701 was already in use.

Action:

Identify and stop the process that's listening on port 2701 or configure this application to listen on another port.

2025-06-24 16:11:29.286 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 16349 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-24 16:11:29.288 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-24 16:11:30.229 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 16:11:30.230 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-24 16:11:30.338 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 103 ms. Found 3 JPA repository interfaces.
2025-06-24 16:11:30.361 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 16:11:30.362 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-24 16:11:30.375 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 16:11:30.376 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 16:11:30.376 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 16:11:30.376 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 0 Redis repository interfaces.
2025-06-24 16:11:34.762 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@4910afdf
2025-06-24 16:11:34.764 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@4910afdf
2025-06-24 16:11:34.765 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@4910afdf
2025-06-24 16:11:34.765 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@77a85e76
2025-06-24 16:11:34.765 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@77a85e76
2025-06-24 16:11:34.765 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@2cebf82f
2025-06-24 16:11:34.765 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@2cebf82f
2025-06-24 16:11:34.766 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@34fc315d
2025-06-24 16:11:34.766 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@34fc315d
2025-06-24 16:11:34.766 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@34f48d1
2025-06-24 16:11:34.766 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@34f48d1
2025-06-24 16:11:34.766 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@34f48d1
2025-06-24 16:11:34.766 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@36a1fd20
2025-06-24 16:11:34.766 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@36a1fd20
2025-06-24 16:11:34.766 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@36a1fd20
2025-06-24 16:11:34.768 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@45f8415b
2025-06-24 16:11:34.768 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@45f8415b
2025-06-24 16:11:34.768 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@505a8582
2025-06-24 16:11:34.769 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@57afe44b
2025-06-24 16:11:34.769 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@57afe44b
2025-06-24 16:11:34.769 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@18887028
2025-06-24 16:11:34.769 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@28f8ce2e
2025-06-24 16:11:34.769 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@2c0a3826
2025-06-24 16:11:34.770 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@2c0a3826
2025-06-24 16:11:34.770 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@2c0a3826
2025-06-24 16:11:34.770 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@4af0c50
2025-06-24 16:11:34.770 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@4af0c50
2025-06-24 16:11:34.770 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@4af0c50
2025-06-24 16:11:34.771 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@5ffd35dd
2025-06-24 16:11:34.771 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@5ffd35dd
2025-06-24 16:11:34.771 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@5ffd35dd
2025-06-24 16:11:34.771 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@311a09b2
2025-06-24 16:11:34.771 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@311a09b2
2025-06-24 16:11:34.771 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@311a09b2
2025-06-24 16:11:34.771 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@4cacccbf
2025-06-24 16:11:34.771 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@4cacccbf
2025-06-24 16:11:34.772 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@4cacccbf
2025-06-24 16:11:34.772 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@301d84f6
2025-06-24 16:11:34.772 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@301d84f6
2025-06-24 16:11:34.773 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@6f80cf5
2025-06-24 16:11:34.773 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@6f80cf5
2025-06-24 16:11:34.773 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@674ed201
2025-06-24 16:11:34.773 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@674ed201
2025-06-24 16:11:34.773 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@674ed201
2025-06-24 16:11:34.773 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@4dad2363
2025-06-24 16:11:34.773 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@114b2414
2025-06-24 16:11:34.773 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@114b2414
2025-06-24 16:11:34.773 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@57920d6c
2025-06-24 16:11:34.773 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@465d1345
2025-06-24 16:11:34.773 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@465d1345
2025-06-24 16:11:34.773 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@465d1345
2025-06-24 16:11:34.774 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@62cf86d6
2025-06-24 16:11:34.774 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@2a6c751f
2025-06-24 16:11:34.775 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@6dd2e453
2025-06-24 16:11:34.775 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@433b1597
2025-06-24 16:11:34.775 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@433b1597
2025-06-24 16:11:34.775 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@5d5cd210
2025-06-24 16:11:34.776 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@5d5cd210
2025-06-24 16:11:34.776 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@14d18029
2025-06-24 16:11:34.776 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@6edb1e9c
2025-06-24 16:11:34.776 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@75d7297d
2025-06-24 16:11:34.776 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@4e20a985
2025-06-24 16:11:34.776 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@56e8a8a0
2025-06-24 16:11:34.776 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@6071631f
2025-06-24 16:11:34.777 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@2ca132ad
2025-06-24 16:11:34.777 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@2ca132ad
2025-06-24 16:11:34.777 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@6706da3d
2025-06-24 16:11:34.777 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@6706da3d
2025-06-24 16:11:34.777 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@7438c3d5
2025-06-24 16:11:34.777 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@7438c3d5
2025-06-24 16:11:34.777 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@1fba3fd6
2025-06-24 16:11:34.777 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@1fba3fd6
2025-06-24 16:11:34.777 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@3aab42d6
2025-06-24 16:11:34.777 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@3aab42d6
2025-06-24 16:11:34.777 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@6badb08c
2025-06-24 16:11:34.777 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5939f047
2025-06-24 16:11:34.777 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@17332039
2025-06-24 16:11:34.777 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@17332039
2025-06-24 16:11:34.777 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@776e7dfb
2025-06-24 16:11:34.777 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@71418a4a
2025-06-24 16:11:34.777 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@67ecf7ed
2025-06-24 16:11:34.777 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@69d021c1
2025-06-24 16:11:34.778 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@69d021c1
2025-06-24 16:11:34.778 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@6d5508a5
2025-06-24 16:11:34.780 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@103bcc9f
2025-06-24 16:11:34.781 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@106802ea
2025-06-24 16:11:34.781 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@106802ea
2025-06-24 16:11:34.781 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@785ef70f
2025-06-24 16:11:34.781 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@785ef70f
2025-06-24 16:11:34.781 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@3d8bd881
2025-06-24 16:11:34.781 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@3d8bd881
2025-06-24 16:11:34.781 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@3d8bd881
2025-06-24 16:11:34.781 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@731ab49b
2025-06-24 16:11:34.781 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@731ab49b
2025-06-24 16:11:34.781 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@731ab49b
2025-06-24 16:11:34.781 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@23358740
2025-06-24 16:11:34.781 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@2cdcfaa6
2025-06-24 16:11:34.782 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@4ff0706c
2025-06-24 16:11:34.782 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@4ff0706c
2025-06-24 16:11:34.782 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@6968bb65
2025-06-24 16:11:34.782 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@6968bb65
2025-06-24 16:11:34.782 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@6968bb65
2025-06-24 16:11:34.782 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@66682e8f
2025-06-24 16:11:34.783 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@2d2af12e
2025-06-24 16:11:34.783 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@611587f7
2025-06-24 16:11:34.783 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@611587f7
2025-06-24 16:11:34.783 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@4d0abb23
2025-06-24 16:11:34.783 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@4d0abb23
2025-06-24 16:11:34.784 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@4d0abb23
2025-06-24 16:11:34.784 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@6ab1f85b
2025-06-24 16:11:34.785 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@6ab1f85b
2025-06-24 16:11:34.785 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@10e8c7a2
2025-06-24 16:11:34.785 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@10e8c7a2
2025-06-24 16:11:34.785 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@5d8fd077
2025-06-24 16:11:34.785 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@5d8fd077
2025-06-24 16:11:34.786 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@4544ab46
2025-06-24 16:11:34.786 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@4544ab46
2025-06-24 16:11:34.787 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@2052f095
2025-06-24 16:11:34.788 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@2052f095
2025-06-24 16:11:34.788 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@76d1f6ea
2025-06-24 16:11:34.792 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@3bda1f0
2025-06-24 16:11:34.792 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@3bda1f0
2025-06-24 16:11:34.794 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@5e62ca19
2025-06-24 16:11:34.794 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@188bf4d8
2025-06-24 16:11:34.794 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@7dd7ec56
2025-06-24 16:11:34.794 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@6528d339
2025-06-24 16:11:34.795 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@2dd2ff87
2025-06-24 16:11:34.795 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@6a38e3d1
2025-06-24 16:11:34.796 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@28cf179c
2025-06-24 16:11:34.796 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@bdda8a7
2025-06-24 16:11:34.796 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@3149409c
2025-06-24 16:11:34.881 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-24 16:11:34.896 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-24 16:11:34.999 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@43f7f48d
2025-06-24 16:11:35.001 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-24 16:11:35.030 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-24 16:11:35.030 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-24 16:11:35.047 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5e02fb23) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@104392ba)
2025-06-24 16:11:35.047 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@57e6d56a) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5c1687d1)
2025-06-24 16:11:35.047 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1504b493) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@19de32cb)
2025-06-24 16:11:35.048 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7872e91f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@10b2c1cf)
2025-06-24 16:11:35.048 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@20a25f66) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@488279d3)
2025-06-24 16:11:35.048 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@27575bcd) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@21ed4a51)
2025-06-24 16:11:35.048 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@13866865) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4891d727)
2025-06-24 16:11:35.048 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@550574cb) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1e7113f8)
2025-06-24 16:11:35.048 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3e149513) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@787a4519)
2025-06-24 16:11:35.049 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-24 16:11:35.049 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-24 16:11:35.049 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-24 16:11:35.050 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 16:11:35.050 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 16:11:35.051 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@2f29e630
2025-06-24 16:11:35.051 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@5e62ca19`
2025-06-24 16:11:35.053 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-24 16:11:35.053 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-24 16:11:35.056 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 16:11:35.056 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 16:11:35.056 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 16:11:35.056 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 16:11:35.057 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 16:11:35.057 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 16:11:35.058 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 16:11:35.058 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 16:11:35.058 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 16:11:35.058 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@1bb0fa38] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@58e7f930]
2025-06-24 16:11:35.640 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@1bb0fa38] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@516370c1]
2025-06-24 16:11:35.646 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@516370c1] for TypeConfiguration
2025-06-24 16:11:35.646 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-24 16:11:36.465 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-24 16:11:36.938 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-24 16:11:37.113 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-24 16:11:37.157 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 4
2025-06-24 16:11:37.157 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-24 16:11:37.158 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-24 16:11:37.159 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-24 16:11:39.767 [main] WARN  o.s.b.w.r.c.AnnotationConfigReactiveWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
2025-06-24 16:11:39.777 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-24 16:11:39.778 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@516370c1] for TypeConfiguration
2025-06-24 16:11:39.778 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@61377842] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@516370c1]
2025-06-24 16:11:39.780 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-24 16:11:39.787 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-24 16:11:39.809 [main] INFO  o.s.b.a.logging.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-06-24 16:11:39.821 [main] ERROR o.s.b.diagnostics.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 2701 was already in use.

Action:

Identify and stop the process that's listening on port 2701 or configure this application to listen on another port.

2025-06-24 16:12:23.992 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 16434 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-24 16:12:23.994 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-24 16:12:24.922 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 16:12:24.924 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-24 16:12:25.013 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 85 ms. Found 3 JPA repository interfaces.
2025-06-24 16:12:25.031 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 16:12:25.032 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-24 16:12:25.044 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 16:12:25.045 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 16:12:25.045 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 16:12:25.045 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 0 Redis repository interfaces.
2025-06-24 16:12:26.422 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@b4d83ac
2025-06-24 16:12:26.424 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@b4d83ac
2025-06-24 16:12:26.424 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@b4d83ac
2025-06-24 16:12:26.424 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@286dfa20
2025-06-24 16:12:26.424 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@286dfa20
2025-06-24 16:12:26.424 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@1468e880
2025-06-24 16:12:26.424 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@1468e880
2025-06-24 16:12:26.425 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@508f4bb5
2025-06-24 16:12:26.426 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@508f4bb5
2025-06-24 16:12:26.426 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@5602e540
2025-06-24 16:12:26.426 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@5602e540
2025-06-24 16:12:26.426 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@5602e540
2025-06-24 16:12:26.427 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@11f9b95a
2025-06-24 16:12:26.427 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@11f9b95a
2025-06-24 16:12:26.427 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@11f9b95a
2025-06-24 16:12:26.427 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@42066f0d
2025-06-24 16:12:26.427 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@42066f0d
2025-06-24 16:12:26.427 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@75f8d9b0
2025-06-24 16:12:26.427 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@4f7ae05
2025-06-24 16:12:26.427 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@4f7ae05
2025-06-24 16:12:26.428 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@1e23ee0e
2025-06-24 16:12:26.428 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@b144175
2025-06-24 16:12:26.428 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@38923cfe
2025-06-24 16:12:26.428 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@38923cfe
2025-06-24 16:12:26.429 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@38923cfe
2025-06-24 16:12:26.429 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@1ac3a6f
2025-06-24 16:12:26.430 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@1ac3a6f
2025-06-24 16:12:26.430 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@1ac3a6f
2025-06-24 16:12:26.430 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@fee7ca
2025-06-24 16:12:26.430 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@fee7ca
2025-06-24 16:12:26.430 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@fee7ca
2025-06-24 16:12:26.430 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@29c80149
2025-06-24 16:12:26.430 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@29c80149
2025-06-24 16:12:26.431 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@29c80149
2025-06-24 16:12:26.431 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@14ad42
2025-06-24 16:12:26.431 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@14ad42
2025-06-24 16:12:26.431 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@14ad42
2025-06-24 16:12:26.431 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@608b906d
2025-06-24 16:12:26.431 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@608b906d
2025-06-24 16:12:26.432 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@173cfb01
2025-06-24 16:12:26.432 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@173cfb01
2025-06-24 16:12:26.432 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@7e1762e6
2025-06-24 16:12:26.432 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@7e1762e6
2025-06-24 16:12:26.432 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@7e1762e6
2025-06-24 16:12:26.434 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@5bccaedb
2025-06-24 16:12:26.434 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@67784537
2025-06-24 16:12:26.434 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@67784537
2025-06-24 16:12:26.434 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@17ec5e2a
2025-06-24 16:12:26.434 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@52290e63
2025-06-24 16:12:26.434 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@52290e63
2025-06-24 16:12:26.434 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@52290e63
2025-06-24 16:12:26.434 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@6c2dd88b
2025-06-24 16:12:26.434 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@49d979c4
2025-06-24 16:12:26.434 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@3cb173db
2025-06-24 16:12:26.434 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@26712838
2025-06-24 16:12:26.435 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@26712838
2025-06-24 16:12:26.435 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@249a45fd
2025-06-24 16:12:26.435 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@249a45fd
2025-06-24 16:12:26.435 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@268f0ff3
2025-06-24 16:12:26.435 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@11978f52
2025-06-24 16:12:26.435 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@3e0855b0
2025-06-24 16:12:26.435 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@484b5a21
2025-06-24 16:12:26.435 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@16e5344c
2025-06-24 16:12:26.435 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@3ba5c4dd
2025-06-24 16:12:26.435 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@47fca3cc
2025-06-24 16:12:26.435 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@47fca3cc
2025-06-24 16:12:26.436 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@55746340
2025-06-24 16:12:26.436 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@55746340
2025-06-24 16:12:26.436 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@6a0c7af6
2025-06-24 16:12:26.436 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@6a0c7af6
2025-06-24 16:12:26.436 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@7f1ad846
2025-06-24 16:12:26.436 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@7f1ad846
2025-06-24 16:12:26.436 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-24 16:12:26.436 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-24 16:12:26.436 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-24 16:12:26.436 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-24 16:12:26.436 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-24 16:12:26.436 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-24 16:12:26.437 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-24 16:12:26.438 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-24 16:12:26.438 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-24 16:12:26.438 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-24 16:12:26.438 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-24 16:12:26.438 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-24 16:12:26.438 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-24 16:12:26.438 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-24 16:12:26.439 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-24 16:12:26.439 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@5e7e7a7e
2025-06-24 16:12:26.440 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@5e7e7a7e
2025-06-24 16:12:26.440 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-24 16:12:26.440 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-24 16:12:26.440 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-24 16:12:26.440 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-24 16:12:26.441 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-24 16:12:26.441 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-24 16:12:26.441 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-24 16:12:26.441 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@5abc5854
2025-06-24 16:12:26.441 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-24 16:12:26.441 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-24 16:12:26.442 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-24 16:12:26.442 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-24 16:12:26.443 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-24 16:12:26.443 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-24 16:12:26.443 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-24 16:12:26.443 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-24 16:12:26.443 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-24 16:12:26.443 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-24 16:12:26.443 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-24 16:12:26.443 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-24 16:12:26.444 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-24 16:12:26.444 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-24 16:12:26.444 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-24 16:12:26.444 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-24 16:12:26.445 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-24 16:12:26.445 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-24 16:12:26.445 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-24 16:12:26.445 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-24 16:12:26.445 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-24 16:12:26.447 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-24 16:12:26.448 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@586486c
2025-06-24 16:12:26.450 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@4a2d66e
2025-06-24 16:12:26.450 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@4a2d66e
2025-06-24 16:12:26.450 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@7793b55d
2025-06-24 16:12:26.450 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@2ac9e53c
2025-06-24 16:12:26.450 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@4ac7856f
2025-06-24 16:12:26.450 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@432f4626
2025-06-24 16:12:26.450 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@297c3a43
2025-06-24 16:12:26.450 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@4c79ca55
2025-06-24 16:12:26.450 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@3a63d248
2025-06-24 16:12:26.450 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@3c4ad54
2025-06-24 16:12:26.450 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@4b22214d
2025-06-24 16:12:26.521 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-24 16:12:26.540 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-24 16:12:26.626 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@2626aa35
2025-06-24 16:12:26.628 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-24 16:12:26.658 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-24 16:12:26.659 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-24 16:12:26.679 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6ee186f3) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@49fb693d)
2025-06-24 16:12:26.679 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@38197e82) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5516ee5)
2025-06-24 16:12:26.679 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6765b6a2) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@75c589f2)
2025-06-24 16:12:26.680 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6db04a6) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@8f374de)
2025-06-24 16:12:26.680 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@426913c4) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1bba9862)
2025-06-24 16:12:26.680 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@451a4187) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@565c887e)
2025-06-24 16:12:26.680 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5c215642) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1317ac2c)
2025-06-24 16:12:26.680 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@416c1b0) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@363ba634)
2025-06-24 16:12:26.681 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@60fe75f7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4e26c308)
2025-06-24 16:12:26.682 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-24 16:12:26.682 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-24 16:12:26.682 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-24 16:12:26.683 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 16:12:26.683 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 16:12:26.685 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@259c6ab8
2025-06-24 16:12:26.685 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@7793b55d`
2025-06-24 16:12:26.687 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-24 16:12:26.687 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-24 16:12:26.688 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 16:12:26.688 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 16:12:26.688 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 16:12:26.688 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 16:12:26.689 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 16:12:26.689 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 16:12:26.690 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 16:12:26.690 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 16:12:26.690 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 16:12:26.690 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@3892802b] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@4745bcc6]
2025-06-24 16:12:27.242 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@3892802b] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@62682ece]
2025-06-24 16:12:27.247 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@62682ece] for TypeConfiguration
2025-06-24 16:12:27.248 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-24 16:12:27.784 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-24 16:12:28.200 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-24 16:12:28.360 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-24 16:12:28.398 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 4
2025-06-24 16:12:28.399 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-24 16:12:28.400 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-24 16:12:28.400 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-24 16:12:28.824 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-24 16:12:28.840 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 5.399 seconds (process running for 5.955)
2025-06-24 16:14:24.049 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractType: triples, textLength: 0
2025-06-24 16:14:24.050 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-24 16:14:24.056 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractType: triples, textLength: 0
2025-06-24 16:14:24.057 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-24 16:14:24.062 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received batch extract request - extractType: triples, textsCount: 0
2025-06-24 16:14:24.064 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Batch extract request failed - empty texts list
2025-06-24 16:14:24.071 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received social extract request - extractTypes: entities,relations, maskSensitive: null, textLength: 0
2025-06-24 16:14:24.072 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Social extract request failed - empty text content
2025-06-24 16:14:24.080 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received social extract request - extractTypes: entities,relations, maskSensitive: false, textLength: 46
2025-06-24 16:14:24.082 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 405，当前并发数: 1
2025-06-24 16:14:24.083 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 16:14:36.279 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 12194ms，响应长度: 571
2025-06-24 16:14:36.286 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 405
2025-06-24 16:14:36.305 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 571
2025-06-24 16:14:36.305 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "马云",
      "predicate": "创始人",
      "object": "阿里巴巴",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "共同创立",
      "object": "彭蕾",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "共同创立",
      "object": "蔡崇信",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "配偶",
      "object": "张瑛",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "育有",
      "object": "三个孩子",
      "confidence": 0.95
    }
  ]
}
2025-06-24 16:14:36.306 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "马云",
      "predicate": "创始人",
      "object": "阿里巴巴",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "共同创立",
      "object": "彭蕾",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "共同创立",
      "object": "蔡崇信",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "配偶",
      "object": "张瑛",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "育有",
      "object": "三个孩子",
      "confidence": 0.95
    }
  ]
}
2025-06-24 16:14:36.307 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 16:14:36.307 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 5 个三元组
2025-06-24 16:14:36.382 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 16:14:36.403 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 马云 已存在，跳过插入
2025-06-24 16:14:36.403 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 马云 --[创始人]--> 阿里巴巴
2025-06-24 16:14:36.404 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 16:14:36.408 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 马云 已存在，跳过插入
2025-06-24 16:14:36.408 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 马云 --[共同创立]--> 彭蕾
2025-06-24 16:14:36.409 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 16:14:36.410 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 马云 已存在，跳过插入
2025-06-24 16:14:36.410 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 马云 --[共同创立]--> 蔡崇信
2025-06-24 16:14:36.411 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 16:14:36.413 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 马云 已存在，跳过插入
2025-06-24 16:14:36.413 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 马云 --[配偶]--> 张瑛
2025-06-24 16:14:36.414 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 16:14:36.415 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 马云 已存在，跳过插入
2025-06-24 16:14:36.415 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 马云 --[育有]--> 三个孩子
2025-06-24 16:14:36.415 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 16:14:36.418 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Social extract request completed successfully in 12338ms
2025-06-24 16:14:36.442 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received batch extract request - extractType: triples, textsCount: 3
2025-06-24 16:14:36.445 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 23，当前并发数: 2
2025-06-24 16:14:36.445 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 16:14:36.445 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 21，当前并发数: 1
2025-06-24 16:14:36.445 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 24，当前并发数: 3
2025-06-24 16:14:36.445 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 16:14:36.445 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 16:14:43.645 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 7199ms，响应长度: 239
2025-06-24 16:14:43.646 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 21
2025-06-24 16:14:43.650 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 239
2025-06-24 16:14:43.650 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "职业",
      "object": "动作演员",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "作品",
      "object": "醉拳",
      "confidence": 0.95
    }
  ]
}
2025-06-24 16:14:43.650 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "职业",
      "object": "动作演员",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "作品",
      "object": "醉拳",
      "confidence": 0.95
    }
  ]
}
2025-06-24 16:14:43.651 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 16:14:43.652 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组
2025-06-24 16:14:43.653 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 16:14:43.661 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-24 16:14:43.662 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 16:14:43.688 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 16:14:43.703 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 动作演员 (通过三元组提取)
2025-06-24 16:14:43.704 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[职业]--> 动作演员
2025-06-24 16:14:43.708 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 16:14:43.714 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-24 16:14:43.715 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[作品]--> 醉拳
2025-06-24 16:14:43.715 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 16:14:44.337 [reactor-http-nio-7] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 7891ms，响应长度: 246
2025-06-24 16:14:44.338 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 24
2025-06-24 16:14:44.341 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 246
2025-06-24 16:14:44.341 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "出演",
      "object": "《无间道》",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "属于",
      "object": "香港四大天王",
      "confidence": 0.95
    }
  ]
}
2025-06-24 16:14:44.341 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "出演",
      "object": "《无间道》",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "属于",
      "object": "香港四大天王",
      "confidence": 0.95
    }
  ]
}
2025-06-24 16:14:44.342 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 16:14:44.342 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组
2025-06-24 16:14:44.343 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 16:14:44.345 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-24 16:14:44.345 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[出演]--> 《无间道》
2025-06-24 16:14:44.346 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 16:14:44.348 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-24 16:14:44.349 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[属于]--> 香港四大天王
2025-06-24 16:14:44.349 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 16:14:44.873 [reactor-http-nio-6] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 8428ms，响应长度: 246
2025-06-24 16:14:44.875 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 23
2025-06-24 16:14:44.884 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 246
2025-06-24 16:14:44.885 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "代表作品",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-24 16:14:44.885 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "代表作品",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-24 16:14:44.885 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 16:14:44.885 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组
2025-06-24 16:14:44.887 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 16:14:44.890 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-24 16:14:44.892 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 16:14:44.896 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 16:14:44.904 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 华语歌手 (通过三元组提取)
2025-06-24 16:14:44.904 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[职业]--> 华语歌手
2025-06-24 16:14:44.906 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 16:14:44.908 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-24 16:14:44.908 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[代表作品]--> 《青花瓷》
2025-06-24 16:14:44.908 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 16:14:44.912 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Batch extract request completed successfully in 8470ms
2025-06-24 16:14:44.922 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractType: triples, textLength: 408
2025-06-24 16:14:44.922 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 408，当前并发数: 1
2025-06-24 16:14:44.923 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 16:15:14.939 [parallel-7] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30016ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 16:15:14.940 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 408
2025-06-24 16:15:14.940 [ForkJoinPool.commonPool-worker-1] ERROR c.datacenter.extract.service.TextExtractionService - 提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 16:15:14.940 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30018ms
2025-06-24 16:15:16.960 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractType: triples, textLength: 402
2025-06-24 16:15:16.961 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 402，当前并发数: 1
2025-06-24 16:15:16.962 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 16:15:46.969 [parallel-11] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30006ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 16:15:46.970 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 402
2025-06-24 16:15:46.970 [ForkJoinPool.commonPool-worker-1] ERROR c.datacenter.extract.service.TextExtractionService - 提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 16:15:46.970 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30010ms
2025-06-24 16:15:48.990 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractType: triples, textLength: 331
2025-06-24 16:15:48.990 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 331，当前并发数: 1
2025-06-24 16:15:48.991 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 16:16:18.994 [parallel-3] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30003ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 16:16:18.995 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 331
2025-06-24 16:16:18.995 [ForkJoinPool.commonPool-worker-1] ERROR c.datacenter.extract.service.TextExtractionService - 提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 16:16:18.995 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30005ms
2025-06-24 16:16:21.016 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractType: triples, textLength: 442
2025-06-24 16:16:21.016 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 442，当前并发数: 1
2025-06-24 16:16:21.016 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 16:16:51.024 [parallel-7] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30008ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 16:16:51.024 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 442
2025-06-24 16:16:51.025 [ForkJoinPool.commonPool-worker-1] ERROR c.datacenter.extract.service.TextExtractionService - 提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 16:16:51.025 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30009ms
2025-06-24 16:16:53.043 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractType: triples, textLength: 461
2025-06-24 16:16:53.044 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 461，当前并发数: 1
2025-06-24 16:16:53.044 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 16:17:23.046 [parallel-11] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30002ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 16:17:23.047 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 461
2025-06-24 16:17:23.047 [ForkJoinPool.commonPool-worker-1] ERROR c.datacenter.extract.service.TextExtractionService - 提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 16:17:23.047 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30004ms
2025-06-24 16:17:25.065 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractType: triples, textLength: 400
2025-06-24 16:17:25.065 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 400，当前并发数: 1
2025-06-24 16:17:25.065 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 16:17:55.073 [parallel-5] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30007ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 16:17:55.080 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 400
2025-06-24 16:17:55.080 [ForkJoinPool.commonPool-worker-1] ERROR c.datacenter.extract.service.TextExtractionService - 提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 16:17:55.082 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30017ms
2025-06-24 16:17:57.112 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractType: triples, textLength: 465
2025-06-24 16:17:57.113 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 465，当前并发数: 1
2025-06-24 16:17:57.113 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 16:18:27.121 [parallel-8] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30008ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 16:18:27.122 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 465
2025-06-24 16:18:27.122 [ForkJoinPool.commonPool-worker-1] ERROR c.datacenter.extract.service.TextExtractionService - 提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 16:18:27.123 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30011ms
2025-06-24 16:18:29.140 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractType: triples, textLength: 489
2025-06-24 16:18:29.140 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 489，当前并发数: 1
2025-06-24 16:18:29.140 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 16:18:59.144 [parallel-12] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30004ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 16:18:59.144 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 489
2025-06-24 16:18:59.144 [ForkJoinPool.commonPool-worker-1] ERROR c.datacenter.extract.service.TextExtractionService - 提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 16:18:59.145 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30005ms
2025-06-24 16:19:01.168 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractType: triples, textLength: 404
2025-06-24 16:19:01.168 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 404，当前并发数: 1
2025-06-24 16:19:01.169 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 16:19:31.176 [parallel-5] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30007ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 16:19:31.178 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 404
2025-06-24 16:19:31.178 [ForkJoinPool.commonPool-worker-1] ERROR c.datacenter.extract.service.TextExtractionService - 提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 16:19:31.179 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30011ms
2025-06-24 16:19:33.196 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractType: triples, textLength: 346
2025-06-24 16:19:33.197 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 346，当前并发数: 1
2025-06-24 16:19:33.197 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 16:20:03.205 [parallel-8] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30008ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 16:20:03.206 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 346
2025-06-24 16:20:03.206 [ForkJoinPool.commonPool-worker-1] ERROR c.datacenter.extract.service.TextExtractionService - 提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 16:20:03.206 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30010ms
2025-06-24 16:22:48.744 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 18851 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-24 16:22:48.747 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-24 16:22:49.767 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 16:22:49.768 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-24 16:22:49.873 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 100 ms. Found 3 JPA repository interfaces.
2025-06-24 16:22:49.895 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 16:22:49.896 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-24 16:22:49.912 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 16:22:49.912 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 16:22:49.912 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 16:22:49.913 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 0 Redis repository interfaces.
2025-06-24 16:22:53.015 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@508f4bb5
2025-06-24 16:22:53.017 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@508f4bb5
2025-06-24 16:22:53.017 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@508f4bb5
2025-06-24 16:22:53.018 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@38923cfe
2025-06-24 16:22:53.018 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@38923cfe
2025-06-24 16:22:53.018 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@1ac3a6f
2025-06-24 16:22:53.018 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@1ac3a6f
2025-06-24 16:22:53.019 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@fee7ca
2025-06-24 16:22:53.020 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@fee7ca
2025-06-24 16:22:53.020 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@29c80149
2025-06-24 16:22:53.020 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@29c80149
2025-06-24 16:22:53.020 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@29c80149
2025-06-24 16:22:53.021 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@14ad42
2025-06-24 16:22:53.021 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@14ad42
2025-06-24 16:22:53.021 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@14ad42
2025-06-24 16:22:53.021 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@608b906d
2025-06-24 16:22:53.022 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@608b906d
2025-06-24 16:22:53.022 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@5bccaedb
2025-06-24 16:22:53.022 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@67784537
2025-06-24 16:22:53.022 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@67784537
2025-06-24 16:22:53.022 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@17ec5e2a
2025-06-24 16:22:53.023 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@52290e63
2025-06-24 16:22:53.023 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@6c2dd88b
2025-06-24 16:22:53.023 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@6c2dd88b
2025-06-24 16:22:53.023 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@6c2dd88b
2025-06-24 16:22:53.023 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@49d979c4
2025-06-24 16:22:53.024 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@49d979c4
2025-06-24 16:22:53.024 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@49d979c4
2025-06-24 16:22:53.024 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@3cb173db
2025-06-24 16:22:53.024 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@3cb173db
2025-06-24 16:22:53.025 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@3cb173db
2025-06-24 16:22:53.025 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@26712838
2025-06-24 16:22:53.025 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@26712838
2025-06-24 16:22:53.026 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@26712838
2025-06-24 16:22:53.026 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@249a45fd
2025-06-24 16:22:53.027 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@249a45fd
2025-06-24 16:22:53.027 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@249a45fd
2025-06-24 16:22:53.027 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@268f0ff3
2025-06-24 16:22:53.027 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@268f0ff3
2025-06-24 16:22:53.027 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@11978f52
2025-06-24 16:22:53.027 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@11978f52
2025-06-24 16:22:53.028 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@3e0855b0
2025-06-24 16:22:53.028 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@3e0855b0
2025-06-24 16:22:53.028 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@3e0855b0
2025-06-24 16:22:53.028 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@484b5a21
2025-06-24 16:22:53.029 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@16e5344c
2025-06-24 16:22:53.030 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@16e5344c
2025-06-24 16:22:53.030 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@3ba5c4dd
2025-06-24 16:22:53.030 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@47fca3cc
2025-06-24 16:22:53.031 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@47fca3cc
2025-06-24 16:22:53.031 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@47fca3cc
2025-06-24 16:22:53.031 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@55746340
2025-06-24 16:22:53.031 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@6a0c7af6
2025-06-24 16:22:53.031 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@7f1ad846
2025-06-24 16:22:53.031 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-24 16:22:53.031 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-24 16:22:53.031 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-24 16:22:53.032 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-24 16:22:53.032 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-24 16:22:53.032 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-24 16:22:53.032 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-24 16:22:53.032 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-24 16:22:53.032 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-24 16:22:53.032 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-24 16:22:53.032 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-24 16:22:53.032 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-24 16:22:53.033 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-24 16:22:53.033 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-24 16:22:53.033 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-24 16:22:53.033 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-24 16:22:53.034 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@5e7e7a7e
2025-06-24 16:22:53.035 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@5e7e7a7e
2025-06-24 16:22:53.035 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-24 16:22:53.035 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-24 16:22:53.035 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-24 16:22:53.035 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-24 16:22:53.035 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@5abc5854
2025-06-24 16:22:53.035 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@5abc5854
2025-06-24 16:22:53.035 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-24 16:22:53.035 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-24 16:22:53.036 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-24 16:22:53.037 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-24 16:22:53.037 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-24 16:22:53.037 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-24 16:22:53.037 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-24 16:22:53.037 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-24 16:22:53.039 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-24 16:22:53.040 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-24 16:22:53.040 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-24 16:22:53.040 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-24 16:22:53.040 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-24 16:22:53.040 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-24 16:22:53.040 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-24 16:22:53.040 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-24 16:22:53.040 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-24 16:22:53.041 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-24 16:22:53.041 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@586486c
2025-06-24 16:22:53.041 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-24 16:22:53.042 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-24 16:22:53.042 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@7fbbdd8a
2025-06-24 16:22:53.042 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@7fbbdd8a
2025-06-24 16:22:53.042 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@7fbbdd8a
2025-06-24 16:22:53.042 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-24 16:22:53.042 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-24 16:22:53.043 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-24 16:22:53.043 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-24 16:22:53.043 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-24 16:22:53.043 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-24 16:22:53.043 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-24 16:22:53.043 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-24 16:22:53.044 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-24 16:22:53.044 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-24 16:22:53.044 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-24 16:22:53.044 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-24 16:22:53.045 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-24 16:22:53.045 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-24 16:22:53.045 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-24 16:22:53.045 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-24 16:22:53.045 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-24 16:22:53.046 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-24 16:22:53.050 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@2ac9e53c
2025-06-24 16:22:53.050 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@2ac9e53c
2025-06-24 16:22:53.051 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@1124dd79
2025-06-24 16:22:53.051 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@335cdd2
2025-06-24 16:22:53.052 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@1ea96ff2
2025-06-24 16:22:53.054 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@60a99f3d
2025-06-24 16:22:53.055 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@57515944
2025-06-24 16:22:53.055 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@7a274521
2025-06-24 16:22:53.055 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@2fa47368
2025-06-24 16:22:53.055 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@35841d6
2025-06-24 16:22:53.055 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@5e9ea380
2025-06-24 16:22:53.145 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-24 16:22:53.160 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-24 16:22:53.262 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@15ce261
2025-06-24 16:22:53.263 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-24 16:22:53.293 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-24 16:22:53.294 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-24 16:22:53.312 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5c215642) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1317ac2c)
2025-06-24 16:22:53.312 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@416c1b0) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@363ba634)
2025-06-24 16:22:53.312 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@60fe75f7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4e26c308)
2025-06-24 16:22:53.313 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7c8f803d) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@176e839e)
2025-06-24 16:22:53.313 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4ac0d49) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7c6ab057)
2025-06-24 16:22:53.313 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7ce4498f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1f7557fe)
2025-06-24 16:22:53.313 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7bd7d71c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@52963839)
2025-06-24 16:22:53.313 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@ce0bbd5) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@399fd710)
2025-06-24 16:22:53.313 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7c359808) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1f013047)
2025-06-24 16:22:53.314 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-24 16:22:53.314 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-24 16:22:53.314 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-24 16:22:53.315 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 16:22:53.315 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 16:22:53.316 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@374ba492
2025-06-24 16:22:53.316 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@1124dd79`
2025-06-24 16:22:53.318 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-24 16:22:53.318 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-24 16:22:53.320 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 16:22:53.320 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 16:22:53.320 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 16:22:53.320 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 16:22:53.320 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 16:22:53.320 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 16:22:53.320 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 16:22:53.320 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 16:22:53.320 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 16:22:53.321 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@520ec7a7] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@53551fef]
2025-06-24 16:22:53.919 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@520ec7a7] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@44d36b56]
2025-06-24 16:22:53.925 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@44d36b56] for TypeConfiguration
2025-06-24 16:22:53.926 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-24 16:22:54.529 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-24 16:22:55.006 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-24 16:22:55.168 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-24 16:22:55.207 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 4
2025-06-24 16:22:55.207 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-24 16:22:55.208 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-24 16:22:55.209 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-24 16:22:55.677 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-24 16:22:55.694 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 7.59 seconds (process running for 8.483)
2025-06-24 17:23:59.220 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 25056 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-24 17:23:59.223 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-24 17:24:00.289 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 17:24:00.290 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-24 17:24:00.390 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 96 ms. Found 3 JPA repository interfaces.
2025-06-24 17:24:00.416 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 17:24:00.417 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-24 17:24:00.430 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 17:24:00.431 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 17:24:00.431 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 17:24:00.431 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 0 Redis repository interfaces.
2025-06-24 17:24:04.168 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@7109b603
2025-06-24 17:24:04.171 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@7109b603
2025-06-24 17:24:04.171 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@7109b603
2025-06-24 17:24:04.172 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@299786b1
2025-06-24 17:24:04.172 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@299786b1
2025-06-24 17:24:04.172 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@75f8d9b0
2025-06-24 17:24:04.172 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@75f8d9b0
2025-06-24 17:24:04.172 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@4f7ae05
2025-06-24 17:24:04.172 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@4f7ae05
2025-06-24 17:24:04.172 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@1e23ee0e
2025-06-24 17:24:04.173 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@1e23ee0e
2025-06-24 17:24:04.174 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@1e23ee0e
2025-06-24 17:24:04.174 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@b144175
2025-06-24 17:24:04.174 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@b144175
2025-06-24 17:24:04.175 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@b144175
2025-06-24 17:24:04.175 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@38923cfe
2025-06-24 17:24:04.175 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@38923cfe
2025-06-24 17:24:04.175 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@29c80149
2025-06-24 17:24:04.175 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@14ad42
2025-06-24 17:24:04.176 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@14ad42
2025-06-24 17:24:04.176 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@608b906d
2025-06-24 17:24:04.176 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@173cfb01
2025-06-24 17:24:04.176 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@7e1762e6
2025-06-24 17:24:04.176 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@7e1762e6
2025-06-24 17:24:04.176 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@7e1762e6
2025-06-24 17:24:04.176 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@5bccaedb
2025-06-24 17:24:04.177 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@5bccaedb
2025-06-24 17:24:04.177 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@5bccaedb
2025-06-24 17:24:04.177 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@67784537
2025-06-24 17:24:04.177 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@67784537
2025-06-24 17:24:04.177 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@67784537
2025-06-24 17:24:04.177 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@17ec5e2a
2025-06-24 17:24:04.177 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@17ec5e2a
2025-06-24 17:24:04.177 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@17ec5e2a
2025-06-24 17:24:04.177 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@52290e63
2025-06-24 17:24:04.177 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@52290e63
2025-06-24 17:24:04.177 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@52290e63
2025-06-24 17:24:04.178 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@6c2dd88b
2025-06-24 17:24:04.178 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@6c2dd88b
2025-06-24 17:24:04.178 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@49d979c4
2025-06-24 17:24:04.178 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@49d979c4
2025-06-24 17:24:04.178 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@3cb173db
2025-06-24 17:24:04.178 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@3cb173db
2025-06-24 17:24:04.178 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@3cb173db
2025-06-24 17:24:04.179 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@26712838
2025-06-24 17:24:04.179 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@249a45fd
2025-06-24 17:24:04.179 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@249a45fd
2025-06-24 17:24:04.179 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@268f0ff3
2025-06-24 17:24:04.180 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@11978f52
2025-06-24 17:24:04.180 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@11978f52
2025-06-24 17:24:04.180 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@11978f52
2025-06-24 17:24:04.180 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@3e0855b0
2025-06-24 17:24:04.180 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@484b5a21
2025-06-24 17:24:04.180 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@16e5344c
2025-06-24 17:24:04.180 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@3ba5c4dd
2025-06-24 17:24:04.181 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@3ba5c4dd
2025-06-24 17:24:04.181 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@47fca3cc
2025-06-24 17:24:04.181 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@47fca3cc
2025-06-24 17:24:04.182 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@55746340
2025-06-24 17:24:04.182 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@6a0c7af6
2025-06-24 17:24:04.183 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@7f1ad846
2025-06-24 17:24:04.183 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-24 17:24:04.183 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-24 17:24:04.183 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-24 17:24:04.183 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-24 17:24:04.183 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-24 17:24:04.183 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-24 17:24:04.183 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-24 17:24:04.183 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-24 17:24:04.183 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-24 17:24:04.184 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-24 17:24:04.185 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-24 17:24:04.185 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-24 17:24:04.185 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-24 17:24:04.185 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-24 17:24:04.185 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-24 17:24:04.185 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-24 17:24:04.185 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-24 17:24:04.185 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@5e7e7a7e
2025-06-24 17:24:04.185 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-24 17:24:04.186 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-24 17:24:04.188 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-24 17:24:04.188 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-24 17:24:04.188 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@5abc5854
2025-06-24 17:24:04.188 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-24 17:24:04.188 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-24 17:24:04.188 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-24 17:24:04.188 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-24 17:24:04.188 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-24 17:24:04.188 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-24 17:24:04.192 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-24 17:24:04.192 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-24 17:24:04.193 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-24 17:24:04.194 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-24 17:24:04.194 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-24 17:24:04.194 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-24 17:24:04.194 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-24 17:24:04.194 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-24 17:24:04.195 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-24 17:24:04.197 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-24 17:24:04.198 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-24 17:24:04.198 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-24 17:24:04.198 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-24 17:24:04.198 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-24 17:24:04.198 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@586486c
2025-06-24 17:24:04.198 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@586486c
2025-06-24 17:24:04.198 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-24 17:24:04.198 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-24 17:24:04.198 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-24 17:24:04.199 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@7fbbdd8a
2025-06-24 17:24:04.200 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@7fbbdd8a
2025-06-24 17:24:04.200 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-24 17:24:04.200 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-24 17:24:04.200 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-24 17:24:04.200 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-24 17:24:04.202 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-24 17:24:04.203 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-24 17:24:04.203 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-24 17:24:04.205 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-24 17:24:04.205 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-24 17:24:04.208 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@77d959f1
2025-06-24 17:24:04.209 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@77d959f1
2025-06-24 17:24:04.210 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@3c4ad54
2025-06-24 17:24:04.210 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@4b22214d
2025-06-24 17:24:04.210 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@498b611e
2025-06-24 17:24:04.210 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@6dde1bf5
2025-06-24 17:24:04.210 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@4b56b517
2025-06-24 17:24:04.210 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@1124dd79
2025-06-24 17:24:04.211 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@335cdd2
2025-06-24 17:24:04.211 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@1ea96ff2
2025-06-24 17:24:04.211 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@60a99f3d
2025-06-24 17:24:04.299 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-24 17:24:04.313 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-24 17:24:04.408 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@6978a32a
2025-06-24 17:24:04.409 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-24 17:24:04.439 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-24 17:24:04.440 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-24 17:24:04.454 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@8f374de) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@426913c4)
2025-06-24 17:24:04.455 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1bba9862) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@451a4187)
2025-06-24 17:24:04.455 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@565c887e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5c215642)
2025-06-24 17:24:04.455 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1317ac2c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@416c1b0)
2025-06-24 17:24:04.455 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@363ba634) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@60fe75f7)
2025-06-24 17:24:04.455 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4e26c308) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7c8f803d)
2025-06-24 17:24:04.455 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@176e839e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4ac0d49)
2025-06-24 17:24:04.456 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7c6ab057) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7ce4498f)
2025-06-24 17:24:04.456 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1f7557fe) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7bd7d71c)
2025-06-24 17:24:04.456 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-24 17:24:04.456 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-24 17:24:04.456 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-24 17:24:04.457 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 17:24:04.457 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 17:24:04.458 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@abf1816
2025-06-24 17:24:04.458 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@3c4ad54`
2025-06-24 17:24:04.460 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-24 17:24:04.460 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-24 17:24:04.462 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 17:24:04.462 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 17:24:04.462 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 17:24:04.462 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 17:24:04.462 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 17:24:04.462 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 17:24:04.463 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 17:24:04.463 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 17:24:04.463 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 17:24:04.463 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@5274830e] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@6a0ee80]
2025-06-24 17:24:05.032 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@5274830e] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@578ac0be]
2025-06-24 17:24:05.038 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@578ac0be] for TypeConfiguration
2025-06-24 17:24:05.038 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-24 17:24:05.690 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-24 17:24:06.130 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-24 17:24:06.282 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-24 17:24:06.319 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 2
2025-06-24 17:24:06.319 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-24 17:24:06.320 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-24 17:24:06.321 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-24 17:24:06.728 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-24 17:24:06.745 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 8.172 seconds (process running for 8.96)
2025-06-24 17:24:35.971 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 0
2025-06-24 17:24:35.972 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-24 17:24:35.978 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 0
2025-06-24 17:24:35.980 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-24 17:24:35.984 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 0
2025-06-24 17:24:35.987 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-24 17:24:35.993 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: entities,relations, textLength: 3
2025-06-24 17:24:35.993 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-24 17:24:36.000 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: entities,relations, textLength: 46
2025-06-24 17:24:36.001 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 46, 参数: entities,relations
2025-06-24 17:24:36.003 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 46，当前并发数: 1
2025-06-24 17:24:36.004 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 17:24:49.016 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 13011ms，响应长度: 571
2025-06-24 17:24:49.024 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 46
2025-06-24 17:24:49.044 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 571
2025-06-24 17:24:49.045 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "马云",
      "predicate": "创始人",
      "object": "阿里巴巴",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "共同创立",
      "object": "彭蕾",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "共同创立",
      "object": "蔡崇信",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "配偶",
      "object": "张瑛",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "育有",
      "object": "三个孩子",
      "confidence": 0.95
    }
  ]
}
2025-06-24 17:24:49.045 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "马云",
      "predicate": "创始人",
      "object": "阿里巴巴",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "共同创立",
      "object": "彭蕾",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "共同创立",
      "object": "蔡崇信",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "配偶",
      "object": "张瑛",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "育有",
      "object": "三个孩子",
      "confidence": 0.95
    }
  ]
}
2025-06-24 17:24:49.047 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 17:24:49.047 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 5 个三元组
2025-06-24 17:24:49.127 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:24:49.164 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 17:24:49.173 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 马云 (通过三元组提取)
2025-06-24 17:24:49.173 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 马云 --[创始人]--> 阿里巴巴
2025-06-24 17:24:49.176 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:24:49.179 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 马云 已存在，跳过插入
2025-06-24 17:24:49.179 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 马云 --[共同创立]--> 彭蕾
2025-06-24 17:24:49.180 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:24:49.185 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 马云 已存在，跳过插入
2025-06-24 17:24:49.185 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 马云 --[共同创立]--> 蔡崇信
2025-06-24 17:24:49.186 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:24:49.188 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 马云 已存在，跳过插入
2025-06-24 17:24:49.188 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 马云 --[配偶]--> 张瑛
2025-06-24 17:24:49.189 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:24:49.190 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 马云 已存在，跳过插入
2025-06-24 17:24:49.190 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 马云 --[育有]--> 三个孩子
2025-06-24 17:24:49.190 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 17:24:49.196 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 13196ms
2025-06-24 17:24:49.222 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 70
2025-06-24 17:24:49.222 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 70, 参数: triples
2025-06-24 17:24:49.222 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 70，当前并发数: 1
2025-06-24 17:24:49.222 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 17:25:03.474 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 14252ms，响应长度: 693
2025-06-24 17:25:03.476 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 70
2025-06-24 17:25:03.481 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 693
2025-06-24 17:25:03.484 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "代表作品",
      "object": "《青花瓷》",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "职业",
      "object": "动作演员",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "代表作品",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出演",
      "object": "《无间道》",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "称号",
      "object": "香港四大天王",
      "confidence": 0.95
    }
  ]
}
2025-06-24 17:25:03.484 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "代表作品",
      "object": "《青花瓷》",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "职业",
      "object": "动作演员",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "代表作品",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出演",
      "object": "《无间道》",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "称号",
      "object": "香港四大天王",
      "confidence": 0.95
    }
  ]
}
2025-06-24 17:25:03.486 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 17:25:03.486 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 6 个三元组
2025-06-24 17:25:03.489 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:25:03.499 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 17:25:03.510 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 周杰伦 (通过三元组提取)
2025-06-24 17:25:03.513 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:25:03.520 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 17:25:03.528 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 华语歌手 (通过三元组提取)
2025-06-24 17:25:03.528 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[职业]--> 华语歌手
2025-06-24 17:25:03.531 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:25:03.534 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-24 17:25:03.535 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[代表作品]--> 《青花瓷》
2025-06-24 17:25:03.537 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:25:03.540 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 17:25:03.543 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 成龙 (通过三元组提取)
2025-06-24 17:25:03.545 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:25:03.548 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 17:25:03.552 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 动作演员 (通过三元组提取)
2025-06-24 17:25:03.553 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[职业]--> 动作演员
2025-06-24 17:25:03.556 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:25:03.558 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-24 17:25:03.558 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[代表作品]--> 《醉拳》
2025-06-24 17:25:03.559 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:25:03.562 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 17:25:03.565 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 刘德华 (通过三元组提取)
2025-06-24 17:25:03.565 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[出演]--> 《无间道》
2025-06-24 17:25:03.566 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:25:03.569 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-24 17:25:03.569 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[称号]--> 香港四大天王
2025-06-24 17:25:03.569 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 17:25:03.574 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 14353ms
2025-06-24 17:25:03.583 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 408
2025-06-24 17:25:03.583 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 408, 参数: triples
2025-06-24 17:25:03.583 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 408，当前并发数: 1
2025-06-24 17:25:03.583 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 17:25:33.601 [parallel-6] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30018ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 17:25:33.602 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 408
2025-06-24 17:25:33.603 [ForkJoinPool.commonPool-worker-1] ERROR c.datacenter.extract.service.TextExtractionService - 文本提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 17:25:33.604 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30021ms
2025-06-24 17:25:35.629 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 402
2025-06-24 17:25:35.630 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 402, 参数: triples
2025-06-24 17:25:35.630 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 402，当前并发数: 1
2025-06-24 17:25:35.630 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 17:26:05.639 [parallel-10] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30009ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 17:26:05.640 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 402
2025-06-24 17:26:05.641 [ForkJoinPool.commonPool-worker-1] ERROR c.datacenter.extract.service.TextExtractionService - 文本提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 17:26:05.641 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30012ms
2025-06-24 17:26:07.666 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 331
2025-06-24 17:26:07.666 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 331, 参数: triples
2025-06-24 17:26:07.667 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 331，当前并发数: 1
2025-06-24 17:26:07.669 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 17:26:37.677 [parallel-3] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30008ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 17:26:37.680 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 331
2025-06-24 17:26:37.684 [ForkJoinPool.commonPool-worker-1] ERROR c.datacenter.extract.service.TextExtractionService - 文本提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 17:26:37.684 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30018ms
2025-06-24 17:26:39.705 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 442
2025-06-24 17:26:39.705 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 442, 参数: triples
2025-06-24 17:26:39.706 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 442，当前并发数: 1
2025-06-24 17:26:39.707 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 17:27:09.714 [parallel-7] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30007ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 17:27:09.714 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 442
2025-06-24 17:27:09.714 [ForkJoinPool.commonPool-worker-1] ERROR c.datacenter.extract.service.TextExtractionService - 文本提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 17:27:09.714 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30009ms
2025-06-24 17:27:11.742 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 461
2025-06-24 17:27:11.742 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 461, 参数: triples
2025-06-24 17:27:11.743 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 461，当前并发数: 1
2025-06-24 17:27:11.743 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 17:27:41.750 [parallel-11] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30007ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 17:27:41.750 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 461
2025-06-24 17:27:41.750 [ForkJoinPool.commonPool-worker-1] ERROR c.datacenter.extract.service.TextExtractionService - 文本提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 17:27:41.751 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30009ms
2025-06-24 17:27:43.776 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 400
2025-06-24 17:27:43.777 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 400, 参数: triples
2025-06-24 17:27:43.777 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 400，当前并发数: 1
2025-06-24 17:27:43.777 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 17:28:13.784 [parallel-3] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30006ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 17:28:13.784 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 400
2025-06-24 17:28:13.784 [ForkJoinPool.commonPool-worker-1] ERROR c.datacenter.extract.service.TextExtractionService - 文本提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 17:28:13.785 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30009ms
2025-06-24 17:28:15.805 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 465
2025-06-24 17:28:15.806 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 465, 参数: triples
2025-06-24 17:28:15.806 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 465，当前并发数: 1
2025-06-24 17:28:15.806 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 17:28:45.814 [parallel-7] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30008ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 17:28:45.816 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 465
2025-06-24 17:28:45.816 [ForkJoinPool.commonPool-worker-1] ERROR c.datacenter.extract.service.TextExtractionService - 文本提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 17:28:45.817 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30012ms
2025-06-24 17:28:47.848 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 489
2025-06-24 17:28:47.849 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 489, 参数: triples
2025-06-24 17:28:47.849 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 489，当前并发数: 1
2025-06-24 17:28:47.849 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 17:29:17.855 [parallel-12] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30005ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 17:29:17.862 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 489
2025-06-24 17:29:17.862 [ForkJoinPool.commonPool-worker-1] ERROR c.datacenter.extract.service.TextExtractionService - 文本提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 17:29:17.864 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30016ms
2025-06-24 17:29:19.895 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 404
2025-06-24 17:29:19.895 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 404, 参数: triples
2025-06-24 17:29:19.897 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 404，当前并发数: 1
2025-06-24 17:29:19.897 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 17:29:49.910 [parallel-4] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30012ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 17:29:49.911 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 404
2025-06-24 17:29:49.911 [ForkJoinPool.commonPool-worker-1] ERROR c.datacenter.extract.service.TextExtractionService - 文本提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 17:29:49.912 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30017ms
2025-06-24 17:29:51.942 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 346
2025-06-24 17:29:51.942 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 346, 参数: triples
2025-06-24 17:29:51.942 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 346，当前并发数: 1
2025-06-24 17:29:51.943 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 17:30:21.950 [parallel-8] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30006ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 17:30:21.959 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 346
2025-06-24 17:30:21.960 [ForkJoinPool.commonPool-worker-1] ERROR c.datacenter.extract.service.TextExtractionService - 文本提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 17:30:21.960 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30018ms
2025-06-24 17:35:26.154 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 0
2025-06-24 17:35:26.155 [ForkJoinPool.commonPool-worker-3] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-24 17:35:26.161 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 0
2025-06-24 17:35:26.161 [ForkJoinPool.commonPool-worker-3] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-24 17:35:26.166 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 0
2025-06-24 17:35:26.166 [ForkJoinPool.commonPool-worker-3] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-24 17:35:26.171 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: entities,relations, textLength: 3
2025-06-24 17:35:26.171 [ForkJoinPool.commonPool-worker-3] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-24 17:35:26.176 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: entities,relations, textLength: 46
2025-06-24 17:35:26.176 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 46, 参数: entities,relations
2025-06-24 17:35:26.181 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 571
2025-06-24 17:35:26.181 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "马云",
      "predicate": "创始人",
      "object": "阿里巴巴",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "共同创立",
      "object": "彭蕾",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "共同创立",
      "object": "蔡崇信",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "配偶",
      "object": "张瑛",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "育有",
      "object": "三个孩子",
      "confidence": 0.95
    }
  ]
}
2025-06-24 17:35:26.181 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "马云",
      "predicate": "创始人",
      "object": "阿里巴巴",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "共同创立",
      "object": "彭蕾",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "共同创立",
      "object": "蔡崇信",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "配偶",
      "object": "张瑛",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "育有",
      "object": "三个孩子",
      "confidence": 0.95
    }
  ]
}
2025-06-24 17:35:26.184 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 17:35:26.184 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 处理 5 个三元组
2025-06-24 17:35:26.189 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:35:26.193 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 马云 已存在，跳过插入
2025-06-24 17:35:26.194 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 马云 --[创始人]--> 阿里巴巴
2025-06-24 17:35:26.194 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:35:26.196 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 马云 已存在，跳过插入
2025-06-24 17:35:26.196 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 马云 --[共同创立]--> 彭蕾
2025-06-24 17:35:26.197 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:35:26.199 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 马云 已存在，跳过插入
2025-06-24 17:35:26.199 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 马云 --[共同创立]--> 蔡崇信
2025-06-24 17:35:26.199 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:35:26.201 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 马云 已存在，跳过插入
2025-06-24 17:35:26.201 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 马云 --[配偶]--> 张瑛
2025-06-24 17:35:26.202 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:35:26.203 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 马云 已存在，跳过插入
2025-06-24 17:35:26.203 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 马云 --[育有]--> 三个孩子
2025-06-24 17:35:26.204 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 17:35:26.205 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 29ms
2025-06-24 17:35:26.210 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 70
2025-06-24 17:35:26.210 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 70, 参数: triples
2025-06-24 17:35:26.212 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 693
2025-06-24 17:35:26.212 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "代表作品",
      "object": "《青花瓷》",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "职业",
      "object": "动作演员",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "代表作品",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出演",
      "object": "《无间道》",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "称号",
      "object": "香港四大天王",
      "confidence": 0.95
    }
  ]
}
2025-06-24 17:35:26.212 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "代表作品",
      "object": "《青花瓷》",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "职业",
      "object": "动作演员",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "代表作品",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出演",
      "object": "《无间道》",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "称号",
      "object": "香港四大天王",
      "confidence": 0.95
    }
  ]
}
2025-06-24 17:35:26.212 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 17:35:26.212 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 处理 6 个三元组
2025-06-24 17:35:26.213 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:35:26.215 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-24 17:35:26.216 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:35:26.218 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 华语歌手 已存在，跳过插入
2025-06-24 17:35:26.218 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[职业]--> 华语歌手
2025-06-24 17:35:26.219 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:35:26.220 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-24 17:35:26.220 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[代表作品]--> 《青花瓷》
2025-06-24 17:35:26.221 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:35:26.222 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-24 17:35:26.223 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:35:26.225 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 动作演员 已存在，跳过插入
2025-06-24 17:35:26.225 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[职业]--> 动作演员
2025-06-24 17:35:26.226 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:35:26.227 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-24 17:35:26.227 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[代表作品]--> 《醉拳》
2025-06-24 17:35:26.228 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:35:26.229 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-24 17:35:26.229 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[出演]--> 《无间道》
2025-06-24 17:35:26.230 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:35:26.232 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-24 17:35:26.232 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[称号]--> 香港四大天王
2025-06-24 17:35:26.232 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 17:35:26.233 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 23ms
2025-06-24 17:35:26.239 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 33
2025-06-24 17:35:26.239 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 33, 参数: triples
2025-06-24 17:35:26.239 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 33，当前并发数: 1
2025-06-24 17:35:26.239 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 17:35:35.819 [reactor-http-nio-6] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 9580ms，响应长度: 352
2025-06-24 17:35:35.820 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 33
2025-06-24 17:35:35.826 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 352
2025-06-24 17:35:35.826 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "配偶",
      "object": "陈婷",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "合作伙伴",
      "object": "巩俐",
      "confidence": 0.95
    },
    {
      "subject": "巩俐",
      "predicate": "合作伙伴",
      "object": "张艺谋",
      "confidence": 0.95
    }
  ]
}
2025-06-24 17:35:35.827 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "配偶",
      "object": "陈婷",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "合作伙伴",
      "object": "巩俐",
      "confidence": 0.95
    },
    {
      "subject": "巩俐",
      "predicate": "合作伙伴",
      "object": "张艺谋",
      "confidence": 0.95
    }
  ]
}
2025-06-24 17:35:35.830 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 17:35:35.830 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组
2025-06-24 17:35:35.831 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[配偶]--> 陈婷
2025-06-24 17:35:35.831 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[合作伙伴]--> 巩俐
2025-06-24 17:35:35.831 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 巩俐 --[合作伙伴]--> 张艺谋
2025-06-24 17:35:35.831 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 17:35:35.834 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 9595ms
2025-06-24 17:35:36.856 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 30
2025-06-24 17:35:36.856 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 30, 参数: triples
2025-06-24 17:35:36.856 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 30，当前并发数: 1
2025-06-24 17:35:36.856 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 17:35:48.340 [reactor-http-nio-6] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 11484ms，响应长度: 360
2025-06-24 17:35:48.341 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 30
2025-06-24 17:35:48.346 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 360
2025-06-24 17:35:48.346 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "巩俐",
      "predicate": "主演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "《红高粱》",
      "predicate": "上映时间",
      "object": "1987年",
      "confidence": 0.95
    }
  ]
}
2025-06-24 17:35:48.346 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "巩俐",
      "predicate": "主演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "《红高粱》",
      "predicate": "上映时间",
      "object": "1987年",
      "confidence": 0.95
    }
  ]
}
2025-06-24 17:35:48.349 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 17:35:48.349 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组
2025-06-24 17:35:48.351 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:35:48.355 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 17:35:48.360 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 张艺谋 (通过三元组提取)
2025-06-24 17:35:48.363 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:35:48.367 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 17:35:48.372 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 《红高粱》 (通过三元组提取)
2025-06-24 17:35:48.373 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《红高粱》
2025-06-24 17:35:48.374 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:35:48.378 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 17:35:48.381 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 巩俐 (通过三元组提取)
2025-06-24 17:35:48.382 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:35:48.386 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-24 17:35:48.386 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 巩俐 --[主演]--> 《红高粱》
2025-06-24 17:35:48.393 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 17:35:48.405 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 17:35:48.409 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《红高粱》 (通过三元组提取)
2025-06-24 17:35:48.409 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《红高粱》 --[上映时间]--> 1987年
2025-06-24 17:35:48.409 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 17:35:48.418 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 11563ms
2025-06-24 17:35:49.436 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 39
2025-06-24 17:35:49.436 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 39, 参数: triples
2025-06-24 17:35:49.437 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 39，当前并发数: 1
2025-06-24 17:35:49.437 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 17:35:59.651 [reactor-http-nio-6] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 10214ms，响应长度: 383
2025-06-24 17:35:59.651 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 39
2025-06-24 17:35:59.654 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 383
2025-06-24 17:35:59.654 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "第41届柏林国际电影节",
      "predicate": "举行时间",
      "object": "1991年",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "参加",
      "object": "第41届柏林国际电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "获奖",
      "object": "第41届柏林国际电影节",
      "confidence": 0.95
    }
  ]
}
2025-06-24 17:35:59.654 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "第41届柏林国际电影节",
      "predicate": "举行时间",
      "object": "1991年",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "参加",
      "object": "第41届柏林国际电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "获奖",
      "object": "第41届柏林国际电影节",
      "confidence": 0.95
    }
  ]
}
2025-06-24 17:35:59.656 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 17:35:59.656 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组
2025-06-24 17:35:59.656 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 第41届柏林国际电影节 --[举行时间]--> 1991年
2025-06-24 17:35:59.656 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[参加]--> 第41届柏林国际电影节颁奖典礼
2025-06-24 17:35:59.656 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[获奖]--> 第41届柏林国际电影节
2025-06-24 17:35:59.656 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 17:35:59.658 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 10222ms
2025-06-24 17:36:00.700 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 47
2025-06-24 17:36:00.707 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 47, 参数: triples
2025-06-24 17:36:00.708 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 47，当前并发数: 1
2025-06-24 17:36:00.708 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 17:36:09.175 [reactor-http-nio-6] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 8467ms，响应长度: 258
2025-06-24 17:36:09.176 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 47
2025-06-24 17:36:09.191 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 258
2025-06-24 17:36:09.191 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "《红高粱》",
      "predicate": "获得",
      "object": "金熊奖",
      "confidence": 0.95
    },
    {
      "subject": "《红高粱》",
      "predicate": "展映于",
      "object": "第41届柏林国际电影节颁奖典礼",
      "confidence": 0.95
    }
  ]
}
2025-06-24 17:36:09.192 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "《红高粱》",
      "predicate": "获得",
      "object": "金熊奖",
      "confidence": 0.95
    },
    {
      "subject": "《红高粱》",
      "predicate": "展映于",
      "object": "第41届柏林国际电影节颁奖典礼",
      "confidence": 0.95
    }
  ]
}
2025-06-24 17:36:09.196 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 17:36:09.196 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组
2025-06-24 17:36:09.206 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 17:36:09.215 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 作品 《红高粱》 已存在，跳过插入
2025-06-24 17:36:09.215 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《红高粱》 --[获得]--> 金熊奖
2025-06-24 17:36:09.217 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 17:36:09.220 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 作品 《红高粱》 已存在，跳过插入
2025-06-24 17:36:09.220 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《红高粱》 --[展映于]--> 第41届柏林国际电影节颁奖典礼
2025-06-24 17:36:09.221 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 17:36:09.223 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 8524ms
2025-06-24 17:36:10.245 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 344
2025-06-24 17:36:10.246 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 344, 参数: triples
2025-06-24 17:36:10.246 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 344，当前并发数: 1
2025-06-24 17:36:10.246 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 17:36:40.251 [parallel-3] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30004ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 17:36:40.251 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 344
2025-06-24 17:36:40.251 [ForkJoinPool.commonPool-worker-3] ERROR c.datacenter.extract.service.TextExtractionService - 文本提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 17:36:40.253 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30008ms
2025-06-24 17:36:42.281 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 363
2025-06-24 17:36:42.281 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 363, 参数: triples
2025-06-24 17:36:42.281 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 363，当前并发数: 1
2025-06-24 17:36:42.281 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 17:37:12.289 [parallel-7] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30008ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 17:37:12.290 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 363
2025-06-24 17:37:12.290 [ForkJoinPool.commonPool-worker-3] ERROR c.datacenter.extract.service.TextExtractionService - 文本提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 17:37:12.290 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30009ms
2025-06-24 17:37:14.318 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 357
2025-06-24 17:37:14.318 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 357, 参数: triples
2025-06-24 17:37:14.318 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 357，当前并发数: 1
2025-06-24 17:37:14.318 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 17:37:44.327 [parallel-11] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30009ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 17:37:44.328 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 357
2025-06-24 17:37:44.328 [ForkJoinPool.commonPool-worker-3] ERROR c.datacenter.extract.service.TextExtractionService - 文本提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 17:37:44.329 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30011ms
2025-06-24 17:37:46.353 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 442
2025-06-24 17:37:46.354 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 442, 参数: triples
2025-06-24 17:37:46.354 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 442，当前并发数: 1
2025-06-24 17:37:46.354 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 17:38:16.359 [parallel-3] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30005ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 17:38:16.360 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 442
2025-06-24 17:38:16.360 [ForkJoinPool.commonPool-worker-3] ERROR c.datacenter.extract.service.TextExtractionService - 文本提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 17:38:16.361 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30008ms
2025-06-24 17:38:18.383 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 461
2025-06-24 17:38:18.383 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 461, 参数: triples
2025-06-24 17:38:18.383 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 461，当前并发数: 1
2025-06-24 17:38:18.383 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 17:38:48.391 [parallel-8] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30008ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 17:38:48.392 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 461
2025-06-24 17:38:48.392 [ForkJoinPool.commonPool-worker-3] ERROR c.datacenter.extract.service.TextExtractionService - 文本提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 17:38:48.392 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30009ms
2025-06-24 17:38:50.414 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 400
2025-06-24 17:38:50.415 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 400, 参数: triples
2025-06-24 17:38:50.415 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 400，当前并发数: 1
2025-06-24 17:38:50.415 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 17:39:20.423 [parallel-12] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30008ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 17:39:20.424 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 400
2025-06-24 17:39:20.425 [ForkJoinPool.commonPool-worker-3] ERROR c.datacenter.extract.service.TextExtractionService - 文本提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 17:39:20.425 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30011ms
2025-06-24 17:39:22.446 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 465
2025-06-24 17:39:22.446 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 465, 参数: triples
2025-06-24 17:39:22.446 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 465，当前并发数: 1
2025-06-24 17:39:22.447 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 17:39:52.456 [parallel-4] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30009ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 17:39:52.457 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 465
2025-06-24 17:39:52.457 [ForkJoinPool.commonPool-worker-3] ERROR c.datacenter.extract.service.TextExtractionService - 文本提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 17:39:52.458 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30012ms
2025-06-24 17:39:54.473 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 489
2025-06-24 17:39:54.473 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 489, 参数: triples
2025-06-24 17:39:54.473 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 489，当前并发数: 1
2025-06-24 17:39:54.473 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 17:40:24.479 [parallel-8] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30005ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 17:40:24.479 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 489
2025-06-24 17:40:24.480 [ForkJoinPool.commonPool-worker-3] ERROR c.datacenter.extract.service.TextExtractionService - 文本提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 17:40:24.480 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30007ms
2025-06-24 17:40:26.497 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 404
2025-06-24 17:40:26.497 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 404, 参数: triples
2025-06-24 17:40:26.497 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 404，当前并发数: 1
2025-06-24 17:40:26.498 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 17:40:56.501 [parallel-12] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30003ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 17:40:56.502 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 404
2025-06-24 17:40:56.502 [ForkJoinPool.commonPool-worker-3] ERROR c.datacenter.extract.service.TextExtractionService - 文本提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 17:40:56.503 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30006ms
2025-06-24 17:40:58.522 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 346
2025-06-24 17:40:58.522 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 346, 参数: triples
2025-06-24 17:40:58.522 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 346，当前并发数: 1
2025-06-24 17:40:58.522 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 17:41:28.530 [parallel-5] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30007ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 17:41:28.531 [ForkJoinPool.commonPool-worker-3] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 346
2025-06-24 17:41:28.531 [ForkJoinPool.commonPool-worker-3] ERROR c.datacenter.extract.service.TextExtractionService - 文本提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 17:41:28.532 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30010ms
2025-06-24 17:41:30.554 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 293
2025-06-24 17:41:30.554 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 293, 参数: triples
2025-06-24 17:41:30.554 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 293，当前并发数: 1
2025-06-24 17:41:30.554 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 17:41:56.871 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 26317ms，响应长度: 1336
2025-06-24 17:41:56.872 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 293
2025-06-24 17:41:56.875 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 1336
2025-06-24 17:41:56.875 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "《奔跑吧兄弟》",
      "predicate": "制作方",
      "object": "浙江卫视",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧兄弟》",
      "predicate": "首播时间",
      "object": "2014年",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧兄弟》",
      "predicate": "固定嘉宾",
      "object": "邓超",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧兄弟》",
      "predicate": "固定嘉宾",
      "object": "Angelababy",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧兄弟》",
      "predicate": "固定嘉宾",
      "object": "李晨",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧兄弟》",
      "predicate": "固定嘉宾",
      "object": "陈赫",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧兄弟》",
      "predicate": "总导演",
      "object": "姚译添",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧兄弟》",
      "predicate": "获奖",
      "object": "2015年国家广播电视总局优秀节目奖",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧兄弟》第二季",
      "predicate": "启动仪式地点",
      "object": "上海",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧》",
      "predicate": "制作发行方",
      "object": "《奔跑吧兄弟》节目组",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧》",
      "predicate": "首次公开播放场合",
      "object": "《奔跑吧兄弟》首播发布会",
      "confidence": 0.95
    }
  ]
}
2025-06-24 17:41:56.875 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "《奔跑吧兄弟》",
      "predicate": "制作方",
      "object": "浙江卫视",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧兄弟》",
      "predicate": "首播时间",
      "object": "2014年",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧兄弟》",
      "predicate": "固定嘉宾",
      "object": "邓超",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧兄弟》",
      "predicate": "固定嘉宾",
      "object": "Angelababy",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧兄弟》",
      "predicate": "固定嘉宾",
      "object": "李晨",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧兄弟》",
      "predicate": "固定嘉宾",
      "object": "陈赫",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧兄弟》",
      "predicate": "总导演",
      "object": "姚译添",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧兄弟》",
      "predicate": "获奖",
      "object": "2015年国家广播电视总局优秀节目奖",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧兄弟》第二季",
      "predicate": "启动仪式地点",
      "object": "上海",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧》",
      "predicate": "制作发行方",
      "object": "《奔跑吧兄弟》节目组",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧》",
      "predicate": "首次公开播放场合",
      "object": "《奔跑吧兄弟》首播发布会",
      "confidence": 0.95
    }
  ]
}
2025-06-24 17:41:56.876 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 17:41:56.876 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 处理 11 个三元组
2025-06-24 17:41:56.878 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 17:41:56.882 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 17:41:56.884 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《奔跑吧兄弟》 (通过三元组提取)
2025-06-24 17:41:56.885 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧兄弟》 --[制作方]--> 浙江卫视
2025-06-24 17:41:56.886 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 17:41:56.889 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 作品 《奔跑吧兄弟》 已存在，跳过插入
2025-06-24 17:41:56.889 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧兄弟》 --[首播时间]--> 2014年
2025-06-24 17:41:56.890 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 17:41:56.891 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 作品 《奔跑吧兄弟》 已存在，跳过插入
2025-06-24 17:41:56.892 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧兄弟》 --[固定嘉宾]--> 邓超
2025-06-24 17:41:56.892 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 17:41:56.895 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 作品 《奔跑吧兄弟》 已存在，跳过插入
2025-06-24 17:41:56.896 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧兄弟》 --[固定嘉宾]--> Angelababy
2025-06-24 17:41:56.897 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 17:41:56.899 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 作品 《奔跑吧兄弟》 已存在，跳过插入
2025-06-24 17:41:56.899 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧兄弟》 --[固定嘉宾]--> 李晨
2025-06-24 17:41:56.900 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 17:41:56.902 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 作品 《奔跑吧兄弟》 已存在，跳过插入
2025-06-24 17:41:56.902 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧兄弟》 --[固定嘉宾]--> 陈赫
2025-06-24 17:41:56.902 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:41:56.905 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 17:41:56.908 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 《奔跑吧兄弟》 (通过三元组提取)
2025-06-24 17:41:56.908 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:41:56.911 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 17:41:56.912 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 姚译添 (通过三元组提取)
2025-06-24 17:41:56.912 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧兄弟》 --[总导演]--> 姚译添
2025-06-24 17:41:56.913 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 17:41:56.918 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 作品 《奔跑吧兄弟》 已存在，跳过插入
2025-06-24 17:41:56.918 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧兄弟》 --[获奖]--> 2015年国家广播电视总局优秀节目奖
2025-06-24 17:41:56.918 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧兄弟》第二季 --[启动仪式地点]--> 上海
2025-06-24 17:41:56.919 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 17:41:56.921 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 17:41:56.923 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《奔跑吧》 (通过三元组提取)
2025-06-24 17:41:56.923 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧》 --[制作发行方]--> 《奔跑吧兄弟》节目组
2025-06-24 17:41:56.924 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 17:41:56.925 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 作品 《奔跑吧》 已存在，跳过插入
2025-06-24 17:41:56.925 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧》 --[首次公开播放场合]--> 《奔跑吧兄弟》首播发布会
2025-06-24 17:41:56.925 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 17:41:56.929 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 26375ms
2025-06-24 17:41:58.944 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 273
2025-06-24 17:41:58.944 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 273, 参数: triples
2025-06-24 17:41:58.944 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 273，当前并发数: 1
2025-06-24 17:41:58.944 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 17:42:27.623 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 28679ms，响应长度: 1538
2025-06-24 17:42:27.623 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 273
2025-06-24 17:42:27.627 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 1538
2025-06-24 17:42:27.627 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "第76届戛纳国际电影节",
      "predicate": "举行于",
      "object": "法国戛纳",
      "confidence": 0.95
    },
    {
      "subject": "第76届戛纳国际电影节",
      "predicate": "举行时间",
      "object": "2023年5月",
      "confidence": 0.95
    },
    {
      "subject": "第76届戛纳国际电影节",
      "predicate": "持续时间",
      "object": "12天",
      "confidence": 0.95
    },
    {
      "subject": "《过往人生》",
      "predicate": "展映于",
      "object": "戛纳电影节主竞赛单元",
      "confidence": 0.95
    },
    {
      "subject": "《过往人生》",
      "predicate": "导演",
      "object": "宋浩",
      "confidence": 0.95
    },
    {
      "subject": "《燃冬》",
      "predicate": "放映于",
      "object": "戛纳电影节特别展映单元",
      "confidence": 0.95
    },
    {
      "subject": "《燃冬》",
      "predicate": "获得",
      "object": "观众好评",
      "confidence": 0.95
    },
    {
      "subject": "《过往人生》",
      "predicate": "获得",
      "object": "最佳导演奖",
      "confidence": 0.95
    },
    {
      "subject": "宋浩",
      "predicate": "登台领奖",
      "object": "最佳导演奖",
      "confidence": 0.95
    },
    {
      "subject": "章子怡",
      "predicate": "亮相于",
      "object": "开幕式红毯仪式",
      "confidence": 0.95
    },
    {
      "subject": "汤唯",
      "predicate": "亮相于",
      "object": "开幕式红毯仪式",
      "confidence": 0.95
    },
    {
      "subject": "中国电影推介会",
      "predicate": "举办于",
      "object": "电影节期间",
      "confidence": 0.95
    },
    {
      "subject": "多部华语新片",
      "predicate": "进行",
      "object": "全球首映",
      "confidence": 0.95
    }
  ]
}
2025-06-24 17:42:27.627 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "第76届戛纳国际电影节",
      "predicate": "举行于",
      "object": "法国戛纳",
      "confidence": 0.95
    },
    {
      "subject": "第76届戛纳国际电影节",
      "predicate": "举行时间",
      "object": "2023年5月",
      "confidence": 0.95
    },
    {
      "subject": "第76届戛纳国际电影节",
      "predicate": "持续时间",
      "object": "12天",
      "confidence": 0.95
    },
    {
      "subject": "《过往人生》",
      "predicate": "展映于",
      "object": "戛纳电影节主竞赛单元",
      "confidence": 0.95
    },
    {
      "subject": "《过往人生》",
      "predicate": "导演",
      "object": "宋浩",
      "confidence": 0.95
    },
    {
      "subject": "《燃冬》",
      "predicate": "放映于",
      "object": "戛纳电影节特别展映单元",
      "confidence": 0.95
    },
    {
      "subject": "《燃冬》",
      "predicate": "获得",
      "object": "观众好评",
      "confidence": 0.95
    },
    {
      "subject": "《过往人生》",
      "predicate": "获得",
      "object": "最佳导演奖",
      "confidence": 0.95
    },
    {
      "subject": "宋浩",
      "predicate": "登台领奖",
      "object": "最佳导演奖",
      "confidence": 0.95
    },
    {
      "subject": "章子怡",
      "predicate": "亮相于",
      "object": "开幕式红毯仪式",
      "confidence": 0.95
    },
    {
      "subject": "汤唯",
      "predicate": "亮相于",
      "object": "开幕式红毯仪式",
      "confidence": 0.95
    },
    {
      "subject": "中国电影推介会",
      "predicate": "举办于",
      "object": "电影节期间",
      "confidence": 0.95
    },
    {
      "subject": "多部华语新片",
      "predicate": "进行",
      "object": "全球首映",
      "confidence": 0.95
    }
  ]
}
2025-06-24 17:42:27.628 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 17:42:27.629 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 处理 13 个三元组
2025-06-24 17:42:27.629 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 第76届戛纳国际电影节 --[举行于]--> 法国戛纳
2025-06-24 17:42:27.629 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 第76届戛纳国际电影节 --[举行时间]--> 2023年5月
2025-06-24 17:42:27.629 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 第76届戛纳国际电影节 --[持续时间]--> 12天
2025-06-24 17:42:27.630 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 17:42:27.633 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 17:42:27.637 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《过往人生》 (通过三元组提取)
2025-06-24 17:42:27.637 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《过往人生》 --[展映于]--> 戛纳电影节主竞赛单元
2025-06-24 17:42:27.638 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:42:27.640 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 17:42:27.642 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 《过往人生》 (通过三元组提取)
2025-06-24 17:42:27.643 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:42:27.645 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 17:42:27.647 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 宋浩 (通过三元组提取)
2025-06-24 17:42:27.648 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《过往人生》 --[导演]--> 宋浩
2025-06-24 17:42:27.649 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 17:42:27.654 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 17:42:27.656 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《燃冬》 (通过三元组提取)
2025-06-24 17:42:27.656 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《燃冬》 --[放映于]--> 戛纳电影节特别展映单元
2025-06-24 17:42:27.657 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 17:42:27.659 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 作品 《燃冬》 已存在，跳过插入
2025-06-24 17:42:27.659 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《燃冬》 --[获得]--> 观众好评
2025-06-24 17:42:27.660 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 17:42:27.663 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 作品 《过往人生》 已存在，跳过插入
2025-06-24 17:42:27.663 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《过往人生》 --[获得]--> 最佳导演奖
2025-06-24 17:42:27.663 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 宋浩 --[登台领奖]--> 最佳导演奖
2025-06-24 17:42:27.663 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 章子怡 --[亮相于]--> 开幕式红毯仪式
2025-06-24 17:42:27.663 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 汤唯 --[亮相于]--> 开幕式红毯仪式
2025-06-24 17:42:27.663 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 中国电影推介会 --[举办于]--> 电影节期间
2025-06-24 17:42:27.664 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:42:27.665 [ForkJoinPool.commonPool-worker-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 17:42:27.667 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 多部华语新片 (通过三元组提取)
2025-06-24 17:42:27.667 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 多部华语新片 --[进行]--> 全球首映
2025-06-24 17:42:27.667 [ForkJoinPool.commonPool-worker-3] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 17:42:27.672 [ForkJoinPool.commonPool-worker-3] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 28728ms
2025-06-24 17:46:06.504 [SpringApplicationShutdownHook] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-24 17:46:06.505 [SpringApplicationShutdownHook] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@578ac0be] for TypeConfiguration
2025-06-24 17:46:06.506 [SpringApplicationShutdownHook] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@79f055c1] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@578ac0be]
2025-06-24 17:46:06.508 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-24 17:46:06.520 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-24 17:46:53.512 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 27018 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-24 17:46:53.515 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-24 17:46:54.470 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 17:46:54.471 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-24 17:46:54.570 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 95 ms. Found 3 JPA repository interfaces.
2025-06-24 17:46:54.591 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 17:46:54.592 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-24 17:46:54.606 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 17:46:54.606 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 17:46:54.606 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 17:46:54.606 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 0 Redis repository interfaces.
2025-06-24 17:46:56.685 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@39342614
2025-06-24 17:46:56.686 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@39342614
2025-06-24 17:46:56.686 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@39342614
2025-06-24 17:46:56.686 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@7109b603
2025-06-24 17:46:56.686 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@7109b603
2025-06-24 17:46:56.686 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@76b642aa
2025-06-24 17:46:56.686 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@76b642aa
2025-06-24 17:46:56.686 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@29b5e7db
2025-06-24 17:46:56.686 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@29b5e7db
2025-06-24 17:46:56.686 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@286dfa20
2025-06-24 17:46:56.686 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@286dfa20
2025-06-24 17:46:56.687 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@286dfa20
2025-06-24 17:46:56.687 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@1468e880
2025-06-24 17:46:56.687 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@1468e880
2025-06-24 17:46:56.687 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@1468e880
2025-06-24 17:46:56.687 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@508f4bb5
2025-06-24 17:46:56.689 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@508f4bb5
2025-06-24 17:46:56.690 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@42066f0d
2025-06-24 17:46:56.690 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@687e561b
2025-06-24 17:46:56.690 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@687e561b
2025-06-24 17:46:56.690 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@299786b1
2025-06-24 17:46:56.691 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@75f8d9b0
2025-06-24 17:46:56.691 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@4f7ae05
2025-06-24 17:46:56.692 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@4f7ae05
2025-06-24 17:46:56.692 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@4f7ae05
2025-06-24 17:46:56.692 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@1e23ee0e
2025-06-24 17:46:56.692 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@1e23ee0e
2025-06-24 17:46:56.693 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@1e23ee0e
2025-06-24 17:46:56.693 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@b144175
2025-06-24 17:46:56.693 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@b144175
2025-06-24 17:46:56.693 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@b144175
2025-06-24 17:46:56.693 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@38923cfe
2025-06-24 17:46:56.693 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@38923cfe
2025-06-24 17:46:56.693 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@38923cfe
2025-06-24 17:46:56.693 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@1ac3a6f
2025-06-24 17:46:56.693 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@1ac3a6f
2025-06-24 17:46:56.693 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@1ac3a6f
2025-06-24 17:46:56.694 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@fee7ca
2025-06-24 17:46:56.694 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@fee7ca
2025-06-24 17:46:56.694 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@29c80149
2025-06-24 17:46:56.694 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@29c80149
2025-06-24 17:46:56.694 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@14ad42
2025-06-24 17:46:56.695 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@14ad42
2025-06-24 17:46:56.695 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@14ad42
2025-06-24 17:46:56.695 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@608b906d
2025-06-24 17:46:56.695 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@173cfb01
2025-06-24 17:46:56.695 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@173cfb01
2025-06-24 17:46:56.695 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@7e1762e6
2025-06-24 17:46:56.696 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@5bccaedb
2025-06-24 17:46:56.696 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@5bccaedb
2025-06-24 17:46:56.697 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@5bccaedb
2025-06-24 17:46:56.697 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@67784537
2025-06-24 17:46:56.697 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@17ec5e2a
2025-06-24 17:46:56.697 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@52290e63
2025-06-24 17:46:56.697 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@6c2dd88b
2025-06-24 17:46:56.698 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@6c2dd88b
2025-06-24 17:46:56.699 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@49d979c4
2025-06-24 17:46:56.699 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@49d979c4
2025-06-24 17:46:56.699 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@3cb173db
2025-06-24 17:46:56.699 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@26712838
2025-06-24 17:46:56.699 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@249a45fd
2025-06-24 17:46:56.699 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@268f0ff3
2025-06-24 17:46:56.699 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@11978f52
2025-06-24 17:46:56.699 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@3e0855b0
2025-06-24 17:46:56.699 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@484b5a21
2025-06-24 17:46:56.699 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@484b5a21
2025-06-24 17:46:56.700 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@16e5344c
2025-06-24 17:46:56.700 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@16e5344c
2025-06-24 17:46:56.700 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@3ba5c4dd
2025-06-24 17:46:56.700 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@3ba5c4dd
2025-06-24 17:46:56.700 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@47fca3cc
2025-06-24 17:46:56.700 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@47fca3cc
2025-06-24 17:46:56.700 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@55746340
2025-06-24 17:46:56.700 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@55746340
2025-06-24 17:46:56.700 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@6a0c7af6
2025-06-24 17:46:56.700 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@7f1ad846
2025-06-24 17:46:56.700 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-24 17:46:56.700 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-24 17:46:56.700 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-24 17:46:56.700 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-24 17:46:56.700 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-24 17:46:56.700 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-24 17:46:56.701 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-24 17:46:56.702 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-24 17:46:56.702 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-24 17:46:56.703 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-24 17:46:56.703 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-24 17:46:56.703 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-24 17:46:56.704 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-24 17:46:56.704 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-24 17:46:56.705 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-24 17:46:56.705 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-24 17:46:56.705 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-24 17:46:56.705 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-24 17:46:56.705 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-24 17:46:56.705 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@5e7e7a7e
2025-06-24 17:46:56.705 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-24 17:46:56.705 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-24 17:46:56.705 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-24 17:46:56.705 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-24 17:46:56.706 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-24 17:46:56.706 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-24 17:46:56.707 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@5abc5854
2025-06-24 17:46:56.707 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-24 17:46:56.707 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-24 17:46:56.707 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-24 17:46:56.707 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-24 17:46:56.707 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-24 17:46:56.707 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-24 17:46:56.708 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-24 17:46:56.708 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-24 17:46:56.708 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-24 17:46:56.708 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-24 17:46:56.709 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-24 17:46:56.710 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-24 17:46:56.710 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-24 17:46:56.710 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-24 17:46:56.710 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-24 17:46:56.710 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-24 17:46:56.710 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-24 17:46:56.714 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@7f1fec57
2025-06-24 17:46:56.716 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@7f1fec57
2025-06-24 17:46:56.718 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@11c999da
2025-06-24 17:46:56.718 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@54f69311
2025-06-24 17:46:56.719 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@4ab86b2a
2025-06-24 17:46:56.719 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@7793b55d
2025-06-24 17:46:56.719 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@2ac9e53c
2025-06-24 17:46:56.719 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@4ac7856f
2025-06-24 17:46:56.719 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@432f4626
2025-06-24 17:46:56.719 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@297c3a43
2025-06-24 17:46:56.719 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@4c79ca55
2025-06-24 17:46:56.809 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-24 17:46:56.831 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-24 17:46:56.935 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7efa366
2025-06-24 17:46:56.936 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-24 17:46:56.970 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-24 17:46:56.970 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-24 17:46:56.988 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3e0327dd) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@ebff59d)
2025-06-24 17:46:56.989 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3361d286) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6ee186f3)
2025-06-24 17:46:56.989 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@49fb693d) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@38197e82)
2025-06-24 17:46:56.989 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5516ee5) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6765b6a2)
2025-06-24 17:46:56.989 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@75c589f2) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6db04a6)
2025-06-24 17:46:56.989 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@8f374de) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@426913c4)
2025-06-24 17:46:56.989 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1bba9862) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@451a4187)
2025-06-24 17:46:56.989 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@565c887e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5c215642)
2025-06-24 17:46:56.989 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1317ac2c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@416c1b0)
2025-06-24 17:46:56.990 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-24 17:46:56.990 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-24 17:46:56.990 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-24 17:46:56.991 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 17:46:56.991 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 17:46:56.992 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@7ef7f414
2025-06-24 17:46:56.993 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@11c999da`
2025-06-24 17:46:56.994 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-24 17:46:56.994 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-24 17:46:56.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 17:46:56.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 17:46:56.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 17:46:56.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 17:46:56.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 17:46:56.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 17:46:56.997 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 17:46:56.997 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 17:46:56.997 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 17:46:56.998 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@6033f36c] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@50b624da]
2025-06-24 17:46:57.554 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@6033f36c] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@7c045627]
2025-06-24 17:46:57.563 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@7c045627] for TypeConfiguration
2025-06-24 17:46:57.564 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-24 17:46:58.188 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-24 17:46:58.610 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-24 17:46:58.740 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-24 17:46:58.772 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 2
2025-06-24 17:46:58.772 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-24 17:46:58.772 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-24 17:46:58.773 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-24 17:46:59.180 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-24 17:46:59.198 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 6.271 seconds (process running for 6.835)
2025-06-24 17:54:44.118 [SpringApplicationShutdownHook] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-24 17:54:44.120 [SpringApplicationShutdownHook] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@7c045627] for TypeConfiguration
2025-06-24 17:54:44.121 [SpringApplicationShutdownHook] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@55760a1e] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@7c045627]
2025-06-24 17:54:44.122 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-24 17:54:44.131 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-24 17:58:51.436 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 28037 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-24 17:58:51.438 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-24 17:58:52.426 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 17:58:52.427 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-24 17:58:52.537 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 106 ms. Found 7 JPA repository interfaces.
2025-06-24 17:58:52.560 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 17:58:52.561 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-24 17:58:52.576 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityCelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 17:58:52.576 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityEventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 17:58:52.576 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 17:58:52.577 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 17:58:52.577 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 17:58:52.577 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 17:58:52.577 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 17:58:52.577 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 0 Redis repository interfaces.
2025-06-24 17:58:56.955 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@16e5344c
2025-06-24 17:58:56.958 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@16e5344c
2025-06-24 17:58:56.958 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@16e5344c
2025-06-24 17:58:56.958 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-24 17:58:56.958 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-24 17:58:56.959 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-24 17:58:56.960 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-24 17:58:56.960 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-24 17:58:56.960 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-24 17:58:56.960 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-24 17:58:56.960 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-24 17:58:56.960 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-24 17:58:56.961 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-24 17:58:56.961 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-24 17:58:56.961 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-24 17:58:56.962 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-24 17:58:56.962 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-24 17:58:56.962 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-24 17:58:56.963 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-24 17:58:56.963 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-24 17:58:56.963 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-24 17:58:56.963 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@5abc5854
2025-06-24 17:58:56.963 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-24 17:58:56.963 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-24 17:58:56.964 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-24 17:58:56.964 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-24 17:58:56.964 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-24 17:58:56.964 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-24 17:58:56.965 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-24 17:58:56.965 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-24 17:58:56.965 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-24 17:58:56.966 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-24 17:58:56.966 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-24 17:58:56.966 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-24 17:58:56.966 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-24 17:58:56.967 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-24 17:58:56.967 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-24 17:58:56.967 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-24 17:58:56.967 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-24 17:58:56.967 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-24 17:58:56.967 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-24 17:58:56.967 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-24 17:58:56.967 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-24 17:58:56.967 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-24 17:58:56.967 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-24 17:58:56.968 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-24 17:58:56.968 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-24 17:58:56.969 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-24 17:58:56.969 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@586486c
2025-06-24 17:58:56.969 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@586486c
2025-06-24 17:58:56.969 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@586486c
2025-06-24 17:58:56.969 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-24 17:58:56.969 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@7fbbdd8a
2025-06-24 17:58:56.970 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-24 17:58:56.971 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-24 17:58:56.971 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-24 17:58:56.971 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-24 17:58:56.971 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-24 17:58:56.971 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-24 17:58:56.971 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-24 17:58:56.971 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-24 17:58:56.971 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-24 17:58:56.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-24 17:58:56.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-24 17:58:56.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-24 17:58:56.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-24 17:58:56.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-24 17:58:56.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-24 17:58:56.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-24 17:58:56.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-24 17:58:56.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-24 17:58:56.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-24 17:58:56.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-24 17:58:56.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-24 17:58:56.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-24 17:58:56.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@12200670
2025-06-24 17:58:56.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-24 17:58:56.973 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-24 17:58:56.976 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-24 17:58:56.977 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-24 17:58:56.977 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-24 17:58:56.979 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-24 17:58:56.979 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-24 17:58:56.980 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-24 17:58:56.980 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@2a259f6f
2025-06-24 17:58:56.980 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@7ccf6114
2025-06-24 17:58:56.981 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@7ccf6114
2025-06-24 17:58:56.982 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@3df3410a
2025-06-24 17:58:56.983 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@3df3410a
2025-06-24 17:58:56.983 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-24 17:58:56.983 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-24 17:58:56.983 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-24 17:58:56.983 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@61d42275
2025-06-24 17:58:56.983 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@61d42275
2025-06-24 17:58:56.983 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@61d42275
2025-06-24 17:58:56.983 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@6614289a
2025-06-24 17:58:56.983 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@4148ce43
2025-06-24 17:58:56.983 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@46fb9581
2025-06-24 17:58:56.983 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@46fb9581
2025-06-24 17:58:56.983 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@6fcc0a1
2025-06-24 17:58:56.983 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@6fcc0a1
2025-06-24 17:58:56.983 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@6fcc0a1
2025-06-24 17:58:56.983 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@416b681c
2025-06-24 17:58:56.983 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@46d69ca4
2025-06-24 17:58:56.983 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@5c9b5e62
2025-06-24 17:58:56.984 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@5c9b5e62
2025-06-24 17:58:56.984 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@3c826498
2025-06-24 17:58:56.984 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@3c826498
2025-06-24 17:58:56.984 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@3c826498
2025-06-24 17:58:56.984 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@2633d09c
2025-06-24 17:58:56.984 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@2633d09c
2025-06-24 17:58:56.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@54f25b42
2025-06-24 17:58:56.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@54f25b42
2025-06-24 17:58:56.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@521c67f0
2025-06-24 17:58:56.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@521c67f0
2025-06-24 17:58:56.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@7d156f8f
2025-06-24 17:58:56.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@7d156f8f
2025-06-24 17:58:56.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@451af781
2025-06-24 17:58:56.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@451af781
2025-06-24 17:58:56.986 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@3749c2b
2025-06-24 17:58:56.989 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@1ba7db2a
2025-06-24 17:58:56.989 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@1ba7db2a
2025-06-24 17:58:56.990 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@af3295f
2025-06-24 17:58:56.991 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@27dc81be
2025-06-24 17:58:56.991 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@3595086b
2025-06-24 17:58:56.991 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@627d35ff
2025-06-24 17:58:56.992 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@7157413e
2025-06-24 17:58:56.992 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@3245efdb
2025-06-24 17:58:56.992 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@2f0e7fa8
2025-06-24 17:58:56.992 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@24d7657b
2025-06-24 17:58:56.992 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@6f428e6e
2025-06-24 17:58:57.071 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-24 17:58:57.082 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-24 17:58:57.188 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@3da61af2
2025-06-24 17:58:57.190 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-24 17:58:57.220 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-24 17:58:57.221 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-24 17:58:57.238 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5b1f0f26) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7120daa6)
2025-06-24 17:58:57.239 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6cbb6c41) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6787bd41)
2025-06-24 17:58:57.239 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@44c2e8a8) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3340ff7c)
2025-06-24 17:58:57.239 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@42e4431) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5e198c40)
2025-06-24 17:58:57.239 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@dcdb883) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@39420d59)
2025-06-24 17:58:57.239 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4fbbd98c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5dd227b7)
2025-06-24 17:58:57.240 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3d3b852e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@14ba7f15)
2025-06-24 17:58:57.240 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@55cb3b7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@497fd334)
2025-06-24 17:58:57.240 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@280c3dc0) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6f89ad03)
2025-06-24 17:58:57.241 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-24 17:58:57.242 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-24 17:58:57.242 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-24 17:58:57.243 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 17:58:57.243 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 17:58:57.245 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@5020e5ab
2025-06-24 17:58:57.245 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@af3295f`
2025-06-24 17:58:57.247 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-24 17:58:57.247 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-24 17:58:57.249 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 17:58:57.249 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 17:58:57.249 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 17:58:57.249 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 17:58:57.249 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 17:58:57.249 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 17:58:57.250 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 17:58:57.250 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 17:58:57.250 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 17:58:57.251 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@490fbeaa] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@35dc849b]
2025-06-24 17:58:57.923 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@490fbeaa] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@167ccc3c]
2025-06-24 17:58:57.928 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@167ccc3c] for TypeConfiguration
2025-06-24 17:58:57.929 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-24 17:58:58.628 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-24 17:58:59.185 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-24 17:58:59.334 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-24 17:58:59.369 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 2
2025-06-24 17:58:59.370 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-24 17:58:59.374 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-24 17:58:59.375 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-24 17:58:59.780 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-24 17:58:59.796 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 8.951 seconds (process running for 9.54)
2025-06-24 17:59:35.309 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 0
2025-06-24 17:59:35.322 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-24 17:59:35.334 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 0
2025-06-24 17:59:35.336 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-24 17:59:35.345 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 0
2025-06-24 17:59:35.345 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-24 17:59:35.362 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: entities,relations, textLength: 3
2025-06-24 17:59:35.363 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-24 17:59:35.372 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: entities,relations, textLength: 46
2025-06-24 17:59:35.375 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 46, 参数: entities,relations
2025-06-24 17:59:35.381 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 46，当前并发数: 1
2025-06-24 17:59:35.381 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 17:59:48.549 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 13165ms，响应长度: 571
2025-06-24 17:59:48.556 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 46
2025-06-24 17:59:48.579 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 571
2025-06-24 17:59:48.581 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "马云",
      "predicate": "创始人",
      "object": "阿里巴巴",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "共同创立",
      "object": "彭蕾",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "共同创立",
      "object": "蔡崇信",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "配偶",
      "object": "张瑛",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "育有",
      "object": "三个孩子",
      "confidence": 0.95
    }
  ]
}
2025-06-24 17:59:48.581 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "马云",
      "predicate": "创始人",
      "object": "阿里巴巴",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "共同创立",
      "object": "彭蕾",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "共同创立",
      "object": "蔡崇信",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "配偶",
      "object": "张瑛",
      "confidence": 0.95
    },
    {
      "subject": "马云",
      "predicate": "育有",
      "object": "三个孩子",
      "confidence": 0.95
    }
  ]
}
2025-06-24 17:59:48.583 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 17:59:48.584 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 5 个三元组，包括实体和关系保存
2025-06-24 17:59:48.662 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:59:48.682 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 马云 已存在，跳过插入
2025-06-24 17:59:48.683 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 马云 --[创始人]--> 阿里巴巴
2025-06-24 17:59:48.684 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:59:48.686 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 马云 已存在，跳过插入
2025-06-24 17:59:48.687 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 马云 --[共同创立]--> 彭蕾
2025-06-24 17:59:48.687 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:59:48.690 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 马云 已存在，跳过插入
2025-06-24 17:59:48.691 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 马云 --[共同创立]--> 蔡崇信
2025-06-24 17:59:48.691 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:59:48.693 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 马云 已存在，跳过插入
2025-06-24 17:59:48.693 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:59:48.707 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 17:59:48.718 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 张瑛 (通过三元组提取)
2025-06-24 17:59:48.727 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 17:59:48.746 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 17:59:48.754 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 17:59:48.758 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 马云 -> 张瑛 [配偶]
2025-06-24 17:59:48.759 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 马云 --[配偶]--> 张瑛
2025-06-24 17:59:48.763 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 17:59:48.769 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 马云 已存在，跳过插入
2025-06-24 17:59:48.770 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 马云 --[育有]--> 三个孩子
2025-06-24 17:59:48.770 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 17:59:48.794 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 13422ms
2025-06-24 17:59:48.838 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 70
2025-06-24 17:59:48.842 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 70, 参数: triples
2025-06-24 17:59:48.843 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 70，当前并发数: 1
2025-06-24 17:59:48.843 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 18:00:03.071 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 14228ms，响应长度: 693
2025-06-24 18:00:03.073 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 70
2025-06-24 18:00:03.080 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 693
2025-06-24 18:00:03.080 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "代表作品",
      "object": "《青花瓷》",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "职业",
      "object": "动作演员",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "代表作品",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出演",
      "object": "《无间道》",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "称号",
      "object": "香港四大天王",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:00:03.080 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "代表作品",
      "object": "《青花瓷》",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "职业",
      "object": "动作演员",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "代表作品",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出演",
      "object": "《无间道》",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "称号",
      "object": "香港四大天王",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:00:03.083 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 18:00:03.085 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 6 个三元组，包括实体和关系保存
2025-06-24 18:00:03.089 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:00:03.094 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-24 18:00:03.098 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:00:03.100 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 华语歌手 已存在，跳过插入
2025-06-24 18:00:03.102 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:00:03.106 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:00:03.114 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:00:03.119 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 周杰伦 -> 华语歌手 [职业]
2025-06-24 18:00:03.119 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[职业]--> 华语歌手
2025-06-24 18:00:03.121 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:00:03.123 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-24 18:00:03.130 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 18:00:03.136 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 18:00:03.139 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《青花瓷》 (通过三元组提取)
2025-06-24 18:00:03.140 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:00:03.147 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-24 18:00:03.151 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:00:03.153 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 周杰伦 -> 《青花瓷》 [代表作品]
2025-06-24 18:00:03.153 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[代表作品]--> 《青花瓷》
2025-06-24 18:00:03.155 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:00:03.156 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-24 18:00:03.157 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:00:03.158 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 动作演员 已存在，跳过插入
2025-06-24 18:00:03.159 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:00:03.162 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:00:03.165 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:00:03.166 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 成龙 -> 动作演员 [职业]
2025-06-24 18:00:03.166 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[职业]--> 动作演员
2025-06-24 18:00:03.167 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:00:03.169 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-24 18:00:03.170 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 18:00:03.173 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 18:00:03.176 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《醉拳》 (通过三元组提取)
2025-06-24 18:00:03.178 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:00:03.182 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-24 18:00:03.184 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:00:03.190 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 成龙 -> 《醉拳》 [代表作品]
2025-06-24 18:00:03.190 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[代表作品]--> 《醉拳》
2025-06-24 18:00:03.192 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:00:03.194 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-24 18:00:03.195 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 18:00:03.199 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 18:00:03.200 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《无间道》 (通过三元组提取)
2025-06-24 18:00:03.203 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:00:03.206 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-24 18:00:03.209 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:00:03.210 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 刘德华 -> 《无间道》 [出演]
2025-06-24 18:00:03.210 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[出演]--> 《无间道》
2025-06-24 18:00:03.212 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:00:03.214 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-24 18:00:03.214 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[称号]--> 香港四大天王
2025-06-24 18:00:03.214 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 18:00:03.219 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 14381ms
2025-06-24 18:00:03.229 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 65
2025-06-24 18:00:03.229 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 65, 参数: triples
2025-06-24 18:00:03.230 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 65，当前并发数: 1
2025-06-24 18:00:03.231 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 18:00:15.529 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 12298ms，响应长度: 569
2025-06-24 18:00:15.530 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 65
2025-06-24 18:00:15.533 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 569
2025-06-24 18:00:15.534 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "合作伙伴",
      "object": "巩俐",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "配偶",
      "object": "陈婷",
      "confidence": 0.95
    },
    {
      "subject": "巩俐",
      "predicate": "恋人",
      "object": "张艺谋",
      "confidence": 0.95
    },
    {
      "subject": "周润发",
      "predicate": "别名",
      "object": "发哥",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "好友",
      "object": "梁朝伟",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:00:15.534 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "合作伙伴",
      "object": "巩俐",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "配偶",
      "object": "陈婷",
      "confidence": 0.95
    },
    {
      "subject": "巩俐",
      "predicate": "恋人",
      "object": "张艺谋",
      "confidence": 0.95
    },
    {
      "subject": "周润发",
      "predicate": "别名",
      "object": "发哥",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "好友",
      "object": "梁朝伟",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:00:15.536 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 18:00:15.536 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 5 个三元组，包括实体和关系保存
2025-06-24 18:00:15.538 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:00:15.541 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 18:00:15.543 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:00:15.545 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 巩俐 已存在，跳过插入
2025-06-24 18:00:15.547 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:00:15.554 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:00:15.558 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:00:15.560 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 巩俐 [合作伙伴]
2025-06-24 18:00:15.560 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[合作伙伴]--> 巩俐
2025-06-24 18:00:15.563 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:00:15.566 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 18:00:15.567 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:00:15.570 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 18:00:15.573 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 陈婷 (通过三元组提取)
2025-06-24 18:00:15.576 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:00:15.582 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:00:15.584 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:00:15.586 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 陈婷 [配偶]
2025-06-24 18:00:15.586 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[配偶]--> 陈婷
2025-06-24 18:00:15.587 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:00:15.589 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 18:00:15.589 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 巩俐 --[恋人]--> 张艺谋
2025-06-24 18:00:15.590 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:00:15.592 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 18:00:15.594 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 周润发 (通过三元组提取)
2025-06-24 18:00:15.595 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:00:15.597 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 18:00:15.599 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 发哥 (通过三元组提取)
2025-06-24 18:00:15.601 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:00:15.608 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:00:15.610 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:00:15.612 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 周润发 -> 发哥 [别名]
2025-06-24 18:00:15.612 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周润发 --[别名]--> 发哥
2025-06-24 18:00:15.613 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:00:15.614 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-24 18:00:15.615 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:00:15.617 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 18:00:15.619 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 梁朝伟 (通过三元组提取)
2025-06-24 18:00:15.623 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:00:15.630 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:00:15.632 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:00:15.633 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 梁朝伟 [好友]
2025-06-24 18:00:15.633 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[好友]--> 梁朝伟
2025-06-24 18:00:15.633 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 18:00:15.639 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 12410ms
2025-06-24 18:00:16.661 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 65
2025-06-24 18:00:16.661 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 65, 参数: triples
2025-06-24 18:00:16.661 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 65，当前并发数: 1
2025-06-24 18:00:16.661 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 18:00:29.404 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 12743ms，响应长度: 576
2025-06-24 18:00:29.404 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 65
2025-06-24 18:00:29.409 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 576
2025-06-24 18:00:29.410 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《英雄》",
      "confidence": 0.95
    },
    {
      "subject": "巩俐",
      "predicate": "主演",
      "object": "《英雄》",
      "confidence": 0.95
    },
    {
      "subject": "李连杰",
      "predicate": "主演",
      "object": "《英雄》",
      "confidence": 0.95
    },
    {
      "subject": "梁朝伟",
      "predicate": "主演",
      "object": "《英雄》",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "演唱",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:00:29.410 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《英雄》",
      "confidence": 0.95
    },
    {
      "subject": "巩俐",
      "predicate": "主演",
      "object": "《英雄》",
      "confidence": 0.95
    },
    {
      "subject": "李连杰",
      "predicate": "主演",
      "object": "《英雄》",
      "confidence": 0.95
    },
    {
      "subject": "梁朝伟",
      "predicate": "主演",
      "object": "《英雄》",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "演唱",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:00:29.410 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 18:00:29.411 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 5 个三元组，包括实体和关系保存
2025-06-24 18:00:29.413 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:00:29.417 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 18:00:29.419 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:00:29.422 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 18:00:29.426 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 《英雄》 (通过三元组提取)
2025-06-24 18:00:29.429 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:00:29.435 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:00:29.438 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:00:29.441 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 《英雄》 [导演]
2025-06-24 18:00:29.442 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《英雄》
2025-06-24 18:00:29.443 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:00:29.445 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 巩俐 已存在，跳过插入
2025-06-24 18:00:29.447 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:00:29.449 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 《英雄》 已存在，跳过插入
2025-06-24 18:00:29.450 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:00:29.455 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:00:29.458 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:00:29.461 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 巩俐 -> 《英雄》 [主演]
2025-06-24 18:00:29.461 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 巩俐 --[主演]--> 《英雄》
2025-06-24 18:00:29.462 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:00:29.464 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 18:00:29.467 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 李连杰 (通过三元组提取)
2025-06-24 18:00:29.470 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:00:29.473 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 《英雄》 已存在，跳过插入
2025-06-24 18:00:29.474 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:00:29.476 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:00:29.479 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:00:29.480 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 李连杰 -> 《英雄》 [主演]
2025-06-24 18:00:29.480 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 李连杰 --[主演]--> 《英雄》
2025-06-24 18:00:29.481 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:00:29.485 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 梁朝伟 已存在，跳过插入
2025-06-24 18:00:29.486 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:00:29.488 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 《英雄》 已存在，跳过插入
2025-06-24 18:00:29.489 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:00:29.492 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:00:29.494 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:00:29.496 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 梁朝伟 -> 《英雄》 [主演]
2025-06-24 18:00:29.496 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 梁朝伟 --[主演]--> 《英雄》
2025-06-24 18:00:29.498 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:00:29.500 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-24 18:00:29.501 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 18:00:29.502 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-24 18:00:29.503 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:00:29.508 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-24 18:00:29.512 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:00:29.515 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 周杰伦 -> 《青花瓷》 [演唱]
2025-06-24 18:00:29.515 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[演唱]--> 《青花瓷》
2025-06-24 18:00:29.515 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 18:00:29.526 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 12865ms
2025-06-24 18:00:30.549 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 77
2025-06-24 18:00:30.549 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 77, 参数: triples
2025-06-24 18:00:30.550 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 77，当前并发数: 1
2025-06-24 18:00:30.550 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 18:00:45.854 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 15304ms，响应长度: 845
2025-06-24 18:00:45.854 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 77
2025-06-24 18:00:45.857 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 845
2025-06-24 18:00:45.858 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "北京国际电影节",
      "predicate": "举办于",
      "object": "北京",
      "confidence": 0.95
    },
    {
      "subject": "北京国际电影节",
      "predicate": "举办时间",
      "object": "2002年",
      "confidence": 0.95
    },
    {
      "subject": "北京国际电影节",
      "predicate": "活动类型",
      "object": "电影展映活动",
      "confidence": 0.95
    },
    {
      "subject": "北京奥运会开幕式",
      "predicate": "举办于",
      "object": "北京鸟巢",
      "confidence": 0.95
    },
    {
      "subject": "北京奥运会开幕式",
      "predicate": "举办时间",
      "object": "2008年",
      "confidence": 0.95
    },
    {
      "subject": "北京奥运会开幕式",
      "predicate": "活动类型",
      "object": "体育赛事",
      "confidence": 0.95
    },
    {
      "subject": "第75届奥斯卡颁奖典礼",
      "predicate": "举办于",
      "object": "洛杉矶",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:00:45.858 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "北京国际电影节",
      "predicate": "举办于",
      "object": "北京",
      "confidence": 0.95
    },
    {
      "subject": "北京国际电影节",
      "predicate": "举办时间",
      "object": "2002年",
      "confidence": 0.95
    },
    {
      "subject": "北京国际电影节",
      "predicate": "活动类型",
      "object": "电影展映活动",
      "confidence": 0.95
    },
    {
      "subject": "北京奥运会开幕式",
      "predicate": "举办于",
      "object": "北京鸟巢",
      "confidence": 0.95
    },
    {
      "subject": "北京奥运会开幕式",
      "predicate": "举办时间",
      "object": "2008年",
      "confidence": 0.95
    },
    {
      "subject": "北京奥运会开幕式",
      "predicate": "活动类型",
      "object": "体育赛事",
      "confidence": 0.95
    },
    {
      "subject": "第75届奥斯卡颁奖典礼",
      "predicate": "举办于",
      "object": "洛杉矶",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:00:45.862 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 18:00:45.863 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 7 个三元组，包括实体和关系保存
2025-06-24 18:00:45.864 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:00:45.868 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 18:00:45.871 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 北京国际电影节 (通过三元组提取)
2025-06-24 18:00:45.871 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 北京国际电影节 --[举办于]--> 北京
2025-06-24 18:00:45.872 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:00:45.874 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 北京国际电影节 已存在，跳过插入
2025-06-24 18:00:45.874 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 北京国际电影节 --[举办时间]--> 2002年
2025-06-24 18:00:45.875 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:00:45.877 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 北京国际电影节 已存在，跳过插入
2025-06-24 18:00:45.878 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:00:45.880 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 18:00:45.883 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 电影展映活动 (通过三元组提取)
2025-06-24 18:00:45.883 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 北京国际电影节 --[活动类型]--> 电影展映活动
2025-06-24 18:00:45.883 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:00:45.886 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 18:00:45.888 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 北京奥运会开幕式 (通过三元组提取)
2025-06-24 18:00:45.888 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 北京奥运会开幕式 --[举办于]--> 北京鸟巢
2025-06-24 18:00:45.889 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:00:45.893 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 北京奥运会开幕式 已存在，跳过插入
2025-06-24 18:00:45.894 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 北京奥运会开幕式 --[举办时间]--> 2008年
2025-06-24 18:00:45.896 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:00:45.923 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 北京奥运会开幕式 已存在，跳过插入
2025-06-24 18:00:45.923 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 北京奥运会开幕式 --[活动类型]--> 体育赛事
2025-06-24 18:00:45.925 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:00:45.927 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 18:00:45.928 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 第75届奥斯卡颁奖典礼 (通过三元组提取)
2025-06-24 18:00:45.928 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 第75届奥斯卡颁奖典礼 --[举办于]--> 洛杉矶
2025-06-24 18:00:45.928 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 18:00:45.931 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 15382ms
2025-06-24 18:00:46.954 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 61
2025-06-24 18:00:46.954 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 61, 参数: triples
2025-06-24 18:00:46.954 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 61，当前并发数: 1
2025-06-24 18:00:46.954 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 18:00:58.227 [reactor-http-nio-6] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 11273ms，响应长度: 486
2025-06-24 18:00:58.227 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 61
2025-06-24 18:00:58.232 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 486
2025-06-24 18:00:58.232 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "参加",
      "object": "2002年北京国际电影节",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "担任",
      "object": "评委",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "执导",
      "object": "2008年北京奥运会开幕式",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "参加",
      "object": "第75届奥斯卡颁奖典礼",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:00:58.232 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "参加",
      "object": "2002年北京国际电影节",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "担任",
      "object": "评委",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "执导",
      "object": "2008年北京奥运会开幕式",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "参加",
      "object": "第75届奥斯卡颁奖典礼",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:00:58.232 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 18:00:58.232 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-24 18:00:58.234 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:00:58.236 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 18:00:58.237 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:00:58.239 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 18:00:58.242 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 2002年北京国际电影节 (通过三元组提取)
2025-06-24 18:00:58.243 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:00:58.248 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 18:00:58.253 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:00:58.256 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 张艺谋 -> 2002年北京国际电影节 [参加]
2025-06-24 18:00:58.256 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[参加]--> 2002年北京国际电影节
2025-06-24 18:00:58.257 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:00:58.264 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 18:00:58.265 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[担任]--> 评委
2025-06-24 18:00:58.266 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:00:58.270 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 18:00:58.274 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:00:58.276 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 18:00:58.279 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 2008年北京奥运会开幕式 (通过三元组提取)
2025-06-24 18:00:58.282 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:00:58.285 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 18:00:58.286 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:00:58.287 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 张艺谋 -> 2008年北京奥运会开幕式 [执导]
2025-06-24 18:00:58.287 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[执导]--> 2008年北京奥运会开幕式
2025-06-24 18:00:58.288 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:00:58.289 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-24 18:00:58.289 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:00:58.290 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 第75届奥斯卡颁奖典礼 已存在，跳过插入
2025-06-24 18:00:58.291 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:00:58.296 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 18:00:58.299 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:00:58.301 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 成龙 -> 第75届奥斯卡颁奖典礼 [参加]
2025-06-24 18:00:58.301 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[参加]--> 第75届奥斯卡颁奖典礼
2025-06-24 18:00:58.301 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 18:00:58.310 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 11356ms
2025-06-24 18:00:59.334 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 76
2025-06-24 18:00:59.334 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 76, 参数: triples
2025-06-24 18:00:59.334 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 76，当前并发数: 1
2025-06-24 18:00:59.334 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 18:01:09.516 [reactor-http-nio-6] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 10181ms，响应长度: 394
2025-06-24 18:01:09.516 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 76
2025-06-24 18:01:09.520 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 394
2025-06-24 18:01:09.520 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "电影《英雄》",
      "predicate": "展映于",
      "object": "2002年北京国际电影节",
      "confidence": 0.95
    },
    {
      "subject": "主题曲《青花瓷》",
      "predicate": "演出于",
      "object": "2008年北京奥运会开幕式",
      "confidence": 0.95
    },
    {
      "subject": "电影《醉拳》",
      "predicate": "获得提名于",
      "object": "第75届奥斯卡颁奖典礼",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:01:09.520 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "电影《英雄》",
      "predicate": "展映于",
      "object": "2002年北京国际电影节",
      "confidence": 0.95
    },
    {
      "subject": "主题曲《青花瓷》",
      "predicate": "演出于",
      "object": "2008年北京奥运会开幕式",
      "confidence": 0.95
    },
    {
      "subject": "电影《醉拳》",
      "predicate": "获得提名于",
      "object": "第75届奥斯卡颁奖典礼",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:01:09.522 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 18:01:09.522 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-24 18:01:09.526 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:01:09.528 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 18:01:09.532 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 电影《英雄》 (通过三元组提取)
2025-06-24 18:01:09.534 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:01:09.536 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 2002年北京国际电影节 已存在，跳过插入
2025-06-24 18:01:09.536 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 电影《英雄》 --[展映于]--> 2002年北京国际电影节
2025-06-24 18:01:09.537 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:01:09.539 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 2008年北京奥运会开幕式 已存在，跳过插入
2025-06-24 18:01:09.539 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 主题曲《青花瓷》 --[演出于]--> 2008年北京奥运会开幕式
2025-06-24 18:01:09.540 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:01:09.542 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 第75届奥斯卡颁奖典礼 已存在，跳过插入
2025-06-24 18:01:09.542 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 电影《醉拳》 --[获得提名于]--> 第75届奥斯卡颁奖典礼
2025-06-24 18:01:09.542 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 18:01:09.549 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 10215ms
2025-06-24 18:01:10.566 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 421
2025-06-24 18:01:10.566 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 421, 参数: triples
2025-06-24 18:01:10.566 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 421，当前并发数: 1
2025-06-24 18:01:10.566 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 18:01:37.599 [reactor-http-nio-6] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 27033ms，响应长度: 1524
2025-06-24 18:01:37.599 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 421
2025-06-24 18:01:37.602 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 1524
2025-06-24 18:01:37.602 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "职业",
      "object": "导演",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "合作",
      "object": "巩俐",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "电影《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "电影《英雄》",
      "confidence": 0.95
    },
    {
      "subject": "李连杰",
      "predicate": "主演",
      "object": "电影《英雄》",
      "confidence": 0.95
    },
    {
      "subject": "梁朝伟",
      "predicate": "主演",
      "object": "电影《英雄》",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "朋友",
      "object": "梁朝伟",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "担任",
      "object": "2008年北京奥运会开幕式总导演",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "参加",
      "object": "第41届柏林国际电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "参加",
      "object": "金鸡奖颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "电影《红高粱》",
      "predicate": "获奖",
      "object": "第41届柏林国际电影节金熊奖",
      "confidence": 0.95
    },
    {
      "subject": "电影《英雄》",
      "predicate": "首映",
      "object": "2008年北京奥运会开幕式前",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "演唱",
      "object": "歌曲《忘情水》",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:01:37.602 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "职业",
      "object": "导演",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "合作",
      "object": "巩俐",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "电影《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "电影《英雄》",
      "confidence": 0.95
    },
    {
      "subject": "李连杰",
      "predicate": "主演",
      "object": "电影《英雄》",
      "confidence": 0.95
    },
    {
      "subject": "梁朝伟",
      "predicate": "主演",
      "object": "电影《英雄》",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "朋友",
      "object": "梁朝伟",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "担任",
      "object": "2008年北京奥运会开幕式总导演",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "参加",
      "object": "第41届柏林国际电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "参加",
      "object": "金鸡奖颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "电影《红高粱》",
      "predicate": "获奖",
      "object": "第41届柏林国际电影节金熊奖",
      "confidence": 0.95
    },
    {
      "subject": "电影《英雄》",
      "predicate": "首映",
      "object": "2008年北京奥运会开幕式前",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "演唱",
      "object": "歌曲《忘情水》",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:01:37.603 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 18:01:37.603 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 13 个三元组，包括实体和关系保存
2025-06-24 18:01:37.604 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:01:37.606 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 18:01:37.606 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:01:37.616 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 18:01:37.621 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 导演 (通过三元组提取)
2025-06-24 18:01:37.624 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:01:37.628 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:01:37.631 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:01:37.632 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 导演 [职业]
2025-06-24 18:01:37.633 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[职业]--> 导演
2025-06-24 18:01:37.633 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:01:37.636 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 18:01:37.637 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:01:37.638 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 巩俐 已存在，跳过插入
2025-06-24 18:01:37.639 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:01:37.641 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:01:37.642 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:01:37.644 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 巩俐 [合作]
2025-06-24 18:01:37.644 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[合作]--> 巩俐
2025-06-24 18:01:37.646 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:01:37.647 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 18:01:37.648 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:01:37.649 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 18:01:37.651 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 电影《红高粱》 (通过三元组提取)
2025-06-24 18:01:37.651 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:01:37.653 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:01:37.655 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:01:37.656 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 电影《红高粱》 [导演]
2025-06-24 18:01:37.656 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 电影《红高粱》
2025-06-24 18:01:37.656 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:01:37.657 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 18:01:37.658 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:01:37.659 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 18:01:37.660 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 电影《英雄》 (通过三元组提取)
2025-06-24 18:01:37.661 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:01:37.662 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:01:37.665 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:01:37.667 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 电影《英雄》 [导演]
2025-06-24 18:01:37.667 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 电影《英雄》
2025-06-24 18:01:37.667 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:01:37.668 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 李连杰 已存在，跳过插入
2025-06-24 18:01:37.669 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:01:37.670 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 电影《英雄》 已存在，跳过插入
2025-06-24 18:01:37.671 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:01:37.673 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:01:37.675 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:01:37.675 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 李连杰 -> 电影《英雄》 [主演]
2025-06-24 18:01:37.675 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 李连杰 --[主演]--> 电影《英雄》
2025-06-24 18:01:37.676 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:01:37.677 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 梁朝伟 已存在，跳过插入
2025-06-24 18:01:37.677 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:01:37.678 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 电影《英雄》 已存在，跳过插入
2025-06-24 18:01:37.679 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:01:37.682 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:01:37.684 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:01:37.685 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 梁朝伟 -> 电影《英雄》 [主演]
2025-06-24 18:01:37.686 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 梁朝伟 --[主演]--> 电影《英雄》
2025-06-24 18:01:37.686 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:01:37.688 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-24 18:01:37.688 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:01:37.690 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 梁朝伟 已存在，跳过插入
2025-06-24 18:01:37.691 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:01:37.696 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:01:37.698 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:01:37.699 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 梁朝伟 [朋友]
2025-06-24 18:01:37.699 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[朋友]--> 梁朝伟
2025-06-24 18:01:37.702 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:01:37.703 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 18:01:37.704 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:01:37.706 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 18:01:37.708 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 2008年北京奥运会开幕式总导演 (通过三元组提取)
2025-06-24 18:01:37.709 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:01:37.711 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 18:01:37.713 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:01:37.715 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 张艺谋 -> 2008年北京奥运会开幕式总导演 [担任]
2025-06-24 18:01:37.715 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[担任]--> 2008年北京奥运会开幕式总导演
2025-06-24 18:01:37.715 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:01:37.717 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 18:01:37.718 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:01:37.720 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 18:01:37.723 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 第41届柏林国际电影节颁奖典礼 (通过三元组提取)
2025-06-24 18:01:37.724 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:01:37.725 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 18:01:37.728 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:01:37.730 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 张艺谋 -> 第41届柏林国际电影节颁奖典礼 [参加]
2025-06-24 18:01:37.730 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[参加]--> 第41届柏林国际电影节颁奖典礼
2025-06-24 18:01:37.731 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:01:37.732 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-24 18:01:37.734 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:01:37.736 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 18:01:37.737 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 金鸡奖颁奖典礼 (通过三元组提取)
2025-06-24 18:01:37.738 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:01:37.740 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 18:01:37.741 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:01:37.743 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 刘德华 -> 金鸡奖颁奖典礼 [参加]
2025-06-24 18:01:37.743 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[参加]--> 金鸡奖颁奖典礼
2025-06-24 18:01:37.743 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:01:37.746 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 18:01:37.748 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 第41届柏林国际电影节金熊奖 (通过三元组提取)
2025-06-24 18:01:37.748 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 电影《红高粱》 --[获奖]--> 第41届柏林国际电影节金熊奖
2025-06-24 18:01:37.750 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:01:37.752 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 18:01:37.753 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 2008年北京奥运会开幕式前 (通过三元组提取)
2025-06-24 18:01:37.753 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 电影《英雄》 --[首映]--> 2008年北京奥运会开幕式前
2025-06-24 18:01:37.754 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:01:37.755 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-24 18:01:37.756 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 18:01:37.757 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 18:01:37.758 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 歌曲《忘情水》 (通过三元组提取)
2025-06-24 18:01:37.758 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:01:37.760 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-24 18:01:37.762 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:01:37.764 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 刘德华 -> 歌曲《忘情水》 [演唱]
2025-06-24 18:01:37.764 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[演唱]--> 歌曲《忘情水》
2025-06-24 18:01:37.764 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 18:01:37.769 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 27203ms
2025-06-24 18:01:39.793 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 344
2025-06-24 18:01:39.793 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 344, 参数: triples
2025-06-24 18:01:39.794 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 344，当前并发数: 1
2025-06-24 18:01:39.794 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 18:02:09.810 [parallel-10] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30015ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 18:02:09.810 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 344
2025-06-24 18:02:09.810 [ForkJoinPool.commonPool-worker-1] ERROR c.datacenter.extract.service.TextExtractionService - 文本提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 18:02:09.811 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30018ms
2025-06-24 18:02:11.834 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 363
2025-06-24 18:02:11.834 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 363, 参数: triples
2025-06-24 18:02:11.834 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 363，当前并发数: 1
2025-06-24 18:02:11.834 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 18:02:41.839 [parallel-2] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30005ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 18:02:41.840 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 363
2025-06-24 18:02:41.840 [ForkJoinPool.commonPool-worker-1] ERROR c.datacenter.extract.service.TextExtractionService - 文本提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 18:02:41.840 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30006ms
2025-06-24 18:02:43.872 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 357
2025-06-24 18:02:43.872 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 357, 参数: triples
2025-06-24 18:02:43.872 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 357，当前并发数: 1
2025-06-24 18:02:43.872 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 18:03:13.882 [parallel-6] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30010ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 18:03:13.884 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 357
2025-06-24 18:03:13.885 [ForkJoinPool.commonPool-worker-1] ERROR c.datacenter.extract.service.TextExtractionService - 文本提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 18:03:13.885 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30013ms
2025-06-24 18:03:15.911 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 442
2025-06-24 18:03:15.911 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 442, 参数: triples
2025-06-24 18:03:15.911 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 442，当前并发数: 1
2025-06-24 18:03:15.911 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 18:03:45.921 [parallel-11] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30009ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 18:03:45.931 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 442
2025-06-24 18:03:45.931 [ForkJoinPool.commonPool-worker-1] ERROR c.datacenter.extract.service.TextExtractionService - 文本提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 18:03:45.934 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30023ms
2025-06-24 18:03:47.968 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 461
2025-06-24 18:03:47.968 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 461, 参数: triples
2025-06-24 18:03:47.970 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 461，当前并发数: 1
2025-06-24 18:03:47.970 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 18:04:17.982 [parallel-3] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30011ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 18:04:17.989 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 461
2025-06-24 18:04:17.989 [ForkJoinPool.commonPool-worker-1] ERROR c.datacenter.extract.service.TextExtractionService - 文本提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 18:04:17.990 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30022ms
2025-06-24 18:04:20.024 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 400
2025-06-24 18:04:20.028 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 400, 参数: triples
2025-06-24 18:04:20.029 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 400，当前并发数: 1
2025-06-24 18:04:20.029 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 18:04:50.034 [parallel-7] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30004ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 18:04:50.042 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 400
2025-06-24 18:04:50.042 [ForkJoinPool.commonPool-worker-1] ERROR c.datacenter.extract.service.TextExtractionService - 文本提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 18:04:50.098 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30074ms
2025-06-24 18:04:52.125 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 465
2025-06-24 18:04:52.126 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 465, 参数: triples
2025-06-24 18:04:52.126 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 465，当前并发数: 1
2025-06-24 18:04:52.126 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 18:05:22.139 [parallel-11] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30011ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 18:05:22.148 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 465
2025-06-24 18:05:22.149 [ForkJoinPool.commonPool-worker-1] ERROR c.datacenter.extract.service.TextExtractionService - 文本提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 18:05:22.150 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30025ms
2025-06-24 18:05:24.184 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 489
2025-06-24 18:05:24.185 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 489, 参数: triples
2025-06-24 18:05:24.186 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 489，当前并发数: 1
2025-06-24 18:05:24.186 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 18:05:54.196 [parallel-3] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30008ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 18:05:54.207 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 489
2025-06-24 18:05:54.207 [ForkJoinPool.commonPool-worker-1] ERROR c.datacenter.extract.service.TextExtractionService - 文本提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 18:05:54.209 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30025ms
2025-06-24 18:05:56.239 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 404
2025-06-24 18:05:56.240 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 404, 参数: triples
2025-06-24 18:05:56.241 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 404，当前并发数: 1
2025-06-24 18:05:56.241 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 18:06:26.251 [parallel-8] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30009ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 18:06:26.261 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 404
2025-06-24 18:06:26.261 [ForkJoinPool.commonPool-worker-1] ERROR c.datacenter.extract.service.TextExtractionService - 文本提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 18:06:26.263 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30024ms
2025-06-24 18:06:28.287 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 346
2025-06-24 18:06:28.287 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 346, 参数: triples
2025-06-24 18:06:28.287 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 346，当前并发数: 1
2025-06-24 18:06:28.287 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 18:06:58.299 [parallel-12] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30011ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-24 18:06:58.307 [ForkJoinPool.commonPool-worker-1] ERROR com.datacenter.extract.service.SmartAIProvider - AI提取失败，类型: triples，文本长度: 346
2025-06-24 18:06:58.307 [ForkJoinPool.commonPool-worker-1] ERROR c.datacenter.extract.service.TextExtractionService - 文本提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-24 18:06:58.308 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 30021ms
2025-06-24 18:07:00.333 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 293
2025-06-24 18:07:00.333 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 293, 参数: triples
2025-06-24 18:07:00.334 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 293，当前并发数: 1
2025-06-24 18:07:00.334 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 18:07:27.881 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 27547ms，响应长度: 1552
2025-06-24 18:07:27.882 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 293
2025-06-24 18:07:27.897 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 1552
2025-06-24 18:07:27.897 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "《奔跑吧兄弟》",
      "predicate": "制作方",
      "object": "浙江卫视",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧兄弟》",
      "predicate": "类型",
      "object": "户外竞技真人秀节目",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧兄弟》",
      "predicate": "首播时间",
      "object": "2014年",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧兄弟》",
      "predicate": "固定嘉宾",
      "object": "邓超",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧兄弟》",
      "predicate": "固定嘉宾",
      "object": "Angelababy",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧兄弟》",
      "predicate": "固定嘉宾",
      "object": "李晨",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧兄弟》",
      "predicate": "固定嘉宾",
      "object": "陈赫",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧兄弟》",
      "predicate": "总导演",
      "object": "姚译添",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧兄弟》",
      "predicate": "获奖",
      "object": "2015年国家广播电视总局优秀节目奖",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧兄弟》第二季",
      "predicate": "启动仪式地点",
      "object": "上海",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧》",
      "predicate": "类型",
      "object": "主题曲",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧》",
      "predicate": "制作方",
      "object": "节目组",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧》",
      "predicate": "首次公开播放场合",
      "object": "首播发布会",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:07:27.897 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "《奔跑吧兄弟》",
      "predicate": "制作方",
      "object": "浙江卫视",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧兄弟》",
      "predicate": "类型",
      "object": "户外竞技真人秀节目",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧兄弟》",
      "predicate": "首播时间",
      "object": "2014年",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧兄弟》",
      "predicate": "固定嘉宾",
      "object": "邓超",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧兄弟》",
      "predicate": "固定嘉宾",
      "object": "Angelababy",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧兄弟》",
      "predicate": "固定嘉宾",
      "object": "李晨",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧兄弟》",
      "predicate": "固定嘉宾",
      "object": "陈赫",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧兄弟》",
      "predicate": "总导演",
      "object": "姚译添",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧兄弟》",
      "predicate": "获奖",
      "object": "2015年国家广播电视总局优秀节目奖",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧兄弟》第二季",
      "predicate": "启动仪式地点",
      "object": "上海",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧》",
      "predicate": "类型",
      "object": "主题曲",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧》",
      "predicate": "制作方",
      "object": "节目组",
      "confidence": 0.95
    },
    {
      "subject": "《奔跑吧》",
      "predicate": "首次公开播放场合",
      "object": "首播发布会",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:07:27.901 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 18:07:27.901 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 13 个三元组，包括实体和关系保存
2025-06-24 18:07:27.921 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 18:07:27.936 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《奔跑吧兄弟》 已存在，跳过插入
2025-06-24 18:07:27.936 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧兄弟》 --[制作方]--> 浙江卫视
2025-06-24 18:07:27.936 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 18:07:27.938 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《奔跑吧兄弟》 已存在，跳过插入
2025-06-24 18:07:27.939 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:07:27.943 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 18:07:27.947 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 户外竞技真人秀节目 (通过三元组提取)
2025-06-24 18:07:27.950 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 18:07:27.953 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-24 18:07:27.962 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:07:27.964 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 户外竞技真人秀节目 -> 《奔跑吧兄弟》 [在_类型]
2025-06-24 18:07:27.965 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧兄弟》 --[类型]--> 户外竞技真人秀节目
2025-06-24 18:07:27.965 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 18:07:27.968 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《奔跑吧兄弟》 已存在，跳过插入
2025-06-24 18:07:27.969 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧兄弟》 --[首播时间]--> 2014年
2025-06-24 18:07:27.969 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 18:07:27.971 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《奔跑吧兄弟》 已存在，跳过插入
2025-06-24 18:07:27.971 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧兄弟》 --[固定嘉宾]--> 邓超
2025-06-24 18:07:27.972 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 18:07:27.973 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《奔跑吧兄弟》 已存在，跳过插入
2025-06-24 18:07:27.973 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧兄弟》 --[固定嘉宾]--> Angelababy
2025-06-24 18:07:27.974 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 18:07:27.975 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《奔跑吧兄弟》 已存在，跳过插入
2025-06-24 18:07:27.976 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧兄弟》 --[固定嘉宾]--> 李晨
2025-06-24 18:07:27.976 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 18:07:27.977 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《奔跑吧兄弟》 已存在，跳过插入
2025-06-24 18:07:27.977 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧兄弟》 --[固定嘉宾]--> 陈赫
2025-06-24 18:07:27.978 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:07:27.979 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 《奔跑吧兄弟》 已存在，跳过插入
2025-06-24 18:07:27.979 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:07:27.981 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 姚译添 已存在，跳过插入
2025-06-24 18:07:27.981 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:07:27.984 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:07:27.986 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:07:27.989 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 《奔跑吧兄弟》 -> 姚译添 [总导演]
2025-06-24 18:07:27.989 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧兄弟》 --[总导演]--> 姚译添
2025-06-24 18:07:27.989 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 18:07:27.991 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《奔跑吧兄弟》 已存在，跳过插入
2025-06-24 18:07:27.992 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:07:27.994 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 18:07:27.995 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 2015年国家广播电视总局优秀节目奖 (通过三元组提取)
2025-06-24 18:07:27.996 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 18:07:27.998 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-24 18:07:28.003 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:07:28.004 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 2015年国家广播电视总局优秀节目奖 -> 《奔跑吧兄弟》 [在_获奖]
2025-06-24 18:07:28.004 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧兄弟》 --[获奖]--> 2015年国家广播电视总局优秀节目奖
2025-06-24 18:07:28.005 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧兄弟》第二季 --[启动仪式地点]--> 上海
2025-06-24 18:07:28.006 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 18:07:28.007 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《奔跑吧》 已存在，跳过插入
2025-06-24 18:07:28.007 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧》 --[类型]--> 主题曲
2025-06-24 18:07:28.008 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 18:07:28.009 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《奔跑吧》 已存在，跳过插入
2025-06-24 18:07:28.011 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:07:28.013 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 18:07:28.015 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 节目组 (通过三元组提取)
2025-06-24 18:07:28.016 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 18:07:28.018 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-24 18:07:28.020 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:07:28.021 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 节目组 -> 《奔跑吧》 [在_制作方]
2025-06-24 18:07:28.021 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧》 --[制作方]--> 节目组
2025-06-24 18:07:28.022 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 18:07:28.024 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《奔跑吧》 已存在，跳过插入
2025-06-24 18:07:28.026 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:07:28.029 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 18:07:28.032 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 首播发布会 (通过三元组提取)
2025-06-24 18:07:28.033 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:07:28.035 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-24 18:07:28.037 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:07:28.038 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系(反向): 首播发布会 -> 《奔跑吧》 [参与_首次公开播放场合]
2025-06-24 18:07:28.038 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《奔跑吧》 --[首次公开播放场合]--> 首播发布会
2025-06-24 18:07:28.038 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 18:07:28.042 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 27709ms
2025-06-24 18:07:30.057 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 273
2025-06-24 18:07:30.057 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 273, 参数: triples
2025-06-24 18:07:30.057 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 273，当前并发数: 1
2025-06-24 18:07:30.057 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 18:07:57.130 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 27073ms，响应长度: 1531
2025-06-24 18:07:57.130 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 273
2025-06-24 18:07:57.138 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 1531
2025-06-24 18:07:57.138 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "第76届戛纳国际电影节",
      "predicate": "举行于",
      "object": "法国戛纳",
      "confidence": 0.95
    },
    {
      "subject": "第76届戛纳国际电影节",
      "predicate": "举行时间",
      "object": "2023年5月",
      "confidence": 0.95
    },
    {
      "subject": "第76届戛纳国际电影节",
      "predicate": "持续时间",
      "object": "12天",
      "confidence": 0.95
    },
    {
      "subject": "过往人生",
      "predicate": "导演",
      "object": "宋浩",
      "confidence": 0.95
    },
    {
      "subject": "过往人生",
      "predicate": "展映于",
      "object": "戛纳电影节主竞赛单元",
      "confidence": 0.95
    },
    {
      "subject": "燃冬",
      "predicate": "放映于",
      "object": "戛纳电影节特别展映单元",
      "confidence": 0.95
    },
    {
      "subject": "燃冬",
      "predicate": "获得",
      "object": "观众好评",
      "confidence": 0.95
    },
    {
      "subject": "过往人生",
      "predicate": "获得",
      "object": "最佳导演奖",
      "confidence": 0.95
    },
    {
      "subject": "宋浩",
      "predicate": "领奖",
      "object": "最佳导演奖",
      "confidence": 0.95
    },
    {
      "subject": "章子怡",
      "predicate": "亮相于",
      "object": "开幕式红毯仪式",
      "confidence": 0.95
    },
    {
      "subject": "汤唯",
      "predicate": "亮相于",
      "object": "开幕式红毯仪式",
      "confidence": 0.95
    },
    {
      "subject": "中国电影推介会",
      "predicate": "举办于",
      "object": "电影节期间",
      "confidence": 0.95
    },
    {
      "subject": "中国电影推介会",
      "predicate": "进行",
      "object": "华语新片全球首映",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:07:57.138 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "第76届戛纳国际电影节",
      "predicate": "举行于",
      "object": "法国戛纳",
      "confidence": 0.95
    },
    {
      "subject": "第76届戛纳国际电影节",
      "predicate": "举行时间",
      "object": "2023年5月",
      "confidence": 0.95
    },
    {
      "subject": "第76届戛纳国际电影节",
      "predicate": "持续时间",
      "object": "12天",
      "confidence": 0.95
    },
    {
      "subject": "过往人生",
      "predicate": "导演",
      "object": "宋浩",
      "confidence": 0.95
    },
    {
      "subject": "过往人生",
      "predicate": "展映于",
      "object": "戛纳电影节主竞赛单元",
      "confidence": 0.95
    },
    {
      "subject": "燃冬",
      "predicate": "放映于",
      "object": "戛纳电影节特别展映单元",
      "confidence": 0.95
    },
    {
      "subject": "燃冬",
      "predicate": "获得",
      "object": "观众好评",
      "confidence": 0.95
    },
    {
      "subject": "过往人生",
      "predicate": "获得",
      "object": "最佳导演奖",
      "confidence": 0.95
    },
    {
      "subject": "宋浩",
      "predicate": "领奖",
      "object": "最佳导演奖",
      "confidence": 0.95
    },
    {
      "subject": "章子怡",
      "predicate": "亮相于",
      "object": "开幕式红毯仪式",
      "confidence": 0.95
    },
    {
      "subject": "汤唯",
      "predicate": "亮相于",
      "object": "开幕式红毯仪式",
      "confidence": 0.95
    },
    {
      "subject": "中国电影推介会",
      "predicate": "举办于",
      "object": "电影节期间",
      "confidence": 0.95
    },
    {
      "subject": "中国电影推介会",
      "predicate": "进行",
      "object": "华语新片全球首映",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:07:57.140 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 18:07:57.140 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 13 个三元组，包括实体和关系保存
2025-06-24 18:07:57.142 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:07:57.147 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 18:07:57.151 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 第76届戛纳国际电影节 (通过三元组提取)
2025-06-24 18:07:57.152 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:07:57.155 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 18:07:57.157 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 法国戛纳 (通过三元组提取)
2025-06-24 18:07:57.157 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 第76届戛纳国际电影节 --[举行于]--> 法国戛纳
2025-06-24 18:07:57.158 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:07:57.160 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 第76届戛纳国际电影节 已存在，跳过插入
2025-06-24 18:07:57.161 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:07:57.164 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 18:07:57.168 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 2023年5月 (通过三元组提取)
2025-06-24 18:07:57.168 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 第76届戛纳国际电影节 --[举行时间]--> 2023年5月
2025-06-24 18:07:57.169 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:07:57.172 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 第76届戛纳国际电影节 已存在，跳过插入
2025-06-24 18:07:57.172 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 第76届戛纳国际电影节 --[持续时间]--> 12天
2025-06-24 18:07:57.174 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:07:57.180 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 18:07:57.184 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 过往人生 (通过三元组提取)
2025-06-24 18:07:57.186 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:07:57.192 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 宋浩 已存在，跳过插入
2025-06-24 18:07:57.193 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:07:57.196 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:07:57.199 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:07:57.201 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 过往人生 -> 宋浩 [导演]
2025-06-24 18:07:57.201 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 过往人生 --[导演]--> 宋浩
2025-06-24 18:07:57.204 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:07:57.207 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 18:07:57.210 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 过往人生 (通过三元组提取)
2025-06-24 18:07:57.211 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:07:57.215 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 18:07:57.220 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 戛纳电影节主竞赛单元 (通过三元组提取)
2025-06-24 18:07:57.220 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 过往人生 --[展映于]--> 戛纳电影节主竞赛单元
2025-06-24 18:07:57.222 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:07:57.227 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 18:07:57.230 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 戛纳电影节特别展映单元 (通过三元组提取)
2025-06-24 18:07:57.230 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 燃冬 --[放映于]--> 戛纳电影节特别展映单元
2025-06-24 18:07:57.231 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 燃冬 --[获得]--> 观众好评
2025-06-24 18:07:57.231 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 过往人生 --[获得]--> 最佳导演奖
2025-06-24 18:07:57.231 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 宋浩 --[领奖]--> 最佳导演奖
2025-06-24 18:07:57.232 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:07:57.234 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 18:07:57.235 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 开幕式红毯仪式 (通过三元组提取)
2025-06-24 18:07:57.235 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 章子怡 --[亮相于]--> 开幕式红毯仪式
2025-06-24 18:07:57.236 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:07:57.237 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 开幕式红毯仪式 已存在，跳过插入
2025-06-24 18:07:57.237 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 汤唯 --[亮相于]--> 开幕式红毯仪式
2025-06-24 18:07:57.238 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:07:57.240 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 18:07:57.242 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 电影节期间 (通过三元组提取)
2025-06-24 18:07:57.242 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 中国电影推介会 --[举办于]--> 电影节期间
2025-06-24 18:07:57.242 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:07:57.244 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 18:07:57.245 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 华语新片全球首映 (通过三元组提取)
2025-06-24 18:07:57.246 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 中国电影推介会 --[进行]--> 华语新片全球首映
2025-06-24 18:07:57.246 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 18:07:57.250 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 27193ms
2025-06-24 18:15:44.568 [SpringApplicationShutdownHook] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-24 18:15:44.569 [SpringApplicationShutdownHook] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@167ccc3c] for TypeConfiguration
2025-06-24 18:15:44.570 [SpringApplicationShutdownHook] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@543f6f0d] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@167ccc3c]
2025-06-24 18:15:44.572 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-24 18:15:44.583 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-24 18:15:51.096 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 29307 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-24 18:15:51.099 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-24 18:15:52.008 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 18:15:52.010 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-24 18:15:52.109 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 96 ms. Found 7 JPA repository interfaces.
2025-06-24 18:15:52.129 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 18:15:52.130 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-24 18:15:52.142 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityCelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 18:15:52.142 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityEventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 18:15:52.142 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 18:15:52.142 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 18:15:52.142 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 18:15:52.143 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 18:15:52.143 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 18:15:52.143 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 0 Redis repository interfaces.
2025-06-24 18:15:55.647 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1e23ee0e
2025-06-24 18:15:55.649 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1e23ee0e
2025-06-24 18:15:55.649 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@1e23ee0e
2025-06-24 18:15:55.649 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@5bccaedb
2025-06-24 18:15:55.649 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@5bccaedb
2025-06-24 18:15:55.650 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@67784537
2025-06-24 18:15:55.651 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@67784537
2025-06-24 18:15:55.652 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@17ec5e2a
2025-06-24 18:15:55.652 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@17ec5e2a
2025-06-24 18:15:55.652 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@52290e63
2025-06-24 18:15:55.652 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@52290e63
2025-06-24 18:15:55.652 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@52290e63
2025-06-24 18:15:55.652 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@6c2dd88b
2025-06-24 18:15:55.653 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@6c2dd88b
2025-06-24 18:15:55.653 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@6c2dd88b
2025-06-24 18:15:55.654 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@49d979c4
2025-06-24 18:15:55.654 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@49d979c4
2025-06-24 18:15:55.654 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@249a45fd
2025-06-24 18:15:55.654 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@268f0ff3
2025-06-24 18:15:55.654 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@268f0ff3
2025-06-24 18:15:55.655 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@11978f52
2025-06-24 18:15:55.655 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@3e0855b0
2025-06-24 18:15:55.655 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@484b5a21
2025-06-24 18:15:55.655 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@484b5a21
2025-06-24 18:15:55.655 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@484b5a21
2025-06-24 18:15:55.655 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@16e5344c
2025-06-24 18:15:55.655 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@16e5344c
2025-06-24 18:15:55.655 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@16e5344c
2025-06-24 18:15:55.655 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@3ba5c4dd
2025-06-24 18:15:55.655 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@3ba5c4dd
2025-06-24 18:15:55.655 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@3ba5c4dd
2025-06-24 18:15:55.655 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@47fca3cc
2025-06-24 18:15:55.655 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@47fca3cc
2025-06-24 18:15:55.656 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@47fca3cc
2025-06-24 18:15:55.656 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@55746340
2025-06-24 18:15:55.656 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@55746340
2025-06-24 18:15:55.656 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@55746340
2025-06-24 18:15:55.656 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@6a0c7af6
2025-06-24 18:15:55.656 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@6a0c7af6
2025-06-24 18:15:55.657 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@7f1ad846
2025-06-24 18:15:55.657 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@7f1ad846
2025-06-24 18:15:55.658 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-24 18:15:55.659 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-24 18:15:55.659 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-24 18:15:55.659 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-24 18:15:55.659 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-24 18:15:55.659 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-24 18:15:55.659 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-24 18:15:55.659 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-24 18:15:55.659 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-24 18:15:55.659 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-24 18:15:55.659 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-24 18:15:55.659 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-24 18:15:55.660 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-24 18:15:55.660 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-24 18:15:55.660 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-24 18:15:55.660 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-24 18:15:55.661 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-24 18:15:55.661 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-24 18:15:55.661 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@5e7e7a7e
2025-06-24 18:15:55.661 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-24 18:15:55.661 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-24 18:15:55.661 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-24 18:15:55.661 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@5abc5854
2025-06-24 18:15:55.661 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-24 18:15:55.661 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-24 18:15:55.661 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-24 18:15:55.661 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-24 18:15:55.662 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-24 18:15:55.663 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-24 18:15:55.663 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-24 18:15:55.663 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-24 18:15:55.664 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-24 18:15:55.664 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-24 18:15:55.664 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-24 18:15:55.664 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-24 18:15:55.664 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-24 18:15:55.665 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-24 18:15:55.665 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-24 18:15:55.665 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-24 18:15:55.666 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-24 18:15:55.666 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@586486c
2025-06-24 18:15:55.667 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@586486c
2025-06-24 18:15:55.667 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-24 18:15:55.668 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@7fbbdd8a
2025-06-24 18:15:55.668 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-24 18:15:55.668 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-24 18:15:55.668 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-24 18:15:55.668 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-24 18:15:55.668 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-24 18:15:55.668 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-24 18:15:55.668 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-24 18:15:55.668 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-24 18:15:55.668 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-24 18:15:55.669 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-24 18:15:55.670 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-24 18:15:55.670 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-24 18:15:55.670 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-24 18:15:55.670 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-24 18:15:55.670 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-24 18:15:55.670 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-24 18:15:55.670 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-24 18:15:55.670 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-24 18:15:55.670 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-24 18:15:55.670 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-24 18:15:55.670 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-24 18:15:55.670 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-24 18:15:55.671 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-24 18:15:55.672 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-24 18:15:55.673 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-24 18:15:55.673 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-24 18:15:55.673 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-24 18:15:55.673 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-24 18:15:55.673 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-24 18:15:55.673 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-24 18:15:55.673 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@12200670
2025-06-24 18:15:55.674 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@12200670
2025-06-24 18:15:55.676 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-24 18:15:55.676 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-24 18:15:55.676 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-24 18:15:55.679 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@498b611e
2025-06-24 18:15:55.679 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@498b611e
2025-06-24 18:15:55.680 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@5e9ea380
2025-06-24 18:15:55.681 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@1e50eb3f
2025-06-24 18:15:55.682 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@12e3f4ae
2025-06-24 18:15:55.682 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@537451d5
2025-06-24 18:15:55.682 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@785d6a98
2025-06-24 18:15:55.682 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@614d7fbf
2025-06-24 18:15:55.682 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@6c06b1bc
2025-06-24 18:15:55.682 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@1d8dbf10
2025-06-24 18:15:55.682 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@e171f93
2025-06-24 18:15:55.769 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-24 18:15:55.784 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-24 18:15:55.888 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@becb93a
2025-06-24 18:15:55.889 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-24 18:15:55.923 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-24 18:15:55.924 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-24 18:15:55.942 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4ac0d49) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7c6ab057)
2025-06-24 18:15:55.942 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7ce4498f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1f7557fe)
2025-06-24 18:15:55.943 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7bd7d71c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@52963839)
2025-06-24 18:15:55.943 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@ce0bbd5) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@399fd710)
2025-06-24 18:15:55.943 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7c359808) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1f013047)
2025-06-24 18:15:55.943 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@16361e61) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@51566ce0)
2025-06-24 18:15:55.943 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1734b1a) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@17e6d07b)
2025-06-24 18:15:55.943 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@318511f0) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@53564a4c)
2025-06-24 18:15:55.944 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4866e0a7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@69a294d8)
2025-06-24 18:15:55.944 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-24 18:15:55.944 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-24 18:15:55.944 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-24 18:15:55.945 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 18:15:55.945 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 18:15:55.947 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@71cc0e35
2025-06-24 18:15:55.948 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@5e9ea380`
2025-06-24 18:15:55.950 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-24 18:15:55.950 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-24 18:15:55.951 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 18:15:55.951 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 18:15:55.952 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 18:15:55.952 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 18:15:55.952 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 18:15:55.952 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 18:15:55.953 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 18:15:55.953 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 18:15:55.953 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 18:15:55.954 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@221961af] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@32ddcca]
2025-06-24 18:15:56.624 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@221961af] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@186fc6e]
2025-06-24 18:15:56.630 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@186fc6e] for TypeConfiguration
2025-06-24 18:15:56.630 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-24 18:15:57.276 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-24 18:15:57.709 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-24 18:15:57.872 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-24 18:15:57.914 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 2
2025-06-24 18:15:57.915 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-24 18:15:57.918 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-24 18:15:57.919 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-24 18:15:58.345 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-24 18:15:58.360 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 7.844 seconds (process running for 8.413)
2025-06-24 18:15:59.134 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 36
2025-06-24 18:15:59.142 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 36, 参数: triples
2025-06-24 18:15:59.149 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 36，当前并发数: 1
2025-06-24 18:15:59.149 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 18:16:09.120 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 9969ms，响应长度: 356
2025-06-24 18:16:09.126 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 36
2025-06-24 18:16:09.146 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 356
2025-06-24 18:16:09.146 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "巩俐",
      "predicate": "主演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "演唱",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:16:09.147 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "巩俐",
      "predicate": "主演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "演唱",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:16:09.151 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 18:16:09.151 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-24 18:16:09.228 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:16:09.265 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 18:16:09.275 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 张艺谋 (通过三元组提取)
2025-06-24 18:16:09.278 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:16:09.280 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 18:16:09.283 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 《红高粱》 (通过三元组提取)
2025-06-24 18:16:09.290 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:16:09.308 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:16:09.317 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:16:09.322 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 《红高粱》 [导演]
2025-06-24 18:16:09.323 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《红高粱》
2025-06-24 18:16:09.327 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:16:09.334 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 18:16:09.345 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 巩俐 (通过三元组提取)
2025-06-24 18:16:09.349 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:16:09.360 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-24 18:16:09.362 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:16:09.368 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:16:09.372 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:16:09.375 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 巩俐 -> 《红高粱》 [主演]
2025-06-24 18:16:09.375 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 巩俐 --[主演]--> 《红高粱》
2025-06-24 18:16:09.377 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:16:09.383 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 18:16:09.385 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 周杰伦 (通过三元组提取)
2025-06-24 18:16:09.390 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 18:16:09.397 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 18:16:09.400 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《青花瓷》 (通过三元组提取)
2025-06-24 18:16:09.403 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:16:09.410 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-24 18:16:09.413 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:16:09.417 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 周杰伦 -> 《青花瓷》 [演唱]
2025-06-24 18:16:09.417 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[演唱]--> 《青花瓷》
2025-06-24 18:16:09.417 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 18:16:09.434 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 10301ms
2025-06-24 18:16:10.558 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 43
2025-06-24 18:16:10.559 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 43, 参数: triples
2025-06-24 18:16:10.560 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 43，当前并发数: 1
2025-06-24 18:16:10.560 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 18:16:18.135 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 7574ms，响应长度: 264
2025-06-24 18:16:18.137 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 43
2025-06-24 18:16:18.141 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 264
2025-06-24 18:16:18.141 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "第41届柏林国际电影节",
      "predicate": "举行时间",
      "object": "1991年",
      "confidence": 0.95
    },
    {
      "subject": "2008年北京奥运会开幕式",
      "predicate": "举办地点",
      "object": "鸟巢",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:16:18.142 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "第41届柏林国际电影节",
      "predicate": "举行时间",
      "object": "1991年",
      "confidence": 0.95
    },
    {
      "subject": "2008年北京奥运会开幕式",
      "predicate": "举办地点",
      "object": "鸟巢",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:16:18.144 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 18:16:18.146 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组，包括实体和关系保存
2025-06-24 18:16:18.150 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:16:18.156 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 18:16:18.158 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 第41届柏林国际电影节 (通过三元组提取)
2025-06-24 18:16:18.159 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:16:18.162 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 18:16:18.164 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 1991年 (通过三元组提取)
2025-06-24 18:16:18.164 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 第41届柏林国际电影节 --[举行时间]--> 1991年
2025-06-24 18:16:18.165 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:16:18.166 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 18:16:18.168 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 2008年北京奥运会开幕式 (通过三元组提取)
2025-06-24 18:16:18.169 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 2008年北京奥运会开幕式 --[举办地点]--> 鸟巢
2025-06-24 18:16:18.169 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 18:16:18.173 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 7615ms
2025-06-24 18:16:19.188 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 37
2025-06-24 18:16:19.188 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 37, 参数: triples
2025-06-24 18:16:19.189 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 37，当前并发数: 1
2025-06-24 18:16:19.189 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 18:16:28.547 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 9358ms，响应长度: 371
2025-06-24 18:16:28.548 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 37
2025-06-24 18:16:28.554 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 371
2025-06-24 18:16:28.554 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "参加",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "获奖",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "担任",
      "object": "北京奥运会开幕式总导演",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:16:28.556 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "参加",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "获奖",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "担任",
      "object": "北京奥运会开幕式总导演",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:16:28.560 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 18:16:28.560 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-24 18:16:28.562 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:16:28.565 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 18:16:28.566 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:16:28.569 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 18:16:28.571 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 柏林电影节颁奖典礼 (通过三元组提取)
2025-06-24 18:16:28.573 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:16:28.584 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 18:16:28.602 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:16:28.605 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 张艺谋 -> 柏林电影节颁奖典礼 [参加]
2025-06-24 18:16:28.606 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[参加]--> 柏林电影节颁奖典礼
2025-06-24 18:16:28.607 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:16:28.609 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 18:16:28.610 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:16:28.611 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 柏林电影节颁奖典礼 已存在，跳过插入
2025-06-24 18:16:28.614 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:16:28.619 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 18:16:28.620 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:16:28.622 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 张艺谋 -> 柏林电影节颁奖典礼 [获奖]
2025-06-24 18:16:28.623 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[获奖]--> 柏林电影节颁奖典礼
2025-06-24 18:16:28.625 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:16:28.627 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 18:16:28.628 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:16:28.629 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 18:16:28.631 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 北京奥运会开幕式总导演 (通过三元组提取)
2025-06-24 18:16:28.634 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:16:28.638 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 18:16:28.641 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:16:28.642 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 张艺谋 -> 北京奥运会开幕式总导演 [担任]
2025-06-24 18:16:28.642 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[担任]--> 北京奥运会开幕式总导演
2025-06-24 18:16:28.642 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 18:16:28.647 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 9459ms
2025-06-24 18:16:29.670 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 39
2025-06-24 18:16:29.671 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 39, 参数: triples
2025-06-24 18:16:29.673 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 39，当前并发数: 1
2025-06-24 18:16:29.673 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 18:16:38.921 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 9248ms，响应长度: 356
2025-06-24 18:16:38.922 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 39
2025-06-24 18:16:38.926 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 356
2025-06-24 18:16:38.927 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "红高粱",
      "predicate": "获奖",
      "object": "金熊奖",
      "confidence": 0.95
    },
    {
      "subject": "红高粱",
      "predicate": "展映",
      "object": "柏林电影节",
      "confidence": 0.95
    },
    {
      "subject": "青花瓷",
      "predicate": "演出",
      "object": "奥运会开幕式",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:16:38.927 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "红高粱",
      "predicate": "获奖",
      "object": "金熊奖",
      "confidence": 0.95
    },
    {
      "subject": "红高粱",
      "predicate": "展映",
      "object": "柏林电影节",
      "confidence": 0.95
    },
    {
      "subject": "青花瓷",
      "predicate": "演出",
      "object": "奥运会开幕式",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:16:38.928 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 18:16:38.929 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-24 18:16:38.929 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 红高粱 --[获奖]--> 金熊奖
2025-06-24 18:16:38.932 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:16:38.935 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 18:16:38.938 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 红高粱 (通过三元组提取)
2025-06-24 18:16:38.940 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:16:38.944 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 18:16:38.946 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 柏林电影节 (通过三元组提取)
2025-06-24 18:16:38.947 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 红高粱 --[展映]--> 柏林电影节
2025-06-24 18:16:38.947 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:16:38.949 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 18:16:38.953 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 奥运会开幕式 (通过三元组提取)
2025-06-24 18:16:38.953 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 青花瓷 --[演出]--> 奥运会开幕式
2025-06-24 18:16:38.954 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 18:16:38.962 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 9292ms
2025-06-24 18:16:40.012 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 43
2025-06-24 18:16:40.013 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 43, 参数: triples
2025-06-24 18:16:40.014 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 43，当前并发数: 1
2025-06-24 18:16:40.014 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 18:16:50.557 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 10543ms，响应长度: 469
2025-06-24 18:16:50.557 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 43
2025-06-24 18:16:50.562 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 469
2025-06-24 18:16:50.562 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "主演",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映于",
      "object": "香港电影节",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "参加",
      "object": "电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "终身成就奖",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:16:50.562 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "主演",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映于",
      "object": "香港电影节",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "参加",
      "object": "电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "终身成就奖",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:16:50.566 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 18:16:50.566 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-24 18:16:50.568 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:16:50.573 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 18:16:50.577 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 成龙 (通过三元组提取)
2025-06-24 18:16:50.579 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:16:50.582 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 18:16:50.585 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 《醉拳》 (通过三元组提取)
2025-06-24 18:16:50.588 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:16:50.595 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:16:50.600 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:16:50.603 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 成龙 -> 《醉拳》 [主演]
2025-06-24 18:16:50.603 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[主演]--> 《醉拳》
2025-06-24 18:16:50.605 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 18:16:50.610 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 18:16:50.613 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《醉拳》 (通过三元组提取)
2025-06-24 18:16:50.614 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:16:50.616 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 18:16:50.619 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 香港电影节 (通过三元组提取)
2025-06-24 18:16:50.621 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 18:16:50.625 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-24 18:16:50.629 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:16:50.632 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 香港电影节 -> 《醉拳》 [在_首映于]
2025-06-24 18:16:50.632 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《醉拳》 --[首映于]--> 香港电影节
2025-06-24 18:16:50.636 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:16:50.638 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-24 18:16:50.640 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:16:50.643 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 18:16:50.645 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 电影节颁奖典礼 (通过三元组提取)
2025-06-24 18:16:50.649 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:16:50.654 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 18:16:50.657 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:16:50.659 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 成龙 -> 电影节颁奖典礼 [参加]
2025-06-24 18:16:50.659 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[参加]--> 电影节颁奖典礼
2025-06-24 18:16:50.660 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:16:50.662 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-24 18:16:50.663 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:16:50.666 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 18:16:50.667 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 终身成就奖 (通过三元组提取)
2025-06-24 18:16:50.671 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:16:50.677 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:16:50.679 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:16:50.681 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 成龙 -> 终身成就奖 [获得]
2025-06-24 18:16:50.681 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[获得]--> 终身成就奖
2025-06-24 18:16:50.681 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 18:16:50.685 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 10673ms
2025-06-24 18:23:59.452 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 32317 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-24 18:23:59.454 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-24 18:24:00.391 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 18:24:00.392 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-24 18:24:00.501 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 105 ms. Found 7 JPA repository interfaces.
2025-06-24 18:24:00.522 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 18:24:00.523 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-24 18:24:00.535 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityCelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 18:24:00.535 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityEventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 18:24:00.535 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 18:24:00.535 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 18:24:00.535 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 18:24:00.536 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 18:24:00.537 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 18:24:00.537 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 0 Redis repository interfaces.
2025-06-24 18:24:01.988 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@62cf86d6
2025-06-24 18:24:01.991 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@62cf86d6
2025-06-24 18:24:01.991 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@62cf86d6
2025-06-24 18:24:01.991 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@6071631f
2025-06-24 18:24:01.991 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@6071631f
2025-06-24 18:24:01.992 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@2ca132ad
2025-06-24 18:24:01.992 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@2ca132ad
2025-06-24 18:24:01.992 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@6706da3d
2025-06-24 18:24:01.993 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@6706da3d
2025-06-24 18:24:01.993 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@7438c3d5
2025-06-24 18:24:01.993 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@7438c3d5
2025-06-24 18:24:01.993 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@7438c3d5
2025-06-24 18:24:01.993 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@1fba3fd6
2025-06-24 18:24:01.994 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@1fba3fd6
2025-06-24 18:24:01.994 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@1fba3fd6
2025-06-24 18:24:01.995 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@3aab42d6
2025-06-24 18:24:01.995 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@3aab42d6
2025-06-24 18:24:01.995 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@17332039
2025-06-24 18:24:01.995 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@776e7dfb
2025-06-24 18:24:01.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@776e7dfb
2025-06-24 18:24:01.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@71418a4a
2025-06-24 18:24:01.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@67ecf7ed
2025-06-24 18:24:01.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@69d021c1
2025-06-24 18:24:01.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@69d021c1
2025-06-24 18:24:01.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@69d021c1
2025-06-24 18:24:01.997 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@6d5508a5
2025-06-24 18:24:01.997 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@6d5508a5
2025-06-24 18:24:01.997 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@6d5508a5
2025-06-24 18:24:01.997 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@103bcc9f
2025-06-24 18:24:01.997 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@103bcc9f
2025-06-24 18:24:01.997 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@103bcc9f
2025-06-24 18:24:01.997 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@106802ea
2025-06-24 18:24:01.998 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@106802ea
2025-06-24 18:24:01.998 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@106802ea
2025-06-24 18:24:01.998 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@785ef70f
2025-06-24 18:24:01.998 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@785ef70f
2025-06-24 18:24:01.998 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@785ef70f
2025-06-24 18:24:01.999 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@3d8bd881
2025-06-24 18:24:02.000 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@3d8bd881
2025-06-24 18:24:02.000 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@731ab49b
2025-06-24 18:24:02.000 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@731ab49b
2025-06-24 18:24:02.000 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@23358740
2025-06-24 18:24:02.000 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@23358740
2025-06-24 18:24:02.000 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@23358740
2025-06-24 18:24:02.000 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@2cdcfaa6
2025-06-24 18:24:02.000 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@4ff0706c
2025-06-24 18:24:02.000 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@4ff0706c
2025-06-24 18:24:02.000 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@6968bb65
2025-06-24 18:24:02.001 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@66682e8f
2025-06-24 18:24:02.001 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@66682e8f
2025-06-24 18:24:02.001 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@66682e8f
2025-06-24 18:24:02.001 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@2d2af12e
2025-06-24 18:24:02.002 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@611587f7
2025-06-24 18:24:02.002 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@4d0abb23
2025-06-24 18:24:02.002 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@6ab1f85b
2025-06-24 18:24:02.002 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@6ab1f85b
2025-06-24 18:24:02.002 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@10e8c7a2
2025-06-24 18:24:02.002 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@10e8c7a2
2025-06-24 18:24:02.002 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@5d8fd077
2025-06-24 18:24:02.002 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@4544ab46
2025-06-24 18:24:02.002 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@2052f095
2025-06-24 18:24:02.002 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@76d1f6ea
2025-06-24 18:24:02.002 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@55fe9c2f
2025-06-24 18:24:02.002 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@3580134d
2025-06-24 18:24:02.002 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@2e19b30
2025-06-24 18:24:02.003 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@2e19b30
2025-06-24 18:24:02.003 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@7b7e4b20
2025-06-24 18:24:02.003 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@7b7e4b20
2025-06-24 18:24:02.003 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@5ac0bf84
2025-06-24 18:24:02.003 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@5ac0bf84
2025-06-24 18:24:02.004 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@6fefc5ea
2025-06-24 18:24:02.005 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@6fefc5ea
2025-06-24 18:24:02.005 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@6159fb3c
2025-06-24 18:24:02.005 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@6159fb3c
2025-06-24 18:24:02.005 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@68f79b7c
2025-06-24 18:24:02.006 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@37142579
2025-06-24 18:24:02.006 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@264576e4
2025-06-24 18:24:02.006 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@264576e4
2025-06-24 18:24:02.006 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@86bf90b
2025-06-24 18:24:02.006 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@5c13af01
2025-06-24 18:24:02.006 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@4aba7617
2025-06-24 18:24:02.006 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@47c5cbf2
2025-06-24 18:24:02.006 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@47c5cbf2
2025-06-24 18:24:02.007 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@1031c1a0
2025-06-24 18:24:02.007 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@519b0f00
2025-06-24 18:24:02.008 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@4888d1ea
2025-06-24 18:24:02.008 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@4888d1ea
2025-06-24 18:24:02.008 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@217b0952
2025-06-24 18:24:02.008 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@217b0952
2025-06-24 18:24:02.008 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@3fd9e01c
2025-06-24 18:24:02.008 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@3fd9e01c
2025-06-24 18:24:02.008 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@3fd9e01c
2025-06-24 18:24:02.008 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@36330be8
2025-06-24 18:24:02.008 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@36330be8
2025-06-24 18:24:02.008 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@36330be8
2025-06-24 18:24:02.008 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@38ba8b45
2025-06-24 18:24:02.008 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@41f23499
2025-06-24 18:24:02.009 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@31dbf5bb
2025-06-24 18:24:02.009 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@31dbf5bb
2025-06-24 18:24:02.009 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@1f19d423
2025-06-24 18:24:02.009 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@1f19d423
2025-06-24 18:24:02.009 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@1f19d423
2025-06-24 18:24:02.009 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@73958426
2025-06-24 18:24:02.009 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@23933031
2025-06-24 18:24:02.009 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@4d0b7fd5
2025-06-24 18:24:02.009 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@4d0b7fd5
2025-06-24 18:24:02.010 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@1ce2029b
2025-06-24 18:24:02.010 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@1ce2029b
2025-06-24 18:24:02.011 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@1ce2029b
2025-06-24 18:24:02.011 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@43090195
2025-06-24 18:24:02.011 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@43090195
2025-06-24 18:24:02.011 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@7921a37d
2025-06-24 18:24:02.011 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@7921a37d
2025-06-24 18:24:02.011 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@6fc28e5b
2025-06-24 18:24:02.013 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@6fc28e5b
2025-06-24 18:24:02.015 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@6338afe2
2025-06-24 18:24:02.016 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@6338afe2
2025-06-24 18:24:02.017 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@68360fb9
2025-06-24 18:24:02.017 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@68360fb9
2025-06-24 18:24:02.017 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@1c787389
2025-06-24 18:24:02.021 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@6bf54260
2025-06-24 18:24:02.022 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@6bf54260
2025-06-24 18:24:02.022 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@674e4c82
2025-06-24 18:24:02.023 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@572b4072
2025-06-24 18:24:02.024 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@322ab6ce
2025-06-24 18:24:02.025 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@5b74902c
2025-06-24 18:24:02.025 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@4e4bfd9c
2025-06-24 18:24:02.025 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@43ee1cf7
2025-06-24 18:24:02.025 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@24954e82
2025-06-24 18:24:02.025 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@5b1f5fcc
2025-06-24 18:24:02.025 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@4a29fe2e
2025-06-24 18:24:02.121 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-24 18:24:02.135 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-24 18:24:02.245 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@2c3b0cc8
2025-06-24 18:24:02.247 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-24 18:24:02.280 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-24 18:24:02.282 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-24 18:24:02.300 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@38363e96) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@35c95869)
2025-06-24 18:24:02.300 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@558aa1f1) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@361d8567)
2025-06-24 18:24:02.300 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3fd6dfbc) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4023d23f)
2025-06-24 18:24:02.301 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@402676e3) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1a4ae53d)
2025-06-24 18:24:02.301 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1368e2f7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4d84688f)
2025-06-24 18:24:02.301 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3ee68eb2) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7348e75e)
2025-06-24 18:24:02.302 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@27e3dc9a) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@49cd08f9)
2025-06-24 18:24:02.302 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@43549c6c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7792e14f)
2025-06-24 18:24:02.302 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4eace42b) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6f87a7c7)
2025-06-24 18:24:02.303 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-24 18:24:02.303 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-24 18:24:02.303 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-24 18:24:02.304 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 18:24:02.304 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 18:24:02.305 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@18a38bba
2025-06-24 18:24:02.305 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@674e4c82`
2025-06-24 18:24:02.307 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-24 18:24:02.307 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-24 18:24:02.310 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 18:24:02.310 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 18:24:02.310 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 18:24:02.310 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 18:24:02.310 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 18:24:02.310 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 18:24:02.310 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 18:24:02.310 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 18:24:02.311 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 18:24:02.311 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@f310675] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@424ec990]
2025-06-24 18:24:02.912 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@f310675] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@60be9fdf]
2025-06-24 18:24:02.915 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@60be9fdf] for TypeConfiguration
2025-06-24 18:24:02.915 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-24 18:24:03.756 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-24 18:24:04.219 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-24 18:24:04.386 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-24 18:24:04.429 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 2
2025-06-24 18:24:04.430 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-24 18:24:04.433 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-24 18:24:04.433 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-24 18:24:04.975 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-24 18:24:04.993 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 6.175 seconds (process running for 7.225)
2025-06-24 18:24:33.353 [reactor-http-nio-9] INFO  io.modelcontextprotocol.server.McpAsyncServer - Client initialize request - Protocol: 2025-03-26, Capabilities: ClientCapabilities[experimental=null, roots=RootCapabilities[listChanged=false], sampling=null], Info: Implementation[name=cursor-vscode, version=1.0.0]
2025-06-24 18:24:33.352 [reactor-http-nio-8] INFO  io.modelcontextprotocol.server.McpAsyncServer - Client initialize request - Protocol: 2025-03-26, Capabilities: ClientCapabilities[experimental=null, roots=RootCapabilities[listChanged=false], sampling=null], Info: Implementation[name=cursor-vscode, version=1.0.0]
2025-06-24 18:24:33.374 [reactor-http-nio-9] WARN  io.modelcontextprotocol.server.McpAsyncServer - Client requested unsupported protocol version: 2025-03-26, so the server will suggest the 2024-11-05 version instead
2025-06-24 18:24:33.374 [reactor-http-nio-8] WARN  io.modelcontextprotocol.server.McpAsyncServer - Client requested unsupported protocol version: 2025-03-26, so the server will suggest the 2024-11-05 version instead
2025-06-24 18:25:14.446 [reactor-http-nio-8] INFO  io.modelcontextprotocol.server.McpAsyncServer - Client initialize request - Protocol: 2025-03-26, Capabilities: ClientCapabilities[experimental=null, roots=RootCapabilities[listChanged=false], sampling=null], Info: Implementation[name=cursor-vscode, version=1.0.0]
2025-06-24 18:25:14.449 [reactor-http-nio-8] WARN  io.modelcontextprotocol.server.McpAsyncServer - Client requested unsupported protocol version: 2025-03-26, so the server will suggest the 2024-11-05 version instead
2025-06-24 18:25:31.843 [reactor-http-nio-2] INFO  io.modelcontextprotocol.server.McpAsyncServer - Client initialize request - Protocol: 2025-03-26, Capabilities: ClientCapabilities[experimental=null, roots=RootCapabilities[listChanged=false], sampling=null], Info: Implementation[name=cursor-vscode, version=1.0.0]
2025-06-24 18:25:31.843 [reactor-http-nio-2] WARN  io.modelcontextprotocol.server.McpAsyncServer - Client requested unsupported protocol version: 2025-03-26, so the server will suggest the 2024-11-05 version instead
2025-06-24 18:37:31.849 [SpringApplicationShutdownHook] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-24 18:37:31.850 [SpringApplicationShutdownHook] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@60be9fdf] for TypeConfiguration
2025-06-24 18:37:31.850 [SpringApplicationShutdownHook] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@eb56c6c] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@60be9fdf]
2025-06-24 18:37:31.852 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-24 18:37:31.860 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-24 18:41:27.530 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 33310 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-24 18:41:27.533 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-24 18:41:28.533 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 18:41:28.534 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-24 18:41:28.643 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 105 ms. Found 7 JPA repository interfaces.
2025-06-24 18:41:28.665 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 18:41:28.667 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-24 18:41:28.683 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityCelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 18:41:28.684 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityEventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 18:41:28.684 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 18:41:28.684 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 18:41:28.684 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 18:41:28.684 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 18:41:28.684 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 18:41:28.684 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 12 ms. Found 0 Redis repository interfaces.
2025-06-24 18:41:32.433 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@484b5a21
2025-06-24 18:41:32.436 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@484b5a21
2025-06-24 18:41:32.436 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@484b5a21
2025-06-24 18:41:32.436 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-24 18:41:32.436 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-24 18:41:32.436 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-24 18:41:32.436 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-24 18:41:32.437 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-24 18:41:32.438 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-24 18:41:32.438 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-24 18:41:32.438 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-24 18:41:32.439 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-24 18:41:32.439 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-24 18:41:32.439 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-24 18:41:32.440 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-24 18:41:32.440 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-24 18:41:32.441 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-24 18:41:32.441 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@5e7e7a7e
2025-06-24 18:41:32.441 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-24 18:41:32.441 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-24 18:41:32.441 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-24 18:41:32.441 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-24 18:41:32.441 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@5abc5854
2025-06-24 18:41:32.441 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@5abc5854
2025-06-24 18:41:32.441 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@5abc5854
2025-06-24 18:41:32.441 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-24 18:41:32.442 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-24 18:41:32.442 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-24 18:41:32.442 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-24 18:41:32.442 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-24 18:41:32.442 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-24 18:41:32.442 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-24 18:41:32.442 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-24 18:41:32.442 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-24 18:41:32.443 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-24 18:41:32.443 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-24 18:41:32.443 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-24 18:41:32.443 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-24 18:41:32.443 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-24 18:41:32.443 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-24 18:41:32.443 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-24 18:41:32.443 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-24 18:41:32.443 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-24 18:41:32.443 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-24 18:41:32.443 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-24 18:41:32.444 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-24 18:41:32.445 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-24 18:41:32.445 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-24 18:41:32.445 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-24 18:41:32.445 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-24 18:41:32.445 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-24 18:41:32.445 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@586486c
2025-06-24 18:41:32.445 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-24 18:41:32.446 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@7fbbdd8a
2025-06-24 18:41:32.446 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-24 18:41:32.446 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-24 18:41:32.446 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-24 18:41:32.446 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-24 18:41:32.446 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-24 18:41:32.446 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-24 18:41:32.446 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-24 18:41:32.446 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-24 18:41:32.446 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-24 18:41:32.447 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-24 18:41:32.447 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-24 18:41:32.447 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-24 18:41:32.447 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-24 18:41:32.447 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-24 18:41:32.447 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-24 18:41:32.447 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-24 18:41:32.447 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-24 18:41:32.447 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-24 18:41:32.447 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-24 18:41:32.447 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-24 18:41:32.447 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-24 18:41:32.447 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-24 18:41:32.448 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@12200670
2025-06-24 18:41:32.450 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@12200670
2025-06-24 18:41:32.451 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-24 18:41:32.451 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-24 18:41:32.452 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-24 18:41:32.452 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-24 18:41:32.452 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-24 18:41:32.452 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-24 18:41:32.452 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-24 18:41:32.452 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@2a259f6f
2025-06-24 18:41:32.452 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@2a259f6f
2025-06-24 18:41:32.453 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@7ccf6114
2025-06-24 18:41:32.453 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@7ccf6114
2025-06-24 18:41:32.453 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@3df3410a
2025-06-24 18:41:32.453 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@3df3410a
2025-06-24 18:41:32.453 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@3df3410a
2025-06-24 18:41:32.453 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-24 18:41:32.454 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-24 18:41:32.454 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-24 18:41:32.454 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@61d42275
2025-06-24 18:41:32.454 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@6614289a
2025-06-24 18:41:32.454 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@4148ce43
2025-06-24 18:41:32.454 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@4148ce43
2025-06-24 18:41:32.454 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@46fb9581
2025-06-24 18:41:32.454 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@46fb9581
2025-06-24 18:41:32.454 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@46fb9581
2025-06-24 18:41:32.454 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@6fcc0a1
2025-06-24 18:41:32.454 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@416b681c
2025-06-24 18:41:32.455 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@46d69ca4
2025-06-24 18:41:32.455 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@46d69ca4
2025-06-24 18:41:32.456 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@5c9b5e62
2025-06-24 18:41:32.456 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@5c9b5e62
2025-06-24 18:41:32.456 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@5c9b5e62
2025-06-24 18:41:32.456 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@3c826498
2025-06-24 18:41:32.456 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@3c826498
2025-06-24 18:41:32.456 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@2633d09c
2025-06-24 18:41:32.456 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@2633d09c
2025-06-24 18:41:32.457 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@54f25b42
2025-06-24 18:41:32.458 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@54f25b42
2025-06-24 18:41:32.458 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@521c67f0
2025-06-24 18:41:32.459 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@521c67f0
2025-06-24 18:41:32.459 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@7d156f8f
2025-06-24 18:41:32.459 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@7d156f8f
2025-06-24 18:41:32.459 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@451af781
2025-06-24 18:41:32.461 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@2d7aa291
2025-06-24 18:41:32.461 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@2d7aa291
2025-06-24 18:41:32.462 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@279e1422
2025-06-24 18:41:32.463 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@af3295f
2025-06-24 18:41:32.463 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@27dc81be
2025-06-24 18:41:32.464 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@3595086b
2025-06-24 18:41:32.464 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@627d35ff
2025-06-24 18:41:32.464 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@7157413e
2025-06-24 18:41:32.464 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@3245efdb
2025-06-24 18:41:32.464 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@2f0e7fa8
2025-06-24 18:41:32.465 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@24d7657b
2025-06-24 18:41:32.553 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-24 18:41:32.567 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-24 18:41:32.670 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7c8689e
2025-06-24 18:41:32.671 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-24 18:41:32.702 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-24 18:41:32.702 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-24 18:41:32.717 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6b6c0b7c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5b1f0f26)
2025-06-24 18:41:32.717 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7120daa6) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6cbb6c41)
2025-06-24 18:41:32.717 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6787bd41) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@44c2e8a8)
2025-06-24 18:41:32.717 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3340ff7c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@42e4431)
2025-06-24 18:41:32.717 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5e198c40) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@dcdb883)
2025-06-24 18:41:32.717 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@39420d59) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4fbbd98c)
2025-06-24 18:41:32.717 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5dd227b7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3d3b852e)
2025-06-24 18:41:32.717 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@14ba7f15) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@55cb3b7)
2025-06-24 18:41:32.718 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@497fd334) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@280c3dc0)
2025-06-24 18:41:32.718 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-24 18:41:32.718 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-24 18:41:32.718 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-24 18:41:32.719 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 18:41:32.719 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 18:41:32.720 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@19f99aaf
2025-06-24 18:41:32.720 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@279e1422`
2025-06-24 18:41:32.722 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-24 18:41:32.722 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-24 18:41:32.724 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 18:41:32.724 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 18:41:32.724 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 18:41:32.724 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 18:41:32.724 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 18:41:32.724 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 18:41:32.724 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 18:41:32.724 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 18:41:32.725 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 18:41:32.725 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@4c0bfe9e] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@490fbeaa]
2025-06-24 18:41:33.352 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@4c0bfe9e] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@5a183fa6]
2025-06-24 18:41:33.357 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@5a183fa6] for TypeConfiguration
2025-06-24 18:41:33.358 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-24 18:41:33.992 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-24 18:41:34.417 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-24 18:41:34.559 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-24 18:41:34.591 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 2
2025-06-24 18:41:34.591 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-24 18:41:34.594 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-24 18:41:34.596 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-24 18:41:35.000 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-24 18:41:35.014 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 8.124 seconds (process running for 8.812)
2025-06-24 18:42:12.229 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 0
2025-06-24 18:42:12.240 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-24 18:42:12.266 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 0
2025-06-24 18:42:12.269 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-24 18:42:12.280 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 0
2025-06-24 18:42:12.282 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-24 18:42:12.288 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 34
2025-06-24 18:42:12.290 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 34, 参数: triples
2025-06-24 18:42:12.298 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 34，当前并发数: 1
2025-06-24 18:42:12.298 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 18:42:20.944 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 8645ms，响应长度: 351
2025-06-24 18:42:20.950 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 34
2025-06-24 18:42:20.970 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 351
2025-06-24 18:42:20.970 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "合作伙伴",
      "object": "巩俐",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "配偶",
      "object": "陈婷",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "好友",
      "object": "梁朝伟",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:42:20.971 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "合作伙伴",
      "object": "巩俐",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "配偶",
      "object": "陈婷",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "好友",
      "object": "梁朝伟",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:42:20.972 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 18:42:20.972 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-24 18:42:21.051 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:42:21.072 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 18:42:21.073 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:42:21.075 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 巩俐 已存在，跳过插入
2025-06-24 18:42:21.082 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:42:21.125 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:42:21.169 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:42:21.186 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 巩俐 [合作伙伴]
2025-06-24 18:42:21.187 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[合作伙伴]--> 巩俐
2025-06-24 18:42:21.191 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:42:21.196 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 18:42:21.197 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:42:21.203 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 18:42:21.208 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 陈婷 (通过三元组提取)
2025-06-24 18:42:21.210 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:42:21.214 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:42:21.217 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:42:21.220 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 陈婷 [配偶]
2025-06-24 18:42:21.220 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[配偶]--> 陈婷
2025-06-24 18:42:21.222 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:42:21.228 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 18:42:21.232 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 刘德华 (通过三元组提取)
2025-06-24 18:42:21.233 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:42:21.237 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 18:42:21.241 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 梁朝伟 (通过三元组提取)
2025-06-24 18:42:21.243 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:42:21.254 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:42:21.258 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:42:21.262 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 梁朝伟 [好友]
2025-06-24 18:42:21.263 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[好友]--> 梁朝伟
2025-06-24 18:42:21.264 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 18:42:21.272 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 8984ms
2025-06-24 18:42:22.315 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 36
2025-06-24 18:42:22.317 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 36, 参数: triples
2025-06-24 18:42:22.319 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 36，当前并发数: 1
2025-06-24 18:42:22.319 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 18:42:30.984 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 8665ms，响应长度: 356
2025-06-24 18:42:30.985 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 36
2025-06-24 18:42:30.990 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 356
2025-06-24 18:42:30.990 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "巩俐",
      "predicate": "主演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "演唱",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:42:30.990 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "巩俐",
      "predicate": "主演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "演唱",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:42:30.992 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 18:42:30.992 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-24 18:42:30.995 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:42:31.000 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 18:42:31.003 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:42:31.008 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-24 18:42:31.011 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:42:31.020 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:42:31.025 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:42:31.027 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 《红高粱》 [导演]
2025-06-24 18:42:31.028 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《红高粱》
2025-06-24 18:42:31.029 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:42:31.031 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 巩俐 已存在，跳过插入
2025-06-24 18:42:31.032 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:42:31.034 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-24 18:42:31.035 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:42:31.038 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:42:31.040 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:42:31.042 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 巩俐 -> 《红高粱》 [主演]
2025-06-24 18:42:31.042 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 巩俐 --[主演]--> 《红高粱》
2025-06-24 18:42:31.043 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:42:31.045 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-24 18:42:31.050 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 18:42:31.053 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-24 18:42:31.055 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:42:31.059 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-24 18:42:31.063 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:42:31.067 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 周杰伦 -> 《青花瓷》 [演唱]
2025-06-24 18:42:31.067 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[演唱]--> 《青花瓷》
2025-06-24 18:42:31.067 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 18:42:31.072 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 8757ms
2025-06-24 18:42:32.091 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 43
2025-06-24 18:42:32.092 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 43, 参数: triples
2025-06-24 18:42:32.092 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 43，当前并发数: 1
2025-06-24 18:42:32.092 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 18:42:39.082 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 6989ms，响应长度: 264
2025-06-24 18:42:39.083 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 43
2025-06-24 18:42:39.087 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 264
2025-06-24 18:42:39.087 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "第41届柏林国际电影节",
      "predicate": "举行时间",
      "object": "1991年",
      "confidence": 0.95
    },
    {
      "subject": "2008年北京奥运会开幕式",
      "predicate": "举办地点",
      "object": "鸟巢",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:42:39.088 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "第41届柏林国际电影节",
      "predicate": "举行时间",
      "object": "1991年",
      "confidence": 0.95
    },
    {
      "subject": "2008年北京奥运会开幕式",
      "predicate": "举办地点",
      "object": "鸟巢",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:42:39.089 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 18:42:39.089 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组，包括实体和关系保存
2025-06-24 18:42:39.092 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:42:39.095 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 第41届柏林国际电影节 已存在，跳过插入
2025-06-24 18:42:39.097 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:42:39.100 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 1991年 已存在，跳过插入
2025-06-24 18:42:39.101 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 第41届柏林国际电影节 --[举行时间]--> 1991年
2025-06-24 18:42:39.103 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:42:39.105 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 2008年北京奥运会开幕式 已存在，跳过插入
2025-06-24 18:42:39.106 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 2008年北京奥运会开幕式 --[举办地点]--> 鸟巢
2025-06-24 18:42:39.106 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 18:42:39.108 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 7017ms
2025-06-24 18:42:40.127 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 37
2025-06-24 18:42:40.128 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 37, 参数: triples
2025-06-24 18:42:40.128 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 37，当前并发数: 1
2025-06-24 18:42:40.129 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 18:42:49.211 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 9082ms，响应长度: 371
2025-06-24 18:42:49.212 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 37
2025-06-24 18:42:49.216 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 371
2025-06-24 18:42:49.216 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "参加",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "获奖",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "担任",
      "object": "北京奥运会开幕式总导演",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:42:49.216 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "参加",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "获奖",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "担任",
      "object": "北京奥运会开幕式总导演",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:42:49.218 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 18:42:49.218 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-24 18:42:49.221 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:42:49.225 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 18:42:49.228 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:42:49.231 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 柏林电影节颁奖典礼 已存在，跳过插入
2025-06-24 18:42:49.233 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:42:49.240 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 18:42:49.244 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:42:49.247 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 张艺谋 -> 柏林电影节颁奖典礼 [参加]
2025-06-24 18:42:49.247 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[参加]--> 柏林电影节颁奖典礼
2025-06-24 18:42:49.250 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:42:49.253 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 18:42:49.254 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:42:49.256 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 柏林电影节颁奖典礼 已存在，跳过插入
2025-06-24 18:42:49.258 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:42:49.262 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 18:42:49.264 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:42:49.268 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 张艺谋 -> 柏林电影节颁奖典礼 [获奖]
2025-06-24 18:42:49.268 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[获奖]--> 柏林电影节颁奖典礼
2025-06-24 18:42:49.269 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:42:49.272 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 18:42:49.273 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:42:49.276 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 北京奥运会开幕式总导演 已存在，跳过插入
2025-06-24 18:42:49.278 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:42:49.288 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 18:42:49.291 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:42:49.293 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 张艺谋 -> 北京奥运会开幕式总导演 [担任]
2025-06-24 18:42:49.293 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[担任]--> 北京奥运会开幕式总导演
2025-06-24 18:42:49.293 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 18:42:49.297 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 9170ms
2025-06-24 18:42:50.316 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 39
2025-06-24 18:42:50.316 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 39, 参数: triples
2025-06-24 18:42:50.316 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 39，当前并发数: 1
2025-06-24 18:42:50.316 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 18:42:59.444 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 9127ms，响应长度: 366
2025-06-24 18:42:59.445 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 39
2025-06-24 18:42:59.448 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 366
2025-06-24 18:42:59.448 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "电影《红高粱》",
      "predicate": "获得",
      "object": "金熊奖",
      "confidence": 0.95
    },
    {
      "subject": "电影《红高粱》",
      "predicate": "展映",
      "object": "柏林电影节",
      "confidence": 0.95
    },
    {
      "subject": "《青花瓷》",
      "predicate": "演出",
      "object": "奥运会开幕式",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:42:59.449 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "电影《红高粱》",
      "predicate": "获得",
      "object": "金熊奖",
      "confidence": 0.95
    },
    {
      "subject": "电影《红高粱》",
      "predicate": "展映",
      "object": "柏林电影节",
      "confidence": 0.95
    },
    {
      "subject": "《青花瓷》",
      "predicate": "演出",
      "object": "奥运会开幕式",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:42:59.451 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 18:42:59.451 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-24 18:42:59.451 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 电影《红高粱》 --[获得]--> 金熊奖
2025-06-24 18:42:59.453 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:42:59.458 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 18:42:59.462 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 电影《红高粱》 (通过三元组提取)
2025-06-24 18:42:59.464 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:42:59.467 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 柏林电影节 已存在，跳过插入
2025-06-24 18:42:59.467 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 电影《红高粱》 --[展映]--> 柏林电影节
2025-06-24 18:42:59.468 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 18:42:59.472 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-24 18:42:59.473 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:42:59.476 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 奥运会开幕式 已存在，跳过插入
2025-06-24 18:42:59.477 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 18:42:59.481 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-24 18:42:59.486 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:42:59.488 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 奥运会开幕式 -> 《青花瓷》 [在_演出]
2025-06-24 18:42:59.488 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《青花瓷》 --[演出]--> 奥运会开幕式
2025-06-24 18:42:59.489 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 18:42:59.493 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 9177ms
2025-06-24 18:43:00.515 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textLength: 43
2025-06-24 18:43:00.515 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 43, 参数: triples
2025-06-24 18:43:00.515 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 43，当前并发数: 1
2025-06-24 18:43:00.515 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 18:43:12.005 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 11490ms，响应长度: 469
2025-06-24 18:43:12.005 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 43
2025-06-24 18:43:12.009 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 469
2025-06-24 18:43:12.009 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "主演",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映于",
      "object": "香港电影节",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "参加",
      "object": "电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "终身成就奖",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:43:12.009 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "主演",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映于",
      "object": "香港电影节",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "参加",
      "object": "电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "终身成就奖",
      "confidence": 0.95
    }
  ]
}
2025-06-24 18:43:12.012 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 18:43:12.012 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-24 18:43:12.014 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:43:12.017 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-24 18:43:12.018 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:43:12.021 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 《醉拳》 已存在，跳过插入
2025-06-24 18:43:12.028 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:43:12.033 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:43:12.035 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:43:12.038 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 成龙 -> 《醉拳》 [主演]
2025-06-24 18:43:12.038 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[主演]--> 《醉拳》
2025-06-24 18:43:12.039 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 18:43:12.041 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《醉拳》 已存在，跳过插入
2025-06-24 18:43:12.042 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:43:12.044 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 香港电影节 已存在，跳过插入
2025-06-24 18:43:12.045 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 18:43:12.048 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-24 18:43:12.051 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:43:12.053 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 香港电影节 -> 《醉拳》 [在_首映于]
2025-06-24 18:43:12.053 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《醉拳》 --[首映于]--> 香港电影节
2025-06-24 18:43:12.054 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:43:12.056 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-24 18:43:12.057 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 18:43:12.058 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 电影节颁奖典礼 已存在，跳过插入
2025-06-24 18:43:12.059 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:43:12.064 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 18:43:12.066 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:43:12.068 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 成龙 -> 电影节颁奖典礼 [参加]
2025-06-24 18:43:12.068 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[参加]--> 电影节颁奖典礼
2025-06-24 18:43:12.069 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:43:12.070 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-24 18:43:12.072 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 18:43:12.074 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 终身成就奖 已存在，跳过插入
2025-06-24 18:43:12.075 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:43:12.077 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 18:43:12.080 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 18:43:12.082 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 成龙 -> 终身成就奖 [获得]
2025-06-24 18:43:12.082 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[获得]--> 终身成就奖
2025-06-24 18:43:12.082 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 18:43:12.086 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 11571ms
2025-06-24 20:08:30.588 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 40634 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-24 20:08:30.590 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-24 20:08:31.502 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 20:08:31.503 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-24 20:08:31.608 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 102 ms. Found 7 JPA repository interfaces.
2025-06-24 20:08:31.634 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 20:08:31.635 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-24 20:08:31.647 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityCelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 20:08:31.648 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityEventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 20:08:31.649 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 20:08:31.649 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 20:08:31.649 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 20:08:31.649 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 20:08:31.649 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 20:08:31.649 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 10 ms. Found 0 Redis repository interfaces.
2025-06-24 20:08:36.123 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@249a45fd
2025-06-24 20:08:36.126 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@249a45fd
2025-06-24 20:08:36.126 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@249a45fd
2025-06-24 20:08:36.126 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@7f1ad846
2025-06-24 20:08:36.126 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@7f1ad846
2025-06-24 20:08:36.126 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-24 20:08:36.126 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-24 20:08:36.126 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-24 20:08:36.126 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-24 20:08:36.126 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-24 20:08:36.126 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-24 20:08:36.128 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-24 20:08:36.129 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-24 20:08:36.129 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-24 20:08:36.129 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-24 20:08:36.130 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-24 20:08:36.130 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-24 20:08:36.130 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-24 20:08:36.130 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-24 20:08:36.130 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-24 20:08:36.130 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-24 20:08:36.130 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-24 20:08:36.130 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@5e7e7a7e
2025-06-24 20:08:36.131 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@5e7e7a7e
2025-06-24 20:08:36.131 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@5e7e7a7e
2025-06-24 20:08:36.131 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-24 20:08:36.131 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-24 20:08:36.131 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-24 20:08:36.131 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-24 20:08:36.132 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-24 20:08:36.132 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-24 20:08:36.132 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-24 20:08:36.133 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-24 20:08:36.133 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-24 20:08:36.133 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@5abc5854
2025-06-24 20:08:36.133 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@5abc5854
2025-06-24 20:08:36.134 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@5abc5854
2025-06-24 20:08:36.134 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-24 20:08:36.134 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-24 20:08:36.134 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-24 20:08:36.134 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-24 20:08:36.134 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-24 20:08:36.134 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-24 20:08:36.134 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-24 20:08:36.135 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-24 20:08:36.136 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-24 20:08:36.136 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-24 20:08:36.136 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-24 20:08:36.136 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-24 20:08:36.136 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-24 20:08:36.136 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-24 20:08:36.136 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-24 20:08:36.136 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-24 20:08:36.137 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-24 20:08:36.137 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-24 20:08:36.137 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-24 20:08:36.137 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@586486c
2025-06-24 20:08:36.137 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@586486c
2025-06-24 20:08:36.137 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-24 20:08:36.137 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@7fbbdd8a
2025-06-24 20:08:36.137 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-24 20:08:36.137 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-24 20:08:36.137 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-24 20:08:36.137 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-24 20:08:36.137 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-24 20:08:36.137 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-24 20:08:36.137 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-24 20:08:36.138 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-24 20:08:36.138 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-24 20:08:36.138 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-24 20:08:36.138 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-24 20:08:36.138 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-24 20:08:36.138 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-24 20:08:36.138 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-24 20:08:36.138 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-24 20:08:36.138 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-24 20:08:36.139 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-24 20:08:36.141 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-24 20:08:36.141 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-24 20:08:36.142 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-24 20:08:36.143 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-24 20:08:36.143 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@12200670
2025-06-24 20:08:36.143 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@12200670
2025-06-24 20:08:36.143 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-24 20:08:36.143 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-24 20:08:36.143 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-24 20:08:36.143 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-24 20:08:36.144 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-24 20:08:36.144 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-24 20:08:36.144 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-24 20:08:36.144 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-24 20:08:36.144 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-24 20:08:36.144 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-24 20:08:36.144 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-24 20:08:36.144 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-24 20:08:36.144 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@2a259f6f
2025-06-24 20:08:36.144 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@7ccf6114
2025-06-24 20:08:36.144 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@3df3410a
2025-06-24 20:08:36.144 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@3df3410a
2025-06-24 20:08:36.144 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-24 20:08:36.144 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-24 20:08:36.144 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-24 20:08:36.145 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@61d42275
2025-06-24 20:08:36.145 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@6614289a
2025-06-24 20:08:36.145 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@4148ce43
2025-06-24 20:08:36.145 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@4148ce43
2025-06-24 20:08:36.145 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@46fb9581
2025-06-24 20:08:36.145 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@46fb9581
2025-06-24 20:08:36.146 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@46fb9581
2025-06-24 20:08:36.146 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@6fcc0a1
2025-06-24 20:08:36.146 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@6fcc0a1
2025-06-24 20:08:36.146 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@416b681c
2025-06-24 20:08:36.147 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@416b681c
2025-06-24 20:08:36.148 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@46d69ca4
2025-06-24 20:08:36.149 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@46d69ca4
2025-06-24 20:08:36.149 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@5c9b5e62
2025-06-24 20:08:36.149 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@5c9b5e62
2025-06-24 20:08:36.149 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@3c826498
2025-06-24 20:08:36.149 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@3c826498
2025-06-24 20:08:36.149 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@2633d09c
2025-06-24 20:08:36.152 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@1d8dbf10
2025-06-24 20:08:36.152 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@1d8dbf10
2025-06-24 20:08:36.153 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@77a4bac
2025-06-24 20:08:36.154 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@534fc1f7
2025-06-24 20:08:36.155 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@7d5a0b14
2025-06-24 20:08:36.155 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@72ec16f8
2025-06-24 20:08:36.155 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@279e1422
2025-06-24 20:08:36.155 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@af3295f
2025-06-24 20:08:36.155 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@27dc81be
2025-06-24 20:08:36.155 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@3595086b
2025-06-24 20:08:36.155 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@627d35ff
2025-06-24 20:08:36.252 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-24 20:08:36.266 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-24 20:08:36.356 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@457b8fc3
2025-06-24 20:08:36.357 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-24 20:08:36.390 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-24 20:08:36.391 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-24 20:08:36.406 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@70b1028d) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@11d422fd)
2025-06-24 20:08:36.406 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6e489bb8) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1331d6fd)
2025-06-24 20:08:36.406 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6b6c0b7c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5b1f0f26)
2025-06-24 20:08:36.406 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7120daa6) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6cbb6c41)
2025-06-24 20:08:36.406 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6787bd41) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@44c2e8a8)
2025-06-24 20:08:36.406 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3340ff7c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@42e4431)
2025-06-24 20:08:36.407 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5e198c40) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@dcdb883)
2025-06-24 20:08:36.407 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@39420d59) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4fbbd98c)
2025-06-24 20:08:36.407 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5dd227b7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3d3b852e)
2025-06-24 20:08:36.407 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-24 20:08:36.408 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-24 20:08:36.408 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-24 20:08:36.409 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 20:08:36.409 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 20:08:36.410 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@570127fa
2025-06-24 20:08:36.410 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@77a4bac`
2025-06-24 20:08:36.411 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-24 20:08:36.411 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-24 20:08:36.413 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 20:08:36.413 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 20:08:36.413 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 20:08:36.413 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 20:08:36.413 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 20:08:36.413 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 20:08:36.414 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 20:08:36.414 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 20:08:36.414 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 20:08:36.415 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@6baee63b] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@1002b06d]
2025-06-24 20:08:37.044 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@6baee63b] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@1e60890c]
2025-06-24 20:08:37.053 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@1e60890c] for TypeConfiguration
2025-06-24 20:08:37.054 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-24 20:08:37.759 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-24 20:08:38.158 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-24 20:08:38.284 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-24 20:08:38.315 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 2
2025-06-24 20:08:38.316 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-24 20:08:38.319 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-24 20:08:38.320 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-24 20:08:38.773 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-24 20:08:38.789 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 8.717 seconds (process running for 9.252)
2025-06-24 20:08:40.551 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: 人员关系测试, textLength: 34
2025-06-24 20:08:40.558 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 34, 参数: 人员关系测试
2025-06-24 20:08:40.562 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 34，当前并发数: 1
2025-06-24 20:08:40.562 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 20:08:50.157 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 9595ms，响应长度: 351
2025-06-24 20:08:50.159 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 34
2025-06-24 20:08:50.172 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 351
2025-06-24 20:08:50.173 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "合作伙伴",
      "object": "巩俐",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "配偶",
      "object": "陈婷",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "好友",
      "object": "梁朝伟",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:08:50.173 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "合作伙伴",
      "object": "巩俐",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "配偶",
      "object": "陈婷",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "好友",
      "object": "梁朝伟",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:08:50.175 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 20:08:50.175 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-24 20:08:50.237 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:08:50.254 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 20:08:50.255 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:08:50.259 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 巩俐 已存在，跳过插入
2025-06-24 20:08:50.264 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:08:50.275 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:08:50.289 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:08:50.296 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 巩俐 [合作伙伴]
2025-06-24 20:08:50.296 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[合作伙伴]--> 巩俐
2025-06-24 20:08:50.297 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:08:50.300 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 20:08:50.301 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:08:50.303 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 陈婷 已存在，跳过插入
2025-06-24 20:08:50.304 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:08:50.307 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:08:50.309 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:08:50.311 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 陈婷 [配偶]
2025-06-24 20:08:50.311 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[配偶]--> 陈婷
2025-06-24 20:08:50.312 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:08:50.317 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-24 20:08:50.318 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:08:50.320 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 梁朝伟 已存在，跳过插入
2025-06-24 20:08:50.321 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:08:50.325 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:08:50.327 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:08:50.328 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 梁朝伟 [好友]
2025-06-24 20:08:50.328 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[好友]--> 梁朝伟
2025-06-24 20:08:50.328 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 20:08:50.335 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 9785ms
2025-06-24 20:09:24.212 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: , textLength: 34
2025-06-24 20:09:24.213 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 34, 参数: 
2025-06-24 20:09:24.213 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 34，当前并发数: 1
2025-06-24 20:09:24.213 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 20:09:34.346 [reactor-http-nio-6] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 10133ms，响应长度: 351
2025-06-24 20:09:34.347 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 34
2025-06-24 20:09:34.351 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 351
2025-06-24 20:09:34.352 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "合作伙伴",
      "object": "巩俐",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "配偶",
      "object": "陈婷",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "好友",
      "object": "梁朝伟",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:09:34.354 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "合作伙伴",
      "object": "巩俐",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "配偶",
      "object": "陈婷",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "好友",
      "object": "梁朝伟",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:09:34.359 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 20:09:34.360 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-24 20:09:34.364 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:09:34.370 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 20:09:34.372 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:09:34.376 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 巩俐 已存在，跳过插入
2025-06-24 20:09:34.378 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:09:34.381 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:09:34.385 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:09:34.388 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 巩俐 [合作伙伴]
2025-06-24 20:09:34.389 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[合作伙伴]--> 巩俐
2025-06-24 20:09:34.390 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:09:34.394 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 20:09:34.395 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:09:34.397 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 陈婷 已存在，跳过插入
2025-06-24 20:09:34.398 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:09:34.402 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:09:34.406 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:09:34.408 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 陈婷 [配偶]
2025-06-24 20:09:34.408 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[配偶]--> 陈婷
2025-06-24 20:09:34.410 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:09:34.413 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-24 20:09:34.416 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:09:34.418 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 梁朝伟 已存在，跳过插入
2025-06-24 20:09:34.420 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:09:34.424 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:09:34.427 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:09:34.429 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 梁朝伟 [好友]
2025-06-24 20:09:34.429 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[好友]--> 梁朝伟
2025-06-24 20:09:34.429 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 20:09:34.434 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 10222ms
2025-06-24 20:10:16.776 [SpringApplicationShutdownHook] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-24 20:10:16.778 [SpringApplicationShutdownHook] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@1e60890c] for TypeConfiguration
2025-06-24 20:10:16.778 [SpringApplicationShutdownHook] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@70c87767] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@1e60890c]
2025-06-24 20:10:16.780 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-24 20:10:16.786 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-24 20:11:29.892 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 40747 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-24 20:11:29.895 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-24 20:11:30.832 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 20:11:30.834 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-24 20:11:30.936 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 99 ms. Found 7 JPA repository interfaces.
2025-06-24 20:11:30.956 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 20:11:30.957 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-24 20:11:30.972 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityCelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 20:11:30.973 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityEventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 20:11:30.973 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 20:11:30.973 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 20:11:30.973 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 20:11:30.973 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 20:11:30.973 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 20:11:30.974 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 12 ms. Found 0 Redis repository interfaces.
2025-06-24 20:11:34.540 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@26712838
2025-06-24 20:11:34.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@26712838
2025-06-24 20:11:34.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@26712838
2025-06-24 20:11:34.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@6a0c7af6
2025-06-24 20:11:34.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@6a0c7af6
2025-06-24 20:11:34.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@7f1ad846
2025-06-24 20:11:34.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@7f1ad846
2025-06-24 20:11:34.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-24 20:11:34.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-24 20:11:34.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-24 20:11:34.544 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-24 20:11:34.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-24 20:11:34.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-24 20:11:34.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-24 20:11:34.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-24 20:11:34.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-24 20:11:34.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-24 20:11:34.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-24 20:11:34.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-24 20:11:34.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-24 20:11:34.547 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-24 20:11:34.547 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-24 20:11:34.547 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-24 20:11:34.547 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-24 20:11:34.547 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-24 20:11:34.547 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@5e7e7a7e
2025-06-24 20:11:34.547 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@5e7e7a7e
2025-06-24 20:11:34.547 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@5e7e7a7e
2025-06-24 20:11:34.547 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-24 20:11:34.547 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-24 20:11:34.547 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-24 20:11:34.548 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-24 20:11:34.548 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-24 20:11:34.548 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-24 20:11:34.548 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-24 20:11:34.548 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-24 20:11:34.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-24 20:11:34.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@5abc5854
2025-06-24 20:11:34.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@5abc5854
2025-06-24 20:11:34.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-24 20:11:34.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-24 20:11:34.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-24 20:11:34.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-24 20:11:34.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-24 20:11:34.550 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-24 20:11:34.551 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-24 20:11:34.551 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-24 20:11:34.551 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-24 20:11:34.551 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-24 20:11:34.551 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-24 20:11:34.551 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-24 20:11:34.551 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-24 20:11:34.551 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-24 20:11:34.552 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-24 20:11:34.552 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-24 20:11:34.552 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-24 20:11:34.552 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-24 20:11:34.552 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-24 20:11:34.552 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@586486c
2025-06-24 20:11:34.552 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-24 20:11:34.552 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@7fbbdd8a
2025-06-24 20:11:34.552 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-24 20:11:34.552 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-24 20:11:34.552 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-24 20:11:34.552 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-24 20:11:34.552 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-24 20:11:34.552 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-24 20:11:34.553 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-24 20:11:34.553 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-24 20:11:34.553 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-24 20:11:34.553 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-24 20:11:34.553 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-24 20:11:34.553 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-24 20:11:34.553 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-24 20:11:34.553 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-24 20:11:34.553 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-24 20:11:34.554 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-24 20:11:34.555 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-24 20:11:34.556 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-24 20:11:34.556 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-24 20:11:34.556 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-24 20:11:34.556 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-24 20:11:34.558 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-24 20:11:34.558 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@12200670
2025-06-24 20:11:34.558 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-24 20:11:34.558 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-24 20:11:34.558 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-24 20:11:34.558 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-24 20:11:34.558 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-24 20:11:34.558 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-24 20:11:34.558 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-24 20:11:34.559 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-24 20:11:34.559 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-24 20:11:34.559 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-24 20:11:34.559 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-24 20:11:34.559 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-24 20:11:34.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@2a259f6f
2025-06-24 20:11:34.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@7ccf6114
2025-06-24 20:11:34.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@7ccf6114
2025-06-24 20:11:34.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@3df3410a
2025-06-24 20:11:34.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@3df3410a
2025-06-24 20:11:34.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@3df3410a
2025-06-24 20:11:34.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-24 20:11:34.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@61d42275
2025-06-24 20:11:34.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@6614289a
2025-06-24 20:11:34.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@6614289a
2025-06-24 20:11:34.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@4148ce43
2025-06-24 20:11:34.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@4148ce43
2025-06-24 20:11:34.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@4148ce43
2025-06-24 20:11:34.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@46fb9581
2025-06-24 20:11:34.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@46fb9581
2025-06-24 20:11:34.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@6fcc0a1
2025-06-24 20:11:34.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@6fcc0a1
2025-06-24 20:11:34.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@416b681c
2025-06-24 20:11:34.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@416b681c
2025-06-24 20:11:34.562 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@46d69ca4
2025-06-24 20:11:34.564 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@46d69ca4
2025-06-24 20:11:34.564 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@5c9b5e62
2025-06-24 20:11:34.564 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@5c9b5e62
2025-06-24 20:11:34.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@3c826498
2025-06-24 20:11:34.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@6c06b1bc
2025-06-24 20:11:34.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@6c06b1bc
2025-06-24 20:11:34.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@19e2db7c
2025-06-24 20:11:34.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@77a4bac
2025-06-24 20:11:34.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@534fc1f7
2025-06-24 20:11:34.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@7d5a0b14
2025-06-24 20:11:34.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@72ec16f8
2025-06-24 20:11:34.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@279e1422
2025-06-24 20:11:34.571 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@af3295f
2025-06-24 20:11:34.571 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@27dc81be
2025-06-24 20:11:34.571 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@3595086b
2025-06-24 20:11:34.636 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-24 20:11:34.646 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-24 20:11:34.726 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4bf89d3d
2025-06-24 20:11:34.727 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-24 20:11:34.753 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-24 20:11:34.754 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-24 20:11:34.772 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@69a294d8) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@70b1028d)
2025-06-24 20:11:34.773 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@11d422fd) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6e489bb8)
2025-06-24 20:11:34.774 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1331d6fd) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6b6c0b7c)
2025-06-24 20:11:34.774 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5b1f0f26) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7120daa6)
2025-06-24 20:11:34.774 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6cbb6c41) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6787bd41)
2025-06-24 20:11:34.774 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@44c2e8a8) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3340ff7c)
2025-06-24 20:11:34.774 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@42e4431) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5e198c40)
2025-06-24 20:11:34.774 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@dcdb883) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@39420d59)
2025-06-24 20:11:34.775 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4fbbd98c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5dd227b7)
2025-06-24 20:11:34.776 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-24 20:11:34.776 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-24 20:11:34.776 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-24 20:11:34.777 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 20:11:34.778 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 20:11:34.779 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@4af44f2a
2025-06-24 20:11:34.779 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@19e2db7c`
2025-06-24 20:11:34.781 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-24 20:11:34.781 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-24 20:11:34.783 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 20:11:34.783 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 20:11:34.783 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 20:11:34.783 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 20:11:34.783 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 20:11:34.783 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 20:11:34.784 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 20:11:34.784 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 20:11:34.784 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 20:11:34.785 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@f5f8de2] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@6baee63b]
2025-06-24 20:11:35.388 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@f5f8de2] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@7cddc50f]
2025-06-24 20:11:35.393 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@7cddc50f] for TypeConfiguration
2025-06-24 20:11:35.393 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-24 20:11:35.970 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-24 20:11:36.355 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-24 20:11:36.491 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-24 20:11:36.526 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 2
2025-06-24 20:11:36.527 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-24 20:11:36.531 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-24 20:11:36.531 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-24 20:11:36.923 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-24 20:11:36.937 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 7.621 seconds (process running for 8.181)
2025-06-24 20:11:38.062 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: null, textLength: 34
2025-06-24 20:11:38.068 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 34, 参数: null
2025-06-24 20:11:38.073 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 34，当前并发数: 1
2025-06-24 20:11:38.074 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 20:11:48.271 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 10195ms，响应长度: 351
2025-06-24 20:11:48.277 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 34
2025-06-24 20:11:48.293 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 351
2025-06-24 20:11:48.294 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "合作伙伴",
      "object": "巩俐",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "配偶",
      "object": "陈婷",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "好友",
      "object": "梁朝伟",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:11:48.294 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "合作伙伴",
      "object": "巩俐",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "配偶",
      "object": "陈婷",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "好友",
      "object": "梁朝伟",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:11:48.296 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 20:11:48.296 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-24 20:11:48.375 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:11:48.395 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 20:11:48.396 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:11:48.399 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 巩俐 已存在，跳过插入
2025-06-24 20:11:48.406 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:11:48.441 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:11:48.483 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:11:48.499 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 巩俐 [合作伙伴]
2025-06-24 20:11:48.500 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[合作伙伴]--> 巩俐
2025-06-24 20:11:48.504 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:11:48.509 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 20:11:48.510 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:11:48.512 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 陈婷 已存在，跳过插入
2025-06-24 20:11:48.513 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:11:48.516 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:11:48.518 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:11:48.520 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 陈婷 [配偶]
2025-06-24 20:11:48.520 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[配偶]--> 陈婷
2025-06-24 20:11:48.522 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:11:48.526 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-24 20:11:48.527 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:11:48.529 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 梁朝伟 已存在，跳过插入
2025-06-24 20:11:48.531 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:11:48.535 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:11:48.537 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:11:48.539 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 梁朝伟 [好友]
2025-06-24 20:11:48.539 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[好友]--> 梁朝伟
2025-06-24 20:11:48.539 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 20:11:48.547 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 10486ms
2025-06-24 20:12:38.693 [SpringApplicationShutdownHook] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-24 20:12:38.699 [SpringApplicationShutdownHook] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@7cddc50f] for TypeConfiguration
2025-06-24 20:12:38.700 [SpringApplicationShutdownHook] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@53d7bbb4] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@7cddc50f]
2025-06-24 20:12:38.702 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-24 20:12:38.716 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-24 20:24:40.732 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 42264 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-24 20:24:40.734 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-24 20:24:41.865 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 20:24:41.867 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-24 20:24:42.007 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 135 ms. Found 7 JPA repository interfaces.
2025-06-24 20:24:42.043 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-24 20:24:42.044 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-24 20:24:42.059 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityCelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 20:24:42.060 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityEventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 20:24:42.060 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 20:24:42.060 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 20:24:42.060 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 20:24:42.060 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 20:24:42.060 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-24 20:24:42.060 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 0 Redis repository interfaces.
2025-06-24 20:24:45.484 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@2c0a3826
2025-06-24 20:24:45.487 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@2c0a3826
2025-06-24 20:24:45.487 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@2c0a3826
2025-06-24 20:24:45.487 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@57920d6c
2025-06-24 20:24:45.487 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@57920d6c
2025-06-24 20:24:45.487 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@465d1345
2025-06-24 20:24:45.487 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@465d1345
2025-06-24 20:24:45.487 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@62cf86d6
2025-06-24 20:24:45.487 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@62cf86d6
2025-06-24 20:24:45.487 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@2a6c751f
2025-06-24 20:24:45.488 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@2a6c751f
2025-06-24 20:24:45.490 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@2a6c751f
2025-06-24 20:24:45.490 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@6dd2e453
2025-06-24 20:24:45.490 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@6dd2e453
2025-06-24 20:24:45.490 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@6dd2e453
2025-06-24 20:24:45.491 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@433b1597
2025-06-24 20:24:45.491 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@433b1597
2025-06-24 20:24:45.492 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@6edb1e9c
2025-06-24 20:24:45.492 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@75d7297d
2025-06-24 20:24:45.492 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@75d7297d
2025-06-24 20:24:45.492 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@4e20a985
2025-06-24 20:24:45.492 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@56e8a8a0
2025-06-24 20:24:45.493 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@6071631f
2025-06-24 20:24:45.493 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@6071631f
2025-06-24 20:24:45.493 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@6071631f
2025-06-24 20:24:45.493 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@2ca132ad
2025-06-24 20:24:45.493 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@2ca132ad
2025-06-24 20:24:45.493 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@2ca132ad
2025-06-24 20:24:45.493 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@6706da3d
2025-06-24 20:24:45.493 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@6706da3d
2025-06-24 20:24:45.493 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@6706da3d
2025-06-24 20:24:45.493 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@7438c3d5
2025-06-24 20:24:45.494 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@7438c3d5
2025-06-24 20:24:45.494 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@7438c3d5
2025-06-24 20:24:45.494 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@1fba3fd6
2025-06-24 20:24:45.494 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@1fba3fd6
2025-06-24 20:24:45.494 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@1fba3fd6
2025-06-24 20:24:45.494 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@3aab42d6
2025-06-24 20:24:45.496 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@3aab42d6
2025-06-24 20:24:45.496 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@6badb08c
2025-06-24 20:24:45.496 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@6badb08c
2025-06-24 20:24:45.496 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@5939f047
2025-06-24 20:24:45.496 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@5939f047
2025-06-24 20:24:45.496 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@5939f047
2025-06-24 20:24:45.496 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@17332039
2025-06-24 20:24:45.496 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@776e7dfb
2025-06-24 20:24:45.497 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@776e7dfb
2025-06-24 20:24:45.497 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@71418a4a
2025-06-24 20:24:45.497 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@67ecf7ed
2025-06-24 20:24:45.497 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@67ecf7ed
2025-06-24 20:24:45.497 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@67ecf7ed
2025-06-24 20:24:45.497 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@69d021c1
2025-06-24 20:24:45.497 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@6d5508a5
2025-06-24 20:24:45.497 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@103bcc9f
2025-06-24 20:24:45.498 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@106802ea
2025-06-24 20:24:45.498 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@106802ea
2025-06-24 20:24:45.498 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@785ef70f
2025-06-24 20:24:45.498 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@785ef70f
2025-06-24 20:24:45.498 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@3d8bd881
2025-06-24 20:24:45.498 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@731ab49b
2025-06-24 20:24:45.498 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@23358740
2025-06-24 20:24:45.499 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@2cdcfaa6
2025-06-24 20:24:45.499 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@4ff0706c
2025-06-24 20:24:45.499 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@6968bb65
2025-06-24 20:24:45.499 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@66682e8f
2025-06-24 20:24:45.499 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@66682e8f
2025-06-24 20:24:45.499 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@2d2af12e
2025-06-24 20:24:45.499 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@2d2af12e
2025-06-24 20:24:45.499 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@611587f7
2025-06-24 20:24:45.499 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@611587f7
2025-06-24 20:24:45.499 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@4d0abb23
2025-06-24 20:24:45.499 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@4d0abb23
2025-06-24 20:24:45.500 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@6ab1f85b
2025-06-24 20:24:45.501 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@6ab1f85b
2025-06-24 20:24:45.501 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@10e8c7a2
2025-06-24 20:24:45.502 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5d8fd077
2025-06-24 20:24:45.502 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@4544ab46
2025-06-24 20:24:45.502 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@4544ab46
2025-06-24 20:24:45.502 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@2052f095
2025-06-24 20:24:45.502 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@76d1f6ea
2025-06-24 20:24:45.502 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@55fe9c2f
2025-06-24 20:24:45.503 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@3580134d
2025-06-24 20:24:45.503 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@3580134d
2025-06-24 20:24:45.503 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@2e19b30
2025-06-24 20:24:45.504 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@7b7e4b20
2025-06-24 20:24:45.504 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@5ac0bf84
2025-06-24 20:24:45.504 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@5ac0bf84
2025-06-24 20:24:45.504 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@6fefc5ea
2025-06-24 20:24:45.504 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@6fefc5ea
2025-06-24 20:24:45.504 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@6159fb3c
2025-06-24 20:24:45.504 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@6159fb3c
2025-06-24 20:24:45.504 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@6159fb3c
2025-06-24 20:24:45.504 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@68f79b7c
2025-06-24 20:24:45.504 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@68f79b7c
2025-06-24 20:24:45.505 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@68f79b7c
2025-06-24 20:24:45.505 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@37142579
2025-06-24 20:24:45.505 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@264576e4
2025-06-24 20:24:45.505 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@86bf90b
2025-06-24 20:24:45.505 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@86bf90b
2025-06-24 20:24:45.505 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@5c13af01
2025-06-24 20:24:45.505 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@5c13af01
2025-06-24 20:24:45.505 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@5c13af01
2025-06-24 20:24:45.505 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@4aba7617
2025-06-24 20:24:45.505 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@47c5cbf2
2025-06-24 20:24:45.505 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@1031c1a0
2025-06-24 20:24:45.505 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@1031c1a0
2025-06-24 20:24:45.505 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@519b0f00
2025-06-24 20:24:45.506 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@519b0f00
2025-06-24 20:24:45.507 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@519b0f00
2025-06-24 20:24:45.508 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@4888d1ea
2025-06-24 20:24:45.508 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@4888d1ea
2025-06-24 20:24:45.508 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@217b0952
2025-06-24 20:24:45.508 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@217b0952
2025-06-24 20:24:45.508 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@3fd9e01c
2025-06-24 20:24:45.508 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@3fd9e01c
2025-06-24 20:24:45.508 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@36330be8
2025-06-24 20:24:45.508 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@36330be8
2025-06-24 20:24:45.508 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@38ba8b45
2025-06-24 20:24:45.510 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@38ba8b45
2025-06-24 20:24:45.511 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@41f23499
2025-06-24 20:24:45.515 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@2a9f8d47
2025-06-24 20:24:45.515 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@2a9f8d47
2025-06-24 20:24:45.515 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@13d5606c
2025-06-24 20:24:45.517 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@6bf54260
2025-06-24 20:24:45.517 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@7165bde6
2025-06-24 20:24:45.517 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@72168258
2025-06-24 20:24:45.517 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@4af84a76
2025-06-24 20:24:45.517 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@b5ff70b
2025-06-24 20:24:45.517 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@5709e10b
2025-06-24 20:24:45.517 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@114badf0
2025-06-24 20:24:45.517 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@19e8fe55
2025-06-24 20:24:45.621 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-24 20:24:45.637 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-24 20:24:45.762 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@2cbc2db2
2025-06-24 20:24:45.763 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-24 20:24:45.796 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-24 20:24:45.797 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-24 20:24:45.815 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1831447c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7741507c)
2025-06-24 20:24:45.815 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@37a0fc8c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1ba3c03d)
2025-06-24 20:24:45.815 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@9a37591) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@749c0669)
2025-06-24 20:24:45.815 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4468c0ea) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@41cf4272)
2025-06-24 20:24:45.815 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@53d2b827) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4769537a)
2025-06-24 20:24:45.816 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4504a4ed) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7ee3a2ed)
2025-06-24 20:24:45.816 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@38363e96) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@35c95869)
2025-06-24 20:24:45.817 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@558aa1f1) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@361d8567)
2025-06-24 20:24:45.817 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3fd6dfbc) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4023d23f)
2025-06-24 20:24:45.818 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-24 20:24:45.818 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-24 20:24:45.818 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-24 20:24:45.819 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 20:24:45.820 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-24 20:24:45.821 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@22dc9d46
2025-06-24 20:24:45.822 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@13d5606c`
2025-06-24 20:24:45.824 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-24 20:24:45.824 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-24 20:24:45.826 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 20:24:45.826 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 20:24:45.826 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-24 20:24:45.826 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 20:24:45.826 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 20:24:45.826 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-24 20:24:45.827 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 20:24:45.827 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 20:24:45.827 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-24 20:24:45.828 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@7bad18f5] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@4407fea2]
2025-06-24 20:24:46.575 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@7bad18f5] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@298cfe89]
2025-06-24 20:24:46.580 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@298cfe89] for TypeConfiguration
2025-06-24 20:24:46.580 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-24 20:24:47.562 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-24 20:24:48.094 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-24 20:24:48.291 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-24 20:24:48.338 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 2
2025-06-24 20:24:48.339 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-24 20:24:48.343 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-24 20:24:48.344 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-24 20:24:48.823 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-24 20:24:48.844 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 8.808 seconds (process running for 9.72)
2025-06-24 20:29:33.844 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-24 20:29:33.877 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-24 20:29:33.893 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-24 20:29:33.903 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-24 20:29:33.919 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-24 20:29:33.932 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1, textLength: 38
2025-06-24 20:29:33.932 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 38, 参数: triples
2025-06-24 20:29:33.937 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 38，当前并发数: 1
2025-06-24 20:29:33.937 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 20:29:42.480 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 8543ms，响应长度: 351
2025-06-24 20:29:42.482 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 38
2025-06-24 20:29:42.501 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 351
2025-06-24 20:29:42.501 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "合作伙伴",
      "object": "巩俐",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "配偶",
      "object": "陈婷",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "好友",
      "object": "梁朝伟",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:29:42.502 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "合作伙伴",
      "object": "巩俐",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "配偶",
      "object": "陈婷",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "好友",
      "object": "梁朝伟",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:29:42.506 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 20:29:42.506 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-24 20:29:42.584 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:29:42.607 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 20:29:42.608 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:29:42.610 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 巩俐 已存在，跳过插入
2025-06-24 20:29:42.618 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:29:42.633 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:29:42.649 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:29:42.659 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 巩俐 [合作伙伴]
2025-06-24 20:29:42.660 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[合作伙伴]--> 巩俐
2025-06-24 20:29:42.661 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:29:42.665 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 20:29:42.666 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:29:42.668 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 陈婷 已存在，跳过插入
2025-06-24 20:29:42.669 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:29:42.672 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:29:42.674 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:29:42.675 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 陈婷 [配偶]
2025-06-24 20:29:42.676 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[配偶]--> 陈婷
2025-06-24 20:29:42.677 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:29:42.681 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-24 20:29:42.683 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:29:42.685 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 梁朝伟 已存在，跳过插入
2025-06-24 20:29:42.686 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:29:42.691 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:29:42.694 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:29:42.697 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 梁朝伟 [好友]
2025-06-24 20:29:42.698 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[好友]--> 梁朝伟
2025-06-24 20:29:42.698 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 20:29:42.705 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 8777ms
2025-06-24 20:29:43.743 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1, textLength: 40
2025-06-24 20:29:43.743 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 40, 参数: triples
2025-06-24 20:29:43.743 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 40，当前并发数: 1
2025-06-24 20:29:43.744 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 20:29:52.284 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 8540ms，响应长度: 356
2025-06-24 20:29:52.286 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 40
2025-06-24 20:29:52.293 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 356
2025-06-24 20:29:52.293 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "巩俐",
      "predicate": "主演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "演唱",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:29:52.293 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "巩俐",
      "predicate": "主演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "演唱",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:29:52.296 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 20:29:52.296 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-24 20:29:52.300 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:29:52.303 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 20:29:52.305 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:29:52.307 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-24 20:29:52.313 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:29:52.320 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:29:52.326 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:29:52.329 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 《红高粱》 [导演]
2025-06-24 20:29:52.329 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《红高粱》
2025-06-24 20:29:52.331 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:29:52.334 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 巩俐 已存在，跳过插入
2025-06-24 20:29:52.336 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:29:52.339 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-24 20:29:52.340 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:29:52.345 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:29:52.347 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:29:52.349 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 巩俐 -> 《红高粱》 [主演]
2025-06-24 20:29:52.349 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 巩俐 --[主演]--> 《红高粱》
2025-06-24 20:29:52.350 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:29:52.352 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-24 20:29:52.355 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 20:29:52.358 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-24 20:29:52.361 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:29:52.364 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-24 20:29:52.368 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:29:52.369 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 周杰伦 -> 《青花瓷》 [演唱]
2025-06-24 20:29:52.370 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[演唱]--> 《青花瓷》
2025-06-24 20:29:52.370 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 20:29:52.374 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 8631ms
2025-06-24 20:29:53.395 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1, textLength: 47
2025-06-24 20:29:53.395 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 47, 参数: triples
2025-06-24 20:29:53.395 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 47，当前并发数: 1
2025-06-24 20:29:53.395 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 20:30:00.032 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 6637ms，响应长度: 264
2025-06-24 20:30:00.032 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 47
2025-06-24 20:30:00.037 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 264
2025-06-24 20:30:00.037 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "第41届柏林国际电影节",
      "predicate": "举行时间",
      "object": "1991年",
      "confidence": 0.95
    },
    {
      "subject": "2008年北京奥运会开幕式",
      "predicate": "举办地点",
      "object": "鸟巢",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:30:00.037 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "第41届柏林国际电影节",
      "predicate": "举行时间",
      "object": "1991年",
      "confidence": 0.95
    },
    {
      "subject": "2008年北京奥运会开幕式",
      "predicate": "举办地点",
      "object": "鸟巢",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:30:00.041 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 20:30:00.041 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组，包括实体和关系保存
2025-06-24 20:30:00.046 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 20:30:00.050 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 第41届柏林国际电影节 已存在，跳过插入
2025-06-24 20:30:00.052 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 20:30:00.055 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 1991年 已存在，跳过插入
2025-06-24 20:30:00.056 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 第41届柏林国际电影节 --[举行时间]--> 1991年
2025-06-24 20:30:00.058 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 20:30:00.062 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 2008年北京奥运会开幕式 已存在，跳过插入
2025-06-24 20:30:00.062 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 2008年北京奥运会开幕式 --[举办地点]--> 鸟巢
2025-06-24 20:30:00.062 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 20:30:00.064 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 6669ms
2025-06-24 20:30:00.078 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 3, textLength: 58
2025-06-24 20:30:00.079 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 58, 参数: triples
2025-06-24 20:30:00.079 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 58，当前并发数: 1
2025-06-24 20:30:00.079 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 20:30:09.801 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 9722ms，响应长度: 485
2025-06-24 20:30:09.802 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 58
2025-06-24 20:30:09.806 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 485
2025-06-24 20:30:09.806 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "参加",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "获奖",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "担任",
      "object": "北京奥运会开幕式总导演",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "电影节终身成就奖",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:30:09.806 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "参加",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "获奖",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "担任",
      "object": "北京奥运会开幕式总导演",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "电影节终身成就奖",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:30:09.808 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 20:30:09.809 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-24 20:30:09.812 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:30:09.815 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 20:30:09.819 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 20:30:09.823 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 柏林电影节颁奖典礼 已存在，跳过插入
2025-06-24 20:30:09.824 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:30:09.831 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 20:30:09.836 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:30:09.841 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 张艺谋 -> 柏林电影节颁奖典礼 [参加]
2025-06-24 20:30:09.841 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[参加]--> 柏林电影节颁奖典礼
2025-06-24 20:30:09.843 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:30:09.846 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 20:30:09.848 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 20:30:09.849 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 柏林电影节颁奖典礼 已存在，跳过插入
2025-06-24 20:30:09.851 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:30:09.855 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 20:30:09.857 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:30:09.861 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 张艺谋 -> 柏林电影节颁奖典礼 [获奖]
2025-06-24 20:30:09.861 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[获奖]--> 柏林电影节颁奖典礼
2025-06-24 20:30:09.862 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:30:09.866 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 20:30:09.866 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 20:30:09.868 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 北京奥运会开幕式总导演 已存在，跳过插入
2025-06-24 20:30:09.871 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:30:09.881 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 20:30:09.884 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:30:09.886 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 张艺谋 -> 北京奥运会开幕式总导演 [担任]
2025-06-24 20:30:09.887 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[担任]--> 北京奥运会开幕式总导演
2025-06-24 20:30:09.890 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:30:09.892 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-24 20:30:09.893 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:30:09.897 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 20:30:09.902 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 电影节终身成就奖 (通过三元组提取)
2025-06-24 20:30:09.904 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:30:09.909 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:30:09.911 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:30:09.913 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 成龙 -> 电影节终身成就奖 [获得]
2025-06-24 20:30:09.913 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[获得]--> 电影节终身成就奖
2025-06-24 20:30:09.913 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 20:30:09.916 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 9838ms
2025-06-24 20:30:10.933 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 3, textLength: 56
2025-06-24 20:30:10.933 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 56, 参数: triples
2025-06-24 20:30:10.934 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 56，当前并发数: 1
2025-06-24 20:30:10.934 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 20:30:20.117 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 9183ms，响应长度: 477
2025-06-24 20:30:20.117 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 56
2025-06-24 20:30:20.122 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 477
2025-06-24 20:30:20.122 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "《红高粱》",
      "predicate": "获奖",
      "object": "金熊奖",
      "confidence": 0.95
    },
    {
      "subject": "《红高粱》",
      "predicate": "获奖地点",
      "object": "柏林电影节",
      "confidence": 0.95
    },
    {
      "subject": "《青花瓷》",
      "predicate": "演出",
      "object": "奥运会开幕式",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映",
      "object": "香港电影节",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:30:20.122 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "《红高粱》",
      "predicate": "获奖",
      "object": "金熊奖",
      "confidence": 0.95
    },
    {
      "subject": "《红高粱》",
      "predicate": "获奖地点",
      "object": "柏林电影节",
      "confidence": 0.95
    },
    {
      "subject": "《青花瓷》",
      "predicate": "演出",
      "object": "奥运会开幕式",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映",
      "object": "香港电影节",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:30:20.123 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 20:30:20.123 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-24 20:30:20.126 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 20:30:20.130 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 20:30:20.133 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《红高粱》 (通过三元组提取)
2025-06-24 20:30:20.133 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《红高粱》 --[获奖]--> 金熊奖
2025-06-24 20:30:20.135 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 20:30:20.137 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《红高粱》 已存在，跳过插入
2025-06-24 20:30:20.138 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 20:30:20.139 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 柏林电影节 已存在，跳过插入
2025-06-24 20:30:20.144 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 20:30:20.147 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-24 20:30:20.152 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:30:20.157 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 柏林电影节 -> 《红高粱》 [在_获奖地点]
2025-06-24 20:30:20.157 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《红高粱》 --[获奖地点]--> 柏林电影节
2025-06-24 20:30:20.158 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 20:30:20.161 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-24 20:30:20.162 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 20:30:20.163 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 奥运会开幕式 已存在，跳过插入
2025-06-24 20:30:20.165 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 20:30:20.168 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-24 20:30:20.171 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:30:20.174 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 奥运会开幕式 -> 《青花瓷》 [在_演出]
2025-06-24 20:30:20.174 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《青花瓷》 --[演出]--> 奥运会开幕式
2025-06-24 20:30:20.175 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 20:30:20.177 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《醉拳》 已存在，跳过插入
2025-06-24 20:30:20.178 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 20:30:20.179 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 香港电影节 已存在，跳过插入
2025-06-24 20:30:20.180 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 20:30:20.188 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-24 20:30:20.191 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:30:20.193 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 香港电影节 -> 《醉拳》 [在_首映]
2025-06-24 20:30:20.193 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《醉拳》 --[首映]--> 香港电影节
2025-06-24 20:30:20.193 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 20:30:20.199 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 9266ms
2025-06-24 20:30:21.217 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 4, textLength: 88
2025-06-24 20:30:21.218 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 88, 参数: triples
2025-06-24 20:30:21.218 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 88，当前并发数: 1
2025-06-24 20:30:21.218 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 20:30:35.259 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 14041ms，响应长度: 806
2025-06-24 20:30:35.259 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 88
2025-06-24 20:30:35.264 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 806
2025-06-24 20:30:35.264 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "主演",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映于",
      "object": "香港电影节",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "参加",
      "object": "电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "终身成就奖",
      "confidence": 0.95
    },
    {
      "subject": "李小龙",
      "predicate": "师父",
      "object": "成龙",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《龙争虎斗》",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:30:35.264 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "主演",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映于",
      "object": "香港电影节",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "参加",
      "object": "电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "终身成就奖",
      "confidence": 0.95
    },
    {
      "subject": "李小龙",
      "predicate": "师父",
      "object": "成龙",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《龙争虎斗》",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:30:35.266 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 20:30:35.266 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 7 个三元组，包括实体和关系保存
2025-06-24 20:30:35.268 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:30:35.274 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-24 20:30:35.275 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:30:35.279 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 《醉拳》 已存在，跳过插入
2025-06-24 20:30:35.281 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:30:35.286 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:30:35.290 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:30:35.292 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 成龙 -> 《醉拳》 [主演]
2025-06-24 20:30:35.293 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[主演]--> 《醉拳》
2025-06-24 20:30:35.294 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 20:30:35.297 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《醉拳》 已存在，跳过插入
2025-06-24 20:30:35.298 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 20:30:35.300 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 香港电影节 已存在，跳过插入
2025-06-24 20:30:35.304 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 20:30:35.308 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-24 20:30:35.312 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:30:35.313 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 香港电影节 -> 《醉拳》 [在_首映于]
2025-06-24 20:30:35.314 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《醉拳》 --[首映于]--> 香港电影节
2025-06-24 20:30:35.316 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:30:35.319 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-24 20:30:35.323 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 20:30:35.326 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 电影节颁奖典礼 已存在，跳过插入
2025-06-24 20:30:35.327 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:30:35.329 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 20:30:35.333 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:30:35.334 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 成龙 -> 电影节颁奖典礼 [参加]
2025-06-24 20:30:35.334 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[参加]--> 电影节颁奖典礼
2025-06-24 20:30:35.335 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:30:35.337 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-24 20:30:35.338 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:30:35.339 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 终身成就奖 已存在，跳过插入
2025-06-24 20:30:35.343 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:30:35.347 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:30:35.351 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:30:35.353 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 成龙 -> 终身成就奖 [获得]
2025-06-24 20:30:35.353 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[获得]--> 终身成就奖
2025-06-24 20:30:35.354 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:30:35.356 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 20:30:35.357 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 李小龙 (通过三元组提取)
2025-06-24 20:30:35.359 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:30:35.361 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-24 20:30:35.363 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:30:35.366 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:30:35.368 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:30:35.370 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 李小龙 -> 成龙 [师父]
2025-06-24 20:30:35.370 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 李小龙 --[师父]--> 成龙
2025-06-24 20:30:35.371 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 20:30:35.373 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 20:30:35.375 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 功夫电影节 (通过三元组提取)
2025-06-24 20:30:35.376 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 20:30:35.378 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《醉拳》 已存在，跳过插入
2025-06-24 20:30:35.379 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 20:30:35.381 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-24 20:30:35.383 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:30:35.384 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系: 功夫电影节 -> 《醉拳》 [展映]
2025-06-24 20:30:35.384 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 功夫电影节 --[展映]--> 《醉拳》
2025-06-24 20:30:35.385 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 20:30:35.386 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 功夫电影节 已存在，跳过插入
2025-06-24 20:30:35.387 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:30:35.389 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 20:30:35.390 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 《龙争虎斗》 (通过三元组提取)
2025-06-24 20:30:35.394 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:30:35.396 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 20:30:35.398 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:30:35.399 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系(反向): 《龙争虎斗》 -> 功夫电影节 [参与_展映]
2025-06-24 20:30:35.399 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 功夫电影节 --[展映]--> 《龙争虎斗》
2025-06-24 20:30:35.399 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 20:30:35.403 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 14186ms
2025-06-24 20:30:35.414 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1, textLength: 25
2025-06-24 20:30:35.414 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 25, 参数: triples
2025-06-24 20:30:35.414 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 25，当前并发数: 1
2025-06-24 20:30:35.414 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 20:30:42.229 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 6815ms，响应长度: 248
2025-06-24 20:30:42.230 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 25
2025-06-24 20:30:42.233 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 248
2025-06-24 20:30:42.233 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语流行音乐歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "创作",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:30:42.233 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语流行音乐歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "创作",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:30:42.235 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 20:30:42.235 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组，包括实体和关系保存
2025-06-24 20:30:42.239 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:30:42.242 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-24 20:30:42.243 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:30:42.247 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 20:30:42.251 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 华语流行音乐歌手 (通过三元组提取)
2025-06-24 20:30:42.255 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:30:42.263 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:30:42.266 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:30:42.267 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 周杰伦 -> 华语流行音乐歌手 [职业]
2025-06-24 20:30:42.267 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[职业]--> 华语流行音乐歌手
2025-06-24 20:30:42.269 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:30:42.277 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-24 20:30:42.278 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 20:30:42.281 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-24 20:30:42.282 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:30:42.289 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-24 20:30:42.292 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:30:42.294 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 周杰伦 -> 《青花瓷》 [创作]
2025-06-24 20:30:42.294 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[创作]--> 《青花瓷》
2025-06-24 20:30:42.294 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 20:30:42.298 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 6884ms
2025-06-24 20:30:43.320 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 3, textLength: 42
2025-06-24 20:30:43.320 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 42, 参数: triples
2025-06-24 20:30:43.321 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 42，当前并发数: 1
2025-06-24 20:30:43.321 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-24 20:30:51.975 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 8654ms，响应长度: 360
2025-06-24 20:30:51.975 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 42
2025-06-24 20:30:51.980 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 360
2025-06-24 20:30:51.980 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语流行音乐歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "创作",
      "object": "《青花瓷》",
      "confidence": 0.95
    },
    {
      "subject": "《青花瓷》",
      "predicate": "获奖",
      "object": "金曲奖",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:30:51.980 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语流行音乐歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "创作",
      "object": "《青花瓷》",
      "confidence": 0.95
    },
    {
      "subject": "《青花瓷》",
      "predicate": "获奖",
      "object": "金曲奖",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:30:51.983 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 20:30:51.983 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-24 20:30:51.986 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:30:51.993 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-24 20:30:51.994 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:30:51.996 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 华语流行音乐歌手 已存在，跳过插入
2025-06-24 20:30:51.997 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:30:52.002 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:30:52.007 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:30:52.010 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 周杰伦 -> 华语流行音乐歌手 [职业]
2025-06-24 20:30:52.010 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[职业]--> 华语流行音乐歌手
2025-06-24 20:30:52.011 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:30:52.013 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-24 20:30:52.014 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 20:30:52.016 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-24 20:30:52.018 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:30:52.032 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-24 20:30:52.043 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:30:52.046 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 周杰伦 -> 《青花瓷》 [创作]
2025-06-24 20:30:52.046 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[创作]--> 《青花瓷》
2025-06-24 20:30:52.048 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 20:30:52.050 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-24 20:30:52.050 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《青花瓷》 --[获奖]--> 金曲奖
2025-06-24 20:30:52.050 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 20:30:52.054 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 8734ms
2025-06-24 20:32:01.262 [ForkJoinPool.commonPool-worker-2] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-24 20:32:01.270 [ForkJoinPool.commonPool-worker-2] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-24 20:32:01.276 [ForkJoinPool.commonPool-worker-2] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-24 20:32:01.282 [ForkJoinPool.commonPool-worker-2] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-24 20:32:01.291 [ForkJoinPool.commonPool-worker-2] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-24 20:32:01.301 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1, textLength: 38
2025-06-24 20:32:01.301 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 38, 参数: triples
2025-06-24 20:32:01.304 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 351
2025-06-24 20:32:01.304 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "合作伙伴",
      "object": "巩俐",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "配偶",
      "object": "陈婷",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "好友",
      "object": "梁朝伟",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:32:01.304 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "合作伙伴",
      "object": "巩俐",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "配偶",
      "object": "陈婷",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "好友",
      "object": "梁朝伟",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:32:01.305 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 20:32:01.305 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-24 20:32:01.306 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:32:01.309 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 20:32:01.312 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 张艺谋 (通过三元组提取)
2025-06-24 20:32:01.315 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:32:01.317 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 20:32:01.319 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 巩俐 (通过三元组提取)
2025-06-24 20:32:01.320 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:32:01.323 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:32:01.325 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:32:01.327 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 巩俐 [合作伙伴]
2025-06-24 20:32:01.327 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[合作伙伴]--> 巩俐
2025-06-24 20:32:01.328 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:32:01.330 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 20:32:01.330 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:32:01.332 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 20:32:01.334 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 陈婷 (通过三元组提取)
2025-06-24 20:32:01.334 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:32:01.336 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:32:01.338 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:32:01.339 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 陈婷 [配偶]
2025-06-24 20:32:01.339 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[配偶]--> 陈婷
2025-06-24 20:32:01.340 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:32:01.342 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 20:32:01.343 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 刘德华 (通过三元组提取)
2025-06-24 20:32:01.344 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:32:01.346 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 20:32:01.347 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 梁朝伟 (通过三元组提取)
2025-06-24 20:32:01.350 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:32:01.354 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:32:01.356 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:32:01.358 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 梁朝伟 [好友]
2025-06-24 20:32:01.358 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[好友]--> 梁朝伟
2025-06-24 20:32:01.358 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 20:32:01.361 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 60ms
2025-06-24 20:32:02.387 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1, textLength: 40
2025-06-24 20:32:02.387 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 40, 参数: triples
2025-06-24 20:32:02.390 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 356
2025-06-24 20:32:02.390 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "巩俐",
      "predicate": "主演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "演唱",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:32:02.390 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "巩俐",
      "predicate": "主演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "演唱",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:32:02.391 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 20:32:02.391 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-24 20:32:02.392 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:32:02.395 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 20:32:02.396 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:32:02.398 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 20:32:02.401 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 《红高粱》 (通过三元组提取)
2025-06-24 20:32:02.402 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:32:02.405 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:32:02.407 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:32:02.409 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 《红高粱》 [导演]
2025-06-24 20:32:02.410 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《红高粱》
2025-06-24 20:32:02.410 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:32:02.412 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 巩俐 已存在，跳过插入
2025-06-24 20:32:02.413 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:32:02.414 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-24 20:32:02.415 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:32:02.417 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:32:02.419 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:32:02.421 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 巩俐 -> 《红高粱》 [主演]
2025-06-24 20:32:02.421 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 巩俐 --[主演]--> 《红高粱》
2025-06-24 20:32:02.422 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:32:02.425 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 20:32:02.429 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 周杰伦 (通过三元组提取)
2025-06-24 20:32:02.429 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 20:32:02.434 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 20:32:02.437 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《青花瓷》 (通过三元组提取)
2025-06-24 20:32:02.438 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:32:02.440 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-24 20:32:02.441 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:32:02.443 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 周杰伦 -> 《青花瓷》 [演唱]
2025-06-24 20:32:02.443 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[演唱]--> 《青花瓷》
2025-06-24 20:32:02.443 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 20:32:02.447 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 61ms
2025-06-24 20:32:03.469 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1, textLength: 47
2025-06-24 20:32:03.470 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 47, 参数: triples
2025-06-24 20:32:03.473 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 264
2025-06-24 20:32:03.473 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "第41届柏林国际电影节",
      "predicate": "举行时间",
      "object": "1991年",
      "confidence": 0.95
    },
    {
      "subject": "2008年北京奥运会开幕式",
      "predicate": "举办地点",
      "object": "鸟巢",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:32:03.473 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "第41届柏林国际电影节",
      "predicate": "举行时间",
      "object": "1991年",
      "confidence": 0.95
    },
    {
      "subject": "2008年北京奥运会开幕式",
      "predicate": "举办地点",
      "object": "鸟巢",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:32:03.476 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 20:32:03.476 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组，包括实体和关系保存
2025-06-24 20:32:03.478 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 20:32:03.485 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 20:32:03.490 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 第41届柏林国际电影节 (通过三元组提取)
2025-06-24 20:32:03.497 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 20:32:03.501 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 20:32:03.504 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 1991年 (通过三元组提取)
2025-06-24 20:32:03.504 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 第41届柏林国际电影节 --[举行时间]--> 1991年
2025-06-24 20:32:03.506 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 20:32:03.512 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 20:32:03.515 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 2008年北京奥运会开幕式 (通过三元组提取)
2025-06-24 20:32:03.515 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 2008年北京奥运会开幕式 --[举办地点]--> 鸟巢
2025-06-24 20:32:03.515 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 20:32:03.521 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 52ms
2025-06-24 20:32:03.533 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 3, textLength: 58
2025-06-24 20:32:03.533 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 58, 参数: triples
2025-06-24 20:32:03.534 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 485
2025-06-24 20:32:03.535 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "参加",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "获奖",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "担任",
      "object": "北京奥运会开幕式总导演",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "电影节终身成就奖",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:32:03.535 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "参加",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "获奖",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "担任",
      "object": "北京奥运会开幕式总导演",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "电影节终身成就奖",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:32:03.541 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 20:32:03.541 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-24 20:32:03.543 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:32:03.545 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 20:32:03.546 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 20:32:03.548 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 20:32:03.549 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 柏林电影节颁奖典礼 (通过三元组提取)
2025-06-24 20:32:03.550 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:32:03.553 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 20:32:03.554 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:32:03.557 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 张艺谋 -> 柏林电影节颁奖典礼 [参加]
2025-06-24 20:32:03.557 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[参加]--> 柏林电影节颁奖典礼
2025-06-24 20:32:03.557 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:32:03.559 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 20:32:03.559 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 20:32:03.561 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 事件 柏林电影节颁奖典礼 已存在，跳过插入
2025-06-24 20:32:03.562 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:32:03.563 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 20:32:03.567 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:32:03.568 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 张艺谋 -> 柏林电影节颁奖典礼 [获奖]
2025-06-24 20:32:03.568 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[获奖]--> 柏林电影节颁奖典礼
2025-06-24 20:32:03.570 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:32:03.571 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-24 20:32:03.572 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 20:32:03.573 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 20:32:03.575 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 北京奥运会开幕式总导演 (通过三元组提取)
2025-06-24 20:32:03.575 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:32:03.577 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 20:32:03.581 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:32:03.584 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 张艺谋 -> 北京奥运会开幕式总导演 [担任]
2025-06-24 20:32:03.584 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[担任]--> 北京奥运会开幕式总导演
2025-06-24 20:32:03.585 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:32:03.587 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 20:32:03.589 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 成龙 (通过三元组提取)
2025-06-24 20:32:03.589 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:32:03.590 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 20:32:03.592 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 电影节终身成就奖 (通过三元组提取)
2025-06-24 20:32:03.593 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:32:03.594 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:32:03.596 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:32:03.598 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 成龙 -> 电影节终身成就奖 [获得]
2025-06-24 20:32:03.598 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[获得]--> 电影节终身成就奖
2025-06-24 20:32:03.598 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 20:32:03.601 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 68ms
2025-06-24 20:32:04.619 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 3, textLength: 56
2025-06-24 20:32:04.619 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 56, 参数: triples
2025-06-24 20:32:04.624 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 477
2025-06-24 20:32:04.624 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "《红高粱》",
      "predicate": "获奖",
      "object": "金熊奖",
      "confidence": 0.95
    },
    {
      "subject": "《红高粱》",
      "predicate": "获奖地点",
      "object": "柏林电影节",
      "confidence": 0.95
    },
    {
      "subject": "《青花瓷》",
      "predicate": "演出",
      "object": "奥运会开幕式",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映",
      "object": "香港电影节",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:32:04.624 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "《红高粱》",
      "predicate": "获奖",
      "object": "金熊奖",
      "confidence": 0.95
    },
    {
      "subject": "《红高粱》",
      "predicate": "获奖地点",
      "object": "柏林电影节",
      "confidence": 0.95
    },
    {
      "subject": "《青花瓷》",
      "predicate": "演出",
      "object": "奥运会开幕式",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映",
      "object": "香港电影节",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:32:04.625 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 20:32:04.626 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-24 20:32:04.628 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 20:32:04.632 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 20:32:04.638 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《红高粱》 (通过三元组提取)
2025-06-24 20:32:04.638 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《红高粱》 --[获奖]--> 金熊奖
2025-06-24 20:32:04.639 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 20:32:04.644 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《红高粱》 已存在，跳过插入
2025-06-24 20:32:04.645 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 20:32:04.648 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 20:32:04.650 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 柏林电影节 (通过三元组提取)
2025-06-24 20:32:04.651 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 20:32:04.653 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-24 20:32:04.655 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:32:04.658 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 柏林电影节 -> 《红高粱》 [在_获奖地点]
2025-06-24 20:32:04.658 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《红高粱》 --[获奖地点]--> 柏林电影节
2025-06-24 20:32:04.658 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 20:32:04.661 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-24 20:32:04.662 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 20:32:04.665 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 20:32:04.669 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 奥运会开幕式 (通过三元组提取)
2025-06-24 20:32:04.670 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 20:32:04.674 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-24 20:32:04.676 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:32:04.678 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 奥运会开幕式 -> 《青花瓷》 [在_演出]
2025-06-24 20:32:04.678 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《青花瓷》 --[演出]--> 奥运会开幕式
2025-06-24 20:32:04.679 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 20:32:04.680 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 20:32:04.682 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《醉拳》 (通过三元组提取)
2025-06-24 20:32:04.685 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 20:32:04.688 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 20:32:04.689 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 香港电影节 (通过三元组提取)
2025-06-24 20:32:04.690 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 20:32:04.692 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-24 20:32:04.693 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:32:04.694 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 香港电影节 -> 《醉拳》 [在_首映]
2025-06-24 20:32:04.694 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《醉拳》 --[首映]--> 香港电影节
2025-06-24 20:32:04.694 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 20:32:04.698 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 79ms
2025-06-24 20:32:05.716 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 4, textLength: 88
2025-06-24 20:32:05.716 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 88, 参数: triples
2025-06-24 20:32:05.721 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 806
2025-06-24 20:32:05.721 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "主演",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映于",
      "object": "香港电影节",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "参加",
      "object": "电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "终身成就奖",
      "confidence": 0.95
    },
    {
      "subject": "李小龙",
      "predicate": "师父",
      "object": "成龙",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《龙争虎斗》",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:32:05.721 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "主演",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映于",
      "object": "香港电影节",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "参加",
      "object": "电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "终身成就奖",
      "confidence": 0.95
    },
    {
      "subject": "李小龙",
      "predicate": "师父",
      "object": "成龙",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《龙争虎斗》",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:32:05.723 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 20:32:05.723 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 7 个三元组，包括实体和关系保存
2025-06-24 20:32:05.724 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:32:05.727 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-24 20:32:05.728 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:32:05.731 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 20:32:05.735 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 《醉拳》 (通过三元组提取)
2025-06-24 20:32:05.736 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:32:05.738 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:32:05.743 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:32:05.746 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 成龙 -> 《醉拳》 [主演]
2025-06-24 20:32:05.746 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[主演]--> 《醉拳》
2025-06-24 20:32:05.747 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 20:32:05.748 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《醉拳》 已存在，跳过插入
2025-06-24 20:32:05.749 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 20:32:05.750 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 事件 香港电影节 已存在，跳过插入
2025-06-24 20:32:05.752 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 20:32:05.755 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-24 20:32:05.757 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:32:05.758 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 香港电影节 -> 《醉拳》 [在_首映于]
2025-06-24 20:32:05.758 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《醉拳》 --[首映于]--> 香港电影节
2025-06-24 20:32:05.760 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:32:05.762 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-24 20:32:05.762 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 20:32:05.764 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 20:32:05.766 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 电影节颁奖典礼 (通过三元组提取)
2025-06-24 20:32:05.770 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:32:05.775 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 20:32:05.778 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:32:05.779 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 成龙 -> 电影节颁奖典礼 [参加]
2025-06-24 20:32:05.779 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[参加]--> 电影节颁奖典礼
2025-06-24 20:32:05.781 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:32:05.783 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-24 20:32:05.784 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:32:05.785 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 20:32:05.788 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 终身成就奖 (通过三元组提取)
2025-06-24 20:32:05.789 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:32:05.792 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:32:05.796 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:32:05.798 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 成龙 -> 终身成就奖 [获得]
2025-06-24 20:32:05.798 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[获得]--> 终身成就奖
2025-06-24 20:32:05.800 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:32:05.802 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 20:32:05.807 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 李小龙 (通过三元组提取)
2025-06-24 20:32:05.808 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:32:05.812 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-24 20:32:05.813 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:32:05.818 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:32:05.821 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:32:05.823 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 李小龙 -> 成龙 [师父]
2025-06-24 20:32:05.823 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 李小龙 --[师父]--> 成龙
2025-06-24 20:32:05.824 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 20:32:05.825 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-24 20:32:05.827 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 功夫电影节 (通过三元组提取)
2025-06-24 20:32:05.827 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 20:32:05.829 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《醉拳》 已存在，跳过插入
2025-06-24 20:32:05.829 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 20:32:05.831 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-24 20:32:05.833 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:32:05.836 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系: 功夫电影节 -> 《醉拳》 [展映]
2025-06-24 20:32:05.836 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 功夫电影节 --[展映]--> 《醉拳》
2025-06-24 20:32:05.837 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-24 20:32:05.844 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 事件 功夫电影节 已存在，跳过插入
2025-06-24 20:32:05.845 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:32:05.853 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 20:32:05.856 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 《龙争虎斗》 (通过三元组提取)
2025-06-24 20:32:05.857 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:32:05.859 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-24 20:32:05.860 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:32:05.862 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系(反向): 《龙争虎斗》 -> 功夫电影节 [参与_展映]
2025-06-24 20:32:05.862 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 功夫电影节 --[展映]--> 《龙争虎斗》
2025-06-24 20:32:05.862 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 20:32:05.865 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 149ms
2025-06-24 20:32:05.876 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1, textLength: 25
2025-06-24 20:32:05.876 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 25, 参数: triples
2025-06-24 20:32:05.878 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 248
2025-06-24 20:32:05.878 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语流行音乐歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "创作",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:32:05.878 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语流行音乐歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "创作",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:32:05.879 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 20:32:05.879 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组，包括实体和关系保存
2025-06-24 20:32:05.880 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:32:05.882 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-24 20:32:05.883 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:32:05.885 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-24 20:32:05.887 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 华语流行音乐歌手 (通过三元组提取)
2025-06-24 20:32:05.888 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:32:05.890 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:32:05.891 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:32:05.893 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 周杰伦 -> 华语流行音乐歌手 [职业]
2025-06-24 20:32:05.893 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[职业]--> 华语流行音乐歌手
2025-06-24 20:32:05.893 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:32:05.895 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-24 20:32:05.895 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 20:32:05.896 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-24 20:32:05.896 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:32:05.901 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-24 20:32:05.903 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:32:05.905 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 周杰伦 -> 《青花瓷》 [创作]
2025-06-24 20:32:05.905 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[创作]--> 《青花瓷》
2025-06-24 20:32:05.905 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 20:32:05.908 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 32ms
2025-06-24 20:32:06.927 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 3, textLength: 42
2025-06-24 20:32:06.927 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始文本提取，输入长度: 42, 参数: triples
2025-06-24 20:32:06.931 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 360
2025-06-24 20:32:06.931 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语流行音乐歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "创作",
      "object": "《青花瓷》",
      "confidence": 0.95
    },
    {
      "subject": "《青花瓷》",
      "predicate": "获奖",
      "object": "金曲奖",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:32:06.931 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语流行音乐歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "创作",
      "object": "《青花瓷》",
      "confidence": 0.95
    },
    {
      "subject": "《青花瓷》",
      "predicate": "获奖",
      "object": "金曲奖",
      "confidence": 0.95
    }
  ]
}
2025-06-24 20:32:06.932 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-24 20:32:06.932 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-24 20:32:06.935 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:32:06.938 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-24 20:32:06.939 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:32:06.941 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 华语流行音乐歌手 已存在，跳过插入
2025-06-24 20:32:06.942 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:32:06.946 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:32:06.949 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:32:06.951 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 周杰伦 -> 华语流行音乐歌手 [职业]
2025-06-24 20:32:06.951 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[职业]--> 华语流行音乐歌手
2025-06-24 20:32:06.953 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-24 20:32:06.955 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-24 20:32:06.956 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 20:32:06.957 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-24 20:32:06.958 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-24 20:32:06.960 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-24 20:32:06.962 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-24 20:32:06.963 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 周杰伦 -> 《青花瓷》 [创作]
2025-06-24 20:32:06.963 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[创作]--> 《青花瓷》
2025-06-24 20:32:06.963 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-24 20:32:06.964 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-24 20:32:06.964 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《青花瓷》 --[获奖]--> 金曲奖
2025-06-24 20:32:06.964 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-24 20:32:06.968 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 42ms
