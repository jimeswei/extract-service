2025-06-25 10:26:58.028 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 55526 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-25 10:26:58.030 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-25 10:26:59.131 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 10:26:59.133 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-25 10:26:59.257 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 120 ms. Found 7 JPA repository interfaces.
2025-06-25 10:26:59.278 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 10:26:59.279 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-25 10:26:59.298 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityCelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 10:26:59.298 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityEventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 10:26:59.298 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 10:26:59.298 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 10:26:59.299 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 10:26:59.299 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 10:26:59.299 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 10:26:59.299 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14 ms. Found 0 Redis repository interfaces.
2025-06-25 10:27:04.558 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@14ad42
2025-06-25 10:27:04.559 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@14ad42
2025-06-25 10:27:04.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@14ad42
2025-06-25 10:27:04.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@3cb173db
2025-06-25 10:27:04.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@3cb173db
2025-06-25 10:27:04.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@26712838
2025-06-25 10:27:04.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@26712838
2025-06-25 10:27:04.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@249a45fd
2025-06-25 10:27:04.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@249a45fd
2025-06-25 10:27:04.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@268f0ff3
2025-06-25 10:27:04.562 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@268f0ff3
2025-06-25 10:27:04.562 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@268f0ff3
2025-06-25 10:27:04.562 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@11978f52
2025-06-25 10:27:04.562 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@11978f52
2025-06-25 10:27:04.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@11978f52
2025-06-25 10:27:04.564 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@3e0855b0
2025-06-25 10:27:04.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@3e0855b0
2025-06-25 10:27:04.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@3ba5c4dd
2025-06-25 10:27:04.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@47fca3cc
2025-06-25 10:27:04.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@47fca3cc
2025-06-25 10:27:04.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@55746340
2025-06-25 10:27:04.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@6a0c7af6
2025-06-25 10:27:04.566 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@7f1ad846
2025-06-25 10:27:04.566 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@7f1ad846
2025-06-25 10:27:04.566 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@7f1ad846
2025-06-25 10:27:04.566 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-25 10:27:04.566 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-25 10:27:04.566 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-25 10:27:04.566 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-25 10:27:04.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-25 10:27:04.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-25 10:27:04.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-25 10:27:04.568 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-25 10:27:04.568 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-25 10:27:04.568 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-25 10:27:04.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-25 10:27:04.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-25 10:27:04.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-25 10:27:04.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-25 10:27:04.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-25 10:27:04.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-25 10:27:04.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-25 10:27:04.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-25 10:27:04.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-25 10:27:04.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-25 10:27:04.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 10:27:04.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 10:27:04.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-25 10:27:04.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-25 10:27:04.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-25 10:27:04.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-25 10:27:04.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@5e7e7a7e
2025-06-25 10:27:04.571 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-25 10:27:04.571 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-25 10:27:04.571 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-25 10:27:04.572 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@5abc5854
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@5abc5854
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-25 10:27:04.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-25 10:27:04.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-25 10:27:04.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-25 10:27:04.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-25 10:27:04.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-25 10:27:04.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-25 10:27:04.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@586486c
2025-06-25 10:27:04.575 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-25 10:27:04.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@7fbbdd8a
2025-06-25 10:27:04.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@7fbbdd8a
2025-06-25 10:27:04.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-25 10:27:04.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-25 10:27:04.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 10:27:04.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 10:27:04.577 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 10:27:04.577 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 10:27:04.577 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 10:27:04.577 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-25 10:27:04.579 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-25 10:27:04.579 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 10:27:04.579 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 10:27:04.579 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 10:27:04.579 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 10:27:04.579 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 10:27:04.579 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 10:27:04.580 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 10:27:04.580 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 10:27:04.581 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 10:27:04.581 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 10:27:04.581 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-25 10:27:04.581 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-25 10:27:04.582 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-25 10:27:04.583 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-25 10:27:04.583 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-25 10:27:04.583 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-25 10:27:04.585 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-25 10:27:04.585 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-25 10:27:04.585 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@2a259f6f
2025-06-25 10:27:04.585 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@2a259f6f
2025-06-25 10:27:04.585 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@7ccf6114
2025-06-25 10:27:04.589 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@60a99f3d
2025-06-25 10:27:04.589 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@60a99f3d
2025-06-25 10:27:04.590 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@6c06b1bc
2025-06-25 10:27:04.590 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@1d8dbf10
2025-06-25 10:27:04.591 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@e171f93
2025-06-25 10:27:04.592 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@4ad3969
2025-06-25 10:27:04.592 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@5d7ff311
2025-06-25 10:27:04.592 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@2d7aa291
2025-06-25 10:27:04.592 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@1ba7db2a
2025-06-25 10:27:04.592 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@762cdf46
2025-06-25 10:27:04.592 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@54e94de9
2025-06-25 10:27:04.686 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-25 10:27:04.699 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-25 10:27:04.802 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@48b9773b
2025-06-25 10:27:04.803 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-25 10:27:04.838 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-25 10:27:04.838 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-25 10:27:04.856 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@ce0bbd5) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@399fd710)
2025-06-25 10:27:04.856 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7c359808) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1f013047)
2025-06-25 10:27:04.856 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@16361e61) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@51566ce0)
2025-06-25 10:27:04.856 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1734b1a) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@17e6d07b)
2025-06-25 10:27:04.856 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@318511f0) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@53564a4c)
2025-06-25 10:27:04.856 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4866e0a7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@69a294d8)
2025-06-25 10:27:04.856 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@70b1028d) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@11d422fd)
2025-06-25 10:27:04.856 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6e489bb8) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1331d6fd)
2025-06-25 10:27:04.857 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6b6c0b7c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5b1f0f26)
2025-06-25 10:27:04.858 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-25 10:27:04.858 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-25 10:27:04.858 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-25 10:27:04.859 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 10:27:04.860 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 10:27:04.861 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@7169d668
2025-06-25 10:27:04.862 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@6c06b1bc`
2025-06-25 10:27:04.864 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-25 10:27:04.864 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-25 10:27:04.865 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 10:27:04.866 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 10:27:04.866 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 10:27:04.866 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 10:27:04.866 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 10:27:04.866 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 10:27:04.867 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 10:27:04.867 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 10:27:04.867 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 10:27:04.868 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@1cfb7450] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@478c84aa]
2025-06-25 10:27:05.522 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@1cfb7450] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@2f59cb6f]
2025-06-25 10:27:05.526 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@2f59cb6f] for TypeConfiguration
2025-06-25 10:27:05.527 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 10:27:06.187 [main] INFO  c.d.extract.controller.AsyncExtractController - AsyncExtractController initialized successfully
2025-06-25 10:27:06.192 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-25 10:27:06.655 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-25 10:27:06.783 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-25 10:27:06.820 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 2
2025-06-25 10:27:06.821 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-25 10:27:06.822 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-25 10:27:06.822 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-25 10:27:07.259 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-25 10:27:07.276 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 9.85 seconds (process running for 11.527)
2025-06-25 10:27:34.918 [reactor-http-nio-3] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: triples, textInputType: JSONArray, arraySize: 4
2025-06-25 10:27:34.938 [reactor-http-nio-3] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 157ms
2025-06-25 10:27:34.939 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-1
2025-06-25 10:27:34.946 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 88，当前并发数: 1
2025-06-25 10:27:34.947 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 10:27:53.902 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 18954ms，响应长度: 806
2025-06-25 10:27:53.909 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 88
2025-06-25 10:27:53.925 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 806
2025-06-25 10:27:53.925 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "主演",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映于",
      "object": "香港电影节",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "参加",
      "object": "电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "终身成就奖",
      "confidence": 0.95
    },
    {
      "subject": "李小龙",
      "predicate": "师父",
      "object": "成龙",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《龙争虎斗》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 10:27:53.926 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "主演",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映于",
      "object": "香港电影节",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "参加",
      "object": "电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "终身成就奖",
      "confidence": 0.95
    },
    {
      "subject": "李小龙",
      "predicate": "师父",
      "object": "成龙",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《龙争虎斗》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 10:27:53.928 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 10:27:53.928 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 7 个三元组，包括实体和关系保存
2025-06-25 10:27:53.998 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 10:27:54.015 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 10:27:54.015 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 10:27:54.018 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 《醉拳》 已存在，跳过插入
2025-06-25 10:27:54.023 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 10:27:54.034 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 10:27:54.046 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 10:27:54.053 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 成龙 -> 《醉拳》 [主演]
2025-06-25 10:27:54.053 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[主演]--> 《醉拳》
2025-06-25 10:27:54.055 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 10:27:54.057 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《醉拳》 已存在，跳过插入
2025-06-25 10:27:54.059 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 10:27:54.060 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 香港电影节 已存在，跳过插入
2025-06-25 10:27:54.061 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 10:27:54.065 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 10:27:54.068 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 10:27:54.071 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 香港电影节 -> 《醉拳》 [在_首映于]
2025-06-25 10:27:54.071 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《醉拳》 --[首映于]--> 香港电影节
2025-06-25 10:27:54.072 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 10:27:54.074 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 10:27:54.075 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 10:27:54.077 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 电影节颁奖典礼 已存在，跳过插入
2025-06-25 10:27:54.078 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 10:27:54.083 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 10:27:54.090 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 10:27:54.092 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 成龙 -> 电影节颁奖典礼 [参加]
2025-06-25 10:27:54.093 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[参加]--> 电影节颁奖典礼
2025-06-25 10:27:54.094 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 10:27:54.097 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 10:27:54.099 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 10:27:54.101 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 终身成就奖 已存在，跳过插入
2025-06-25 10:27:54.103 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 10:27:54.107 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 10:27:54.110 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 10:27:54.113 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 成龙 -> 终身成就奖 [获得]
2025-06-25 10:27:54.113 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[获得]--> 终身成就奖
2025-06-25 10:27:54.114 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 10:27:54.116 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 李小龙 已存在，跳过插入
2025-06-25 10:27:54.117 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 10:27:54.124 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 10:27:54.125 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 10:27:54.129 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 10:27:54.132 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 10:27:54.133 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 李小龙 -> 成龙 [师父]
2025-06-25 10:27:54.133 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 李小龙 --[师父]--> 成龙
2025-06-25 10:27:54.134 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 10:27:54.136 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 功夫电影节 已存在，跳过插入
2025-06-25 10:27:54.138 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 10:27:54.139 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《醉拳》 已存在，跳过插入
2025-06-25 10:27:54.141 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 10:27:54.144 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 10:27:54.146 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 10:27:54.148 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系: 功夫电影节 -> 《醉拳》 [展映]
2025-06-25 10:27:54.148 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 功夫电影节 --[展映]--> 《醉拳》
2025-06-25 10:27:54.150 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 10:27:54.152 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 功夫电影节 已存在，跳过插入
2025-06-25 10:27:54.153 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 10:27:54.154 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 《龙争虎斗》 已存在，跳过插入
2025-06-25 10:27:54.155 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 10:27:54.159 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 10:27:54.162 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 10:27:54.163 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系(反向): 《龙争虎斗》 -> 功夫电影节 [参与_展映]
2025-06-25 10:27:54.164 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 功夫电影节 --[展映]--> 《龙争虎斗》
2025-06-25 10:27:54.164 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 10:27:54.170 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成
2025-06-25 10:28:33.413 [SpringApplicationShutdownHook] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 10:28:33.414 [SpringApplicationShutdownHook] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@2f59cb6f] for TypeConfiguration
2025-06-25 10:28:33.414 [SpringApplicationShutdownHook] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@5640bf2d] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@2f59cb6f]
2025-06-25 10:28:33.417 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-25 10:28:33.425 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-25 11:22:29.205 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 56998 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-25 11:22:29.207 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-25 11:22:30.145 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 11:22:30.146 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-25 11:22:30.249 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 99 ms. Found 7 JPA repository interfaces.
2025-06-25 11:22:30.270 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 11:22:30.271 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-25 11:22:30.287 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityCelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:22:30.287 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityEventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:22:30.287 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:22:30.287 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:22:30.288 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:22:30.288 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:22:30.288 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:22:30.288 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 12 ms. Found 0 Redis repository interfaces.
2025-06-25 11:22:33.548 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 11:22:33.553 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 11:22:33.554 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 11:22:33.554 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 11:22:33.554 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 11:22:33.554 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 11:22:33.558 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 11:22:33.559 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 11:22:33.559 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 11:22:33.559 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 11:22:33.559 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 11:22:33.559 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 11:22:33.559 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 11:22:33.559 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 11:22:33.559 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 11:22:33.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 11:22:33.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 11:22:33.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-25 11:22:33.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 11:22:33.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 11:22:33.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-25 11:22:33.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 11:22:33.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 11:22:33.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 11:22:33.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 11:22:33.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 11:22:33.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 11:22:33.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 11:22:33.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 11:22:33.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 11:22:33.562 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 11:22:33.562 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 11:22:33.562 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 11:22:33.562 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@2a259f6f
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@7ccf6114
2025-06-25 11:22:33.564 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@7ccf6114
2025-06-25 11:22:33.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@3df3410a
2025-06-25 11:22:33.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-25 11:22:33.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-25 11:22:33.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-25 11:22:33.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@61d42275
2025-06-25 11:22:33.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@6614289a
2025-06-25 11:22:33.566 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@4148ce43
2025-06-25 11:22:33.566 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@46fb9581
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@46fb9581
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@6fcc0a1
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@6fcc0a1
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@416b681c
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@46d69ca4
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@5c9b5e62
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@3c826498
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@2633d09c
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@54f25b42
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@521c67f0
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@521c67f0
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@7d156f8f
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@7d156f8f
2025-06-25 11:22:33.568 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@451af781
2025-06-25 11:22:33.568 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@451af781
2025-06-25 11:22:33.568 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@3749c2b
2025-06-25 11:22:33.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@3749c2b
2025-06-25 11:22:33.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@32e65852
2025-06-25 11:22:33.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@32e65852
2025-06-25 11:22:33.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@64d93096
2025-06-25 11:22:33.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@76ed7573
2025-06-25 11:22:33.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@51df2a41
2025-06-25 11:22:33.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@51df2a41
2025-06-25 11:22:33.571 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@517bdce0
2025-06-25 11:22:33.571 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@7c0b0bd9
2025-06-25 11:22:33.572 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6150afc6
2025-06-25 11:22:33.572 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@49f50c8f
2025-06-25 11:22:33.572 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@49f50c8f
2025-06-25 11:22:33.572 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@46e6458d
2025-06-25 11:22:33.572 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6297cb4b
2025-06-25 11:22:33.572 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@65d6640
2025-06-25 11:22:33.572 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@65d6640
2025-06-25 11:22:33.572 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@672d8370
2025-06-25 11:22:33.572 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@672d8370
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@13137835
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@13137835
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@13137835
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@4f82248f
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@4f82248f
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@4f82248f
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@22002459
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@29bd056a
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@21e702b8
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@21e702b8
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@7f1fec57
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@7f1fec57
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@7f1fec57
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@5c9e3d01
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@1dc9f5ad
2025-06-25 11:22:33.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@4a2d66e
2025-06-25 11:22:33.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@4a2d66e
2025-06-25 11:22:33.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@4dffff9
2025-06-25 11:22:33.575 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@4dffff9
2025-06-25 11:22:33.575 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@4dffff9
2025-06-25 11:22:33.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@2904bc56
2025-06-25 11:22:33.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@2904bc56
2025-06-25 11:22:33.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@7bb25046
2025-06-25 11:22:33.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@7bb25046
2025-06-25 11:22:33.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@69b1e8f8
2025-06-25 11:22:33.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@69b1e8f8
2025-06-25 11:22:33.577 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@126af200
2025-06-25 11:22:33.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@126af200
2025-06-25 11:22:33.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@1e000a17
2025-06-25 11:22:33.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@1e000a17
2025-06-25 11:22:33.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@77d959f1
2025-06-25 11:22:33.580 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@1f3f434
2025-06-25 11:22:33.580 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@1f3f434
2025-06-25 11:22:33.581 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@38b54694
2025-06-25 11:22:33.584 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@7619fbe7
2025-06-25 11:22:33.585 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@39ead1b7
2025-06-25 11:22:33.585 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@27ec74a3
2025-06-25 11:22:33.585 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@35ff072c
2025-06-25 11:22:33.585 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@c0004b7
2025-06-25 11:22:33.585 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@63880be9
2025-06-25 11:22:33.586 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@27053257
2025-06-25 11:22:33.587 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@6a0e97fc
2025-06-25 11:22:33.671 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-25 11:22:33.684 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-25 11:22:33.782 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4aea57dc
2025-06-25 11:22:33.783 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-25 11:22:33.813 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-25 11:22:33.814 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-25 11:22:33.831 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@27d6467) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5bf1b528)
2025-06-25 11:22:33.831 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2c92f094) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1c3b221f)
2025-06-25 11:22:33.831 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@750c23a3) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@238280df)
2025-06-25 11:22:33.831 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@182fd26b) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5dc120ab)
2025-06-25 11:22:33.831 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@49c4118b) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7ef7f414)
2025-06-25 11:22:33.831 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@182dcd2b) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4c3d72fd)
2025-06-25 11:22:33.832 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@259c6ab8) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@640a6d4b)
2025-06-25 11:22:33.832 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1238a074) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@35b58254)
2025-06-25 11:22:33.832 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@73baf7f0) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@446dacf9)
2025-06-25 11:22:33.832 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-25 11:22:33.832 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-25 11:22:33.832 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-25 11:22:33.833 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 11:22:33.833 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 11:22:33.834 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@34d72f06
2025-06-25 11:22:33.835 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@38b54694`
2025-06-25 11:22:33.836 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-25 11:22:33.836 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-25 11:22:33.838 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:22:33.838 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:22:33.838 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:22:33.838 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:22:33.838 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:22:33.838 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:22:33.839 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:22:33.839 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:22:33.839 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:22:33.840 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@2ab39942] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@64186f60]
2025-06-25 11:22:34.506 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@2ab39942] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@60660d21]
2025-06-25 11:22:34.512 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@60660d21] for TypeConfiguration
2025-06-25 11:22:34.512 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 11:22:35.188 [main] INFO  c.d.extract.controller.AsyncExtractController - AsyncExtractController initialized successfully
2025-06-25 11:22:35.193 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-25 11:22:35.602 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-25 11:22:35.720 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-25 11:22:35.754 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 2
2025-06-25 11:22:35.754 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-25 11:22:35.755 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-25 11:22:35.756 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-25 11:22:36.143 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-25 11:22:36.159 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 7.545 seconds (process running for 8.175)
2025-06-25 11:24:48.412 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 57100 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-25 11:24:48.415 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-25 11:24:49.335 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 11:24:49.336 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-25 11:24:49.434 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 95 ms. Found 7 JPA repository interfaces.
2025-06-25 11:24:49.458 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 11:24:49.460 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-25 11:24:49.479 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityCelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:24:49.479 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityEventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:24:49.479 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:24:49.479 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:24:49.479 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:24:49.479 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:24:49.480 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:24:49.480 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 0 Redis repository interfaces.
2025-06-25 11:24:50.963 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 11:24:50.965 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 11:24:50.965 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 11:24:50.965 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-25 11:24:50.965 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-25 11:24:50.965 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-25 11:24:50.967 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-25 11:24:50.968 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-25 11:24:50.968 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-25 11:24:50.968 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-25 11:24:50.968 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-25 11:24:50.968 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-25 11:24:50.968 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 11:24:50.968 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 11:24:50.968 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 11:24:50.969 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-25 11:24:50.969 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-25 11:24:50.969 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-25 11:24:50.969 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@586486c
2025-06-25 11:24:50.970 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@586486c
2025-06-25 11:24:50.970 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-25 11:24:50.970 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@7fbbdd8a
2025-06-25 11:24:50.970 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-25 11:24:50.970 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-25 11:24:50.970 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-25 11:24:50.970 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-25 11:24:50.970 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-25 11:24:50.971 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-25 11:24:50.971 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 11:24:50.971 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 11:24:50.971 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 11:24:50.971 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 11:24:50.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 11:24:50.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 11:24:50.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 11:24:50.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 11:24:50.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 11:24:50.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 11:24:50.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 11:24:50.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 11:24:50.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 11:24:50.973 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 11:24:50.974 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 11:24:50.974 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 11:24:50.975 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-25 11:24:50.975 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-25 11:24:50.975 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-25 11:24:50.975 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-25 11:24:50.975 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 11:24:50.975 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 11:24:50.975 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 11:24:50.975 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-25 11:24:50.975 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 11:24:50.976 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 11:24:50.976 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 11:24:50.976 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 11:24:50.976 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 11:24:50.976 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 11:24:50.977 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 11:24:50.977 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-25 11:24:50.977 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-25 11:24:50.977 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-25 11:24:50.977 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-25 11:24:50.977 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@2a259f6f
2025-06-25 11:24:50.977 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@7ccf6114
2025-06-25 11:24:50.977 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@7ccf6114
2025-06-25 11:24:50.977 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@3df3410a
2025-06-25 11:24:50.977 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@3df3410a
2025-06-25 11:24:50.977 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-25 11:24:50.978 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-25 11:24:50.978 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@61d42275
2025-06-25 11:24:50.978 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@61d42275
2025-06-25 11:24:50.979 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@6614289a
2025-06-25 11:24:50.980 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@6614289a
2025-06-25 11:24:50.980 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@4148ce43
2025-06-25 11:24:50.980 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@46fb9581
2025-06-25 11:24:50.980 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@6fcc0a1
2025-06-25 11:24:50.980 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@6fcc0a1
2025-06-25 11:24:50.980 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@416b681c
2025-06-25 11:24:50.982 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@46d69ca4
2025-06-25 11:24:50.983 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5c9b5e62
2025-06-25 11:24:50.983 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@3c826498
2025-06-25 11:24:50.983 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@3c826498
2025-06-25 11:24:50.983 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@2633d09c
2025-06-25 11:24:50.983 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@54f25b42
2025-06-25 11:24:50.983 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@521c67f0
2025-06-25 11:24:50.984 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@521c67f0
2025-06-25 11:24:50.984 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@7d156f8f
2025-06-25 11:24:50.984 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@7d156f8f
2025-06-25 11:24:50.984 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@451af781
2025-06-25 11:24:50.984 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@451af781
2025-06-25 11:24:50.984 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@451af781
2025-06-25 11:24:50.984 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@3749c2b
2025-06-25 11:24:50.984 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@3749c2b
2025-06-25 11:24:50.984 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@3749c2b
2025-06-25 11:24:50.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@32e65852
2025-06-25 11:24:50.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@64d93096
2025-06-25 11:24:50.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@76ed7573
2025-06-25 11:24:50.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@76ed7573
2025-06-25 11:24:50.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@51df2a41
2025-06-25 11:24:50.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@51df2a41
2025-06-25 11:24:50.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@51df2a41
2025-06-25 11:24:50.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@517bdce0
2025-06-25 11:24:50.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@7c0b0bd9
2025-06-25 11:24:50.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@6150afc6
2025-06-25 11:24:50.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@6150afc6
2025-06-25 11:24:50.986 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@49f50c8f
2025-06-25 11:24:50.987 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@49f50c8f
2025-06-25 11:24:50.987 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@49f50c8f
2025-06-25 11:24:50.987 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@46e6458d
2025-06-25 11:24:50.988 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@46e6458d
2025-06-25 11:24:50.988 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@6297cb4b
2025-06-25 11:24:50.988 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@6297cb4b
2025-06-25 11:24:50.989 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@65d6640
2025-06-25 11:24:50.990 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@65d6640
2025-06-25 11:24:50.992 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@672d8370
2025-06-25 11:24:50.992 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@672d8370
2025-06-25 11:24:50.992 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@13137835
2025-06-25 11:24:50.992 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@13137835
2025-06-25 11:24:50.992 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@4f82248f
2025-06-25 11:24:50.995 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@627d35ff
2025-06-25 11:24:50.995 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@627d35ff
2025-06-25 11:24:50.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@6879e983
2025-06-25 11:24:50.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@196d684b
2025-06-25 11:24:50.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@45d38165
2025-06-25 11:24:50.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@1f3f434
2025-06-25 11:24:50.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@26612078
2025-06-25 11:24:50.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@54bc3bcf
2025-06-25 11:24:50.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@d3d5094
2025-06-25 11:24:50.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@13714753
2025-06-25 11:24:50.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@3c3cd7a5
2025-06-25 11:24:51.072 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-25 11:24:51.085 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-25 11:24:51.167 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@532ea86b
2025-06-25 11:24:51.168 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-25 11:24:51.202 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-25 11:24:51.202 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-25 11:24:51.217 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@55cb3b7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@497fd334)
2025-06-25 11:24:51.218 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@280c3dc0) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6f89ad03)
2025-06-25 11:24:51.218 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@f287a4e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3879feec)
2025-06-25 11:24:51.218 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@71d2261e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@53917c92)
2025-06-25 11:24:51.218 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1fa796a4) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@68de8522)
2025-06-25 11:24:51.218 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@8dcacf1) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@50f13494)
2025-06-25 11:24:51.218 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@73c09a98) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6f2bf657)
2025-06-25 11:24:51.218 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@27d6467) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5bf1b528)
2025-06-25 11:24:51.218 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2c92f094) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1c3b221f)
2025-06-25 11:24:51.219 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-25 11:24:51.219 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-25 11:24:51.219 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-25 11:24:51.220 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 11:24:51.220 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 11:24:51.221 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@1be4a7e3
2025-06-25 11:24:51.221 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@6879e983`
2025-06-25 11:24:51.222 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-25 11:24:51.222 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-25 11:24:51.224 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:24:51.224 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:24:51.224 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:24:51.225 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:24:51.225 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:24:51.225 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:24:51.225 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:24:51.225 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:24:51.225 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:24:51.226 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@221cdd87] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@4d66cb]
2025-06-25 11:24:51.835 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@221cdd87] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@40dcbf7]
2025-06-25 11:24:51.839 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@40dcbf7] for TypeConfiguration
2025-06-25 11:24:51.839 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 11:24:52.534 [main] INFO  c.d.extract.controller.AsyncExtractController - AsyncExtractController initialized successfully
2025-06-25 11:24:52.541 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-25 11:24:52.955 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-25 11:24:53.088 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-25 11:24:53.121 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 2
2025-06-25 11:24:53.121 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-25 11:24:53.122 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-25 11:24:53.123 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-25 11:24:53.503 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-25 11:24:53.520 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 5.671 seconds (process running for 6.232)
2025-06-25 11:27:12.815 [reactor-http-nio-4] INFO  c.datacenter.extract.controller.LongTextController - 🔍 收到长文本提取请求，文本长度: 91 字符
2025-06-25 11:27:12.832 [reactor-http-nio-4] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 91 字符
2025-06-25 11:27:12.834 [reactor-http-nio-4] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 11:27:12.834 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 91，当前并发数: 1
2025-06-25 11:27:12.834 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 11:27:13.115 [reactor-http-nio-4] ERROR com.datacenter.extract.service.AIModelCaller - 💥 AI调用异常: block()/blockFirst()/blockLast() are blocking, which is not supported in thread reactor-http-nio-4
java.lang.IllegalStateException: block()/blockFirst()/blockLast() are blocking, which is not supported in thread reactor-http-nio-4
	at reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:86)
	at reactor.core.publisher.Mono.block(Mono.java:1728)
	at com.datacenter.extract.service.AIModelCaller.callAI(AIModelCaller.java:94)
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:67)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.controller.LongTextController.extractLongText(LongTextController.java:53)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:27:13.120 [reactor-http-nio-4] ERROR com.datacenter.extract.service.SmartAIProvider - ❌ AI提取失败，类型: entities,relations，文本长度: 91
2025-06-25 11:27:13.120 [reactor-http-nio-4] ERROR com.datacenter.extract.service.SmartAIProvider - 💥 AI提取过程异常: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:77)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.controller.LongTextController.extractLongText(LongTextController.java:53)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:27:13.125 [reactor-http-nio-4] ERROR c.datacenter.extract.controller.LongTextController - ❌ 长文本提取失败，耗时: 310ms，错误: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:82)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.controller.LongTextController.extractLongText(LongTextController.java:53)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:27:13.186 [reactor-http-nio-5] INFO  c.datacenter.extract.controller.LongTextController - 🔍 收到长文本提取请求，文本长度: 1564 字符
2025-06-25 11:27:13.187 [reactor-http-nio-5] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 1564 字符
2025-06-25 11:27:13.187 [reactor-http-nio-5] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 11:27:13.187 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 1564，当前并发数: 1
2025-06-25 11:27:13.187 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 40秒
2025-06-25 11:27:13.191 [reactor-http-nio-5] ERROR com.datacenter.extract.service.AIModelCaller - 💥 AI调用异常: block()/blockFirst()/blockLast() are blocking, which is not supported in thread reactor-http-nio-5
java.lang.IllegalStateException: block()/blockFirst()/blockLast() are blocking, which is not supported in thread reactor-http-nio-5
	at reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:86)
	at reactor.core.publisher.Mono.block(Mono.java:1728)
	at com.datacenter.extract.service.AIModelCaller.callAI(AIModelCaller.java:94)
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:67)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.controller.LongTextController.extractLongText(LongTextController.java:53)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:27:13.192 [reactor-http-nio-5] ERROR com.datacenter.extract.service.SmartAIProvider - ❌ AI提取失败，类型: entities,relations，文本长度: 1564
2025-06-25 11:27:13.192 [reactor-http-nio-5] ERROR com.datacenter.extract.service.SmartAIProvider - 💥 AI提取过程异常: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:77)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.controller.LongTextController.extractLongText(LongTextController.java:53)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:27:13.192 [reactor-http-nio-5] ERROR c.datacenter.extract.controller.LongTextController - ❌ 长文本提取失败，耗时: 6ms，错误: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:82)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.controller.LongTextController.extractLongText(LongTextController.java:53)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:27:13.226 [reactor-http-nio-6] INFO  c.datacenter.extract.controller.LongTextController - 🔥 收到强制分批提取请求，文本长度: 306 字符
2025-06-25 11:27:13.226 [reactor-http-nio-6] INFO  com.datacenter.extract.service.LongTextProcessor - 🔍 开始处理长文本，长度: 306 字符
2025-06-25 11:27:13.227 [reactor-http-nio-6] INFO  com.datacenter.extract.service.LongTextProcessor - 📝 文本较短，直接处理
2025-06-25 11:27:13.227 [reactor-http-nio-6] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 306，当前并发数: 1
2025-06-25 11:27:13.228 [reactor-http-nio-6] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 11:27:13.231 [reactor-http-nio-6] ERROR com.datacenter.extract.service.AIModelCaller - 💥 AI调用异常: block()/blockFirst()/blockLast() are blocking, which is not supported in thread reactor-http-nio-6
java.lang.IllegalStateException: block()/blockFirst()/blockLast() are blocking, which is not supported in thread reactor-http-nio-6
	at reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:86)
	at reactor.core.publisher.Mono.block(Mono.java:1728)
	at com.datacenter.extract.service.AIModelCaller.callAI(AIModelCaller.java:94)
	at com.datacenter.extract.service.LongTextProcessor.processLongText(LongTextProcessor.java:58)
	at com.datacenter.extract.controller.LongTextController.forceBatchExtract(LongTextController.java:91)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:27:13.236 [reactor-http-nio-6] INFO  c.datacenter.extract.controller.LongTextController - ✅ 强制分批提取完成，耗时: 10ms
2025-06-25 11:27:13.270 [reactor-http-nio-9] INFO  com.datacenter.extract.service.SmartAIProvider - 🔥 开始缓存预热，文本长度: 16
2025-06-25 11:27:13.270 [reactor-http-nio-9] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 16 字符
2025-06-25 11:27:13.270 [reactor-http-nio-9] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 11:27:13.271 [reactor-http-nio-9] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 16，当前并发数: 1
2025-06-25 11:27:13.271 [reactor-http-nio-9] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 11:27:13.273 [reactor-http-nio-9] ERROR com.datacenter.extract.service.AIModelCaller - 💥 AI调用异常: block()/blockFirst()/blockLast() are blocking, which is not supported in thread reactor-http-nio-9
java.lang.IllegalStateException: block()/blockFirst()/blockLast() are blocking, which is not supported in thread reactor-http-nio-9
	at reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:86)
	at reactor.core.publisher.Mono.block(Mono.java:1728)
	at com.datacenter.extract.service.AIModelCaller.callAI(AIModelCaller.java:94)
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:67)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.service.SmartAIProvider.warmupCache(SmartAIProvider.java:170)
	at com.datacenter.extract.controller.LongTextController.warmupCache(LongTextController.java:159)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:27:13.273 [reactor-http-nio-9] ERROR com.datacenter.extract.service.SmartAIProvider - ❌ AI提取失败，类型: entities,relations，文本长度: 16
2025-06-25 11:27:13.273 [reactor-http-nio-9] ERROR com.datacenter.extract.service.SmartAIProvider - 💥 AI提取过程异常: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:77)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.service.SmartAIProvider.warmupCache(SmartAIProvider.java:170)
	at com.datacenter.extract.controller.LongTextController.warmupCache(LongTextController.java:159)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:27:13.274 [reactor-http-nio-9] WARN  com.datacenter.extract.service.SmartAIProvider - ⚠️  缓存预热失败: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-25 11:27:13.285 [reactor-http-nio-10] INFO  com.datacenter.extract.service.SmartAIProvider - 🧹 缓存已清理
2025-06-25 11:27:25.174 [reactor-http-nio-9] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 11903ms，响应长度: 240
2025-06-25 11:27:31.380 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 18546ms，响应长度: 812
2025-06-25 11:27:39.392 [reactor-http-nio-6] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 26163ms，响应长度: 1468
2025-06-25 11:27:51.777 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 38590ms，响应长度: 2481
2025-06-25 11:28:17.926 [reactor-http-nio-11] INFO  c.datacenter.extract.controller.LongTextController - 🔍 收到长文本提取请求，文本长度: 26 字符
2025-06-25 11:28:17.926 [reactor-http-nio-11] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 26 字符
2025-06-25 11:28:17.926 [reactor-http-nio-11] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 11:28:17.926 [reactor-http-nio-11] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 26，当前并发数: 1
2025-06-25 11:28:17.926 [reactor-http-nio-11] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 11:28:17.928 [reactor-http-nio-11] ERROR com.datacenter.extract.service.AIModelCaller - 💥 AI调用异常: block()/blockFirst()/blockLast() are blocking, which is not supported in thread reactor-http-nio-11
java.lang.IllegalStateException: block()/blockFirst()/blockLast() are blocking, which is not supported in thread reactor-http-nio-11
	at reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:86)
	at reactor.core.publisher.Mono.block(Mono.java:1728)
	at com.datacenter.extract.service.AIModelCaller.callAI(AIModelCaller.java:94)
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:67)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.controller.LongTextController.extractLongText(LongTextController.java:53)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:28:17.929 [reactor-http-nio-11] ERROR com.datacenter.extract.service.SmartAIProvider - ❌ AI提取失败，类型: entities,relations，文本长度: 26
2025-06-25 11:28:17.929 [reactor-http-nio-11] ERROR com.datacenter.extract.service.SmartAIProvider - 💥 AI提取过程异常: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:77)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.controller.LongTextController.extractLongText(LongTextController.java:53)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:28:17.929 [reactor-http-nio-11] ERROR c.datacenter.extract.controller.LongTextController - ❌ 长文本提取失败，耗时: 3ms，错误: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:82)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.controller.LongTextController.extractLongText(LongTextController.java:53)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:28:25.479 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 7552ms，响应长度: 353
2025-06-25 11:28:59.314 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-25 11:29:12.124 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1, textLength: 30
2025-06-25 11:29:12.130 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 30, 参数: triples
2025-06-25 11:29:12.130 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-1
2025-06-25 11:29:12.131 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 30 字符
2025-06-25 11:29:12.131 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 11:29:12.131 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 30，当前并发数: 1
2025-06-25 11:29:12.131 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 11:29:22.040 [reactor-http-nio-2] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 9909ms，响应长度: 353
2025-06-25 11:29:22.041 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 30，处理模式: 直接处理
2025-06-25 11:29:22.067 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 353
2025-06-25 11:29:22.068 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张三",
      "predicate": "职业",
      "object": "科学家",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "出生于",
      "object": "1980年",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "毕业于",
      "object": "清华大学",
      "confidence": 0.95
    }
  ]
}
2025-06-25 11:29:22.068 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张三",
      "predicate": "职业",
      "object": "科学家",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "出生于",
      "object": "1980年",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "毕业于",
      "object": "清华大学",
      "confidence": 0.95
    }
  ]
}
2025-06-25 11:29:22.071 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 11:29:22.071 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-25 11:29:22.149 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:29:22.180 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:29:22.192 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 张三 (通过三元组提取)
2025-06-25 11:29:22.195 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:29:22.197 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:29:22.199 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 科学家 (通过三元组提取)
2025-06-25 11:29:22.206 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:29:22.216 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:29:22.220 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 11:29:22.222 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 科学家 [职业]
2025-06-25 11:29:22.223 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[职业]--> 科学家
2025-06-25 11:29:22.225 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:29:22.232 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张三 已存在，跳过插入
2025-06-25 11:29:22.232 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:29:22.235 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:29:22.241 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 1980年 (通过三元组提取)
2025-06-25 11:29:22.242 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:29:22.247 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:29:22.250 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 11:29:22.254 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 1980年 [出生于]
2025-06-25 11:29:22.254 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[出生于]--> 1980年
2025-06-25 11:29:22.256 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:29:22.261 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:29:22.263 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 清华大学 (通过三元组提取)
2025-06-25 11:29:22.263 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[毕业于]--> 清华大学
2025-06-25 11:29:22.263 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 11:29:22.272 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成
2025-06-25 11:29:22.272 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 10240ms
2025-06-25 11:31:02.007 [reactor-http-nio-3] ERROR c.datacenter.extract.controller.LongTextController - ❌ 长文本提取失败，耗时: 0ms，错误: Cannot invoke "String.length()" because "textInput" is null
java.lang.NullPointerException: Cannot invoke "String.length()" because "textInput" is null
	at com.datacenter.extract.controller.LongTextController.extractLongText(LongTextController.java:50)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:32:10.618 [reactor-http-nio-4] ERROR c.datacenter.extract.controller.LongTextController - ❌ 长文本提取失败，耗时: 0ms，错误: Cannot invoke "String.length()" because "textInput" is null
java.lang.NullPointerException: Cannot invoke "String.length()" because "textInput" is null
	at com.datacenter.extract.controller.LongTextController.extractLongText(LongTextController.java:50)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:32:49.636 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 59217 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-25 11:32:49.639 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-25 11:32:50.567 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 11:32:50.568 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-25 11:32:50.674 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 102 ms. Found 7 JPA repository interfaces.
2025-06-25 11:32:50.696 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 11:32:50.697 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-25 11:32:50.714 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityCelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:32:50.715 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityEventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:32:50.715 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:32:50.715 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:32:50.715 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:32:50.715 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:32:50.715 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:32:50.715 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 13 ms. Found 0 Redis repository interfaces.
2025-06-25 11:32:54.277 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@3ba5c4dd
2025-06-25 11:32:54.280 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@3ba5c4dd
2025-06-25 11:32:54.280 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@3ba5c4dd
2025-06-25 11:32:54.280 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-25 11:32:54.280 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-25 11:32:54.280 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-25 11:32:54.280 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-25 11:32:54.282 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-25 11:32:54.284 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-25 11:32:54.284 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 11:32:54.285 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 11:32:54.285 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 11:32:54.285 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-25 11:32:54.285 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-25 11:32:54.285 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-25 11:32:54.285 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-25 11:32:54.286 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-25 11:32:54.286 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-25 11:32:54.286 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-25 11:32:54.286 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-25 11:32:54.286 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@5abc5854
2025-06-25 11:32:54.286 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-25 11:32:54.286 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-25 11:32:54.287 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-25 11:32:54.287 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-25 11:32:54.287 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-25 11:32:54.287 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-25 11:32:54.287 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-25 11:32:54.287 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-25 11:32:54.287 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-25 11:32:54.288 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-25 11:32:54.288 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-25 11:32:54.288 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-25 11:32:54.288 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-25 11:32:54.288 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-25 11:32:54.288 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-25 11:32:54.289 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-25 11:32:54.289 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 11:32:54.289 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 11:32:54.290 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-25 11:32:54.291 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-25 11:32:54.291 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-25 11:32:54.291 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-25 11:32:54.291 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-25 11:32:54.291 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-25 11:32:54.291 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-25 11:32:54.292 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-25 11:32:54.292 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@586486c
2025-06-25 11:32:54.292 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-25 11:32:54.292 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-25 11:32:54.294 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-25 11:32:54.294 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@7fbbdd8a
2025-06-25 11:32:54.294 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-25 11:32:54.294 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-25 11:32:54.294 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 11:32:54.294 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 11:32:54.294 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 11:32:54.294 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 11:32:54.295 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 11:32:54.295 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 11:32:54.295 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 11:32:54.295 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 11:32:54.295 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-25 11:32:54.295 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-25 11:32:54.295 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-25 11:32:54.295 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-25 11:32:54.295 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 11:32:54.295 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 11:32:54.296 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-25 11:32:54.296 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-25 11:32:54.296 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 11:32:54.296 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 11:32:54.296 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 11:32:54.297 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 11:32:54.298 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 11:32:54.298 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 11:32:54.298 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 11:32:54.299 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 11:32:54.300 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-25 11:32:54.300 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@2a259f6f
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@7ccf6114
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@3df3410a
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@3df3410a
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@61d42275
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@61d42275
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@61d42275
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@6614289a
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@6614289a
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@6614289a
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@4148ce43
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@46fb9581
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@6fcc0a1
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@6fcc0a1
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@416b681c
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@416b681c
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@416b681c
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@46d69ca4
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@5c9b5e62
2025-06-25 11:32:54.303 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@3c826498
2025-06-25 11:32:54.303 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@3c826498
2025-06-25 11:32:54.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@2633d09c
2025-06-25 11:32:54.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@2633d09c
2025-06-25 11:32:54.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@2633d09c
2025-06-25 11:32:54.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@54f25b42
2025-06-25 11:32:54.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@54f25b42
2025-06-25 11:32:54.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@521c67f0
2025-06-25 11:32:54.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@521c67f0
2025-06-25 11:32:54.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@7d156f8f
2025-06-25 11:32:54.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@7d156f8f
2025-06-25 11:32:54.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@451af781
2025-06-25 11:32:54.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@451af781
2025-06-25 11:32:54.305 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@3749c2b
2025-06-25 11:32:54.306 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@3749c2b
2025-06-25 11:32:54.306 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@32e65852
2025-06-25 11:32:54.308 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@762cdf46
2025-06-25 11:32:54.309 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@762cdf46
2025-06-25 11:32:54.309 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@27dc81be
2025-06-25 11:32:54.310 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@3595086b
2025-06-25 11:32:54.310 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@627d35ff
2025-06-25 11:32:54.312 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@7157413e
2025-06-25 11:32:54.312 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@3245efdb
2025-06-25 11:32:54.312 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@2f0e7fa8
2025-06-25 11:32:54.312 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@24d7657b
2025-06-25 11:32:54.312 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@6f428e6e
2025-06-25 11:32:54.312 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@72e49f6a
2025-06-25 11:32:54.392 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-25 11:32:54.404 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-25 11:32:54.492 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7852ab30
2025-06-25 11:32:54.494 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-25 11:32:54.527 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-25 11:32:54.527 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-25 11:32:54.542 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7120daa6) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6cbb6c41)
2025-06-25 11:32:54.542 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6787bd41) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@44c2e8a8)
2025-06-25 11:32:54.543 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3340ff7c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@42e4431)
2025-06-25 11:32:54.543 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5e198c40) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@dcdb883)
2025-06-25 11:32:54.543 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@39420d59) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4fbbd98c)
2025-06-25 11:32:54.543 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5dd227b7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3d3b852e)
2025-06-25 11:32:54.543 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@14ba7f15) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@55cb3b7)
2025-06-25 11:32:54.543 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@497fd334) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@280c3dc0)
2025-06-25 11:32:54.543 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6f89ad03) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@f287a4e)
2025-06-25 11:32:54.544 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-25 11:32:54.544 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-25 11:32:54.544 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-25 11:32:54.545 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 11:32:54.545 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 11:32:54.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@19f1f330
2025-06-25 11:32:54.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@27dc81be`
2025-06-25 11:32:54.547 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-25 11:32:54.548 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-25 11:32:54.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:32:54.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:32:54.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:32:54.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:32:54.550 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:32:54.550 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:32:54.550 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:32:54.550 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:32:54.550 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:32:54.551 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@35dc849b] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@276aa33f]
2025-06-25 11:32:55.149 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@35dc849b] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@292b7a02]
2025-06-25 11:32:55.154 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@292b7a02] for TypeConfiguration
2025-06-25 11:32:55.154 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 11:32:55.861 [main] INFO  c.d.extract.controller.AsyncExtractController - AsyncExtractController initialized successfully
2025-06-25 11:32:55.866 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-25 11:32:56.324 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-25 11:32:56.468 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-25 11:32:56.505 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 2
2025-06-25 11:32:56.505 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-25 11:32:56.506 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-25 11:32:56.506 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-25 11:32:56.914 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-25 11:32:56.928 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 7.805 seconds (process running for 8.356)
2025-06-25 11:34:02.435 [SpringApplicationShutdownHook] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 11:34:02.437 [SpringApplicationShutdownHook] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@292b7a02] for TypeConfiguration
2025-06-25 11:34:02.438 [SpringApplicationShutdownHook] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@a187bf5] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@292b7a02]
2025-06-25 11:34:02.440 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-25 11:34:02.451 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-25 11:40:34.258 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 59716 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-25 11:40:34.261 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-25 11:40:35.390 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 11:40:35.391 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-25 11:40:35.507 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 111 ms. Found 7 JPA repository interfaces.
2025-06-25 11:40:35.530 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 11:40:35.531 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-25 11:40:35.551 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityCelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:40:35.551 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityEventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:40:35.551 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:40:35.551 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:40:35.551 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:40:35.551 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:40:35.552 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:40:35.552 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 0 Redis repository interfaces.
2025-06-25 11:40:37.034 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1e23ee0e
2025-06-25 11:40:37.037 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1e23ee0e
2025-06-25 11:40:37.037 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@1e23ee0e
2025-06-25 11:40:37.037 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@5bccaedb
2025-06-25 11:40:37.037 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@5bccaedb
2025-06-25 11:40:37.037 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@67784537
2025-06-25 11:40:37.038 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@67784537
2025-06-25 11:40:37.040 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@17ec5e2a
2025-06-25 11:40:37.040 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@17ec5e2a
2025-06-25 11:40:37.040 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@52290e63
2025-06-25 11:40:37.040 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@52290e63
2025-06-25 11:40:37.040 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@52290e63
2025-06-25 11:40:37.040 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@6c2dd88b
2025-06-25 11:40:37.041 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@6c2dd88b
2025-06-25 11:40:37.041 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@6c2dd88b
2025-06-25 11:40:37.042 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@49d979c4
2025-06-25 11:40:37.042 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@49d979c4
2025-06-25 11:40:37.042 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@249a45fd
2025-06-25 11:40:37.042 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@268f0ff3
2025-06-25 11:40:37.042 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@268f0ff3
2025-06-25 11:40:37.043 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@11978f52
2025-06-25 11:40:37.043 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@3e0855b0
2025-06-25 11:40:37.043 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@484b5a21
2025-06-25 11:40:37.043 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@484b5a21
2025-06-25 11:40:37.043 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@484b5a21
2025-06-25 11:40:37.044 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@16e5344c
2025-06-25 11:40:37.044 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@16e5344c
2025-06-25 11:40:37.044 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@16e5344c
2025-06-25 11:40:37.044 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@3ba5c4dd
2025-06-25 11:40:37.044 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@3ba5c4dd
2025-06-25 11:40:37.044 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@3ba5c4dd
2025-06-25 11:40:37.045 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@47fca3cc
2025-06-25 11:40:37.045 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@47fca3cc
2025-06-25 11:40:37.045 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@47fca3cc
2025-06-25 11:40:37.045 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@55746340
2025-06-25 11:40:37.045 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@55746340
2025-06-25 11:40:37.046 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@55746340
2025-06-25 11:40:37.046 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@6a0c7af6
2025-06-25 11:40:37.046 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@6a0c7af6
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@7f1ad846
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@7f1ad846
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-25 11:40:37.049 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-25 11:40:37.050 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-25 11:40:37.050 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 11:40:37.050 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 11:40:37.050 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-25 11:40:37.050 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-25 11:40:37.050 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-25 11:40:37.050 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@5e7e7a7e
2025-06-25 11:40:37.051 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-25 11:40:37.051 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-25 11:40:37.051 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-25 11:40:37.051 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@5abc5854
2025-06-25 11:40:37.051 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-25 11:40:37.051 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-25 11:40:37.051 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-25 11:40:37.051 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-25 11:40:37.052 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-25 11:40:37.052 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-25 11:40:37.053 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-25 11:40:37.054 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-25 11:40:37.054 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-25 11:40:37.054 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-25 11:40:37.054 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-25 11:40:37.054 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 11:40:37.054 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-25 11:40:37.054 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-25 11:40:37.055 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-25 11:40:37.056 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-25 11:40:37.056 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-25 11:40:37.056 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@586486c
2025-06-25 11:40:37.056 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@586486c
2025-06-25 11:40:37.056 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-25 11:40:37.056 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@7fbbdd8a
2025-06-25 11:40:37.056 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-25 11:40:37.057 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-25 11:40:37.057 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-25 11:40:37.057 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-25 11:40:37.057 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 11:40:37.057 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 11:40:37.057 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 11:40:37.057 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 11:40:37.057 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 11:40:37.057 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 11:40:37.057 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 11:40:37.057 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 11:40:37.058 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 11:40:37.058 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 11:40:37.058 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 11:40:37.058 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 11:40:37.058 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 11:40:37.058 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-25 11:40:37.058 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-25 11:40:37.058 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-25 11:40:37.059 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-25 11:40:37.059 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 11:40:37.060 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 11:40:37.061 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 11:40:37.061 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-25 11:40:37.061 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-25 11:40:37.061 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 11:40:37.061 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 11:40:37.061 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 11:40:37.061 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 11:40:37.063 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 11:40:37.064 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 11:40:37.064 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 11:40:37.064 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 11:40:37.065 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 11:40:37.069 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@498b611e
2025-06-25 11:40:37.070 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@498b611e
2025-06-25 11:40:37.071 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@5e9ea380
2025-06-25 11:40:37.071 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@1e50eb3f
2025-06-25 11:40:37.071 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@12e3f4ae
2025-06-25 11:40:37.071 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@537451d5
2025-06-25 11:40:37.071 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@785d6a98
2025-06-25 11:40:37.071 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@614d7fbf
2025-06-25 11:40:37.071 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@6c06b1bc
2025-06-25 11:40:37.071 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@1d8dbf10
2025-06-25 11:40:37.071 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@e171f93
2025-06-25 11:40:37.147 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-25 11:40:37.158 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-25 11:40:37.249 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@becb93a
2025-06-25 11:40:37.250 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-25 11:40:37.277 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-25 11:40:37.278 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-25 11:40:37.293 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4ac0d49) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7c6ab057)
2025-06-25 11:40:37.293 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7ce4498f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1f7557fe)
2025-06-25 11:40:37.293 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7bd7d71c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@52963839)
2025-06-25 11:40:37.293 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@ce0bbd5) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@399fd710)
2025-06-25 11:40:37.294 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7c359808) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1f013047)
2025-06-25 11:40:37.294 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@16361e61) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@51566ce0)
2025-06-25 11:40:37.294 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1734b1a) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@17e6d07b)
2025-06-25 11:40:37.294 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@318511f0) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@53564a4c)
2025-06-25 11:40:37.294 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4866e0a7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@69a294d8)
2025-06-25 11:40:37.295 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-25 11:40:37.295 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-25 11:40:37.295 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-25 11:40:37.296 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 11:40:37.296 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 11:40:37.297 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@71cc0e35
2025-06-25 11:40:37.297 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@5e9ea380`
2025-06-25 11:40:37.299 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-25 11:40:37.299 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-25 11:40:37.300 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:40:37.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:40:37.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:40:37.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:40:37.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:40:37.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:40:37.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:40:37.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:40:37.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:40:37.302 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@221961af] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@32ddcca]
2025-06-25 11:40:37.934 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@221961af] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@186fc6e]
2025-06-25 11:40:37.939 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@186fc6e] for TypeConfiguration
2025-06-25 11:40:37.939 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 11:40:38.573 [main] INFO  c.d.extract.controller.AsyncExtractController - AsyncExtractController initialized successfully
2025-06-25 11:40:38.577 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-25 11:40:39.037 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-25 11:40:39.158 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-25 11:40:39.194 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 2
2025-06-25 11:40:39.194 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-25 11:40:39.195 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-25 11:40:39.195 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-25 11:40:39.588 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-25 11:40:39.605 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 5.956 seconds (process running for 6.56)
2025-06-25 11:40:45.088 [reactor-http-nio-4] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 11:40:45.111 [reactor-http-nio-4] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 144ms
2025-06-25 11:40:45.111 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-1, 文本长度: 82
2025-06-25 11:40:45.120 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 82 字符
2025-06-25 11:40:45.123 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 11:40:45.124 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 82，当前并发数: 1
2025-06-25 11:40:45.124 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 11:40:47.163 [reactor-http-nio-7] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 11:40:47.168 [reactor-http-nio-7] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 6ms
2025-06-25 11:40:47.168 [TextExtract-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-2, 文本长度: 427
2025-06-25 11:40:47.170 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 427 字符
2025-06-25 11:40:47.170 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 11:40:47.170 [TextExtract-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 427，当前并发数: 2
2025-06-25 11:40:47.170 [TextExtract-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 11:40:49.201 [reactor-http-nio-9] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 11:40:49.202 [reactor-http-nio-9] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 2ms
2025-06-25 11:40:49.202 [TextExtract-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-3, 文本长度: 1970
2025-06-25 11:40:49.203 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 1970 字符
2025-06-25 11:40:49.204 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 11:40:49.204 [TextExtract-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 1970，当前并发数: 3
2025-06-25 11:40:49.205 [TextExtract-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 40秒
2025-06-25 11:41:00.609 [reactor-http-nio-6] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 15485ms，响应长度: 694
2025-06-25 11:41:00.610 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 82，处理模式: 直接处理
2025-06-25 11:41:00.630 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 694
2025-06-25 11:41:00.631 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张三",
      "predicate": "职业",
      "object": "软件工程师",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "工作地点",
      "object": "北京的一家科技公司",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "负责",
      "object": "开发人工智能系统",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "李四",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "王五",
      "confidence": 0.95
    },
    {
      "subject": "张三的团队",
      "predicate": "开发",
      "object": "智能对话系统",
      "confidence": 0.95
    }
  ]
}
2025-06-25 11:41:00.631 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张三",
      "predicate": "职业",
      "object": "软件工程师",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "工作地点",
      "object": "北京的一家科技公司",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "负责",
      "object": "开发人工智能系统",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "李四",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "王五",
      "confidence": 0.95
    },
    {
      "subject": "张三的团队",
      "predicate": "开发",
      "object": "智能对话系统",
      "confidence": 0.95
    }
  ]
}
2025-06-25 11:41:00.632 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 11:41:00.633 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 6 个三元组，包括实体和关系保存
2025-06-25 11:41:00.696 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:41:00.713 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张三 已存在，跳过插入
2025-06-25 11:41:00.714 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:41:00.726 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:41:00.735 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 软件工程师 (通过三元组提取)
2025-06-25 11:41:00.742 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:41:00.752 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:41:00.754 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 11:41:00.757 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 软件工程师 [职业]
2025-06-25 11:41:00.757 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[职业]--> 软件工程师
2025-06-25 11:41:00.757 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[工作地点]--> 北京的一家科技公司
2025-06-25 11:41:00.758 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:41:00.761 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:41:00.768 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 开发人工智能系统 (通过三元组提取)
2025-06-25 11:41:00.769 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[负责]--> 开发人工智能系统
2025-06-25 11:41:00.769 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:41:00.772 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张三 已存在，跳过插入
2025-06-25 11:41:00.773 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:41:00.776 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:41:00.778 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 李四 (通过三元组提取)
2025-06-25 11:41:00.780 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:41:00.783 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:41:00.786 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 11:41:00.789 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 李四 [合作]
2025-06-25 11:41:00.789 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[合作]--> 李四
2025-06-25 11:41:00.790 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:41:00.795 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张三 已存在，跳过插入
2025-06-25 11:41:00.796 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:41:00.798 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:41:00.800 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 王五 (通过三元组提取)
2025-06-25 11:41:00.801 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:41:00.804 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:41:00.806 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 11:41:00.807 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 王五 [合作]
2025-06-25 11:41:00.807 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[合作]--> 王五
2025-06-25 11:41:00.807 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三的团队 --[开发]--> 智能对话系统
2025-06-25 11:41:00.808 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 11:41:00.813 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 82
2025-06-25 11:41:17.191 [parallel-3] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30021ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-25 11:41:17.192 [TextExtract-2] ERROR com.datacenter.extract.service.SmartAIProvider - ❌ AI提取失败，类型: entities,relations，文本长度: 427
2025-06-25 11:41:17.193 [TextExtract-2] ERROR com.datacenter.extract.service.SmartAIProvider - 💥 AI提取过程异常: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:77)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.service.TextExtractionService.processTextAsync(TextExtractionService.java:72)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.AsyncExecutionInterceptor.lambda$invoke$0(AsyncExecutionInterceptor.java:115)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:41:17.196 [TextExtract-2] ERROR c.datacenter.extract.service.TextExtractionService - 异步文本提取失败，错误: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-25 11:41:29.211 [parallel-4] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 40006ms，错误: Did not observe any item or terminal signal within 40000ms in 'flatMap' (and no fallback has been configured)
2025-06-25 11:41:29.212 [TextExtract-3] ERROR com.datacenter.extract.service.SmartAIProvider - ❌ AI提取失败，类型: entities,relations，文本长度: 1970
2025-06-25 11:41:29.212 [TextExtract-3] ERROR com.datacenter.extract.service.SmartAIProvider - 💥 AI提取过程异常: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:77)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.service.TextExtractionService.processTextAsync(TextExtractionService.java:72)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.AsyncExecutionInterceptor.lambda$invoke$0(AsyncExecutionInterceptor.java:115)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:41:29.213 [TextExtract-3] ERROR c.datacenter.extract.service.TextExtractionService - 异步文本提取失败，错误: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-25 11:41:43.059 [reactor-http-nio-11] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 11:41:43.059 [reactor-http-nio-11] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 0ms
2025-06-25 11:41:43.060 [TextExtract-4] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-4, 文本长度: 2386
2025-06-25 11:41:43.061 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 2386 字符
2025-06-25 11:41:43.061 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 📄 检测到长文本，启用分批处理模式
2025-06-25 11:41:43.061 [TextExtract-4] INFO  com.datacenter.extract.service.LongTextProcessor - 🔍 开始处理长文本，长度: 2386 字符
2025-06-25 11:41:43.062 [TextExtract-4] INFO  com.datacenter.extract.service.LongTextProcessor - 📊 文本分片完成，共 2 个分片
2025-06-25 11:41:43.063 [pool-5-thread-1] INFO  com.datacenter.extract.service.LongTextProcessor - ⚡ 处理分片 1 (1985 字符)
2025-06-25 11:41:43.063 [pool-5-thread-2] INFO  com.datacenter.extract.service.LongTextProcessor - ⚡ 处理分片 2 (587 字符)
2025-06-25 11:41:43.063 [pool-5-thread-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 1985，当前并发数: 1
2025-06-25 11:41:43.064 [pool-5-thread-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 587，当前并发数: 2
2025-06-25 11:41:43.064 [pool-5-thread-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 40秒
2025-06-25 11:41:43.064 [pool-5-thread-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 11:42:06.710 [reactor-http-nio-12] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 23646ms，响应长度: 1699
2025-06-25 11:42:23.069 [parallel-11] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 40004ms，错误: Did not observe any item or terminal signal within 40000ms in 'flatMap' (and no fallback has been configured)
2025-06-25 11:42:23.078 [TextExtract-4] INFO  com.datacenter.extract.service.LongTextProcessor - ✅ 分片合并完成，成功率: 2/2 ({:.1f}%)，提取三元组: 100.0
2025-06-25 11:42:23.080 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 2386，处理模式: 分批处理
2025-06-25 11:42:23.085 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 1686
2025-06-25 11:42:23.085 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"团队","predicate":"使用","object":"PyTorch","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"使用","object":"TensorFlow","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"使用","object":"Paddle","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"开发","object":"分布式训练系统","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"签署","object":"技术转让协议","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"计划研究","object":"多模态知识图谱","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"医疗","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"金融","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"教育","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"陈研究员","predicate":"研究","object":"联邦学习","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"陈研究员","predicate":"研究","object":"隐私保护技术","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"合作","object":"华为公司","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"合作","object":"牛津大学","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"合作","object":"剑桥大学","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"合作","object":"斯坦福大学","confidence":0.95,"chunk_index":1,"chunk_start":0}],"total_chunks":2,"success_chunks":2,"success_rate":"100.00%","total_triples":15,"processing_method":"batch_processing","timestamp":1750822943078}
2025-06-25 11:42:23.085 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"团队","predicate":"使用","object":"PyTorch","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"使用","object":"TensorFlow","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"使用","object":"Paddle","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"开发","object":"分布式训练系统","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"签署","object":"技术转让协议","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"计划研究","object":"多模态知识图谱","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"医疗","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"金融","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"教育","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"陈研究员","predicate":"研究","object":"联邦学习","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"陈研究员","predicate":"研究","object":"隐私保护技术","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"合作","object":"华为公司","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"合作","object":"牛津大学","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"合作","object":"剑桥大学","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"合作","object":"斯坦福大学","confidence":0.95,"chunk_index":1,"chunk_start":0}],"total_chunks":2,"success_chunks":2,"success_rate":"100.00%","total_triples":15,"processing_method":"batch_processing","timestamp":1750822943078}
2025-06-25 11:42:23.096 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 7 个主要字段: [triples, total_chunks, success_chunks, success_rate, total_triples, processing_method, timestamp]
2025-06-25 11:42:23.096 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 处理 15 个三元组，包括实体和关系保存
2025-06-25 11:42:23.096 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[使用]--> PyTorch
2025-06-25 11:42:23.096 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[使用]--> TensorFlow
2025-06-25 11:42:23.096 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[使用]--> Paddle
2025-06-25 11:42:23.096 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[开发]--> 分布式训练系统
2025-06-25 11:42:23.096 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[签署]--> 技术转让协议
2025-06-25 11:42:23.096 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[计划研究]--> 多模态知识图谱
2025-06-25 11:42:23.097 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[探索应用]--> 医疗
2025-06-25 11:42:23.097 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[探索应用]--> 金融
2025-06-25 11:42:23.097 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[探索应用]--> 教育
2025-06-25 11:42:23.100 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:42:23.105 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:42:23.109 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 联邦学习 (通过三元组提取)
2025-06-25 11:42:23.110 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 陈研究员 --[研究]--> 联邦学习
2025-06-25 11:42:23.110 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 陈研究员 --[研究]--> 隐私保护技术
2025-06-25 11:42:23.111 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:42:23.115 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:42:23.117 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 团队 (通过三元组提取)
2025-06-25 11:42:23.119 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:42:23.121 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:42:23.122 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 华为公司 (通过三元组提取)
2025-06-25 11:42:23.125 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:42:23.129 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:42:23.131 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 11:42:23.133 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 团队 -> 华为公司 [合作]
2025-06-25 11:42:23.133 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[合作]--> 华为公司
2025-06-25 11:42:23.134 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:42:23.137 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 人员 团队 已存在，跳过插入
2025-06-25 11:42:23.137 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:42:23.140 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:42:23.143 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 牛津大学 (通过三元组提取)
2025-06-25 11:42:23.144 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:42:23.148 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:42:23.150 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 11:42:23.152 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 团队 -> 牛津大学 [合作]
2025-06-25 11:42:23.152 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[合作]--> 牛津大学
2025-06-25 11:42:23.155 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:42:23.157 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 人员 团队 已存在，跳过插入
2025-06-25 11:42:23.159 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:42:23.160 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:42:23.162 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 剑桥大学 (通过三元组提取)
2025-06-25 11:42:23.164 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:42:23.168 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:42:23.171 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 11:42:23.172 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 团队 -> 剑桥大学 [合作]
2025-06-25 11:42:23.172 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[合作]--> 剑桥大学
2025-06-25 11:42:23.175 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:42:23.177 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 人员 团队 已存在，跳过插入
2025-06-25 11:42:23.178 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:42:23.180 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:42:23.183 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 斯坦福大学 (通过三元组提取)
2025-06-25 11:42:23.185 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:42:23.192 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:42:23.194 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 11:42:23.196 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 团队 -> 斯坦福大学 [合作]
2025-06-25 11:42:23.199 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[合作]--> 斯坦福大学
2025-06-25 11:42:23.200 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 11:42:23.205 [TextExtract-4] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 2386
2025-06-25 11:43:35.182 [SpringApplicationShutdownHook] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 11:43:35.183 [SpringApplicationShutdownHook] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@186fc6e] for TypeConfiguration
2025-06-25 11:43:35.183 [SpringApplicationShutdownHook] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@588d78da] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@186fc6e]
2025-06-25 11:43:35.185 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-25 11:43:35.195 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-25 12:08:27.106 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 69280 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-25 12:08:27.109 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-25 12:08:28.105 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 12:08:28.106 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-25 12:08:28.215 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 105 ms. Found 7 JPA repository interfaces.
2025-06-25 12:08:28.238 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 12:08:28.239 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-25 12:08:28.257 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityCelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 12:08:28.258 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityEventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 12:08:28.258 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 12:08:28.258 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 12:08:28.259 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 12:08:28.259 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 12:08:28.259 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 12:08:28.259 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 0 Redis repository interfaces.
2025-06-25 12:08:31.609 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-25 12:08:31.627 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-25 12:08:31.627 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-25 12:08:31.627 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 12:08:31.627 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 12:08:31.627 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-25 12:08:31.628 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-25 12:08:31.630 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-25 12:08:31.632 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-25 12:08:31.633 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-25 12:08:31.633 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-25 12:08:31.633 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-25 12:08:31.633 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-25 12:08:31.633 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-25 12:08:31.633 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-25 12:08:31.634 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@586486c
2025-06-25 12:08:31.634 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@586486c
2025-06-25 12:08:31.634 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-25 12:08:31.634 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-25 12:08:31.634 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-25 12:08:31.634 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 12:08:31.635 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 12:08:31.635 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 12:08:31.635 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 12:08:31.635 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 12:08:31.636 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 12:08:31.636 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 12:08:31.636 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 12:08:31.636 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 12:08:31.636 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 12:08:31.637 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 12:08:31.637 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 12:08:31.637 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 12:08:31.637 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 12:08:31.637 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-25 12:08:31.637 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-25 12:08:31.637 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-25 12:08:31.637 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-25 12:08:31.638 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-25 12:08:31.638 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-25 12:08:31.639 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-25 12:08:31.640 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 12:08:31.640 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 12:08:31.640 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 12:08:31.640 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-25 12:08:31.640 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 12:08:31.640 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 12:08:31.640 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 12:08:31.640 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 12:08:31.641 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 12:08:31.641 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 12:08:31.641 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 12:08:31.641 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 12:08:31.642 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-25 12:08:31.642 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-25 12:08:31.642 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-25 12:08:31.642 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-25 12:08:31.642 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-25 12:08:31.642 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-25 12:08:31.642 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@2a259f6f
2025-06-25 12:08:31.642 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@7ccf6114
2025-06-25 12:08:31.642 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@3df3410a
2025-06-25 12:08:31.642 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-25 12:08:31.642 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@61d42275
2025-06-25 12:08:31.643 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@6614289a
2025-06-25 12:08:31.643 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@6614289a
2025-06-25 12:08:31.643 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@4148ce43
2025-06-25 12:08:31.643 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@4148ce43
2025-06-25 12:08:31.643 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@46fb9581
2025-06-25 12:08:31.643 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@46fb9581
2025-06-25 12:08:31.644 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@6fcc0a1
2025-06-25 12:08:31.645 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@6fcc0a1
2025-06-25 12:08:31.646 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@416b681c
2025-06-25 12:08:31.646 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@416b681c
2025-06-25 12:08:31.646 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@46d69ca4
2025-06-25 12:08:31.646 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5c9b5e62
2025-06-25 12:08:31.647 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@3c826498
2025-06-25 12:08:31.647 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@3c826498
2025-06-25 12:08:31.648 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@2633d09c
2025-06-25 12:08:31.648 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@54f25b42
2025-06-25 12:08:31.648 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@521c67f0
2025-06-25 12:08:31.649 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@7d156f8f
2025-06-25 12:08:31.650 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@7d156f8f
2025-06-25 12:08:31.650 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@451af781
2025-06-25 12:08:31.651 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@3749c2b
2025-06-25 12:08:31.651 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@32e65852
2025-06-25 12:08:31.651 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@32e65852
2025-06-25 12:08:31.651 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@64d93096
2025-06-25 12:08:31.651 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@64d93096
2025-06-25 12:08:31.651 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@76ed7573
2025-06-25 12:08:31.651 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@76ed7573
2025-06-25 12:08:31.651 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@76ed7573
2025-06-25 12:08:31.651 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@51df2a41
2025-06-25 12:08:31.652 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@51df2a41
2025-06-25 12:08:31.652 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@51df2a41
2025-06-25 12:08:31.652 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@517bdce0
2025-06-25 12:08:31.652 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@7c0b0bd9
2025-06-25 12:08:31.652 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@6150afc6
2025-06-25 12:08:31.652 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@6150afc6
2025-06-25 12:08:31.652 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@49f50c8f
2025-06-25 12:08:31.652 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@49f50c8f
2025-06-25 12:08:31.652 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@49f50c8f
2025-06-25 12:08:31.652 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@46e6458d
2025-06-25 12:08:31.652 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@6297cb4b
2025-06-25 12:08:31.653 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@65d6640
2025-06-25 12:08:31.653 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@65d6640
2025-06-25 12:08:31.654 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@672d8370
2025-06-25 12:08:31.654 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@672d8370
2025-06-25 12:08:31.654 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@672d8370
2025-06-25 12:08:31.654 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@13137835
2025-06-25 12:08:31.654 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@13137835
2025-06-25 12:08:31.654 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@4f82248f
2025-06-25 12:08:31.654 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@4f82248f
2025-06-25 12:08:31.654 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@22002459
2025-06-25 12:08:31.654 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@22002459
2025-06-25 12:08:31.654 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@29bd056a
2025-06-25 12:08:31.654 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@29bd056a
2025-06-25 12:08:31.654 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@21e702b8
2025-06-25 12:08:31.655 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@21e702b8
2025-06-25 12:08:31.657 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@7f1fec57
2025-06-25 12:08:31.660 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@24d7657b
2025-06-25 12:08:31.660 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@24d7657b
2025-06-25 12:08:31.661 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@26612078
2025-06-25 12:08:31.661 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@54bc3bcf
2025-06-25 12:08:31.662 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@d3d5094
2025-06-25 12:08:31.662 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@13714753
2025-06-25 12:08:31.662 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@3c3cd7a5
2025-06-25 12:08:31.662 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@96be1ae
2025-06-25 12:08:31.664 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@6eb5b9e7
2025-06-25 12:08:31.664 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@77e730bd
2025-06-25 12:08:31.664 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@2d3c501b
2025-06-25 12:08:31.768 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-25 12:08:31.781 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-25 12:08:32.022 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@17fb5184
2025-06-25 12:08:32.023 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-25 12:08:32.074 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-25 12:08:32.074 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-25 12:08:32.091 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@f287a4e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3879feec)
2025-06-25 12:08:32.092 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@71d2261e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@53917c92)
2025-06-25 12:08:32.092 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1fa796a4) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@68de8522)
2025-06-25 12:08:32.092 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@8dcacf1) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@50f13494)
2025-06-25 12:08:32.092 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@73c09a98) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6f2bf657)
2025-06-25 12:08:32.092 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@27d6467) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5bf1b528)
2025-06-25 12:08:32.092 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2c92f094) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1c3b221f)
2025-06-25 12:08:32.092 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@750c23a3) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@238280df)
2025-06-25 12:08:32.092 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@182fd26b) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5dc120ab)
2025-06-25 12:08:32.093 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-25 12:08:32.093 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-25 12:08:32.093 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-25 12:08:32.094 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 12:08:32.094 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 12:08:32.095 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@65a66a75
2025-06-25 12:08:32.096 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@26612078`
2025-06-25 12:08:32.098 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-25 12:08:32.098 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-25 12:08:32.099 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 12:08:32.100 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 12:08:32.100 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 12:08:32.100 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 12:08:32.100 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 12:08:32.100 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 12:08:32.100 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 12:08:32.100 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 12:08:32.100 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 12:08:32.101 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@2761156e] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@4cf15477]
2025-06-25 12:08:32.754 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@2761156e] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@407ff25f]
2025-06-25 12:08:32.758 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@407ff25f] for TypeConfiguration
2025-06-25 12:08:32.759 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 12:08:33.506 [main] INFO  c.d.extract.controller.AsyncExtractController - AsyncExtractController initialized successfully
2025-06-25 12:08:33.512 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-25 12:08:33.932 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-25 12:08:34.065 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-25 12:08:34.101 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 2
2025-06-25 12:08:34.101 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-25 12:08:34.102 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-25 12:08:34.102 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-25 12:08:34.513 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-25 12:08:34.537 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 7.988 seconds (process running for 8.555)
2025-06-25 12:08:35.344 [boundedElastic-1] WARN  o.s.b.a.data.redis.RedisReactiveHealthIndicator - Redis health check failed
org.springframework.data.redis.RedisConnectionFailureException: Unable to connect to Redis
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$ExceptionTranslatingConnectionProvider.translateException(LettuceConnectionFactory.java:1805)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$ExceptionTranslatingConnectionProvider.getConnection(LettuceConnectionFactory.java:1736)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getNativeConnection(LettuceConnectionFactory.java:1538)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.lambda$getConnection$0(LettuceConnectionFactory.java:1518)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.doInLock(LettuceConnectionFactory.java:1478)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getConnection(LettuceConnectionFactory.java:1515)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getSharedReactiveConnection(LettuceConnectionFactory.java:1224)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getReactiveConnection(LettuceConnectionFactory.java:1099)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getReactiveConnection(LettuceConnectionFactory.java:130)
	at reactor.core.publisher.MonoSupplier.call(MonoSupplier.java:67)
	at reactor.core.publisher.FluxSubscribeOnCallable$CallableSubscribeOnSubscription.run(FluxSubscribeOnCallable.java:228)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: io.lettuce.core.RedisConnectionException: Unable to connect to 192.168.3.78/<unresolved>:6380
	at io.lettuce.core.RedisConnectionException.create(RedisConnectionException.java:78)
	at io.lettuce.core.RedisConnectionException.create(RedisConnectionException.java:56)
	at io.lettuce.core.AbstractRedisClient.getConnection(AbstractRedisClient.java:350)
	at io.lettuce.core.RedisClient.connect(RedisClient.java:215)
	at org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider.lambda$getConnection$1(StandaloneConnectionProvider.java:112)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider.getConnection(StandaloneConnectionProvider.java:112)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$ExceptionTranslatingConnectionProvider.getConnection(LettuceConnectionFactory.java:1734)
	... 16 common frames omitted
Caused by: io.lettuce.core.RedisCommandExecutionException: NOAUTH HELLO must be called with the client already authenticated, otherwise the HELLO <proto> AUTH <user> <pass> option can be used to authenticate the client and select the RESP protocol version at the same time
	at io.lettuce.core.internal.ExceptionFactory.createExecutionException(ExceptionFactory.java:147)
	at io.lettuce.core.internal.ExceptionFactory.createExecutionException(ExceptionFactory.java:116)
	at io.lettuce.core.protocol.AsyncCommand.completeResult(AsyncCommand.java:120)
	at io.lettuce.core.protocol.AsyncCommand.complete(AsyncCommand.java:111)
	at io.lettuce.core.protocol.CommandWrapper.complete(CommandWrapper.java:63)
	at io.lettuce.core.protocol.CommandHandler.complete(CommandHandler.java:745)
	at io.lettuce.core.protocol.CommandHandler.decode(CommandHandler.java:680)
	at io.lettuce.core.protocol.CommandHandler.channelRead(CommandHandler.java:597)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	... 1 common frames omitted
2025-06-25 12:09:17.316 [SpringApplicationShutdownHook] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 12:09:17.317 [SpringApplicationShutdownHook] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@407ff25f] for TypeConfiguration
2025-06-25 12:09:17.317 [SpringApplicationShutdownHook] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@675151c2] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@407ff25f]
2025-06-25 12:09:17.319 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-25 12:09:17.328 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-25 12:09:20.106 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 69332 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-25 12:09:20.108 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-25 12:09:21.080 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 12:09:21.082 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-25 12:09:21.197 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 111 ms. Found 7 JPA repository interfaces.
2025-06-25 12:09:21.222 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 12:09:21.223 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-25 12:09:21.236 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityCelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 12:09:21.236 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityEventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 12:09:21.236 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 12:09:21.236 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 12:09:21.236 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 12:09:21.236 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 12:09:21.236 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 12:09:21.236 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 0 Redis repository interfaces.
2025-06-25 12:09:23.605 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@6706da3d
2025-06-25 12:09:23.607 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@6706da3d
2025-06-25 12:09:23.607 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@6706da3d
2025-06-25 12:09:23.607 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@69d021c1
2025-06-25 12:09:23.607 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@69d021c1
2025-06-25 12:09:23.607 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@6d5508a5
2025-06-25 12:09:23.607 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@6d5508a5
2025-06-25 12:09:23.607 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@103bcc9f
2025-06-25 12:09:23.609 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@103bcc9f
2025-06-25 12:09:23.610 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@106802ea
2025-06-25 12:09:23.610 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@106802ea
2025-06-25 12:09:23.610 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@106802ea
2025-06-25 12:09:23.610 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@785ef70f
2025-06-25 12:09:23.610 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@785ef70f
2025-06-25 12:09:23.610 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@785ef70f
2025-06-25 12:09:23.611 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@3d8bd881
2025-06-25 12:09:23.611 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@3d8bd881
2025-06-25 12:09:23.611 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@2cdcfaa6
2025-06-25 12:09:23.611 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@4ff0706c
2025-06-25 12:09:23.611 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@4ff0706c
2025-06-25 12:09:23.612 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@6968bb65
2025-06-25 12:09:23.612 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@66682e8f
2025-06-25 12:09:23.612 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@2d2af12e
2025-06-25 12:09:23.613 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@2d2af12e
2025-06-25 12:09:23.613 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@2d2af12e
2025-06-25 12:09:23.613 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@611587f7
2025-06-25 12:09:23.613 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@611587f7
2025-06-25 12:09:23.613 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@611587f7
2025-06-25 12:09:23.613 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@4d0abb23
2025-06-25 12:09:23.613 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@4d0abb23
2025-06-25 12:09:23.613 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@4d0abb23
2025-06-25 12:09:23.613 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@6ab1f85b
2025-06-25 12:09:23.613 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@6ab1f85b
2025-06-25 12:09:23.614 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@6ab1f85b
2025-06-25 12:09:23.614 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@10e8c7a2
2025-06-25 12:09:23.615 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@10e8c7a2
2025-06-25 12:09:23.615 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@10e8c7a2
2025-06-25 12:09:23.616 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@5d8fd077
2025-06-25 12:09:23.616 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@5d8fd077
2025-06-25 12:09:23.616 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@4544ab46
2025-06-25 12:09:23.616 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@4544ab46
2025-06-25 12:09:23.616 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@2052f095
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@2052f095
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@2052f095
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@76d1f6ea
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@55fe9c2f
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@55fe9c2f
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@3580134d
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@2e19b30
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@2e19b30
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@2e19b30
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@7b7e4b20
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@5ac0bf84
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@6fefc5ea
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@6159fb3c
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@6159fb3c
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@68f79b7c
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@68f79b7c
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@37142579
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@264576e4
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@86bf90b
2025-06-25 12:09:23.619 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@5c13af01
2025-06-25 12:09:23.619 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@4aba7617
2025-06-25 12:09:23.619 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@47c5cbf2
2025-06-25 12:09:23.620 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@1031c1a0
2025-06-25 12:09:23.620 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@1031c1a0
2025-06-25 12:09:23.620 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@519b0f00
2025-06-25 12:09:23.621 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@519b0f00
2025-06-25 12:09:23.621 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@4888d1ea
2025-06-25 12:09:23.621 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@4888d1ea
2025-06-25 12:09:23.621 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@217b0952
2025-06-25 12:09:23.621 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@217b0952
2025-06-25 12:09:23.622 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@3fd9e01c
2025-06-25 12:09:23.622 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@3fd9e01c
2025-06-25 12:09:23.622 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@36330be8
2025-06-25 12:09:23.623 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@38ba8b45
2025-06-25 12:09:23.623 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@41f23499
2025-06-25 12:09:23.623 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@41f23499
2025-06-25 12:09:23.623 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@31dbf5bb
2025-06-25 12:09:23.623 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@1f19d423
2025-06-25 12:09:23.623 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@73958426
2025-06-25 12:09:23.623 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@23933031
2025-06-25 12:09:23.623 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@23933031
2025-06-25 12:09:23.623 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@4d0b7fd5
2025-06-25 12:09:23.624 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@1ce2029b
2025-06-25 12:09:23.624 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@43090195
2025-06-25 12:09:23.624 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@43090195
2025-06-25 12:09:23.624 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@7921a37d
2025-06-25 12:09:23.624 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@7921a37d
2025-06-25 12:09:23.624 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@6fc28e5b
2025-06-25 12:09:23.624 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@6fc28e5b
2025-06-25 12:09:23.625 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@6fc28e5b
2025-06-25 12:09:23.625 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@6338afe2
2025-06-25 12:09:23.625 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@6338afe2
2025-06-25 12:09:23.625 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@6338afe2
2025-06-25 12:09:23.625 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@68360fb9
2025-06-25 12:09:23.625 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@1c787389
2025-06-25 12:09:23.625 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@67b3960b
2025-06-25 12:09:23.625 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@67b3960b
2025-06-25 12:09:23.626 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@415262a0
2025-06-25 12:09:23.626 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@415262a0
2025-06-25 12:09:23.626 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@415262a0
2025-06-25 12:09:23.626 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@19c1f6f4
2025-06-25 12:09:23.626 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@46fa2a7e
2025-06-25 12:09:23.626 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@3d02ff64
2025-06-25 12:09:23.626 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@3d02ff64
2025-06-25 12:09:23.626 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@6f17dd06
2025-06-25 12:09:23.627 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@6f17dd06
2025-06-25 12:09:23.627 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@6f17dd06
2025-06-25 12:09:23.628 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@7977f046
2025-06-25 12:09:23.628 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@7977f046
2025-06-25 12:09:23.628 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@6ec98ccc
2025-06-25 12:09:23.628 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@6ec98ccc
2025-06-25 12:09:23.628 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@441aa7ae
2025-06-25 12:09:23.629 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@441aa7ae
2025-06-25 12:09:23.629 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@1534bdc6
2025-06-25 12:09:23.630 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@1534bdc6
2025-06-25 12:09:23.631 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@53079ae6
2025-06-25 12:09:23.631 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@53079ae6
2025-06-25 12:09:23.632 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@718ad3a6
2025-06-25 12:09:23.635 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@572b4072
2025-06-25 12:09:23.635 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@572b4072
2025-06-25 12:09:23.635 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@53e166ad
2025-06-25 12:09:23.635 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@30c03473
2025-06-25 12:09:23.635 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@20fa5277
2025-06-25 12:09:23.635 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@17a7d6c8
2025-06-25 12:09:23.636 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@4f2b1e9f
2025-06-25 12:09:23.636 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@7ef9c8a5
2025-06-25 12:09:23.636 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@c6244e7
2025-06-25 12:09:23.636 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@25dad235
2025-06-25 12:09:23.636 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@3292eff7
2025-06-25 12:09:23.734 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-25 12:09:23.748 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-25 12:09:23.846 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1842dc39
2025-06-25 12:09:23.847 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-25 12:09:23.876 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-25 12:09:23.876 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-25 12:09:23.892 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@27e3dc9a) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@49cd08f9)
2025-06-25 12:09:23.892 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@43549c6c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7792e14f)
2025-06-25 12:09:23.892 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4eace42b) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6f87a7c7)
2025-06-25 12:09:23.892 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@857f1a7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@682fe17b)
2025-06-25 12:09:23.892 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@418bdde9) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@13e0f380)
2025-06-25 12:09:23.892 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@240df292) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@333efb51)
2025-06-25 12:09:23.892 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2c451c4a) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@38ad86b1)
2025-06-25 12:09:23.892 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@73ff7a54) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@375ff309)
2025-06-25 12:09:23.893 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@337c0ee4) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@67b09e34)
2025-06-25 12:09:23.894 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-25 12:09:23.894 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-25 12:09:23.894 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-25 12:09:23.896 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 12:09:23.896 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 12:09:23.897 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@7f9e6167
2025-06-25 12:09:23.897 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@53e166ad`
2025-06-25 12:09:23.899 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-25 12:09:23.899 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-25 12:09:23.901 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 12:09:23.901 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 12:09:23.901 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 12:09:23.902 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 12:09:23.902 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 12:09:23.902 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 12:09:23.902 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 12:09:23.902 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 12:09:23.902 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 12:09:23.903 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@15a2fddd] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@452e2210]
2025-06-25 12:09:24.562 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@15a2fddd] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@18f1a81a]
2025-06-25 12:09:24.566 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@18f1a81a] for TypeConfiguration
2025-06-25 12:09:24.566 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 12:09:25.502 [main] INFO  c.d.extract.controller.AsyncExtractController - AsyncExtractController initialized successfully
2025-06-25 12:09:25.508 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-25 12:09:25.984 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-25 12:09:26.138 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-25 12:09:26.179 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 2
2025-06-25 12:09:26.179 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-25 12:09:26.180 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-25 12:09:26.181 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-25 12:09:26.613 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-25 12:09:26.627 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 7.154 seconds (process running for 7.987)
2025-06-25 12:09:57.793 [reactor-http-nio-6] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1
2025-06-25 12:09:57.812 [reactor-http-nio-6] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 121ms
2025-06-25 12:09:57.813 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-1, 文本长度: 32
2025-06-25 12:09:57.825 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 32 字符
2025-06-25 12:09:57.825 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 12:09:57.825 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 32，当前并发数: 1
2025-06-25 12:09:57.826 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 12:09:58.855 [reactor-http-nio-9] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities, textInputType: JSONArray, arraySize: 2
2025-06-25 12:09:58.856 [reactor-http-nio-9] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 12:09:58.856 [TextExtract-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-2, 文本长度: 44
2025-06-25 12:09:58.858 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 44 字符
2025-06-25 12:09:58.858 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 12:09:58.858 [TextExtract-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 44，当前并发数: 2
2025-06-25 12:09:58.858 [TextExtract-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 12:10:00.887 [reactor-http-nio-11] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 12:10:00.888 [reactor-http-nio-11] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 4ms
2025-06-25 12:10:00.888 [TextExtract-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-3, 文本长度: 90
2025-06-25 12:10:00.889 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 90 字符
2025-06-25 12:10:00.889 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 12:10:00.889 [TextExtract-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 90，当前并发数: 3
2025-06-25 12:10:00.889 [TextExtract-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 12:10:02.930 [reactor-http-nio-1] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 12:10:02.931 [reactor-http-nio-1] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 12:10:02.931 [TextExtract-4] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-4, 文本长度: 439
2025-06-25 12:10:02.931 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 439 字符
2025-06-25 12:10:02.931 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 12:10:02.931 [TextExtract-4] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 439，当前并发数: 4
2025-06-25 12:10:02.932 [TextExtract-4] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 12:10:04.959 [reactor-http-nio-3] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 12:10:04.960 [reactor-http-nio-3] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 12:10:04.961 [TextExtract-5] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-5, 文本长度: 2050
2025-06-25 12:10:04.961 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 2050 字符
2025-06-25 12:10:04.961 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - 📄 检测到长文本，启用分批处理模式
2025-06-25 12:10:04.961 [TextExtract-5] INFO  com.datacenter.extract.service.LongTextProcessor - 🔍 开始处理长文本，长度: 2050 字符
2025-06-25 12:10:04.964 [TextExtract-5] INFO  com.datacenter.extract.service.LongTextProcessor - 📊 文本分片完成，共 2 个分片
2025-06-25 12:10:04.968 [pool-5-thread-1] INFO  com.datacenter.extract.service.LongTextProcessor - ⚡ 处理分片 1 (1990 字符)
2025-06-25 12:10:04.968 [pool-5-thread-2] INFO  com.datacenter.extract.service.LongTextProcessor - ⚡ 处理分片 2 (238 字符)
2025-06-25 12:10:04.968 [pool-5-thread-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 1990，当前并发数: 5
2025-06-25 12:10:04.969 [pool-5-thread-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 40秒
2025-06-25 12:10:06.216 [reactor-http-nio-10] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 7358ms，响应长度: 362
2025-06-25 12:10:06.218 [pool-5-thread-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 238，当前并发数: 5
2025-06-25 12:10:06.218 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 44，处理模式: 直接处理
2025-06-25 12:10:06.218 [pool-5-thread-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 12:10:06.237 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 362
2025-06-25 12:10:06.238 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "执导",
      "object": "《英雄》",
      "confidence": 0.95
    },
    {
      "subject": "《英雄》",
      "predicate": "类型",
      "object": "古装武侠电影",
      "confidence": 0.95
    },
    {
      "subject": "《三体》三部曲",
      "predicate": "代表作品",
      "object": "刘慈欣",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:10:06.238 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "执导",
      "object": "《英雄》",
      "confidence": 0.95
    },
    {
      "subject": "《英雄》",
      "predicate": "类型",
      "object": "古装武侠电影",
      "confidence": 0.95
    },
    {
      "subject": "《三体》三部曲",
      "predicate": "代表作品",
      "object": "刘慈欣",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:10:06.239 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 12:10:06.239 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-25 12:10:06.316 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:10:06.338 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 12:10:06.340 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:10:06.355 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 12:10:06.367 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《英雄》 (通过三元组提取)
2025-06-25 12:10:06.375 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:10:06.384 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 12:10:06.389 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:10:06.391 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 张艺谋 -> 《英雄》 [执导]
2025-06-25 12:10:06.391 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[执导]--> 《英雄》
2025-06-25 12:10:06.393 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:10:06.395 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《英雄》 已存在，跳过插入
2025-06-25 12:10:06.395 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《英雄》 --[类型]--> 古装武侠电影
2025-06-25 12:10:06.396 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:10:06.399 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 12:10:06.403 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《三体》三部曲 (通过三元组提取)
2025-06-25 12:10:06.406 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:10:06.410 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 12:10:06.413 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 刘慈欣 (通过三元组提取)
2025-06-25 12:10:06.413 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《三体》三部曲 --[代表作品]--> 刘慈欣
2025-06-25 12:10:06.413 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 12:10:06.419 [TextExtract-2] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 44
2025-06-25 12:10:06.495 [reactor-http-nio-8] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 8669ms，响应长度: 463
2025-06-25 12:10:06.496 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 32，处理模式: 直接处理
2025-06-25 12:10:06.499 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 463
2025-06-25 12:10:06.499 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "演员",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "歌手",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出生地",
      "object": "香港",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出演作品",
      "object": "《无间道》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:10:06.499 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "演员",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "歌手",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出生地",
      "object": "香港",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出演作品",
      "object": "《无间道》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:10:06.501 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 12:10:06.501 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-25 12:10:06.503 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:10:06.506 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 12:10:06.507 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:10:06.510 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 12:10:06.514 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 演员 (通过三元组提取)
2025-06-25 12:10:06.516 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:10:06.522 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:10:06.525 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:10:06.527 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 演员 [职业]
2025-06-25 12:10:06.527 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[职业]--> 演员
2025-06-25 12:10:06.528 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:10:06.533 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 12:10:06.534 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:10:06.536 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 12:10:06.538 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 歌手 (通过三元组提取)
2025-06-25 12:10:06.540 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:10:06.543 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:10:06.545 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:10:06.547 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 歌手 [职业]
2025-06-25 12:10:06.547 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[职业]--> 歌手
2025-06-25 12:10:06.549 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:10:06.550 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 12:10:06.553 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:10:06.556 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 12:10:06.558 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 香港 (通过三元组提取)
2025-06-25 12:10:06.560 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:10:06.563 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:10:06.565 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:10:06.566 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 香港 [出生地]
2025-06-25 12:10:06.566 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[出生地]--> 香港
2025-06-25 12:10:06.567 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:10:06.569 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 12:10:06.570 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:10:06.572 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 12:10:06.573 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《无间道》 (通过三元组提取)
2025-06-25 12:10:06.575 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:10:06.579 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 12:10:06.582 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:10:06.583 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 刘德华 -> 《无间道》 [出演作品]
2025-06-25 12:10:06.583 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[出演作品]--> 《无间道》
2025-06-25 12:10:06.583 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 12:10:06.587 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 32
2025-06-25 12:10:11.469 [reactor-http-nio-12] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 10580ms，响应长度: 694
2025-06-25 12:10:11.471 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 90，处理模式: 直接处理
2025-06-25 12:10:11.476 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 694
2025-06-25 12:10:11.476 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张三",
      "predicate": "职业",
      "object": "软件工程师",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "工作地点",
      "object": "北京的一家科技公司",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "负责",
      "object": "开发人工智能系统",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "李四",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "王五",
      "confidence": 0.95
    },
    {
      "subject": "张三的团队",
      "predicate": "开发",
      "object": "智能对话系统",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:10:11.476 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张三",
      "predicate": "职业",
      "object": "软件工程师",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "工作地点",
      "object": "北京的一家科技公司",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "负责",
      "object": "开发人工智能系统",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "李四",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "王五",
      "confidence": 0.95
    },
    {
      "subject": "张三的团队",
      "predicate": "开发",
      "object": "智能对话系统",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:10:11.479 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 12:10:11.479 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 处理 6 个三元组，包括实体和关系保存
2025-06-25 12:10:11.485 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:10:11.491 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 张三 已存在，跳过插入
2025-06-25 12:10:11.492 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:10:11.494 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 软件工程师 已存在，跳过插入
2025-06-25 12:10:11.495 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:10:11.499 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:10:11.502 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:10:11.504 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 软件工程师 [职业]
2025-06-25 12:10:11.504 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[职业]--> 软件工程师
2025-06-25 12:10:11.505 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[工作地点]--> 北京的一家科技公司
2025-06-25 12:10:11.507 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:10:11.509 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 开发人工智能系统 已存在，跳过插入
2025-06-25 12:10:11.509 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[负责]--> 开发人工智能系统
2025-06-25 12:10:11.510 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:10:11.515 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 张三 已存在，跳过插入
2025-06-25 12:10:11.516 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:10:11.518 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 李四 已存在，跳过插入
2025-06-25 12:10:11.520 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:10:11.525 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:10:11.527 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:10:11.529 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 李四 [合作]
2025-06-25 12:10:11.529 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[合作]--> 李四
2025-06-25 12:10:11.531 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:10:11.533 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 张三 已存在，跳过插入
2025-06-25 12:10:11.535 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:10:11.537 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 王五 已存在，跳过插入
2025-06-25 12:10:11.538 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:10:11.546 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:10:11.549 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:10:11.551 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 王五 [合作]
2025-06-25 12:10:11.551 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[合作]--> 王五
2025-06-25 12:10:11.551 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三的团队 --[开发]--> 智能对话系统
2025-06-25 12:10:11.551 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 12:10:11.559 [TextExtract-3] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 90
2025-06-25 12:10:19.495 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 13277ms，响应长度: 910
2025-06-25 12:10:32.960 [parallel-5] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30028ms，错误: Did not observe any item or terminal signal within 30000ms in 'Mono.flatMap ⇢ at org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.bodyToMono(DefaultWebClient.java:570)' (and no fallback has been configured)
2025-06-25 12:10:32.961 [TextExtract-4] ERROR com.datacenter.extract.service.SmartAIProvider - ❌ AI提取失败，类型: entities,relations，文本长度: 439
2025-06-25 12:10:32.962 [TextExtract-4] ERROR com.datacenter.extract.service.SmartAIProvider - 💥 AI提取过程异常: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:77)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.service.TextExtractionService.processTextAsync(TextExtractionService.java:72)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.AsyncExecutionInterceptor.lambda$invoke$0(AsyncExecutionInterceptor.java:115)
	at java.base/java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:264)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 12:10:32.966 [TextExtract-4] ERROR c.datacenter.extract.service.TextExtractionService - 异步文本提取失败，错误: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-25 12:10:44.978 [parallel-6] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 40009ms，错误: Did not observe any item or terminal signal within 40000ms in 'Mono.flatMap ⇢ at org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.bodyToMono(DefaultWebClient.java:570)' (and no fallback has been configured)
2025-06-25 12:10:44.993 [TextExtract-5] INFO  com.datacenter.extract.service.LongTextProcessor - ✅ 分片合并完成，成功率: 2/2 ({:.1f}%)，提取三元组: 100.0
2025-06-25 12:10:44.995 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 2050，处理模式: 分批处理
2025-06-25 12:10:45.000 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 966
2025-06-25 12:10:45.000 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"团队","predicate":"签署","object":"技术转让协议","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"合作","object":"科技公司","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"研究","object":"多模态知识图谱","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"医疗","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"金融","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"教育","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"取得成就","object":"人工智能","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"取得成就","object":"知识图谱","confidence":0.95,"chunk_index":1,"chunk_start":0}],"total_chunks":2,"success_chunks":2,"success_rate":"100.00%","total_triples":8,"processing_method":"batch_processing","timestamp":1750824644993}
2025-06-25 12:10:45.000 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"团队","predicate":"签署","object":"技术转让协议","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"合作","object":"科技公司","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"研究","object":"多模态知识图谱","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"医疗","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"金融","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"教育","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"取得成就","object":"人工智能","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"取得成就","object":"知识图谱","confidence":0.95,"chunk_index":1,"chunk_start":0}],"total_chunks":2,"success_chunks":2,"success_rate":"100.00%","total_triples":8,"processing_method":"batch_processing","timestamp":1750824644993}
2025-06-25 12:10:45.004 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 7 个主要字段: [triples, total_chunks, success_chunks, success_rate, total_triples, processing_method, timestamp]
2025-06-25 12:10:45.005 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 处理 8 个三元组，包括实体和关系保存
2025-06-25 12:10:45.005 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[签署]--> 技术转让协议
2025-06-25 12:10:45.008 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:10:45.013 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 人员 团队 已存在，跳过插入
2025-06-25 12:10:45.014 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:10:45.018 [TextExtract-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 12:10:45.022 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 科技公司 (通过三元组提取)
2025-06-25 12:10:45.031 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:10:45.036 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:10:45.040 [TextExtract-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:10:45.042 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 团队 -> 科技公司 [合作]
2025-06-25 12:10:45.042 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[合作]--> 科技公司
2025-06-25 12:10:45.042 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[研究]--> 多模态知识图谱
2025-06-25 12:10:45.042 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[探索应用]--> 医疗
2025-06-25 12:10:45.042 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[探索应用]--> 金融
2025-06-25 12:10:45.042 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[探索应用]--> 教育
2025-06-25 12:10:45.042 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[取得成就]--> 人工智能
2025-06-25 12:10:45.043 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[取得成就]--> 知识图谱
2025-06-25 12:10:45.043 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 12:10:45.050 [TextExtract-5] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 2050
2025-06-25 12:17:04.808 [ForkJoinPool.commonPool-worker-2] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-25 12:17:04.817 [ForkJoinPool.commonPool-worker-2] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-25 12:17:04.824 [ForkJoinPool.commonPool-worker-2] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-25 12:17:04.829 [ForkJoinPool.commonPool-worker-2] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-25 12:17:04.835 [ForkJoinPool.commonPool-worker-2] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-25 12:17:04.843 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1, textLength: 38
2025-06-25 12:17:04.844 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 38, 参数: triples
2025-06-25 12:17:04.844 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-2, 文本长度: 38
2025-06-25 12:17:04.844 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 38 字符
2025-06-25 12:17:04.844 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 12:17:04.844 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 38，当前并发数: 1
2025-06-25 12:17:04.844 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 12:17:11.968 [reactor-http-nio-7] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 7124ms，响应长度: 351
2025-06-25 12:17:11.969 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 38，处理模式: 直接处理
2025-06-25 12:17:11.974 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 351
2025-06-25 12:17:11.974 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "合作伙伴",
      "object": "巩俐",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "配偶",
      "object": "陈婷",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "好友",
      "object": "梁朝伟",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:17:11.974 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "合作伙伴",
      "object": "巩俐",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "配偶",
      "object": "陈婷",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "好友",
      "object": "梁朝伟",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:17:11.977 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 12:17:11.977 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-25 12:17:11.979 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:17:11.983 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 12:17:11.985 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:17:11.989 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 巩俐 已存在，跳过插入
2025-06-25 12:17:12.000 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:17:12.009 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:17:12.014 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:17:12.017 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 巩俐 [合作伙伴]
2025-06-25 12:17:12.017 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[合作伙伴]--> 巩俐
2025-06-25 12:17:12.020 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:17:12.025 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 12:17:12.026 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:17:12.029 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 陈婷 已存在，跳过插入
2025-06-25 12:17:12.030 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:17:12.035 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:17:12.040 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:17:12.042 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 陈婷 [配偶]
2025-06-25 12:17:12.043 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[配偶]--> 陈婷
2025-06-25 12:17:12.045 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:17:12.047 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 12:17:12.049 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:17:12.052 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 梁朝伟 已存在，跳过插入
2025-06-25 12:17:12.053 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:17:12.056 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:17:12.059 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:17:12.061 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 梁朝伟 [好友]
2025-06-25 12:17:12.061 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[好友]--> 梁朝伟
2025-06-25 12:17:12.061 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 12:17:12.068 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 38
2025-06-25 12:17:12.068 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 7225ms
2025-06-25 12:17:13.094 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1, textLength: 40
2025-06-25 12:17:13.094 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 40, 参数: triples
2025-06-25 12:17:13.094 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-2, 文本长度: 40
2025-06-25 12:17:13.094 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 40 字符
2025-06-25 12:17:13.095 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 12:17:13.095 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 40，当前并发数: 1
2025-06-25 12:17:13.095 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 12:17:21.351 [reactor-http-nio-7] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 8256ms，响应长度: 356
2025-06-25 12:17:21.352 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 40，处理模式: 直接处理
2025-06-25 12:17:21.357 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 356
2025-06-25 12:17:21.357 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "巩俐",
      "predicate": "主演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "演唱",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:17:21.358 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "巩俐",
      "predicate": "主演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "演唱",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:17:21.358 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 12:17:21.359 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-25 12:17:21.361 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:17:21.366 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 12:17:21.368 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:17:21.372 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-25 12:17:21.375 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:17:21.382 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:17:21.388 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:17:21.393 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 《红高粱》 [导演]
2025-06-25 12:17:21.393 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《红高粱》
2025-06-25 12:17:21.394 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:17:21.398 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 巩俐 已存在，跳过插入
2025-06-25 12:17:21.399 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:17:21.402 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-25 12:17:21.404 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:17:21.410 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:17:21.418 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:17:21.421 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 巩俐 -> 《红高粱》 [主演]
2025-06-25 12:17:21.422 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 巩俐 --[主演]--> 《红高粱》
2025-06-25 12:17:21.423 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:17:21.426 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-25 12:17:21.431 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:17:21.435 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-25 12:17:21.437 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:17:21.442 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 12:17:21.446 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:17:21.448 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 周杰伦 -> 《青花瓷》 [演唱]
2025-06-25 12:17:21.448 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[演唱]--> 《青花瓷》
2025-06-25 12:17:21.448 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 12:17:21.453 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 40
2025-06-25 12:17:21.453 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 8359ms
2025-06-25 12:17:22.481 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1, textLength: 47
2025-06-25 12:17:22.481 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 47, 参数: triples
2025-06-25 12:17:22.481 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-2, 文本长度: 47
2025-06-25 12:17:22.481 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 47 字符
2025-06-25 12:17:22.481 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 12:17:22.482 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 47，当前并发数: 1
2025-06-25 12:17:22.482 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 12:17:29.376 [reactor-http-nio-7] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 6894ms，响应长度: 266
2025-06-25 12:17:29.377 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 47，处理模式: 直接处理
2025-06-25 12:17:29.383 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 266
2025-06-25 12:17:29.383 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "第41届柏林国际电影节颁奖典礼",
      "predicate": "举行于",
      "object": "1991年",
      "confidence": 0.95
    },
    {
      "subject": "2008年北京奥运会开幕式",
      "predicate": "举办于",
      "object": "鸟巢",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:17:29.384 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "第41届柏林国际电影节颁奖典礼",
      "predicate": "举行于",
      "object": "1991年",
      "confidence": 0.95
    },
    {
      "subject": "2008年北京奥运会开幕式",
      "predicate": "举办于",
      "object": "鸟巢",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:17:29.386 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 12:17:29.387 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组，包括实体和关系保存
2025-06-25 12:17:29.391 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 12:17:29.397 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-25 12:17:29.400 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 第41届柏林国际电影节颁奖典礼 (通过三元组提取)
2025-06-25 12:17:29.403 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 12:17:29.406 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 事件 1991年 已存在，跳过插入
2025-06-25 12:17:29.406 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 第41届柏林国际电影节颁奖典礼 --[举行于]--> 1991年
2025-06-25 12:17:29.408 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 12:17:29.411 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 事件 2008年北京奥运会开幕式 已存在，跳过插入
2025-06-25 12:17:29.411 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 2008年北京奥运会开幕式 --[举办于]--> 鸟巢
2025-06-25 12:17:29.411 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 12:17:29.421 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 47
2025-06-25 12:17:29.421 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 6940ms
2025-06-25 12:17:29.443 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 3, textLength: 58
2025-06-25 12:17:29.444 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 58, 参数: triples
2025-06-25 12:17:29.444 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-2, 文本长度: 58
2025-06-25 12:17:29.444 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 58 字符
2025-06-25 12:17:29.444 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 12:17:29.444 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 58，当前并发数: 1
2025-06-25 12:17:29.444 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 12:17:38.083 [reactor-http-nio-7] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 8639ms，响应长度: 485
2025-06-25 12:17:38.083 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 58，处理模式: 直接处理
2025-06-25 12:17:38.089 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 485
2025-06-25 12:17:38.090 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "参加",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "获奖",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "担任",
      "object": "北京奥运会开幕式总导演",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "电影节终身成就奖",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:17:38.090 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "参加",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "获奖",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "担任",
      "object": "北京奥运会开幕式总导演",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "电影节终身成就奖",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:17:38.093 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 12:17:38.093 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-25 12:17:38.096 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:17:38.101 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 12:17:38.102 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 12:17:38.105 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 事件 柏林电影节颁奖典礼 已存在，跳过插入
2025-06-25 12:17:38.106 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:17:38.117 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 12:17:38.124 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:17:38.130 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 张艺谋 -> 柏林电影节颁奖典礼 [参加]
2025-06-25 12:17:38.130 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[参加]--> 柏林电影节颁奖典礼
2025-06-25 12:17:38.131 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:17:38.134 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 12:17:38.136 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 12:17:38.138 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 事件 柏林电影节颁奖典礼 已存在，跳过插入
2025-06-25 12:17:38.140 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:17:38.143 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 12:17:38.145 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:17:38.148 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 张艺谋 -> 柏林电影节颁奖典礼 [获奖]
2025-06-25 12:17:38.148 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[获奖]--> 柏林电影节颁奖典礼
2025-06-25 12:17:38.149 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:17:38.151 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 12:17:38.152 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 12:17:38.153 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 事件 北京奥运会开幕式总导演 已存在，跳过插入
2025-06-25 12:17:38.154 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:17:38.158 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 12:17:38.162 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:17:38.164 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 张艺谋 -> 北京奥运会开幕式总导演 [担任]
2025-06-25 12:17:38.165 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[担任]--> 北京奥运会开幕式总导演
2025-06-25 12:17:38.166 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:17:38.170 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 12:17:38.171 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:17:38.178 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 电影节终身成就奖 已存在，跳过插入
2025-06-25 12:17:38.179 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:17:38.184 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:17:38.187 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:17:38.190 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 成龙 -> 电影节终身成就奖 [获得]
2025-06-25 12:17:38.190 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[获得]--> 电影节终身成就奖
2025-06-25 12:17:38.190 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 12:17:38.194 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 58
2025-06-25 12:17:38.194 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 8751ms
2025-06-25 12:17:39.219 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 3, textLength: 56
2025-06-25 12:17:39.220 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 56, 参数: triples
2025-06-25 12:17:39.220 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-2, 文本长度: 56
2025-06-25 12:17:39.220 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 56 字符
2025-06-25 12:17:39.220 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 12:17:39.220 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 56，当前并发数: 1
2025-06-25 12:17:39.221 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 12:17:47.392 [reactor-http-nio-7] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 8171ms，响应长度: 481
2025-06-25 12:17:47.393 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 56，处理模式: 直接处理
2025-06-25 12:17:47.398 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 481
2025-06-25 12:17:47.399 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "《红高粱》",
      "predicate": "获得",
      "object": "金熊奖",
      "confidence": 0.95
    },
    {
      "subject": "《红高粱》",
      "predicate": "获奖地点",
      "object": "柏林电影节",
      "confidence": 0.95
    },
    {
      "subject": "《青花瓷》",
      "predicate": "演出地点",
      "object": "奥运会开幕式",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映地点",
      "object": "香港电影节",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:17:47.399 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "《红高粱》",
      "predicate": "获得",
      "object": "金熊奖",
      "confidence": 0.95
    },
    {
      "subject": "《红高粱》",
      "predicate": "获奖地点",
      "object": "柏林电影节",
      "confidence": 0.95
    },
    {
      "subject": "《青花瓷》",
      "predicate": "演出地点",
      "object": "奥运会开幕式",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映地点",
      "object": "香港电影节",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:17:47.400 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 12:17:47.400 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-25 12:17:47.404 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:17:47.408 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《红高粱》 已存在，跳过插入
2025-06-25 12:17:47.408 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《红高粱》 --[获得]--> 金熊奖
2025-06-25 12:17:47.408 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:17:47.410 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《红高粱》 已存在，跳过插入
2025-06-25 12:17:47.411 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 12:17:47.413 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 事件 柏林电影节 已存在，跳过插入
2025-06-25 12:17:47.417 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 12:17:47.422 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 12:17:47.425 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:17:47.427 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 柏林电影节 -> 《红高粱》 [在_获奖地点]
2025-06-25 12:17:47.427 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《红高粱》 --[获奖地点]--> 柏林电影节
2025-06-25 12:17:47.428 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:17:47.430 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-25 12:17:47.432 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 12:17:47.434 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 事件 奥运会开幕式 已存在，跳过插入
2025-06-25 12:17:47.436 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 12:17:47.439 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 12:17:47.442 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:17:47.444 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 奥运会开幕式 -> 《青花瓷》 [在_演出地点]
2025-06-25 12:17:47.445 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《青花瓷》 --[演出地点]--> 奥运会开幕式
2025-06-25 12:17:47.446 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:17:47.449 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《醉拳》 已存在，跳过插入
2025-06-25 12:17:47.450 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 12:17:47.451 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 事件 香港电影节 已存在，跳过插入
2025-06-25 12:17:47.453 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 12:17:47.456 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 12:17:47.460 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:17:47.463 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 香港电影节 -> 《醉拳》 [在_首映地点]
2025-06-25 12:17:47.463 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《醉拳》 --[首映地点]--> 香港电影节
2025-06-25 12:17:47.463 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 12:17:47.468 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 56
2025-06-25 12:17:47.468 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 8249ms
2025-06-25 12:17:48.490 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 4, textLength: 88
2025-06-25 12:17:48.490 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 88, 参数: triples
2025-06-25 12:17:48.490 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-2, 文本长度: 88
2025-06-25 12:17:48.490 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 88 字符
2025-06-25 12:17:48.491 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 12:17:48.491 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 88，当前并发数: 1
2025-06-25 12:17:48.491 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 12:18:00.698 [reactor-http-nio-7] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 12207ms，响应长度: 806
2025-06-25 12:18:00.699 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 88，处理模式: 直接处理
2025-06-25 12:18:00.703 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 806
2025-06-25 12:18:00.703 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "主演",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映于",
      "object": "香港电影节",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "参加",
      "object": "电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "终身成就奖",
      "confidence": 0.95
    },
    {
      "subject": "李小龙",
      "predicate": "师父",
      "object": "成龙",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《龙争虎斗》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:18:00.703 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "主演",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映于",
      "object": "香港电影节",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "参加",
      "object": "电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "终身成就奖",
      "confidence": 0.95
    },
    {
      "subject": "李小龙",
      "predicate": "师父",
      "object": "成龙",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《龙争虎斗》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:18:00.705 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 12:18:00.705 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 7 个三元组，包括实体和关系保存
2025-06-25 12:18:00.708 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:00.715 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 12:18:00.723 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:00.728 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 《醉拳》 已存在，跳过插入
2025-06-25 12:18:00.734 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:00.739 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:00.747 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:00.750 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 成龙 -> 《醉拳》 [主演]
2025-06-25 12:18:00.750 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[主演]--> 《醉拳》
2025-06-25 12:18:00.751 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:18:00.753 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《醉拳》 已存在，跳过插入
2025-06-25 12:18:00.757 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 12:18:00.758 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 事件 香港电影节 已存在，跳过插入
2025-06-25 12:18:00.759 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 12:18:00.762 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 12:18:00.765 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:00.767 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 香港电影节 -> 《醉拳》 [在_首映于]
2025-06-25 12:18:00.767 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《醉拳》 --[首映于]--> 香港电影节
2025-06-25 12:18:00.768 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:00.770 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 12:18:00.771 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 12:18:00.773 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 事件 电影节颁奖典礼 已存在，跳过插入
2025-06-25 12:18:00.774 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:00.776 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 12:18:00.779 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:00.781 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 成龙 -> 电影节颁奖典礼 [参加]
2025-06-25 12:18:00.781 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[参加]--> 电影节颁奖典礼
2025-06-25 12:18:00.782 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:00.784 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 12:18:00.788 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:00.790 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 终身成就奖 已存在，跳过插入
2025-06-25 12:18:00.791 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:00.794 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:00.797 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:00.799 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 成龙 -> 终身成就奖 [获得]
2025-06-25 12:18:00.799 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[获得]--> 终身成就奖
2025-06-25 12:18:00.800 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:00.801 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 李小龙 已存在，跳过插入
2025-06-25 12:18:00.802 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:00.804 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 12:18:00.804 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:00.809 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:00.812 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:00.815 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 李小龙 -> 成龙 [师父]
2025-06-25 12:18:00.815 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 李小龙 --[师父]--> 成龙
2025-06-25 12:18:00.816 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 12:18:00.818 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 事件 功夫电影节 已存在，跳过插入
2025-06-25 12:18:00.819 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:18:00.821 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《醉拳》 已存在，跳过插入
2025-06-25 12:18:00.822 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 12:18:00.825 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 12:18:00.826 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:00.828 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系: 功夫电影节 -> 《醉拳》 [展映]
2025-06-25 12:18:00.828 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 功夫电影节 --[展映]--> 《醉拳》
2025-06-25 12:18:00.829 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 12:18:00.830 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 事件 功夫电影节 已存在，跳过插入
2025-06-25 12:18:00.834 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:00.836 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 《龙争虎斗》 已存在，跳过插入
2025-06-25 12:18:00.837 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:00.840 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 12:18:00.842 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:00.844 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系(反向): 《龙争虎斗》 -> 功夫电影节 [参与_展映]
2025-06-25 12:18:00.844 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 功夫电影节 --[展映]--> 《龙争虎斗》
2025-06-25 12:18:00.844 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 12:18:00.849 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 88
2025-06-25 12:18:00.850 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 12361ms
2025-06-25 12:18:00.858 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1, textLength: 25
2025-06-25 12:18:00.858 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 25, 参数: triples
2025-06-25 12:18:00.858 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-2, 文本长度: 25
2025-06-25 12:18:00.858 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 25 字符
2025-06-25 12:18:00.858 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 12:18:00.858 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 25，当前并发数: 1
2025-06-25 12:18:00.858 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 12:18:06.640 [reactor-http-nio-7] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 5781ms，响应长度: 248
2025-06-25 12:18:06.640 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 25，处理模式: 直接处理
2025-06-25 12:18:06.646 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 248
2025-06-25 12:18:06.646 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语流行音乐歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "创作",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:18:06.646 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语流行音乐歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "创作",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:18:06.648 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 12:18:06.648 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组，包括实体和关系保存
2025-06-25 12:18:06.653 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:06.655 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-25 12:18:06.656 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:06.658 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 华语流行音乐歌手 已存在，跳过插入
2025-06-25 12:18:06.658 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:06.663 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:06.666 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:06.668 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 周杰伦 -> 华语流行音乐歌手 [职业]
2025-06-25 12:18:06.668 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[职业]--> 华语流行音乐歌手
2025-06-25 12:18:06.670 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:06.671 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-25 12:18:06.672 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:18:06.674 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-25 12:18:06.675 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:06.678 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 12:18:06.682 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:06.684 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 周杰伦 -> 《青花瓷》 [创作]
2025-06-25 12:18:06.684 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[创作]--> 《青花瓷》
2025-06-25 12:18:06.684 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 12:18:06.688 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 25
2025-06-25 12:18:06.688 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 5830ms
2025-06-25 12:18:07.706 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 3, textLength: 42
2025-06-25 12:18:07.706 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 42, 参数: triples
2025-06-25 12:18:07.707 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-2, 文本长度: 42
2025-06-25 12:18:07.707 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 42 字符
2025-06-25 12:18:07.707 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 12:18:07.707 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 42，当前并发数: 1
2025-06-25 12:18:07.707 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 12:18:15.355 [reactor-http-nio-8] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 7648ms，响应长度: 360
2025-06-25 12:18:15.355 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 42，处理模式: 直接处理
2025-06-25 12:18:15.361 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 360
2025-06-25 12:18:15.362 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语流行音乐歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "创作",
      "object": "《青花瓷》",
      "confidence": 0.95
    },
    {
      "subject": "《青花瓷》",
      "predicate": "获奖",
      "object": "金曲奖",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:18:15.362 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语流行音乐歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "创作",
      "object": "《青花瓷》",
      "confidence": 0.95
    },
    {
      "subject": "《青花瓷》",
      "predicate": "获奖",
      "object": "金曲奖",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:18:15.367 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 12:18:15.368 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-25 12:18:15.370 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:15.373 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-25 12:18:15.374 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:15.381 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 华语流行音乐歌手 已存在，跳过插入
2025-06-25 12:18:15.383 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:15.388 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:15.390 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:15.393 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 周杰伦 -> 华语流行音乐歌手 [职业]
2025-06-25 12:18:15.393 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[职业]--> 华语流行音乐歌手
2025-06-25 12:18:15.395 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:15.397 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-25 12:18:15.398 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:18:15.400 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-25 12:18:15.401 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:15.404 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 12:18:15.408 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:15.411 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 周杰伦 -> 《青花瓷》 [创作]
2025-06-25 12:18:15.411 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[创作]--> 《青花瓷》
2025-06-25 12:18:15.412 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:18:15.415 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-25 12:18:15.415 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《青花瓷》 --[获奖]--> 金曲奖
2025-06-25 12:18:15.415 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 12:18:15.424 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 42
2025-06-25 12:18:15.424 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 7718ms
2025-06-25 12:18:15.462 [reactor-http-nio-11] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1
2025-06-25 12:18:15.462 [reactor-http-nio-11] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 0ms
2025-06-25 12:18:15.462 [TextExtract-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-2, 文本长度: 32
2025-06-25 12:18:15.465 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 463
2025-06-25 12:18:15.465 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "演员",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "歌手",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出生地",
      "object": "香港",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出演作品",
      "object": "《无间道》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:18:15.465 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "演员",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "歌手",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出生地",
      "object": "香港",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出演作品",
      "object": "《无间道》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:18:15.466 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 12:18:15.466 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-25 12:18:15.467 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:15.470 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 12:18:15.472 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:15.475 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 演员 已存在，跳过插入
2025-06-25 12:18:15.476 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:15.479 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:15.482 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:15.486 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 演员 [职业]
2025-06-25 12:18:15.486 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[职业]--> 演员
2025-06-25 12:18:15.487 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:15.491 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 12:18:15.492 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:15.494 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 歌手 已存在，跳过插入
2025-06-25 12:18:15.494 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:15.496 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:15.499 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:15.501 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 歌手 [职业]
2025-06-25 12:18:15.501 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[职业]--> 歌手
2025-06-25 12:18:15.501 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:15.503 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 12:18:15.503 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:15.505 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 香港 已存在，跳过插入
2025-06-25 12:18:15.506 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:15.509 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:15.511 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:15.512 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 香港 [出生地]
2025-06-25 12:18:15.512 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[出生地]--> 香港
2025-06-25 12:18:15.513 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:15.515 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 12:18:15.515 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:18:15.517 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《无间道》 已存在，跳过插入
2025-06-25 12:18:15.517 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:15.519 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 12:18:15.521 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:15.522 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 刘德华 -> 《无间道》 [出演作品]
2025-06-25 12:18:15.522 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[出演作品]--> 《无间道》
2025-06-25 12:18:15.522 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 12:18:15.525 [TextExtract-2] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 32
2025-06-25 12:18:16.483 [reactor-http-nio-12] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities, textInputType: JSONArray, arraySize: 2
2025-06-25 12:18:16.484 [reactor-http-nio-12] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 12:18:16.484 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-1, 文本长度: 44
2025-06-25 12:18:16.486 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 362
2025-06-25 12:18:16.486 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "执导",
      "object": "《英雄》",
      "confidence": 0.95
    },
    {
      "subject": "《英雄》",
      "predicate": "类型",
      "object": "古装武侠电影",
      "confidence": 0.95
    },
    {
      "subject": "《三体》三部曲",
      "predicate": "代表作品",
      "object": "刘慈欣",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:18:16.486 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "执导",
      "object": "《英雄》",
      "confidence": 0.95
    },
    {
      "subject": "《英雄》",
      "predicate": "类型",
      "object": "古装武侠电影",
      "confidence": 0.95
    },
    {
      "subject": "《三体》三部曲",
      "predicate": "代表作品",
      "object": "刘慈欣",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:18:16.487 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 12:18:16.487 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-25 12:18:16.487 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:16.489 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 12:18:16.490 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:18:16.491 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《英雄》 已存在，跳过插入
2025-06-25 12:18:16.491 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:16.494 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 12:18:16.496 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:16.498 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 张艺谋 -> 《英雄》 [执导]
2025-06-25 12:18:16.498 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[执导]--> 《英雄》
2025-06-25 12:18:16.499 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:18:16.502 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《英雄》 已存在，跳过插入
2025-06-25 12:18:16.502 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《英雄》 --[类型]--> 古装武侠电影
2025-06-25 12:18:16.503 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:18:16.507 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《三体》三部曲 已存在，跳过插入
2025-06-25 12:18:16.510 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:18:16.513 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 刘慈欣 已存在，跳过插入
2025-06-25 12:18:16.513 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《三体》三部曲 --[代表作品]--> 刘慈欣
2025-06-25 12:18:16.513 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 12:18:16.518 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 44
2025-06-25 12:18:18.502 [reactor-http-nio-1] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 12:18:18.502 [reactor-http-nio-1] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 0ms
2025-06-25 12:18:18.502 [TextExtract-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-3, 文本长度: 90
2025-06-25 12:18:18.506 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 694
2025-06-25 12:18:18.506 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张三",
      "predicate": "职业",
      "object": "软件工程师",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "工作地点",
      "object": "北京的一家科技公司",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "负责",
      "object": "开发人工智能系统",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "李四",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "王五",
      "confidence": 0.95
    },
    {
      "subject": "张三的团队",
      "predicate": "开发",
      "object": "智能对话系统",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:18:18.506 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张三",
      "predicate": "职业",
      "object": "软件工程师",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "工作地点",
      "object": "北京的一家科技公司",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "负责",
      "object": "开发人工智能系统",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "李四",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "王五",
      "confidence": 0.95
    },
    {
      "subject": "张三的团队",
      "predicate": "开发",
      "object": "智能对话系统",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:18:18.507 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 12:18:18.507 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 处理 6 个三元组，包括实体和关系保存
2025-06-25 12:18:18.508 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:18.510 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 张三 已存在，跳过插入
2025-06-25 12:18:18.510 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:18.512 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 软件工程师 已存在，跳过插入
2025-06-25 12:18:18.514 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:18.519 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:18.522 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:18.525 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 软件工程师 [职业]
2025-06-25 12:18:18.525 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[职业]--> 软件工程师
2025-06-25 12:18:18.525 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[工作地点]--> 北京的一家科技公司
2025-06-25 12:18:18.527 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:18.529 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 开发人工智能系统 已存在，跳过插入
2025-06-25 12:18:18.529 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[负责]--> 开发人工智能系统
2025-06-25 12:18:18.530 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:18.532 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 张三 已存在，跳过插入
2025-06-25 12:18:18.533 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:18.536 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 李四 已存在，跳过插入
2025-06-25 12:18:18.537 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:18.541 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:18.543 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:18.545 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 李四 [合作]
2025-06-25 12:18:18.545 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[合作]--> 李四
2025-06-25 12:18:18.545 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:18.547 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 张三 已存在，跳过插入
2025-06-25 12:18:18.548 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:18.550 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 王五 已存在，跳过插入
2025-06-25 12:18:18.550 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:18.555 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:18.560 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:18.562 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 王五 [合作]
2025-06-25 12:18:18.562 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[合作]--> 王五
2025-06-25 12:18:18.562 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三的团队 --[开发]--> 智能对话系统
2025-06-25 12:18:18.562 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 12:18:18.566 [TextExtract-3] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 90
2025-06-25 12:18:20.520 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 12:18:20.521 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 12:18:20.521 [TextExtract-4] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-4, 文本长度: 439
2025-06-25 12:18:20.521 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 439 字符
2025-06-25 12:18:20.521 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 12:18:20.521 [TextExtract-4] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 439，当前并发数: 1
2025-06-25 12:18:20.521 [TextExtract-4] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 12:18:22.542 [reactor-http-nio-3] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 12:18:22.542 [reactor-http-nio-3] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 12:18:22.542 [TextExtract-5] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-5, 文本长度: 2050
2025-06-25 12:18:22.546 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 966
2025-06-25 12:18:22.546 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"团队","predicate":"签署","object":"技术转让协议","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"合作","object":"科技公司","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"研究","object":"多模态知识图谱","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"医疗","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"金融","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"教育","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"取得成就","object":"人工智能","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"取得成就","object":"知识图谱","confidence":0.95,"chunk_index":1,"chunk_start":0}],"total_chunks":2,"success_chunks":2,"success_rate":"100.00%","total_triples":8,"processing_method":"batch_processing","timestamp":1750824644993}
2025-06-25 12:18:22.546 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"团队","predicate":"签署","object":"技术转让协议","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"合作","object":"科技公司","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"研究","object":"多模态知识图谱","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"医疗","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"金融","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"教育","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"取得成就","object":"人工智能","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"取得成就","object":"知识图谱","confidence":0.95,"chunk_index":1,"chunk_start":0}],"total_chunks":2,"success_chunks":2,"success_rate":"100.00%","total_triples":8,"processing_method":"batch_processing","timestamp":1750824644993}
2025-06-25 12:18:22.548 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 7 个主要字段: [triples, total_chunks, success_chunks, success_rate, total_triples, processing_method, timestamp]
2025-06-25 12:18:22.548 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 处理 8 个三元组，包括实体和关系保存
2025-06-25 12:18:22.548 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[签署]--> 技术转让协议
2025-06-25 12:18:22.549 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:22.552 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 人员 团队 已存在，跳过插入
2025-06-25 12:18:22.552 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:22.554 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 人员 科技公司 已存在，跳过插入
2025-06-25 12:18:22.555 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:22.557 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:22.559 [TextExtract-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:22.561 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 团队 -> 科技公司 [合作]
2025-06-25 12:18:22.562 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[合作]--> 科技公司
2025-06-25 12:18:22.564 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[研究]--> 多模态知识图谱
2025-06-25 12:18:22.564 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[探索应用]--> 医疗
2025-06-25 12:18:22.564 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[探索应用]--> 金融
2025-06-25 12:18:22.564 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[探索应用]--> 教育
2025-06-25 12:18:22.564 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[取得成就]--> 人工智能
2025-06-25 12:18:22.564 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[取得成就]--> 知识图谱
2025-06-25 12:18:22.564 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 12:18:22.571 [TextExtract-5] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 2050
2025-06-25 12:18:50.525 [parallel-6] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30004ms，错误: Did not observe any item or terminal signal within 30000ms in 'Mono.flatMap ⇢ at org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.bodyToMono(DefaultWebClient.java:570)' (and no fallback has been configured)
2025-06-25 12:18:50.526 [TextExtract-4] ERROR com.datacenter.extract.service.SmartAIProvider - ❌ AI提取失败，类型: entities,relations，文本长度: 439
2025-06-25 12:18:50.526 [TextExtract-4] ERROR com.datacenter.extract.service.SmartAIProvider - 💥 AI提取过程异常: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:77)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.service.TextExtractionService.processTextAsync(TextExtractionService.java:72)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.AsyncExecutionInterceptor.lambda$invoke$0(AsyncExecutionInterceptor.java:115)
	at java.base/java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:264)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 12:18:50.526 [TextExtract-4] ERROR c.datacenter.extract.service.TextExtractionService - 异步文本提取失败，错误: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-25 12:18:55.663 [SpringApplicationShutdownHook] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 12:18:55.664 [SpringApplicationShutdownHook] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@18f1a81a] for TypeConfiguration
2025-06-25 12:18:55.664 [SpringApplicationShutdownHook] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@69f0485a] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@18f1a81a]
2025-06-25 12:18:55.666 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-25 12:18:55.674 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-25 15:43:07.073 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 85527 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-25 15:43:07.075 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-25 15:43:08.037 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 15:43:08.038 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-25 15:43:08.148 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 106 ms. Found 7 JPA repository interfaces.
2025-06-25 15:43:08.172 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 15:43:08.174 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-25 15:43:08.190 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityCelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 15:43:08.191 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityEventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 15:43:08.191 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 15:43:08.191 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 15:43:08.191 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 15:43:08.191 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 15:43:08.191 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 15:43:08.192 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 13 ms. Found 0 Redis repository interfaces.
2025-06-25 15:43:11.315 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@173cfb01
2025-06-25 15:43:11.316 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@173cfb01
2025-06-25 15:43:11.316 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@173cfb01
2025-06-25 15:43:11.316 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@249a45fd
2025-06-25 15:43:11.316 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@249a45fd
2025-06-25 15:43:11.316 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@268f0ff3
2025-06-25 15:43:11.317 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@268f0ff3
2025-06-25 15:43:11.319 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@11978f52
2025-06-25 15:43:11.319 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@11978f52
2025-06-25 15:43:11.319 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@3e0855b0
2025-06-25 15:43:11.319 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@3e0855b0
2025-06-25 15:43:11.319 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@3e0855b0
2025-06-25 15:43:11.319 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@484b5a21
2025-06-25 15:43:11.320 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@484b5a21
2025-06-25 15:43:11.320 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@484b5a21
2025-06-25 15:43:11.321 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@16e5344c
2025-06-25 15:43:11.321 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@16e5344c
2025-06-25 15:43:11.321 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@55746340
2025-06-25 15:43:11.321 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@6a0c7af6
2025-06-25 15:43:11.321 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@6a0c7af6
2025-06-25 15:43:11.321 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@7f1ad846
2025-06-25 15:43:11.321 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-25 15:43:11.322 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-25 15:43:11.322 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-25 15:43:11.322 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-25 15:43:11.322 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-25 15:43:11.322 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-25 15:43:11.322 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-25 15:43:11.322 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-25 15:43:11.322 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-25 15:43:11.322 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-25 15:43:11.322 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-25 15:43:11.322 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-25 15:43:11.323 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-25 15:43:11.323 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-25 15:43:11.324 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-25 15:43:11.324 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-25 15:43:11.324 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-25 15:43:11.325 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-25 15:43:11.325 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-25 15:43:11.325 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-25 15:43:11.325 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 15:43:11.325 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 15:43:11.325 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 15:43:11.325 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-25 15:43:11.326 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-25 15:43:11.326 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-25 15:43:11.326 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@5e7e7a7e
2025-06-25 15:43:11.326 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-25 15:43:11.326 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-25 15:43:11.326 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-25 15:43:11.326 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-25 15:43:11.327 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-25 15:43:11.328 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@5abc5854
2025-06-25 15:43:11.328 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-25 15:43:11.328 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-25 15:43:11.328 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-25 15:43:11.328 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-25 15:43:11.328 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-25 15:43:11.328 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-25 15:43:11.328 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-25 15:43:11.328 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-25 15:43:11.328 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 15:43:11.329 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-25 15:43:11.329 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-25 15:43:11.329 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-25 15:43:11.329 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-25 15:43:11.329 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-25 15:43:11.329 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-25 15:43:11.329 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-25 15:43:11.329 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@586486c
2025-06-25 15:43:11.329 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@586486c
2025-06-25 15:43:11.329 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-25 15:43:11.329 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-25 15:43:11.329 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@7fbbdd8a
2025-06-25 15:43:11.329 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-25 15:43:11.330 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-25 15:43:11.332 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-25 15:43:11.333 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 15:43:11.333 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 15:43:11.333 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 15:43:11.334 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 15:43:11.334 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 15:43:11.334 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 15:43:11.334 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 15:43:11.335 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-25 15:43:11.335 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-25 15:43:11.335 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-25 15:43:11.335 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-25 15:43:11.335 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-25 15:43:11.335 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-25 15:43:11.335 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-25 15:43:11.335 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 15:43:11.335 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 15:43:11.336 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 15:43:11.336 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-25 15:43:11.336 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 15:43:11.336 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 15:43:11.336 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 15:43:11.336 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 15:43:11.336 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 15:43:11.336 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 15:43:11.336 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 15:43:11.336 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 15:43:11.336 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-25 15:43:11.337 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-25 15:43:11.337 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-25 15:43:11.338 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-25 15:43:11.338 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-25 15:43:11.338 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-25 15:43:11.338 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-25 15:43:11.339 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-25 15:43:11.340 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-25 15:43:11.340 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@2a259f6f
2025-06-25 15:43:11.341 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@2a259f6f
2025-06-25 15:43:11.341 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@7ccf6114
2025-06-25 15:43:11.342 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@7ccf6114
2025-06-25 15:43:11.342 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@3df3410a
2025-06-25 15:43:11.342 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@3df3410a
2025-06-25 15:43:11.342 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-25 15:43:11.344 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@7a274521
2025-06-25 15:43:11.344 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@7a274521
2025-06-25 15:43:11.346 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@e171f93
2025-06-25 15:43:11.346 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@4ad3969
2025-06-25 15:43:11.348 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@5d7ff311
2025-06-25 15:43:11.349 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@2d7aa291
2025-06-25 15:43:11.350 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@1ba7db2a
2025-06-25 15:43:11.351 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@762cdf46
2025-06-25 15:43:11.352 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@54e94de9
2025-06-25 15:43:11.352 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@2cff03cf
2025-06-25 15:43:11.352 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@924f3f1
2025-06-25 15:43:11.448 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-25 15:43:11.462 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-25 15:43:11.559 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7c68a63c
2025-06-25 15:43:11.560 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-25 15:43:11.591 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-25 15:43:11.591 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-25 15:43:11.609 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7c359808) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1f013047)
2025-06-25 15:43:11.610 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@16361e61) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@51566ce0)
2025-06-25 15:43:11.610 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1734b1a) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@17e6d07b)
2025-06-25 15:43:11.610 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@318511f0) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@53564a4c)
2025-06-25 15:43:11.610 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4866e0a7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@69a294d8)
2025-06-25 15:43:11.610 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@70b1028d) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@11d422fd)
2025-06-25 15:43:11.610 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6e489bb8) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1331d6fd)
2025-06-25 15:43:11.611 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6b6c0b7c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5b1f0f26)
2025-06-25 15:43:11.612 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7120daa6) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6cbb6c41)
2025-06-25 15:43:11.613 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-25 15:43:11.613 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-25 15:43:11.614 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-25 15:43:11.614 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 15:43:11.615 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 15:43:11.616 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@90394d
2025-06-25 15:43:11.616 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@e171f93`
2025-06-25 15:43:11.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-25 15:43:11.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-25 15:43:11.619 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 15:43:11.619 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 15:43:11.619 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 15:43:11.620 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 15:43:11.620 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 15:43:11.620 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 15:43:11.620 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 15:43:11.620 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 15:43:11.620 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 15:43:11.621 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@1d1deb11] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@18d1d137]
2025-06-25 15:43:12.274 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@1d1deb11] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@614d01b]
2025-06-25 15:43:12.279 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@614d01b] for TypeConfiguration
2025-06-25 15:43:12.279 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 15:43:12.952 [main] INFO  c.d.extract.controller.AsyncExtractController - AsyncExtractController initialized successfully
2025-06-25 15:43:12.957 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-25 15:43:13.385 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-25 15:43:13.508 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-25 15:43:13.541 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 2
2025-06-25 15:43:13.542 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-25 15:43:13.542 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-25 15:43:13.543 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-25 15:43:13.966 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-25 15:43:13.983 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 7.502 seconds (process running for 8.129)
2025-06-25 15:44:27.148 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-25 15:44:27.172 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-25 15:44:27.180 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-25 15:44:27.186 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-25 15:44:27.193 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-25 15:44:27.209 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1, textLength: 38
2025-06-25 15:44:27.212 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 38, 参数: triples
2025-06-25 15:44:27.214 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-1, 文本长度: 38
2025-06-25 15:44:27.225 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 38 字符
2025-06-25 15:44:27.225 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:44:27.225 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 38，当前并发数: 1
2025-06-25 15:44:27.225 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:44:37.090 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 9864ms，响应长度: 351
2025-06-25 15:44:37.096 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 38，处理模式: 直接处理
2025-06-25 15:44:37.116 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 351
2025-06-25 15:44:37.117 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "合作伙伴",
      "object": "巩俐",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "配偶",
      "object": "陈婷",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "好友",
      "object": "梁朝伟",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:44:37.117 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "合作伙伴",
      "object": "巩俐",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "配偶",
      "object": "陈婷",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "好友",
      "object": "梁朝伟",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:44:37.119 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 15:44:37.120 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-25 15:44:37.196 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:44:37.215 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 15:44:37.216 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:44:37.220 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 巩俐 已存在，跳过插入
2025-06-25 15:44:37.227 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:44:37.273 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:44:37.313 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:44:37.331 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 巩俐 [合作伙伴]
2025-06-25 15:44:37.332 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[合作伙伴]--> 巩俐
2025-06-25 15:44:37.336 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:44:37.340 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 15:44:37.341 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:44:37.343 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 陈婷 已存在，跳过插入
2025-06-25 15:44:37.345 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:44:37.349 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:44:37.351 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:44:37.355 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 陈婷 [配偶]
2025-06-25 15:44:37.355 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[配偶]--> 陈婷
2025-06-25 15:44:37.358 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:44:37.364 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 15:44:37.365 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:44:37.367 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 梁朝伟 已存在，跳过插入
2025-06-25 15:44:37.368 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:44:37.374 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:44:37.376 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:44:37.378 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 梁朝伟 [好友]
2025-06-25 15:44:37.378 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[好友]--> 梁朝伟
2025-06-25 15:44:37.378 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:44:37.386 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 38
2025-06-25 15:44:37.387 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 10182ms
2025-06-25 15:44:38.418 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1, textLength: 40
2025-06-25 15:44:38.419 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 40, 参数: triples
2025-06-25 15:44:38.421 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-1, 文本长度: 40
2025-06-25 15:44:38.426 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 40 字符
2025-06-25 15:44:38.427 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:44:38.427 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 40，当前并发数: 1
2025-06-25 15:44:38.427 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:44:48.299 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 9872ms，响应长度: 356
2025-06-25 15:44:48.300 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 40，处理模式: 直接处理
2025-06-25 15:44:48.305 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 356
2025-06-25 15:44:48.305 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "巩俐",
      "predicate": "主演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "演唱",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:44:48.305 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "巩俐",
      "predicate": "主演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "演唱",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:44:48.308 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 15:44:48.308 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-25 15:44:48.310 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:44:48.315 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 15:44:48.317 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:44:48.319 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-25 15:44:48.321 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:44:48.328 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:44:48.333 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:44:48.336 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 《红高粱》 [导演]
2025-06-25 15:44:48.337 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《红高粱》
2025-06-25 15:44:48.338 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:44:48.341 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 巩俐 已存在，跳过插入
2025-06-25 15:44:48.342 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:44:48.345 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-25 15:44:48.346 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:44:48.352 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:44:48.356 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:44:48.358 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 巩俐 -> 《红高粱》 [主演]
2025-06-25 15:44:48.358 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 巩俐 --[主演]--> 《红高粱》
2025-06-25 15:44:48.360 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:44:48.363 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-25 15:44:48.368 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:44:48.371 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-25 15:44:48.373 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:44:48.379 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 15:44:48.384 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:44:48.386 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 周杰伦 -> 《青花瓷》 [演唱]
2025-06-25 15:44:48.387 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[演唱]--> 《青花瓷》
2025-06-25 15:44:48.387 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:44:48.391 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 40
2025-06-25 15:44:48.391 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 9974ms
2025-06-25 15:44:49.411 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1, textLength: 47
2025-06-25 15:44:49.412 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 47, 参数: triples
2025-06-25 15:44:49.412 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-1, 文本长度: 47
2025-06-25 15:44:49.412 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 47 字符
2025-06-25 15:44:49.412 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:44:49.412 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 47，当前并发数: 1
2025-06-25 15:44:49.413 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:44:57.993 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 8579ms，响应长度: 264
2025-06-25 15:44:57.994 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 47，处理模式: 直接处理
2025-06-25 15:44:58.001 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 264
2025-06-25 15:44:58.002 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "第41届柏林国际电影节",
      "predicate": "举行时间",
      "object": "1991年",
      "confidence": 0.95
    },
    {
      "subject": "2008年北京奥运会开幕式",
      "predicate": "举办地点",
      "object": "鸟巢",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:44:58.003 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "第41届柏林国际电影节",
      "predicate": "举行时间",
      "object": "1991年",
      "confidence": 0.95
    },
    {
      "subject": "2008年北京奥运会开幕式",
      "predicate": "举办地点",
      "object": "鸟巢",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:44:58.004 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 15:44:58.004 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组，包括实体和关系保存
2025-06-25 15:44:58.008 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:44:58.012 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 第41届柏林国际电影节 已存在，跳过插入
2025-06-25 15:44:58.014 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:44:58.019 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 1991年 已存在，跳过插入
2025-06-25 15:44:58.019 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 第41届柏林国际电影节 --[举行时间]--> 1991年
2025-06-25 15:44:58.021 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:44:58.024 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 2008年北京奥运会开幕式 已存在，跳过插入
2025-06-25 15:44:58.024 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 2008年北京奥运会开幕式 --[举办地点]--> 鸟巢
2025-06-25 15:44:58.024 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:44:58.026 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 47
2025-06-25 15:44:58.027 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 8616ms
2025-06-25 15:44:58.045 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 3, textLength: 58
2025-06-25 15:44:58.045 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 58, 参数: triples
2025-06-25 15:44:58.045 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-1, 文本长度: 58
2025-06-25 15:44:58.045 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 58 字符
2025-06-25 15:44:58.045 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:44:58.045 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 58，当前并发数: 1
2025-06-25 15:44:58.045 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:45:08.697 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 10652ms，响应长度: 485
2025-06-25 15:45:08.697 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 58，处理模式: 直接处理
2025-06-25 15:45:08.701 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 485
2025-06-25 15:45:08.701 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "参加",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "获奖",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "担任",
      "object": "北京奥运会开幕式总导演",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "电影节终身成就奖",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:45:08.701 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "参加",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "获奖",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "担任",
      "object": "北京奥运会开幕式总导演",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "电影节终身成就奖",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:45:08.703 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 15:45:08.703 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-25 15:45:08.705 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:08.708 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 15:45:08.710 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:45:08.713 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 柏林电影节颁奖典礼 已存在，跳过插入
2025-06-25 15:45:08.714 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:08.728 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 15:45:08.732 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:08.737 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 张艺谋 -> 柏林电影节颁奖典礼 [参加]
2025-06-25 15:45:08.737 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[参加]--> 柏林电影节颁奖典礼
2025-06-25 15:45:08.739 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:08.743 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 15:45:08.744 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:45:08.745 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 柏林电影节颁奖典礼 已存在，跳过插入
2025-06-25 15:45:08.748 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:08.752 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 15:45:08.754 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:08.758 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 张艺谋 -> 柏林电影节颁奖典礼 [获奖]
2025-06-25 15:45:08.758 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[获奖]--> 柏林电影节颁奖典礼
2025-06-25 15:45:08.759 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:08.761 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 15:45:08.762 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:45:08.763 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 北京奥运会开幕式总导演 已存在，跳过插入
2025-06-25 15:45:08.766 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:08.775 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 15:45:08.778 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:08.780 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 张艺谋 -> 北京奥运会开幕式总导演 [担任]
2025-06-25 15:45:08.780 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[担任]--> 北京奥运会开幕式总导演
2025-06-25 15:45:08.782 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:08.784 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 15:45:08.785 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:08.787 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 电影节终身成就奖 已存在，跳过插入
2025-06-25 15:45:08.789 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:08.792 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:08.794 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:08.795 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 成龙 -> 电影节终身成就奖 [获得]
2025-06-25 15:45:08.795 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[获得]--> 电影节终身成就奖
2025-06-25 15:45:08.795 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:45:08.799 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 58
2025-06-25 15:45:08.800 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 10756ms
2025-06-25 15:45:09.818 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 3, textLength: 56
2025-06-25 15:45:09.818 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 56, 参数: triples
2025-06-25 15:45:09.818 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-1, 文本长度: 56
2025-06-25 15:45:09.818 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 56 字符
2025-06-25 15:45:09.819 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:45:09.819 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 56，当前并发数: 1
2025-06-25 15:45:09.819 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:45:21.193 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 11374ms，响应长度: 477
2025-06-25 15:45:21.193 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 56，处理模式: 直接处理
2025-06-25 15:45:21.196 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 477
2025-06-25 15:45:21.196 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "《红高粱》",
      "predicate": "获奖",
      "object": "金熊奖",
      "confidence": 0.95
    },
    {
      "subject": "《红高粱》",
      "predicate": "获奖地点",
      "object": "柏林电影节",
      "confidence": 0.95
    },
    {
      "subject": "《青花瓷》",
      "predicate": "演出",
      "object": "奥运会开幕式",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映",
      "object": "香港电影节",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:45:21.196 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "《红高粱》",
      "predicate": "获奖",
      "object": "金熊奖",
      "confidence": 0.95
    },
    {
      "subject": "《红高粱》",
      "predicate": "获奖地点",
      "object": "柏林电影节",
      "confidence": 0.95
    },
    {
      "subject": "《青花瓷》",
      "predicate": "演出",
      "object": "奥运会开幕式",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映",
      "object": "香港电影节",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:45:21.197 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 15:45:21.197 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-25 15:45:21.200 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:45:21.203 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《红高粱》 已存在，跳过插入
2025-06-25 15:45:21.203 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《红高粱》 --[获奖]--> 金熊奖
2025-06-25 15:45:21.204 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:45:21.206 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《红高粱》 已存在，跳过插入
2025-06-25 15:45:21.206 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:45:21.208 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 柏林电影节 已存在，跳过插入
2025-06-25 15:45:21.215 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 15:45:21.221 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 15:45:21.229 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:21.232 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 柏林电影节 -> 《红高粱》 [在_获奖地点]
2025-06-25 15:45:21.232 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《红高粱》 --[获奖地点]--> 柏林电影节
2025-06-25 15:45:21.233 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:45:21.235 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-25 15:45:21.236 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:45:21.238 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 奥运会开幕式 已存在，跳过插入
2025-06-25 15:45:21.239 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 15:45:21.244 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 15:45:21.249 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:21.252 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 奥运会开幕式 -> 《青花瓷》 [在_演出]
2025-06-25 15:45:21.252 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《青花瓷》 --[演出]--> 奥运会开幕式
2025-06-25 15:45:21.253 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:45:21.257 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《醉拳》 已存在，跳过插入
2025-06-25 15:45:21.258 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:45:21.261 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 香港电影节 已存在，跳过插入
2025-06-25 15:45:21.261 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 15:45:21.268 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 15:45:21.271 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:21.274 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 香港电影节 -> 《醉拳》 [在_首映]
2025-06-25 15:45:21.274 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《醉拳》 --[首映]--> 香港电影节
2025-06-25 15:45:21.274 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:45:21.280 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 56
2025-06-25 15:45:21.280 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 11462ms
2025-06-25 15:45:22.302 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 4, textLength: 88
2025-06-25 15:45:22.302 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 88, 参数: triples
2025-06-25 15:45:22.302 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-1, 文本长度: 88
2025-06-25 15:45:22.302 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 88 字符
2025-06-25 15:45:22.302 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:45:22.302 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 88，当前并发数: 1
2025-06-25 15:45:22.302 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:45:38.801 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 16499ms，响应长度: 806
2025-06-25 15:45:38.801 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 88，处理模式: 直接处理
2025-06-25 15:45:38.804 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 806
2025-06-25 15:45:38.804 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "主演",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映于",
      "object": "香港电影节",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "参加",
      "object": "电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "终身成就奖",
      "confidence": 0.95
    },
    {
      "subject": "李小龙",
      "predicate": "师父",
      "object": "成龙",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《龙争虎斗》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:45:38.804 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "主演",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映于",
      "object": "香港电影节",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "参加",
      "object": "电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "终身成就奖",
      "confidence": 0.95
    },
    {
      "subject": "李小龙",
      "predicate": "师父",
      "object": "成龙",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《龙争虎斗》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:45:38.805 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 15:45:38.805 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 7 个三元组，包括实体和关系保存
2025-06-25 15:45:38.810 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:38.812 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 15:45:38.813 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:38.814 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 《醉拳》 已存在，跳过插入
2025-06-25 15:45:38.815 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:38.818 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:38.821 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:38.823 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 成龙 -> 《醉拳》 [主演]
2025-06-25 15:45:38.823 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[主演]--> 《醉拳》
2025-06-25 15:45:38.824 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:45:38.825 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《醉拳》 已存在，跳过插入
2025-06-25 15:45:38.826 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:45:38.827 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 香港电影节 已存在，跳过插入
2025-06-25 15:45:38.829 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 15:45:38.832 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 15:45:38.835 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:38.837 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 香港电影节 -> 《醉拳》 [在_首映于]
2025-06-25 15:45:38.837 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《醉拳》 --[首映于]--> 香港电影节
2025-06-25 15:45:38.838 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:38.839 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 15:45:38.840 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:45:38.842 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 电影节颁奖典礼 已存在，跳过插入
2025-06-25 15:45:38.844 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:38.849 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 15:45:38.852 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:38.855 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 成龙 -> 电影节颁奖典礼 [参加]
2025-06-25 15:45:38.855 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[参加]--> 电影节颁奖典礼
2025-06-25 15:45:38.855 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:38.857 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 15:45:38.858 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:38.859 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 终身成就奖 已存在，跳过插入
2025-06-25 15:45:38.860 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:38.865 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:38.867 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:38.868 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 成龙 -> 终身成就奖 [获得]
2025-06-25 15:45:38.868 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[获得]--> 终身成就奖
2025-06-25 15:45:38.869 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:38.870 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 李小龙 已存在，跳过插入
2025-06-25 15:45:38.871 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:38.873 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 15:45:38.873 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:38.876 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:38.878 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:38.879 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 李小龙 -> 成龙 [师父]
2025-06-25 15:45:38.879 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 李小龙 --[师父]--> 成龙
2025-06-25 15:45:38.881 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:45:38.882 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 功夫电影节 已存在，跳过插入
2025-06-25 15:45:38.883 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:45:38.884 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《醉拳》 已存在，跳过插入
2025-06-25 15:45:38.885 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 15:45:38.887 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 15:45:38.888 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:38.889 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系: 功夫电影节 -> 《醉拳》 [展映]
2025-06-25 15:45:38.889 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 功夫电影节 --[展映]--> 《醉拳》
2025-06-25 15:45:38.890 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:45:38.891 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 功夫电影节 已存在，跳过插入
2025-06-25 15:45:38.892 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:38.893 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 《龙争虎斗》 已存在，跳过插入
2025-06-25 15:45:38.896 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:38.898 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 15:45:38.899 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:38.900 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系(反向): 《龙争虎斗》 -> 功夫电影节 [参与_展映]
2025-06-25 15:45:38.900 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 功夫电影节 --[展映]--> 《龙争虎斗》
2025-06-25 15:45:38.900 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:45:38.905 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 88
2025-06-25 15:45:38.905 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 16604ms
2025-06-25 15:45:38.915 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1, textLength: 25
2025-06-25 15:45:38.915 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 25, 参数: triples
2025-06-25 15:45:38.915 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-1, 文本长度: 25
2025-06-25 15:45:38.915 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 25 字符
2025-06-25 15:45:38.915 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:45:38.915 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 25，当前并发数: 1
2025-06-25 15:45:38.915 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:45:46.707 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 7792ms，响应长度: 248
2025-06-25 15:45:46.708 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 25，处理模式: 直接处理
2025-06-25 15:45:46.713 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 248
2025-06-25 15:45:46.713 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语流行音乐歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "创作",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:45:46.713 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语流行音乐歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "创作",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:45:46.716 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 15:45:46.716 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组，包括实体和关系保存
2025-06-25 15:45:46.724 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:46.728 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-25 15:45:46.728 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:46.731 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 华语流行音乐歌手 已存在，跳过插入
2025-06-25 15:45:46.734 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:46.739 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:46.741 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:46.743 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 周杰伦 -> 华语流行音乐歌手 [职业]
2025-06-25 15:45:46.743 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[职业]--> 华语流行音乐歌手
2025-06-25 15:45:46.744 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:46.752 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-25 15:45:46.756 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:45:46.759 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-25 15:45:46.763 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:46.766 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 15:45:46.771 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:46.774 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 周杰伦 -> 《青花瓷》 [创作]
2025-06-25 15:45:46.774 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[创作]--> 《青花瓷》
2025-06-25 15:45:46.774 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:45:46.783 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 25
2025-06-25 15:45:46.783 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 7868ms
2025-06-25 15:45:47.801 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 3, textLength: 42
2025-06-25 15:45:47.802 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 42, 参数: triples
2025-06-25 15:45:47.802 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-1, 文本长度: 42
2025-06-25 15:45:47.802 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 42 字符
2025-06-25 15:45:47.802 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:45:47.802 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 42，当前并发数: 1
2025-06-25 15:45:47.802 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:45:58.777 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 10975ms，响应长度: 360
2025-06-25 15:45:58.778 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 42，处理模式: 直接处理
2025-06-25 15:45:58.781 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 360
2025-06-25 15:45:58.781 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语流行音乐歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "创作",
      "object": "《青花瓷》",
      "confidence": 0.95
    },
    {
      "subject": "《青花瓷》",
      "predicate": "获奖",
      "object": "金曲奖",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:45:58.782 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语流行音乐歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "创作",
      "object": "《青花瓷》",
      "confidence": 0.95
    },
    {
      "subject": "《青花瓷》",
      "predicate": "获奖",
      "object": "金曲奖",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:45:58.784 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 15:45:58.784 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-25 15:45:58.786 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:58.790 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-25 15:45:58.793 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:58.797 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 华语流行音乐歌手 已存在，跳过插入
2025-06-25 15:45:58.798 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:58.801 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:58.803 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:58.805 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 周杰伦 -> 华语流行音乐歌手 [职业]
2025-06-25 15:45:58.805 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[职业]--> 华语流行音乐歌手
2025-06-25 15:45:58.806 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:58.808 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-25 15:45:58.809 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:45:58.811 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-25 15:45:58.812 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:58.816 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 15:45:58.819 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:58.822 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 周杰伦 -> 《青花瓷》 [创作]
2025-06-25 15:45:58.822 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[创作]--> 《青花瓷》
2025-06-25 15:45:58.823 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:45:58.825 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-25 15:45:58.825 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《青花瓷》 --[获奖]--> 金曲奖
2025-06-25 15:45:58.825 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:45:58.829 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 42
2025-06-25 15:45:58.829 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 11028ms
2025-06-25 15:45:58.866 [reactor-http-nio-8] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1
2025-06-25 15:45:58.870 [reactor-http-nio-8] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 4ms
2025-06-25 15:45:58.870 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-1, 文本长度: 32
2025-06-25 15:45:58.871 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 32 字符
2025-06-25 15:45:58.871 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:45:58.871 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 32，当前并发数: 1
2025-06-25 15:45:58.871 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:45:59.894 [reactor-http-nio-9] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities, textInputType: JSONArray, arraySize: 2
2025-06-25 15:45:59.895 [reactor-http-nio-9] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 15:45:59.895 [TextExtract-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-2, 文本长度: 44
2025-06-25 15:45:59.895 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 44 字符
2025-06-25 15:45:59.895 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:45:59.895 [TextExtract-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 44，当前并发数: 2
2025-06-25 15:45:59.895 [TextExtract-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:46:01.925 [reactor-http-nio-11] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 15:46:01.925 [reactor-http-nio-11] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 15:46:01.925 [TextExtract-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-3, 文本长度: 90
2025-06-25 15:46:01.925 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 90 字符
2025-06-25 15:46:01.926 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:46:01.926 [TextExtract-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 90，当前并发数: 3
2025-06-25 15:46:01.926 [TextExtract-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:46:03.951 [reactor-http-nio-1] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 15:46:03.952 [reactor-http-nio-1] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 15:46:03.952 [TextExtract-4] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-4, 文本长度: 439
2025-06-25 15:46:03.952 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 439 字符
2025-06-25 15:46:03.952 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:46:03.952 [TextExtract-4] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 439，当前并发数: 4
2025-06-25 15:46:03.952 [TextExtract-4] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:46:05.980 [reactor-http-nio-3] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 15:46:05.980 [reactor-http-nio-3] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 15:46:05.980 [TextExtract-5] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-5, 文本长度: 2050
2025-06-25 15:46:05.981 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 2050 字符
2025-06-25 15:46:05.981 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - 📄 检测到长文本，启用分批处理模式
2025-06-25 15:46:05.981 [TextExtract-5] INFO  com.datacenter.extract.service.LongTextProcessor - 🔍 开始处理长文本，长度: 2050 字符
2025-06-25 15:46:05.984 [TextExtract-5] INFO  com.datacenter.extract.service.LongTextProcessor - 📊 文本分片完成，共 2 个分片
2025-06-25 15:46:05.986 [pool-5-thread-1] INFO  com.datacenter.extract.service.LongTextProcessor - ⚡ 处理分片 1 (1990 字符)
2025-06-25 15:46:05.986 [pool-5-thread-2] INFO  com.datacenter.extract.service.LongTextProcessor - ⚡ 处理分片 2 (238 字符)
2025-06-25 15:46:05.986 [pool-5-thread-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 1990，当前并发数: 5
2025-06-25 15:46:05.986 [pool-5-thread-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 40秒
2025-06-25 15:46:10.157 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 11286ms，响应长度: 463
2025-06-25 15:46:10.158 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 32，处理模式: 直接处理
2025-06-25 15:46:10.159 [pool-5-thread-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 238，当前并发数: 5
2025-06-25 15:46:10.159 [pool-5-thread-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:46:10.161 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 463
2025-06-25 15:46:10.162 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "演员",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "歌手",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出生地",
      "object": "香港",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出演作品",
      "object": "《无间道》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:46:10.162 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "演员",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "歌手",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出生地",
      "object": "香港",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出演作品",
      "object": "《无间道》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:46:10.165 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 15:46:10.165 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-25 15:46:10.167 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:46:10.170 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 15:46:10.174 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:46:10.177 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 演员 已存在，跳过插入
2025-06-25 15:46:10.178 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:46:10.186 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:46:10.192 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:46:10.195 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 演员 [职业]
2025-06-25 15:46:10.195 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[职业]--> 演员
2025-06-25 15:46:10.196 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:46:10.199 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 15:46:10.200 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:46:10.202 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 歌手 已存在，跳过插入
2025-06-25 15:46:10.203 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:46:10.206 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:46:10.209 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:46:10.211 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 歌手 [职业]
2025-06-25 15:46:10.211 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[职业]--> 歌手
2025-06-25 15:46:10.212 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:46:10.213 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 15:46:10.214 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:46:10.215 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 香港 已存在，跳过插入
2025-06-25 15:46:10.217 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:46:10.219 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:46:10.222 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:46:10.223 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 香港 [出生地]
2025-06-25 15:46:10.223 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[出生地]--> 香港
2025-06-25 15:46:10.224 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:46:10.226 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 15:46:10.227 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:46:10.228 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《无间道》 已存在，跳过插入
2025-06-25 15:46:10.231 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:46:10.234 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 15:46:10.236 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:46:10.238 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 刘德华 -> 《无间道》 [出演作品]
2025-06-25 15:46:10.238 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[出演作品]--> 《无间道》
2025-06-25 15:46:10.238 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:46:10.245 [reactor-http-nio-10] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 10350ms，响应长度: 362
2025-06-25 15:46:10.245 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 44，处理模式: 直接处理
2025-06-25 15:46:10.247 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 32
2025-06-25 15:46:10.248 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 362
2025-06-25 15:46:10.248 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "执导",
      "object": "《英雄》",
      "confidence": 0.95
    },
    {
      "subject": "《英雄》",
      "predicate": "类型",
      "object": "古装武侠电影",
      "confidence": 0.95
    },
    {
      "subject": "《三体》三部曲",
      "predicate": "代表作品",
      "object": "刘慈欣",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:46:10.248 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "执导",
      "object": "《英雄》",
      "confidence": 0.95
    },
    {
      "subject": "《英雄》",
      "predicate": "类型",
      "object": "古装武侠电影",
      "confidence": 0.95
    },
    {
      "subject": "《三体》三部曲",
      "predicate": "代表作品",
      "object": "刘慈欣",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:46:10.249 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 15:46:10.249 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-25 15:46:10.250 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:46:10.253 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 15:46:10.253 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:46:10.255 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《英雄》 已存在，跳过插入
2025-06-25 15:46:10.256 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:46:10.259 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 15:46:10.261 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:46:10.263 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 张艺谋 -> 《英雄》 [执导]
2025-06-25 15:46:10.263 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[执导]--> 《英雄》
2025-06-25 15:46:10.264 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:46:10.266 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《英雄》 已存在，跳过插入
2025-06-25 15:46:10.266 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《英雄》 --[类型]--> 古装武侠电影
2025-06-25 15:46:10.267 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:46:10.268 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《三体》三部曲 已存在，跳过插入
2025-06-25 15:46:10.269 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:46:10.270 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 刘慈欣 已存在，跳过插入
2025-06-25 15:46:10.270 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《三体》三部曲 --[代表作品]--> 刘慈欣
2025-06-25 15:46:10.270 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:46:10.274 [TextExtract-2] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 44
2025-06-25 15:46:21.686 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 11527ms，响应长度: 483
2025-06-25 15:46:29.260 [reactor-http-nio-12] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 27334ms，响应长度: 694
2025-06-25 15:46:29.261 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 90，处理模式: 直接处理
2025-06-25 15:46:29.266 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 694
2025-06-25 15:46:29.267 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张三",
      "predicate": "职业",
      "object": "软件工程师",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "工作地点",
      "object": "北京的一家科技公司",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "负责",
      "object": "开发人工智能系统",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "李四",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "王五",
      "confidence": 0.95
    },
    {
      "subject": "他们的团队",
      "predicate": "开发",
      "object": "智能对话系统",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:46:29.267 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张三",
      "predicate": "职业",
      "object": "软件工程师",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "工作地点",
      "object": "北京的一家科技公司",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "负责",
      "object": "开发人工智能系统",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "李四",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "王五",
      "confidence": 0.95
    },
    {
      "subject": "他们的团队",
      "predicate": "开发",
      "object": "智能对话系统",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:46:29.270 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 15:46:29.271 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 处理 6 个三元组，包括实体和关系保存
2025-06-25 15:46:29.281 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:46:29.287 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 张三 已存在，跳过插入
2025-06-25 15:46:29.290 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:46:29.293 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 软件工程师 已存在，跳过插入
2025-06-25 15:46:29.295 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:46:29.301 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:46:29.306 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:46:29.309 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 软件工程师 [职业]
2025-06-25 15:46:29.309 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[职业]--> 软件工程师
2025-06-25 15:46:29.309 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[工作地点]--> 北京的一家科技公司
2025-06-25 15:46:29.312 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:46:29.315 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 开发人工智能系统 已存在，跳过插入
2025-06-25 15:46:29.316 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[负责]--> 开发人工智能系统
2025-06-25 15:46:29.317 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:46:29.320 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 张三 已存在，跳过插入
2025-06-25 15:46:29.321 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:46:29.324 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 李四 已存在，跳过插入
2025-06-25 15:46:29.325 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:46:29.328 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:46:29.330 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:46:29.333 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 李四 [合作]
2025-06-25 15:46:29.333 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[合作]--> 李四
2025-06-25 15:46:29.334 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:46:29.337 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 张三 已存在，跳过插入
2025-06-25 15:46:29.337 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:46:29.339 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 王五 已存在，跳过插入
2025-06-25 15:46:29.340 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:46:29.344 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:46:29.346 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:46:29.348 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 王五 [合作]
2025-06-25 15:46:29.348 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[合作]--> 王五
2025-06-25 15:46:29.348 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 他们的团队 --[开发]--> 智能对话系统
2025-06-25 15:46:29.349 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:46:29.356 [TextExtract-3] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 90
2025-06-25 15:46:33.978 [parallel-10] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30026ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-25 15:46:33.979 [TextExtract-4] ERROR com.datacenter.extract.service.SmartAIProvider - ❌ AI提取失败，类型: entities,relations，文本长度: 439
2025-06-25 15:46:33.979 [TextExtract-4] ERROR com.datacenter.extract.service.SmartAIProvider - 💥 AI提取过程异常: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$0(SmartAIProvider.java:77)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.service.TextExtractionService.processTextAsync(TextExtractionService.java:72)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.AsyncExecutionInterceptor.lambda$invoke$0(AsyncExecutionInterceptor.java:115)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 15:46:33.983 [TextExtract-4] ERROR c.datacenter.extract.service.TextExtractionService - 异步文本提取失败，错误: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-25 15:46:45.992 [parallel-11] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 40006ms，错误: Did not observe any item or terminal signal within 40000ms in 'flatMap' (and no fallback has been configured)
2025-06-25 15:46:45.998 [TextExtract-5] INFO  com.datacenter.extract.service.LongTextProcessor - ✅ 分片合并完成，成功率: 2/2 ({:.1f}%)，提取三元组: 100.0
2025-06-25 15:46:45.998 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 2050，处理模式: 分批处理
2025-06-25 15:46:46.001 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 579
2025-06-25 15:46:46.001 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"团队","predicate":"签署","object":"技术转让协议","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"计划研究","object":"多模态知识图谱","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"医疗、金融和教育","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"取得成就","object":"人工智能和知识图谱领域","confidence":0.95,"chunk_index":1,"chunk_start":0}],"total_chunks":2,"success_chunks":2,"success_rate":"100.00%","total_triples":4,"processing_method":"batch_processing","timestamp":1750837605998}
2025-06-25 15:46:46.001 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"团队","predicate":"签署","object":"技术转让协议","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"计划研究","object":"多模态知识图谱","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"医疗、金融和教育","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"取得成就","object":"人工智能和知识图谱领域","confidence":0.95,"chunk_index":1,"chunk_start":0}],"total_chunks":2,"success_chunks":2,"success_rate":"100.00%","total_triples":4,"processing_method":"batch_processing","timestamp":1750837605998}
2025-06-25 15:46:46.006 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 7 个主要字段: [triples, total_chunks, success_chunks, success_rate, total_triples, processing_method, timestamp]
2025-06-25 15:46:46.007 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-25 15:46:46.007 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[签署]--> 技术转让协议
2025-06-25 15:46:46.007 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[计划研究]--> 多模态知识图谱
2025-06-25 15:46:46.007 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[探索应用]--> 医疗、金融和教育
2025-06-25 15:46:46.007 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[取得成就]--> 人工智能和知识图谱领域
2025-06-25 15:46:46.007 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:46:46.010 [TextExtract-5] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 2050
2025-06-25 15:53:36.151 [SpringApplicationShutdownHook] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 15:53:36.152 [SpringApplicationShutdownHook] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@614d01b] for TypeConfiguration
2025-06-25 15:53:36.152 [SpringApplicationShutdownHook] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@2da57fc3] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@614d01b]
2025-06-25 15:53:36.154 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-25 15:53:36.161 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-25 15:53:41.214 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 88525 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-25 15:53:41.216 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-25 15:53:42.155 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 15:53:42.156 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-25 15:53:42.254 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 94 ms. Found 7 JPA repository interfaces.
2025-06-25 15:53:42.276 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 15:53:42.277 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-25 15:53:42.294 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityCelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 15:53:42.294 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityEventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 15:53:42.294 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 15:53:42.295 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 15:53:42.296 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 15:53:42.296 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 15:53:42.296 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 15:53:42.296 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 16 ms. Found 0 Redis repository interfaces.
2025-06-25 15:53:45.477 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@173cfb01
2025-06-25 15:53:45.478 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@173cfb01
2025-06-25 15:53:45.478 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@173cfb01
2025-06-25 15:53:45.479 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@249a45fd
2025-06-25 15:53:45.479 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@249a45fd
2025-06-25 15:53:45.479 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@268f0ff3
2025-06-25 15:53:45.479 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@268f0ff3
2025-06-25 15:53:45.479 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@11978f52
2025-06-25 15:53:45.481 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@11978f52
2025-06-25 15:53:45.481 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@3e0855b0
2025-06-25 15:53:45.481 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@3e0855b0
2025-06-25 15:53:45.481 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@3e0855b0
2025-06-25 15:53:45.481 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@484b5a21
2025-06-25 15:53:45.481 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@484b5a21
2025-06-25 15:53:45.482 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@484b5a21
2025-06-25 15:53:45.482 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@16e5344c
2025-06-25 15:53:45.482 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@16e5344c
2025-06-25 15:53:45.482 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@55746340
2025-06-25 15:53:45.482 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@6a0c7af6
2025-06-25 15:53:45.483 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@6a0c7af6
2025-06-25 15:53:45.483 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@7f1ad846
2025-06-25 15:53:45.483 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-25 15:53:45.483 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-25 15:53:45.483 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-25 15:53:45.484 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-25 15:53:45.484 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-25 15:53:45.484 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-25 15:53:45.484 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-25 15:53:45.484 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-25 15:53:45.484 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-25 15:53:45.484 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-25 15:53:45.484 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-25 15:53:45.484 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-25 15:53:45.484 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-25 15:53:45.484 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-25 15:53:45.484 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-25 15:53:45.485 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-25 15:53:45.485 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-25 15:53:45.486 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-25 15:53:45.487 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-25 15:53:45.487 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-25 15:53:45.487 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 15:53:45.487 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 15:53:45.487 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 15:53:45.487 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-25 15:53:45.487 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-25 15:53:45.487 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-25 15:53:45.487 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@5e7e7a7e
2025-06-25 15:53:45.487 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-25 15:53:45.487 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-25 15:53:45.487 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-25 15:53:45.487 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-25 15:53:45.488 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-25 15:53:45.488 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@5abc5854
2025-06-25 15:53:45.489 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-25 15:53:45.489 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-25 15:53:45.489 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-25 15:53:45.489 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-25 15:53:45.489 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-25 15:53:45.489 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-25 15:53:45.489 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-25 15:53:45.489 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-25 15:53:45.489 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 15:53:45.489 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-25 15:53:45.489 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-25 15:53:45.490 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-25 15:53:45.490 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-25 15:53:45.490 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-25 15:53:45.490 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-25 15:53:45.491 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-25 15:53:45.492 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@586486c
2025-06-25 15:53:45.492 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@586486c
2025-06-25 15:53:45.492 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-25 15:53:45.492 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-25 15:53:45.493 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@7fbbdd8a
2025-06-25 15:53:45.493 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-25 15:53:45.493 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-25 15:53:45.494 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-25 15:53:45.494 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 15:53:45.495 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 15:53:45.496 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 15:53:45.496 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 15:53:45.496 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 15:53:45.496 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 15:53:45.496 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 15:53:45.496 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-25 15:53:45.496 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-25 15:53:45.496 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-25 15:53:45.496 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-25 15:53:45.496 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-25 15:53:45.496 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-25 15:53:45.496 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-25 15:53:45.496 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 15:53:45.496 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 15:53:45.496 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 15:53:45.497 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-25 15:53:45.497 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 15:53:45.497 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 15:53:45.497 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 15:53:45.498 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 15:53:45.498 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 15:53:45.498 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 15:53:45.498 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 15:53:45.498 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 15:53:45.498 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-25 15:53:45.499 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-25 15:53:45.499 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-25 15:53:45.499 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-25 15:53:45.500 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-25 15:53:45.500 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-25 15:53:45.500 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-25 15:53:45.500 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-25 15:53:45.500 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-25 15:53:45.500 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@2a259f6f
2025-06-25 15:53:45.500 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@2a259f6f
2025-06-25 15:53:45.501 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@7ccf6114
2025-06-25 15:53:45.502 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@7ccf6114
2025-06-25 15:53:45.503 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@3df3410a
2025-06-25 15:53:45.504 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@3df3410a
2025-06-25 15:53:45.504 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-25 15:53:45.506 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@7a274521
2025-06-25 15:53:45.506 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@7a274521
2025-06-25 15:53:45.508 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@e171f93
2025-06-25 15:53:45.509 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@4ad3969
2025-06-25 15:53:45.510 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@5d7ff311
2025-06-25 15:53:45.510 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@2d7aa291
2025-06-25 15:53:45.510 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@1ba7db2a
2025-06-25 15:53:45.510 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@762cdf46
2025-06-25 15:53:45.511 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@54e94de9
2025-06-25 15:53:45.511 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@2cff03cf
2025-06-25 15:53:45.511 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@924f3f1
2025-06-25 15:53:45.587 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-25 15:53:45.598 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-25 15:53:45.688 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7c68a63c
2025-06-25 15:53:45.689 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-25 15:53:45.722 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-25 15:53:45.723 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-25 15:53:45.742 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7c359808) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1f013047)
2025-06-25 15:53:45.743 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@16361e61) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@51566ce0)
2025-06-25 15:53:45.743 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1734b1a) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@17e6d07b)
2025-06-25 15:53:45.743 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@318511f0) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@53564a4c)
2025-06-25 15:53:45.743 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4866e0a7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@69a294d8)
2025-06-25 15:53:45.743 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@70b1028d) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@11d422fd)
2025-06-25 15:53:45.743 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6e489bb8) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1331d6fd)
2025-06-25 15:53:45.743 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6b6c0b7c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5b1f0f26)
2025-06-25 15:53:45.743 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7120daa6) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6cbb6c41)
2025-06-25 15:53:45.744 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-25 15:53:45.744 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-25 15:53:45.745 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-25 15:53:45.745 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 15:53:45.746 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 15:53:45.747 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@90394d
2025-06-25 15:53:45.747 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@e171f93`
2025-06-25 15:53:45.748 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-25 15:53:45.748 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-25 15:53:45.750 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 15:53:45.750 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 15:53:45.750 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 15:53:45.750 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 15:53:45.750 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 15:53:45.750 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 15:53:45.751 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 15:53:45.751 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 15:53:45.751 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 15:53:45.752 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@1d1deb11] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@18d1d137]
2025-06-25 15:53:46.420 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@1d1deb11] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@614d01b]
2025-06-25 15:53:46.425 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@614d01b] for TypeConfiguration
2025-06-25 15:53:46.426 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 15:53:47.101 [main] INFO  c.d.extract.controller.AsyncExtractController - AsyncExtractController initialized successfully
2025-06-25 15:53:47.105 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-25 15:53:47.501 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-25 15:53:47.617 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-25 15:53:47.649 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 2
2025-06-25 15:53:47.649 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-25 15:53:47.650 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-25 15:53:47.650 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-25 15:53:48.033 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-25 15:53:48.051 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 7.42 seconds (process running for 8.012)
2025-06-25 15:53:51.708 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-25 15:53:51.745 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-25 15:53:51.753 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-25 15:53:51.761 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-25 15:53:51.812 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-25 15:53:51.834 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1, textLength: 38
2025-06-25 15:53:51.837 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 38, 参数: triples
2025-06-25 15:53:51.839 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-1, 文本长度: 38
2025-06-25 15:53:51.857 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 38 字符
2025-06-25 15:53:51.858 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:53:51.858 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 38，当前并发数: 1
2025-06-25 15:53:51.858 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:54:06.073 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 14214ms，响应长度: 351
2025-06-25 15:54:06.079 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 38，处理模式: 直接处理
2025-06-25 15:54:06.098 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 351
2025-06-25 15:54:06.098 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "合作伙伴",
      "object": "巩俐",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "配偶",
      "object": "陈婷",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "好友",
      "object": "梁朝伟",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:54:06.098 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "合作伙伴",
      "object": "巩俐",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "配偶",
      "object": "陈婷",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "好友",
      "object": "梁朝伟",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:54:06.100 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 15:54:06.100 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-25 15:54:06.165 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:54:06.191 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 15:54:06.200 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 张艺谋 (通过三元组提取)
2025-06-25 15:54:06.202 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:54:06.204 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 15:54:06.207 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 巩俐 (通过三元组提取)
2025-06-25 15:54:06.212 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:54:06.226 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:54:06.236 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:54:06.240 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 巩俐 [合作伙伴]
2025-06-25 15:54:06.240 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[合作伙伴]--> 巩俐
2025-06-25 15:54:06.243 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:54:06.253 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 15:54:06.255 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:54:06.259 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 15:54:06.268 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 陈婷 (通过三元组提取)
2025-06-25 15:54:06.273 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:54:06.278 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:54:06.282 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:54:06.287 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 陈婷 [配偶]
2025-06-25 15:54:06.288 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[配偶]--> 陈婷
2025-06-25 15:54:06.293 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:54:06.300 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 15:54:06.303 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 刘德华 (通过三元组提取)
2025-06-25 15:54:06.305 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:54:06.307 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 15:54:06.309 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 梁朝伟 (通过三元组提取)
2025-06-25 15:54:06.310 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:54:06.313 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:54:06.315 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:54:06.317 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 梁朝伟 [好友]
2025-06-25 15:54:06.318 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[好友]--> 梁朝伟
2025-06-25 15:54:06.319 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:54:06.339 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 38
2025-06-25 15:54:06.340 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 14512ms
2025-06-25 15:54:07.378 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1, textLength: 40
2025-06-25 15:54:07.380 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 40, 参数: triples
2025-06-25 15:54:07.381 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-1, 文本长度: 40
2025-06-25 15:54:07.381 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 40 字符
2025-06-25 15:54:07.383 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:54:07.383 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 40，当前并发数: 1
2025-06-25 15:54:07.384 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:54:16.477 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 9093ms，响应长度: 356
2025-06-25 15:54:16.478 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 40，处理模式: 直接处理
2025-06-25 15:54:16.483 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 356
2025-06-25 15:54:16.484 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "巩俐",
      "predicate": "主演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "演唱",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:54:16.484 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "巩俐",
      "predicate": "主演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "演唱",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:54:16.488 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 15:54:16.488 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-25 15:54:16.491 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:54:16.495 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 15:54:16.497 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:54:16.500 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 15:54:16.502 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 《红高粱》 (通过三元组提取)
2025-06-25 15:54:16.504 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:54:16.515 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:54:16.518 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:54:16.520 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 《红高粱》 [导演]
2025-06-25 15:54:16.520 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《红高粱》
2025-06-25 15:54:16.521 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:54:16.522 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 巩俐 已存在，跳过插入
2025-06-25 15:54:16.524 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:54:16.525 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-25 15:54:16.526 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:54:16.531 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:54:16.532 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:54:16.533 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 巩俐 -> 《红高粱》 [主演]
2025-06-25 15:54:16.533 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 巩俐 --[主演]--> 《红高粱》
2025-06-25 15:54:16.534 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:54:16.536 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 15:54:16.537 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 周杰伦 (通过三元组提取)
2025-06-25 15:54:16.544 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:54:16.550 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 15:54:16.552 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《青花瓷》 (通过三元组提取)
2025-06-25 15:54:16.553 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:54:16.558 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 15:54:16.562 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:54:16.563 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 周杰伦 -> 《青花瓷》 [演唱]
2025-06-25 15:54:16.563 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[演唱]--> 《青花瓷》
2025-06-25 15:54:16.563 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:54:16.565 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 40
2025-06-25 15:54:16.565 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 9188ms
2025-06-25 15:54:17.590 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1, textLength: 47
2025-06-25 15:54:17.591 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 47, 参数: triples
2025-06-25 15:54:17.592 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-1, 文本长度: 47
2025-06-25 15:54:17.593 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 47 字符
2025-06-25 15:54:17.593 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:54:17.593 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 47，当前并发数: 1
2025-06-25 15:54:17.593 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:54:25.156 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 7563ms，响应长度: 264
2025-06-25 15:54:25.157 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 47，处理模式: 直接处理
2025-06-25 15:54:25.161 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 264
2025-06-25 15:54:25.161 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "第41届柏林国际电影节",
      "predicate": "举行时间",
      "object": "1991年",
      "confidence": 0.95
    },
    {
      "subject": "2008年北京奥运会开幕式",
      "predicate": "举办地点",
      "object": "鸟巢",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:54:25.161 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "第41届柏林国际电影节",
      "predicate": "举行时间",
      "object": "1991年",
      "confidence": 0.95
    },
    {
      "subject": "2008年北京奥运会开幕式",
      "predicate": "举办地点",
      "object": "鸟巢",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:54:25.162 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 15:54:25.162 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组，包括实体和关系保存
2025-06-25 15:54:25.167 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:54:25.173 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-25 15:54:25.177 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 第41届柏林国际电影节 (通过三元组提取)
2025-06-25 15:54:25.180 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:54:25.185 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-25 15:54:25.189 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 1991年 (通过三元组提取)
2025-06-25 15:54:25.189 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 第41届柏林国际电影节 --[举行时间]--> 1991年
2025-06-25 15:54:25.190 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:54:25.193 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-25 15:54:25.195 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 2008年北京奥运会开幕式 (通过三元组提取)
2025-06-25 15:54:25.195 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 2008年北京奥运会开幕式 --[举办地点]--> 鸟巢
2025-06-25 15:54:25.195 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:54:25.198 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 47
2025-06-25 15:54:25.198 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 7608ms
2025-06-25 15:54:25.207 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 3, textLength: 58
2025-06-25 15:54:25.207 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 58, 参数: triples
2025-06-25 15:54:25.207 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-1, 文本长度: 58
2025-06-25 15:54:25.207 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 58 字符
2025-06-25 15:54:25.207 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:54:25.207 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 58，当前并发数: 1
2025-06-25 15:54:25.208 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:54:36.225 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 11017ms，响应长度: 485
2025-06-25 15:54:36.227 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 58，处理模式: 直接处理
2025-06-25 15:54:36.231 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 485
2025-06-25 15:54:36.231 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "参加",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "获奖",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "担任",
      "object": "北京奥运会开幕式总导演",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "电影节终身成就奖",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:54:36.231 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "参加",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "获奖",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "担任",
      "object": "北京奥运会开幕式总导演",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "电影节终身成就奖",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:54:36.233 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 15:54:36.233 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-25 15:54:36.236 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:54:36.239 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 15:54:36.242 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:54:36.246 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-25 15:54:36.249 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 柏林电影节颁奖典礼 (通过三元组提取)
2025-06-25 15:54:36.251 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:54:36.258 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 15:54:36.261 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:54:36.263 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 张艺谋 -> 柏林电影节颁奖典礼 [参加]
2025-06-25 15:54:36.263 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[参加]--> 柏林电影节颁奖典礼
2025-06-25 15:54:36.264 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:54:36.266 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 15:54:36.267 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:54:36.269 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 柏林电影节颁奖典礼 已存在，跳过插入
2025-06-25 15:54:36.270 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:54:36.274 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 15:54:36.276 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:54:36.280 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 张艺谋 -> 柏林电影节颁奖典礼 [获奖]
2025-06-25 15:54:36.280 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[获奖]--> 柏林电影节颁奖典礼
2025-06-25 15:54:36.281 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:54:36.284 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 15:54:36.285 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:54:36.287 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-25 15:54:36.289 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 北京奥运会开幕式总导演 (通过三元组提取)
2025-06-25 15:54:36.293 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:54:36.303 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 15:54:36.306 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:54:36.308 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 张艺谋 -> 北京奥运会开幕式总导演 [担任]
2025-06-25 15:54:36.308 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[担任]--> 北京奥运会开幕式总导演
2025-06-25 15:54:36.309 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:54:36.312 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 15:54:36.313 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 成龙 (通过三元组提取)
2025-06-25 15:54:36.314 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:54:36.316 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 15:54:36.319 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 电影节终身成就奖 (通过三元组提取)
2025-06-25 15:54:36.321 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:54:36.325 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:54:36.327 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:54:36.329 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 成龙 -> 电影节终身成就奖 [获得]
2025-06-25 15:54:36.329 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[获得]--> 电影节终身成就奖
2025-06-25 15:54:36.329 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:54:36.334 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 58
2025-06-25 15:54:36.334 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 11127ms
2025-06-25 15:54:37.358 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 3, textLength: 56
2025-06-25 15:54:37.359 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 56, 参数: triples
2025-06-25 15:54:37.359 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-1, 文本长度: 56
2025-06-25 15:54:37.359 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 56 字符
2025-06-25 15:54:37.359 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:54:37.359 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 56，当前并发数: 1
2025-06-25 15:54:37.359 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:54:51.843 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 14484ms，响应长度: 477
2025-06-25 15:54:51.845 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 56，处理模式: 直接处理
2025-06-25 15:54:51.853 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 477
2025-06-25 15:54:51.853 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "《红高粱》",
      "predicate": "获奖",
      "object": "金熊奖",
      "confidence": 0.95
    },
    {
      "subject": "《红高粱》",
      "predicate": "获奖地点",
      "object": "柏林电影节",
      "confidence": 0.95
    },
    {
      "subject": "《青花瓷》",
      "predicate": "演出",
      "object": "奥运会开幕式",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映",
      "object": "香港电影节",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:54:51.853 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "《红高粱》",
      "predicate": "获奖",
      "object": "金熊奖",
      "confidence": 0.95
    },
    {
      "subject": "《红高粱》",
      "predicate": "获奖地点",
      "object": "柏林电影节",
      "confidence": 0.95
    },
    {
      "subject": "《青花瓷》",
      "predicate": "演出",
      "object": "奥运会开幕式",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映",
      "object": "香港电影节",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:54:51.853 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 15:54:51.853 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-25 15:54:51.855 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:54:51.858 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 15:54:51.860 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《红高粱》 (通过三元组提取)
2025-06-25 15:54:51.861 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《红高粱》 --[获奖]--> 金熊奖
2025-06-25 15:54:51.861 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:54:51.863 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《红高粱》 已存在，跳过插入
2025-06-25 15:54:51.864 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:54:51.865 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-25 15:54:51.867 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 柏林电影节 (通过三元组提取)
2025-06-25 15:54:51.872 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 15:54:51.875 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 15:54:51.880 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:54:51.882 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 柏林电影节 -> 《红高粱》 [在_获奖地点]
2025-06-25 15:54:51.882 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《红高粱》 --[获奖地点]--> 柏林电影节
2025-06-25 15:54:51.883 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:54:51.884 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-25 15:54:51.885 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:54:51.887 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-25 15:54:51.889 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 奥运会开幕式 (通过三元组提取)
2025-06-25 15:54:51.890 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 15:54:51.892 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 15:54:51.896 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:54:51.898 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 奥运会开幕式 -> 《青花瓷》 [在_演出]
2025-06-25 15:54:51.898 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《青花瓷》 --[演出]--> 奥运会开幕式
2025-06-25 15:54:51.902 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:54:51.906 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 15:54:51.908 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《醉拳》 (通过三元组提取)
2025-06-25 15:54:51.909 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:54:51.911 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-25 15:54:51.913 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 香港电影节 (通过三元组提取)
2025-06-25 15:54:51.913 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 15:54:51.919 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 15:54:51.922 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:54:51.924 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 香港电影节 -> 《醉拳》 [在_首映]
2025-06-25 15:54:51.924 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《醉拳》 --[首映]--> 香港电影节
2025-06-25 15:54:51.924 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:54:51.927 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 56
2025-06-25 15:54:51.928 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 14570ms
2025-06-25 15:54:52.948 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 4, textLength: 88
2025-06-25 15:54:52.948 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 88, 参数: triples
2025-06-25 15:54:52.948 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-1, 文本长度: 88
2025-06-25 15:54:52.949 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 88 字符
2025-06-25 15:54:52.949 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:54:52.949 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 88，当前并发数: 1
2025-06-25 15:54:52.949 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:55:09.293 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 16344ms，响应长度: 806
2025-06-25 15:55:09.293 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 88，处理模式: 直接处理
2025-06-25 15:55:09.298 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 806
2025-06-25 15:55:09.299 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "主演",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映于",
      "object": "香港电影节",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "参加",
      "object": "电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "终身成就奖",
      "confidence": 0.95
    },
    {
      "subject": "李小龙",
      "predicate": "师父",
      "object": "成龙",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《龙争虎斗》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:55:09.299 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "主演",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映于",
      "object": "香港电影节",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "参加",
      "object": "电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "终身成就奖",
      "confidence": 0.95
    },
    {
      "subject": "李小龙",
      "predicate": "师父",
      "object": "成龙",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《龙争虎斗》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:55:09.300 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 15:55:09.300 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 7 个三元组，包括实体和关系保存
2025-06-25 15:55:09.308 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:55:09.310 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 15:55:09.313 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:55:09.316 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 15:55:09.318 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 《醉拳》 (通过三元组提取)
2025-06-25 15:55:09.322 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:55:09.325 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:55:09.328 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:55:09.329 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 成龙 -> 《醉拳》 [主演]
2025-06-25 15:55:09.329 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[主演]--> 《醉拳》
2025-06-25 15:55:09.330 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:55:09.331 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《醉拳》 已存在，跳过插入
2025-06-25 15:55:09.332 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:55:09.334 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 香港电影节 已存在，跳过插入
2025-06-25 15:55:09.338 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 15:55:09.342 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 15:55:09.346 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:55:09.347 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 香港电影节 -> 《醉拳》 [在_首映于]
2025-06-25 15:55:09.347 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《醉拳》 --[首映于]--> 香港电影节
2025-06-25 15:55:09.348 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:55:09.350 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 15:55:09.352 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:55:09.355 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-25 15:55:09.357 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 电影节颁奖典礼 (通过三元组提取)
2025-06-25 15:55:09.358 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:55:09.361 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 15:55:09.364 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:55:09.366 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 成龙 -> 电影节颁奖典礼 [参加]
2025-06-25 15:55:09.366 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[参加]--> 电影节颁奖典礼
2025-06-25 15:55:09.367 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:55:09.369 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 15:55:09.370 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:55:09.372 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 15:55:09.375 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 终身成就奖 (通过三元组提取)
2025-06-25 15:55:09.376 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:55:09.380 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:55:09.383 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:55:09.384 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 成龙 -> 终身成就奖 [获得]
2025-06-25 15:55:09.384 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[获得]--> 终身成就奖
2025-06-25 15:55:09.385 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:55:09.387 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 15:55:09.394 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 李小龙 (通过三元组提取)
2025-06-25 15:55:09.394 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:55:09.396 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 15:55:09.397 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:55:09.399 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:55:09.401 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:55:09.402 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 李小龙 -> 成龙 [师父]
2025-06-25 15:55:09.402 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 李小龙 --[师父]--> 成龙
2025-06-25 15:55:09.403 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:55:09.405 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-25 15:55:09.407 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 功夫电影节 (通过三元组提取)
2025-06-25 15:55:09.407 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:55:09.409 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《醉拳》 已存在，跳过插入
2025-06-25 15:55:09.409 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 15:55:09.415 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 15:55:09.417 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:55:09.418 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系: 功夫电影节 -> 《醉拳》 [展映]
2025-06-25 15:55:09.418 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 功夫电影节 --[展映]--> 《醉拳》
2025-06-25 15:55:09.419 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:55:09.420 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 功夫电影节 已存在，跳过插入
2025-06-25 15:55:09.421 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:55:09.422 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 15:55:09.423 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 《龙争虎斗》 (通过三元组提取)
2025-06-25 15:55:09.429 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:55:09.433 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 15:55:09.440 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:55:09.442 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系(反向): 《龙争虎斗》 -> 功夫电影节 [参与_展映]
2025-06-25 15:55:09.442 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 功夫电影节 --[展映]--> 《龙争虎斗》
2025-06-25 15:55:09.442 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:55:09.446 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 88
2025-06-25 15:55:09.447 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 16499ms
2025-06-25 15:55:09.456 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1, textLength: 25
2025-06-25 15:55:09.456 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 25, 参数: triples
2025-06-25 15:55:09.456 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-1, 文本长度: 25
2025-06-25 15:55:09.456 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 25 字符
2025-06-25 15:55:09.457 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:55:09.457 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 25，当前并发数: 1
2025-06-25 15:55:09.457 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:55:22.219 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 12762ms，响应长度: 248
2025-06-25 15:55:22.220 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 25，处理模式: 直接处理
2025-06-25 15:55:22.224 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 248
2025-06-25 15:55:22.224 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语流行音乐歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "创作",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:55:22.224 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语流行音乐歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "创作",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:55:22.227 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 15:55:22.227 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组，包括实体和关系保存
2025-06-25 15:55:22.233 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:55:22.237 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-25 15:55:22.238 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:55:22.242 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 15:55:22.244 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 华语流行音乐歌手 (通过三元组提取)
2025-06-25 15:55:22.248 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:55:22.251 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:55:22.253 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:55:22.255 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 周杰伦 -> 华语流行音乐歌手 [职业]
2025-06-25 15:55:22.255 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[职业]--> 华语流行音乐歌手
2025-06-25 15:55:22.256 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:55:22.258 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-25 15:55:22.259 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:55:22.261 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-25 15:55:22.263 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:55:22.266 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 15:55:22.269 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:55:22.271 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 周杰伦 -> 《青花瓷》 [创作]
2025-06-25 15:55:22.271 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[创作]--> 《青花瓷》
2025-06-25 15:55:22.271 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:55:22.277 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 25
2025-06-25 15:55:22.277 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 12821ms
2025-06-25 15:55:23.296 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 3, textLength: 42
2025-06-25 15:55:23.297 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 42, 参数: triples
2025-06-25 15:55:23.297 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-1, 文本长度: 42
2025-06-25 15:55:23.297 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 42 字符
2025-06-25 15:55:23.297 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:55:23.297 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 42，当前并发数: 1
2025-06-25 15:55:23.297 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:55:33.047 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 9750ms，响应长度: 360
2025-06-25 15:55:33.049 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 42，处理模式: 直接处理
2025-06-25 15:55:33.054 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 360
2025-06-25 15:55:33.054 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语流行音乐歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "创作",
      "object": "《青花瓷》",
      "confidence": 0.95
    },
    {
      "subject": "《青花瓷》",
      "predicate": "获奖",
      "object": "金曲奖",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:55:33.054 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语流行音乐歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "创作",
      "object": "《青花瓷》",
      "confidence": 0.95
    },
    {
      "subject": "《青花瓷》",
      "predicate": "获奖",
      "object": "金曲奖",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:55:33.057 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 15:55:33.057 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-25 15:55:33.059 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:55:33.064 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-25 15:55:33.065 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:55:33.068 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 华语流行音乐歌手 已存在，跳过插入
2025-06-25 15:55:33.069 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:55:33.074 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:55:33.078 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:55:33.080 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 周杰伦 -> 华语流行音乐歌手 [职业]
2025-06-25 15:55:33.080 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[职业]--> 华语流行音乐歌手
2025-06-25 15:55:33.082 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:55:33.085 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-25 15:55:33.085 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:55:33.087 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-25 15:55:33.087 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:55:33.089 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 15:55:33.093 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:55:33.095 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 周杰伦 -> 《青花瓷》 [创作]
2025-06-25 15:55:33.095 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[创作]--> 《青花瓷》
2025-06-25 15:55:33.099 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:55:33.102 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-25 15:55:33.102 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《青花瓷》 --[获奖]--> 金曲奖
2025-06-25 15:55:33.102 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:55:33.107 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 42
2025-06-25 15:55:33.108 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 9812ms
2025-06-25 15:55:33.153 [reactor-http-nio-8] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1
2025-06-25 15:55:33.159 [reactor-http-nio-8] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 6ms
2025-06-25 15:55:33.159 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-1, 文本长度: 32
2025-06-25 15:55:33.159 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 32 字符
2025-06-25 15:55:33.159 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:55:33.159 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 32，当前并发数: 1
2025-06-25 15:55:33.159 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:55:34.182 [reactor-http-nio-9] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities, textInputType: JSONArray, arraySize: 2
2025-06-25 15:55:34.183 [reactor-http-nio-9] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 15:55:34.183 [TextExtract-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-2, 文本长度: 44
2025-06-25 15:55:34.183 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 44 字符
2025-06-25 15:55:34.183 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:55:34.183 [TextExtract-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 44，当前并发数: 2
2025-06-25 15:55:34.183 [TextExtract-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:55:36.211 [reactor-http-nio-11] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 15:55:36.212 [reactor-http-nio-11] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 15:55:36.212 [TextExtract-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-3, 文本长度: 90
2025-06-25 15:55:36.212 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 90 字符
2025-06-25 15:55:36.212 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:55:36.212 [TextExtract-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 90，当前并发数: 3
2025-06-25 15:55:36.212 [TextExtract-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:55:38.238 [reactor-http-nio-1] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 15:55:38.239 [reactor-http-nio-1] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 15:55:38.239 [TextExtract-4] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-4, 文本长度: 439
2025-06-25 15:55:38.239 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 439 字符
2025-06-25 15:55:38.240 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:55:38.240 [TextExtract-4] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 439，当前并发数: 4
2025-06-25 15:55:38.240 [TextExtract-4] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:55:40.278 [reactor-http-nio-3] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 15:55:40.283 [reactor-http-nio-3] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 6ms
2025-06-25 15:55:40.284 [TextExtract-5] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-5, 文本长度: 2050
2025-06-25 15:55:40.301 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 2050 字符
2025-06-25 15:55:40.301 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - 📄 检测到长文本，启用分批处理模式
2025-06-25 15:55:40.301 [TextExtract-5] INFO  com.datacenter.extract.service.LongTextProcessor - 🔍 开始处理长文本，长度: 2050 字符
2025-06-25 15:55:40.304 [TextExtract-5] INFO  com.datacenter.extract.service.LongTextProcessor - 📊 文本分片完成，共 2 个分片
2025-06-25 15:55:40.309 [pool-5-thread-1] INFO  com.datacenter.extract.service.LongTextProcessor - ⚡ 处理分片 1 (1990 字符)
2025-06-25 15:55:40.309 [pool-5-thread-2] INFO  com.datacenter.extract.service.LongTextProcessor - ⚡ 处理分片 2 (238 字符)
2025-06-25 15:55:40.309 [pool-5-thread-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 1990，当前并发数: 5
2025-06-25 15:55:40.309 [pool-5-thread-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 40秒
2025-06-25 15:55:43.890 [reactor-http-nio-10] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 9707ms，响应长度: 362
2025-06-25 15:55:43.891 [pool-5-thread-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 238，当前并发数: 5
2025-06-25 15:55:43.891 [pool-5-thread-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:55:43.891 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 44，处理模式: 直接处理
2025-06-25 15:55:43.902 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 362
2025-06-25 15:55:43.902 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "执导",
      "object": "《英雄》",
      "confidence": 0.95
    },
    {
      "subject": "《英雄》",
      "predicate": "类型",
      "object": "古装武侠电影",
      "confidence": 0.95
    },
    {
      "subject": "《三体》三部曲",
      "predicate": "代表作品",
      "object": "刘慈欣",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:55:43.902 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "执导",
      "object": "《英雄》",
      "confidence": 0.95
    },
    {
      "subject": "《英雄》",
      "predicate": "类型",
      "object": "古装武侠电影",
      "confidence": 0.95
    },
    {
      "subject": "《三体》三部曲",
      "predicate": "代表作品",
      "object": "刘慈欣",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:55:43.904 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 15:55:43.904 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-25 15:55:43.915 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:55:43.924 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 15:55:43.926 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:55:43.930 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 15:55:43.934 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《英雄》 (通过三元组提取)
2025-06-25 15:55:43.938 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:55:43.944 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 15:55:43.948 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:55:43.952 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 张艺谋 -> 《英雄》 [执导]
2025-06-25 15:55:43.952 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[执导]--> 《英雄》
2025-06-25 15:55:43.953 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:55:43.956 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《英雄》 已存在，跳过插入
2025-06-25 15:55:43.957 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《英雄》 --[类型]--> 古装武侠电影
2025-06-25 15:55:43.958 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:55:43.960 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 15:55:43.964 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《三体》三部曲 (通过三元组提取)
2025-06-25 15:55:43.964 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:55:43.967 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 15:55:43.968 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 刘慈欣 (通过三元组提取)
2025-06-25 15:55:43.968 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《三体》三部曲 --[代表作品]--> 刘慈欣
2025-06-25 15:55:43.968 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:55:43.972 [TextExtract-2] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 44
2025-06-25 15:55:44.152 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 10993ms，响应长度: 461
2025-06-25 15:55:44.153 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 32，处理模式: 直接处理
2025-06-25 15:55:44.154 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 461
2025-06-25 15:55:44.154 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "演员",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "歌手",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出生地",
      "object": "香港",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出演",
      "object": "《无间道》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:55:44.154 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "演员",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "歌手",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出生地",
      "object": "香港",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出演",
      "object": "《无间道》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:55:44.155 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 15:55:44.155 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-25 15:55:44.156 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:55:44.159 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 15:55:44.160 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:55:44.163 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 15:55:44.164 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 演员 (通过三元组提取)
2025-06-25 15:55:44.165 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:55:44.167 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:55:44.170 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:55:44.173 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 演员 [职业]
2025-06-25 15:55:44.173 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[职业]--> 演员
2025-06-25 15:55:44.174 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:55:44.176 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 15:55:44.177 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:55:44.179 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 15:55:44.181 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 歌手 (通过三元组提取)
2025-06-25 15:55:44.181 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:55:44.184 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:55:44.187 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:55:44.189 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 歌手 [职业]
2025-06-25 15:55:44.189 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[职业]--> 歌手
2025-06-25 15:55:44.190 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:55:44.191 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 15:55:44.192 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:55:44.194 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 15:55:44.195 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 香港 (通过三元组提取)
2025-06-25 15:55:44.196 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:55:44.200 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:55:44.202 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:55:44.204 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 香港 [出生地]
2025-06-25 15:55:44.204 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[出生地]--> 香港
2025-06-25 15:55:44.204 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:55:44.206 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 15:55:44.206 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:55:44.208 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 15:55:44.211 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《无间道》 (通过三元组提取)
2025-06-25 15:55:44.213 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:55:44.215 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 15:55:44.217 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:55:44.219 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 刘德华 -> 《无间道》 [出演]
2025-06-25 15:55:44.219 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[出演]--> 《无间道》
2025-06-25 15:55:44.219 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:55:44.224 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 32
2025-06-25 15:55:55.293 [reactor-http-nio-12] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 19081ms，响应长度: 1026
2025-06-25 15:55:55.294 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 90，处理模式: 直接处理
2025-06-25 15:55:55.298 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 1026
2025-06-25 15:55:55.299 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张三",
      "predicate": "职业",
      "object": "软件工程师",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "工作地点",
      "object": "北京",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "工作单位",
      "object": "科技公司",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "负责",
      "object": "开发人工智能系统",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "李四",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "王五",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "参与项目",
      "object": "智能对话系统",
      "confidence": 0.95
    },
    {
      "subject": "李四",
      "predicate": "参与项目",
      "object": "智能对话系统",
      "confidence": 0.95
    },
    {
      "subject": "王五",
      "predicate": "参与项目",
      "object": "智能对话系统",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:55:55.299 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张三",
      "predicate": "职业",
      "object": "软件工程师",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "工作地点",
      "object": "北京",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "工作单位",
      "object": "科技公司",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "负责",
      "object": "开发人工智能系统",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "李四",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "王五",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "参与项目",
      "object": "智能对话系统",
      "confidence": 0.95
    },
    {
      "subject": "李四",
      "predicate": "参与项目",
      "object": "智能对话系统",
      "confidence": 0.95
    },
    {
      "subject": "王五",
      "predicate": "参与项目",
      "object": "智能对话系统",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:55:55.301 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 15:55:55.301 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 处理 9 个三元组，包括实体和关系保存
2025-06-25 15:55:55.311 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:55:55.315 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 15:55:55.317 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 张三 (通过三元组提取)
2025-06-25 15:55:55.323 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:55:55.326 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 15:55:55.328 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 软件工程师 (通过三元组提取)
2025-06-25 15:55:55.329 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:55:55.335 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:55:55.338 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:55:55.340 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 软件工程师 [职业]
2025-06-25 15:55:55.340 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[职业]--> 软件工程师
2025-06-25 15:55:55.340 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[工作地点]--> 北京
2025-06-25 15:55:55.340 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[工作单位]--> 科技公司
2025-06-25 15:55:55.342 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:55:55.344 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 15:55:55.346 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 开发人工智能系统 (通过三元组提取)
2025-06-25 15:55:55.346 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[负责]--> 开发人工智能系统
2025-06-25 15:55:55.346 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:55:55.348 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 张三 已存在，跳过插入
2025-06-25 15:55:55.348 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:55:55.350 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 15:55:55.351 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 李四 (通过三元组提取)
2025-06-25 15:55:55.352 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:55:55.354 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:55:55.356 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:55:55.357 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 李四 [合作]
2025-06-25 15:55:55.357 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[合作]--> 李四
2025-06-25 15:55:55.358 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:55:55.359 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 张三 已存在，跳过插入
2025-06-25 15:55:55.360 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:55:55.361 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 15:55:55.362 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 王五 (通过三元组提取)
2025-06-25 15:55:55.363 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:55:55.365 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:55:55.367 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:55:55.368 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 王五 [合作]
2025-06-25 15:55:55.368 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[合作]--> 王五
2025-06-25 15:55:55.368 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[参与项目]--> 智能对话系统
2025-06-25 15:55:55.368 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 李四 --[参与项目]--> 智能对话系统
2025-06-25 15:55:55.368 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 王五 --[参与项目]--> 智能对话系统
2025-06-25 15:55:55.368 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:55:55.373 [TextExtract-3] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 90
2025-06-25 15:56:01.014 [reactor-http-nio-10] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 17123ms，响应长度: 716
2025-06-25 15:56:08.267 [parallel-11] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30026ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-25 15:56:08.267 [TextExtract-4] ERROR com.datacenter.extract.service.SmartAIProvider - ❌ AI提取失败，类型: entities,relations，文本长度: 439
2025-06-25 15:56:08.267 [TextExtract-4] ERROR com.datacenter.extract.service.SmartAIProvider - 💥 AI提取过程异常: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$0(SmartAIProvider.java:77)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.service.TextExtractionService.processTextAsync(TextExtractionService.java:72)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.AsyncExecutionInterceptor.lambda$invoke$0(AsyncExecutionInterceptor.java:115)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 15:56:08.271 [TextExtract-4] ERROR c.datacenter.extract.service.TextExtractionService - 异步文本提取失败，错误: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-25 15:56:20.317 [parallel-12] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 40008ms，错误: Did not observe any item or terminal signal within 40000ms in 'flatMap' (and no fallback has been configured)
2025-06-25 15:56:20.325 [TextExtract-5] INFO  com.datacenter.extract.service.LongTextProcessor - ✅ 分片合并完成，成功率: 2/2 ({:.1f}%)，提取三元组: 100.0
2025-06-25 15:56:20.327 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 2050，处理模式: 分批处理
2025-06-25 15:56:20.331 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 792
2025-06-25 15:56:20.331 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"团队","predicate":"签署","object":"技术转让协议","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"合作","object":"科技公司","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"研究","object":"多模态知识图谱","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索","object":"知识图谱在医疗、金融和教育等垂直领域的应用潜力","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"取得","object":"显著的成就","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"贡献","object":"人工智能和知识图谱领域的发展","confidence":0.95,"chunk_index":1,"chunk_start":0}],"total_chunks":2,"success_chunks":2,"success_rate":"100.00%","total_triples":6,"processing_method":"batch_processing","timestamp":1750838180325}
2025-06-25 15:56:20.331 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"团队","predicate":"签署","object":"技术转让协议","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"合作","object":"科技公司","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"研究","object":"多模态知识图谱","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索","object":"知识图谱在医疗、金融和教育等垂直领域的应用潜力","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"取得","object":"显著的成就","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"贡献","object":"人工智能和知识图谱领域的发展","confidence":0.95,"chunk_index":1,"chunk_start":0}],"total_chunks":2,"success_chunks":2,"success_rate":"100.00%","total_triples":6,"processing_method":"batch_processing","timestamp":1750838180325}
2025-06-25 15:56:20.343 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 7 个主要字段: [triples, total_chunks, success_chunks, success_rate, total_triples, processing_method, timestamp]
2025-06-25 15:56:20.343 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 处理 6 个三元组，包括实体和关系保存
2025-06-25 15:56:20.343 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[签署]--> 技术转让协议
2025-06-25 15:56:20.346 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:56:20.350 [TextExtract-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 15:56:20.353 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 团队 (通过三元组提取)
2025-06-25 15:56:20.353 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:56:20.357 [TextExtract-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 15:56:20.359 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 科技公司 (通过三元组提取)
2025-06-25 15:56:20.360 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:56:20.363 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:56:20.368 [TextExtract-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:56:20.371 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 团队 -> 科技公司 [合作]
2025-06-25 15:56:20.371 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[合作]--> 科技公司
2025-06-25 15:56:20.371 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[研究]--> 多模态知识图谱
2025-06-25 15:56:20.371 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[探索]--> 知识图谱在医疗、金融和教育等垂直领域的应用潜力
2025-06-25 15:56:20.372 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:56:20.374 [TextExtract-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 15:56:20.375 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 显著的成就 (通过三元组提取)
2025-06-25 15:56:20.375 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[取得]--> 显著的成就
2025-06-25 15:56:20.375 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:56:20.377 [TextExtract-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 15:56:20.380 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 人工智能和知识图谱领域的发展 (通过三元组提取)
2025-06-25 15:56:20.380 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[贡献]--> 人工智能和知识图谱领域的发展
2025-06-25 15:56:20.380 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:56:20.385 [TextExtract-5] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 2050
2025-06-25 16:26:32.129 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 91075 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-25 16:26:32.132 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-25 16:26:33.081 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 16:26:33.083 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-25 16:26:33.197 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 110 ms. Found 7 JPA repository interfaces.
2025-06-25 16:26:33.218 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 16:26:33.219 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-25 16:26:33.232 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityCelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 16:26:33.232 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityEventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 16:26:33.232 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 16:26:33.232 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 16:26:33.233 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 16:26:33.233 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 16:26:33.233 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 16:26:33.233 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 10 ms. Found 0 Redis repository interfaces.
2025-06-25 16:26:34.871 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@57920d6c
2025-06-25 16:26:34.873 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@57920d6c
2025-06-25 16:26:34.873 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@57920d6c
2025-06-25 16:26:34.873 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@4e20a985
2025-06-25 16:26:34.874 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@4e20a985
2025-06-25 16:26:34.875 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@56e8a8a0
2025-06-25 16:26:34.876 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@56e8a8a0
2025-06-25 16:26:34.876 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@6071631f
2025-06-25 16:26:34.877 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@6071631f
2025-06-25 16:26:34.877 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@2ca132ad
2025-06-25 16:26:34.877 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@2ca132ad
2025-06-25 16:26:34.877 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@2ca132ad
2025-06-25 16:26:34.877 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@6706da3d
2025-06-25 16:26:34.877 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@6706da3d
2025-06-25 16:26:34.877 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@6706da3d
2025-06-25 16:26:34.878 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@7438c3d5
2025-06-25 16:26:34.878 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@7438c3d5
2025-06-25 16:26:34.878 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@6badb08c
2025-06-25 16:26:34.878 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@5939f047
2025-06-25 16:26:34.878 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@5939f047
2025-06-25 16:26:34.878 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@17332039
2025-06-25 16:26:34.879 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@776e7dfb
2025-06-25 16:26:34.879 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@71418a4a
2025-06-25 16:26:34.879 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@71418a4a
2025-06-25 16:26:34.879 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@71418a4a
2025-06-25 16:26:34.879 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@67ecf7ed
2025-06-25 16:26:34.879 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@67ecf7ed
2025-06-25 16:26:34.879 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@67ecf7ed
2025-06-25 16:26:34.879 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@69d021c1
2025-06-25 16:26:34.879 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@69d021c1
2025-06-25 16:26:34.880 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@69d021c1
2025-06-25 16:26:34.880 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@6d5508a5
2025-06-25 16:26:34.881 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@6d5508a5
2025-06-25 16:26:34.881 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@6d5508a5
2025-06-25 16:26:34.882 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@103bcc9f
2025-06-25 16:26:34.882 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@103bcc9f
2025-06-25 16:26:34.882 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@103bcc9f
2025-06-25 16:26:34.882 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@106802ea
2025-06-25 16:26:34.883 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@106802ea
2025-06-25 16:26:34.884 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@785ef70f
2025-06-25 16:26:34.884 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@785ef70f
2025-06-25 16:26:34.884 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@3d8bd881
2025-06-25 16:26:34.884 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@3d8bd881
2025-06-25 16:26:34.884 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@3d8bd881
2025-06-25 16:26:34.884 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@731ab49b
2025-06-25 16:26:34.884 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@23358740
2025-06-25 16:26:34.884 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@23358740
2025-06-25 16:26:34.884 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@2cdcfaa6
2025-06-25 16:26:34.884 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@4ff0706c
2025-06-25 16:26:34.884 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@4ff0706c
2025-06-25 16:26:34.885 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@4ff0706c
2025-06-25 16:26:34.885 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@6968bb65
2025-06-25 16:26:34.886 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@66682e8f
2025-06-25 16:26:34.886 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@2d2af12e
2025-06-25 16:26:34.886 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@611587f7
2025-06-25 16:26:34.886 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@611587f7
2025-06-25 16:26:34.886 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@4d0abb23
2025-06-25 16:26:34.886 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@4d0abb23
2025-06-25 16:26:34.886 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@6ab1f85b
2025-06-25 16:26:34.886 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@10e8c7a2
2025-06-25 16:26:34.886 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@5d8fd077
2025-06-25 16:26:34.886 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@4544ab46
2025-06-25 16:26:34.886 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@2052f095
2025-06-25 16:26:34.886 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@76d1f6ea
2025-06-25 16:26:34.886 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@55fe9c2f
2025-06-25 16:26:34.886 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@55fe9c2f
2025-06-25 16:26:34.886 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@3580134d
2025-06-25 16:26:34.887 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@3580134d
2025-06-25 16:26:34.887 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@2e19b30
2025-06-25 16:26:34.887 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@2e19b30
2025-06-25 16:26:34.888 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@7b7e4b20
2025-06-25 16:26:34.889 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@7b7e4b20
2025-06-25 16:26:34.889 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@5ac0bf84
2025-06-25 16:26:34.889 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@5ac0bf84
2025-06-25 16:26:34.889 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@6fefc5ea
2025-06-25 16:26:34.889 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6159fb3c
2025-06-25 16:26:34.890 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@68f79b7c
2025-06-25 16:26:34.890 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@68f79b7c
2025-06-25 16:26:34.891 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@37142579
2025-06-25 16:26:34.892 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@264576e4
2025-06-25 16:26:34.893 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@86bf90b
2025-06-25 16:26:34.893 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@5c13af01
2025-06-25 16:26:34.893 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@5c13af01
2025-06-25 16:26:34.893 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@4aba7617
2025-06-25 16:26:34.893 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@47c5cbf2
2025-06-25 16:26:34.893 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@1031c1a0
2025-06-25 16:26:34.893 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@1031c1a0
2025-06-25 16:26:34.894 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@519b0f00
2025-06-25 16:26:34.894 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@519b0f00
2025-06-25 16:26:34.894 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@4888d1ea
2025-06-25 16:26:34.894 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@4888d1ea
2025-06-25 16:26:34.894 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@4888d1ea
2025-06-25 16:26:34.894 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@217b0952
2025-06-25 16:26:34.894 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@217b0952
2025-06-25 16:26:34.894 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@217b0952
2025-06-25 16:26:34.894 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@3fd9e01c
2025-06-25 16:26:34.895 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@36330be8
2025-06-25 16:26:34.895 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@38ba8b45
2025-06-25 16:26:34.895 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@38ba8b45
2025-06-25 16:26:34.895 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@41f23499
2025-06-25 16:26:34.895 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@41f23499
2025-06-25 16:26:34.895 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@41f23499
2025-06-25 16:26:34.895 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@31dbf5bb
2025-06-25 16:26:34.895 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@1f19d423
2025-06-25 16:26:34.895 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@73958426
2025-06-25 16:26:34.895 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@73958426
2025-06-25 16:26:34.895 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@23933031
2025-06-25 16:26:34.896 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@23933031
2025-06-25 16:26:34.897 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@23933031
2025-06-25 16:26:34.897 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@4d0b7fd5
2025-06-25 16:26:34.897 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@4d0b7fd5
2025-06-25 16:26:34.897 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@1ce2029b
2025-06-25 16:26:34.898 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@1ce2029b
2025-06-25 16:26:34.898 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@43090195
2025-06-25 16:26:34.900 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@43090195
2025-06-25 16:26:34.900 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@7921a37d
2025-06-25 16:26:34.901 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@7921a37d
2025-06-25 16:26:34.901 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@6fc28e5b
2025-06-25 16:26:34.901 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@6fc28e5b
2025-06-25 16:26:34.901 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@6338afe2
2025-06-25 16:26:34.904 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@713e49c3
2025-06-25 16:26:34.904 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@713e49c3
2025-06-25 16:26:34.905 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@756200d1
2025-06-25 16:26:34.906 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@390a07a0
2025-06-25 16:26:34.907 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@674e4c82
2025-06-25 16:26:34.907 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@572b4072
2025-06-25 16:26:34.907 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@322ab6ce
2025-06-25 16:26:34.907 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@5b74902c
2025-06-25 16:26:34.907 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@4e4bfd9c
2025-06-25 16:26:34.908 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@43ee1cf7
2025-06-25 16:26:34.908 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@24954e82
2025-06-25 16:26:35.009 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-25 16:26:35.026 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-25 16:26:35.139 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@23dc70c1
2025-06-25 16:26:35.140 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-25 16:26:35.178 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-25 16:26:35.179 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-25 16:26:35.198 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4504a4ed) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7ee3a2ed)
2025-06-25 16:26:35.198 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@38363e96) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@35c95869)
2025-06-25 16:26:35.198 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@558aa1f1) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@361d8567)
2025-06-25 16:26:35.198 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3fd6dfbc) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4023d23f)
2025-06-25 16:26:35.198 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@402676e3) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1a4ae53d)
2025-06-25 16:26:35.199 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1368e2f7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4d84688f)
2025-06-25 16:26:35.199 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3ee68eb2) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7348e75e)
2025-06-25 16:26:35.199 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@27e3dc9a) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@49cd08f9)
2025-06-25 16:26:35.199 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@43549c6c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7792e14f)
2025-06-25 16:26:35.200 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-25 16:26:35.200 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-25 16:26:35.200 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-25 16:26:35.201 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 16:26:35.201 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 16:26:35.203 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@5b3ee43e
2025-06-25 16:26:35.203 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@756200d1`
2025-06-25 16:26:35.204 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-25 16:26:35.204 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-25 16:26:35.206 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 16:26:35.206 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 16:26:35.206 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 16:26:35.206 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 16:26:35.207 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 16:26:35.207 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 16:26:35.207 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 16:26:35.207 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 16:26:35.207 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 16:26:35.208 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@5c16561a] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@5819ee0f]
2025-06-25 16:26:35.934 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@5c16561a] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@2060df8]
2025-06-25 16:26:35.939 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@2060df8] for TypeConfiguration
2025-06-25 16:26:35.939 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 16:26:36.896 [main] INFO  c.d.extract.controller.AsyncExtractController - AsyncExtractController initialized successfully
2025-06-25 16:26:37.378 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-25 16:26:37.539 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-25 16:26:37.578 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 2
2025-06-25 16:26:37.578 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-25 16:26:37.579 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-25 16:26:37.579 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-25 16:26:38.044 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-25 16:26:38.059 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 6.528 seconds (process running for 7.414)
2025-06-25 16:26:44.513 [reactor-http-nio-5] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1
2025-06-25 16:26:44.535 [reactor-http-nio-5] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 124ms
2025-06-25 16:26:44.535 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-1, 文本长度: 32
2025-06-25 16:26:44.546 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 32 字符
2025-06-25 16:26:44.547 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:26:44.547 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 32，当前并发数: 1
2025-06-25 16:26:44.547 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:26:45.572 [reactor-http-nio-8] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities, textInputType: JSONArray, arraySize: 2
2025-06-25 16:26:45.575 [reactor-http-nio-8] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 4ms
2025-06-25 16:26:45.575 [TextExtract-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-2, 文本长度: 44
2025-06-25 16:26:45.575 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 44 字符
2025-06-25 16:26:45.575 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:26:45.575 [TextExtract-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 44，当前并发数: 2
2025-06-25 16:26:45.576 [TextExtract-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:26:47.605 [reactor-http-nio-10] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 16:26:47.606 [reactor-http-nio-10] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 3ms
2025-06-25 16:26:47.606 [TextExtract-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-3, 文本长度: 90
2025-06-25 16:26:47.607 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 90 字符
2025-06-25 16:26:47.607 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:26:47.608 [TextExtract-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 90，当前并发数: 3
2025-06-25 16:26:47.609 [TextExtract-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:26:49.634 [reactor-http-nio-12] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 16:26:49.634 [reactor-http-nio-12] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 16:26:49.634 [TextExtract-4] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-4, 文本长度: 439
2025-06-25 16:26:49.635 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 439 字符
2025-06-25 16:26:49.635 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:26:49.635 [TextExtract-4] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 439，当前并发数: 4
2025-06-25 16:26:49.635 [TextExtract-4] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:26:51.666 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 16:26:51.667 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 2ms
2025-06-25 16:26:51.667 [TextExtract-5] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-5, 文本长度: 2050
2025-06-25 16:26:51.668 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 2050 字符
2025-06-25 16:26:51.668 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - 📄 检测到长文本，启用分批处理模式
2025-06-25 16:26:51.668 [TextExtract-5] INFO  com.datacenter.extract.service.LongTextProcessor - 🔍 开始处理长文本，长度: 2050 字符
2025-06-25 16:26:51.672 [TextExtract-5] INFO  com.datacenter.extract.service.LongTextProcessor - 📊 文本分片完成，共 2 个分片
2025-06-25 16:26:51.677 [pool-5-thread-1] INFO  com.datacenter.extract.service.LongTextProcessor - ⚡ 处理分片 1 (1990 字符)
2025-06-25 16:26:51.677 [pool-5-thread-2] INFO  com.datacenter.extract.service.LongTextProcessor - ⚡ 处理分片 2 (238 字符)
2025-06-25 16:26:51.677 [pool-5-thread-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 1990，当前并发数: 5
2025-06-25 16:26:51.677 [pool-5-thread-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 40秒
2025-06-25 16:26:59.165 [reactor-http-nio-9] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 13589ms，响应长度: 362
2025-06-25 16:26:59.167 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 44，处理模式: 直接处理
2025-06-25 16:26:59.168 [pool-5-thread-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 238，当前并发数: 5
2025-06-25 16:26:59.169 [pool-5-thread-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:26:59.187 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 362
2025-06-25 16:26:59.188 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "执导",
      "object": "《英雄》",
      "confidence": 0.95
    },
    {
      "subject": "《英雄》",
      "predicate": "类型",
      "object": "古装武侠电影",
      "confidence": 0.95
    },
    {
      "subject": "《三体》三部曲",
      "predicate": "代表作品",
      "object": "刘慈欣",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:26:59.188 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "执导",
      "object": "《英雄》",
      "confidence": 0.95
    },
    {
      "subject": "《英雄》",
      "predicate": "类型",
      "object": "古装武侠电影",
      "confidence": 0.95
    },
    {
      "subject": "《三体》三部曲",
      "predicate": "代表作品",
      "object": "刘慈欣",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:26:59.189 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:26:59.191 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-25 16:26:59.259 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:26:59.287 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:26:59.298 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 张艺谋 (通过三元组提取)
2025-06-25 16:26:59.303 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:26:59.307 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:26:59.310 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《英雄》 (通过三元组提取)
2025-06-25 16:26:59.315 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:26:59.324 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 16:26:59.328 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:26:59.331 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 张艺谋 -> 《英雄》 [执导]
2025-06-25 16:26:59.331 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[执导]--> 《英雄》
2025-06-25 16:26:59.332 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:26:59.335 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《英雄》 已存在，跳过插入
2025-06-25 16:26:59.336 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《英雄》 --[类型]--> 古装武侠电影
2025-06-25 16:26:59.336 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:26:59.338 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:26:59.341 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《三体》三部曲 (通过三元组提取)
2025-06-25 16:26:59.343 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:26:59.345 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:26:59.347 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 刘慈欣 (通过三元组提取)
2025-06-25 16:26:59.347 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《三体》三部曲 --[代表作品]--> 刘慈欣
2025-06-25 16:26:59.347 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:26:59.353 [TextExtract-2] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 44
2025-06-25 16:27:00.517 [reactor-http-nio-7] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 15970ms，响应长度: 461
2025-06-25 16:27:00.519 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 32，处理模式: 直接处理
2025-06-25 16:27:00.528 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 461
2025-06-25 16:27:00.528 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "演员",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "歌手",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出生地",
      "object": "香港",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "作品",
      "object": "《无间道》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:27:00.529 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "演员",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "歌手",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出生地",
      "object": "香港",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "作品",
      "object": "《无间道》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:27:00.530 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:27:00.530 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-25 16:27:00.533 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:27:00.538 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:27:00.543 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 刘德华 (通过三元组提取)
2025-06-25 16:27:00.545 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:27:00.548 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:27:00.550 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 演员 (通过三元组提取)
2025-06-25 16:27:00.552 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:27:00.556 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:27:00.560 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:27:00.562 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 演员 [职业]
2025-06-25 16:27:00.562 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[职业]--> 演员
2025-06-25 16:27:00.564 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:27:00.569 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 16:27:00.570 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:27:00.573 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:27:00.575 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 歌手 (通过三元组提取)
2025-06-25 16:27:00.577 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:27:00.581 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:27:00.584 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:27:00.586 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 歌手 [职业]
2025-06-25 16:27:00.586 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[职业]--> 歌手
2025-06-25 16:27:00.589 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:27:00.591 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 16:27:00.592 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:27:00.593 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:27:00.595 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 香港 (通过三元组提取)
2025-06-25 16:27:00.597 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:27:00.601 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:27:00.602 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:27:00.604 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 香港 [出生地]
2025-06-25 16:27:00.604 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[出生地]--> 香港
2025-06-25 16:27:00.605 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:27:00.609 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 16:27:00.610 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:27:00.612 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:27:00.613 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《无间道》 (通过三元组提取)
2025-06-25 16:27:00.615 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:27:00.619 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 16:27:00.620 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:27:00.622 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 刘德华 -> 《无间道》 [作品]
2025-06-25 16:27:00.622 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[作品]--> 《无间道》
2025-06-25 16:27:00.623 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:27:00.627 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 32
2025-06-25 16:27:04.713 [reactor-http-nio-11] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 17104ms，响应长度: 798
2025-06-25 16:27:04.714 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 90，处理模式: 直接处理
2025-06-25 16:27:04.717 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 798
2025-06-25 16:27:04.717 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张三",
      "predicate": "职业",
      "object": "软件工程师",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "工作地点",
      "object": "北京",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "工作单位",
      "object": "科技公司",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "负责",
      "object": "开发人工智能系统",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "李四",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "王五",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "团队项目",
      "object": "智能对话系统",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:27:04.718 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张三",
      "predicate": "职业",
      "object": "软件工程师",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "工作地点",
      "object": "北京",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "工作单位",
      "object": "科技公司",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "负责",
      "object": "开发人工智能系统",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "李四",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "王五",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "团队项目",
      "object": "智能对话系统",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:27:04.719 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:27:04.719 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 处理 7 个三元组，包括实体和关系保存
2025-06-25 16:27:04.722 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:27:04.725 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:27:04.727 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 张三 (通过三元组提取)
2025-06-25 16:27:04.728 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:27:04.732 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:27:04.734 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 软件工程师 (通过三元组提取)
2025-06-25 16:27:04.735 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:27:04.737 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:27:04.739 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:27:04.741 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 软件工程师 [职业]
2025-06-25 16:27:04.741 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[职业]--> 软件工程师
2025-06-25 16:27:04.741 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[工作地点]--> 北京
2025-06-25 16:27:04.741 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[工作单位]--> 科技公司
2025-06-25 16:27:04.742 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:27:04.744 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:27:04.745 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 开发人工智能系统 (通过三元组提取)
2025-06-25 16:27:04.745 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[负责]--> 开发人工智能系统
2025-06-25 16:27:04.746 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:27:04.748 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 张三 已存在，跳过插入
2025-06-25 16:27:04.749 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:27:04.750 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:27:04.752 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 李四 (通过三元组提取)
2025-06-25 16:27:04.754 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:27:04.758 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:27:04.760 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:27:04.762 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 李四 [合作]
2025-06-25 16:27:04.762 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[合作]--> 李四
2025-06-25 16:27:04.764 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:27:04.766 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 张三 已存在，跳过插入
2025-06-25 16:27:04.767 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:27:04.769 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:27:04.771 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 王五 (通过三元组提取)
2025-06-25 16:27:04.773 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:27:04.779 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:27:04.783 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:27:04.785 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 王五 [合作]
2025-06-25 16:27:04.785 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[合作]--> 王五
2025-06-25 16:27:04.785 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[团队项目]--> 智能对话系统
2025-06-25 16:27:04.785 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:27:04.791 [TextExtract-3] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 90
2025-06-25 16:27:11.311 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 12141ms，响应长度: 483
2025-06-25 16:27:19.653 [parallel-5] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30018ms，错误: Did not observe any item or terminal signal within 30000ms in 'Mono.flatMap ⇢ at org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.bodyToMono(DefaultWebClient.java:570)' (and no fallback has been configured)
2025-06-25 16:27:19.654 [TextExtract-4] ERROR com.datacenter.extract.service.SmartAIProvider - ❌ AI提取失败，类型: entities,relations，文本长度: 439
2025-06-25 16:27:19.654 [TextExtract-4] ERROR com.datacenter.extract.service.SmartAIProvider - 💥 AI提取过程异常: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:77)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.service.TextExtractionService.processTextAsync(TextExtractionService.java:72)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.AsyncExecutionInterceptor.lambda$invoke$0(AsyncExecutionInterceptor.java:115)
	at java.base/java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:264)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 16:27:19.662 [TextExtract-4] ERROR c.datacenter.extract.service.TextExtractionService - 异步文本提取失败，错误: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-25 16:27:31.684 [parallel-6] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 40007ms，错误: Did not observe any item or terminal signal within 40000ms in 'Mono.flatMap ⇢ at org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.bodyToMono(DefaultWebClient.java:570)' (and no fallback has been configured)
2025-06-25 16:27:31.696 [TextExtract-5] INFO  com.datacenter.extract.service.LongTextProcessor - ✅ 分片合并完成，成功率: 2/2 ({:.1f}%)，提取三元组: 100.0
2025-06-25 16:27:31.696 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 2050，处理模式: 分批处理
2025-06-25 16:27:31.703 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 579
2025-06-25 16:27:31.703 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"团队","predicate":"签署","object":"技术转让协议","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"计划研究","object":"多模态知识图谱","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"医疗、金融和教育","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"取得成就","object":"人工智能和知识图谱领域","confidence":0.95,"chunk_index":1,"chunk_start":0}],"total_chunks":2,"success_chunks":2,"success_rate":"100.00%","total_triples":4,"processing_method":"batch_processing","timestamp":1750840051695}
2025-06-25 16:27:31.703 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"团队","predicate":"签署","object":"技术转让协议","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"计划研究","object":"多模态知识图谱","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"医疗、金融和教育","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"取得成就","object":"人工智能和知识图谱领域","confidence":0.95,"chunk_index":1,"chunk_start":0}],"total_chunks":2,"success_chunks":2,"success_rate":"100.00%","total_triples":4,"processing_method":"batch_processing","timestamp":1750840051695}
2025-06-25 16:27:31.705 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 7 个主要字段: [triples, total_chunks, success_chunks, success_rate, total_triples, processing_method, timestamp]
2025-06-25 16:27:31.705 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-25 16:27:31.706 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[签署]--> 技术转让协议
2025-06-25 16:27:31.706 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[计划研究]--> 多模态知识图谱
2025-06-25 16:27:31.706 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[探索应用]--> 医疗、金融和教育
2025-06-25 16:27:31.706 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[取得成就]--> 人工智能和知识图谱领域
2025-06-25 16:27:31.706 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:27:31.708 [TextExtract-5] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 2050
2025-06-25 16:30:18.630 [reactor-http-nio-5] WARN  c.d.extract.controller.AsyncExtractController - Async extract request failed - empty text content
2025-06-25 16:30:18.636 [reactor-http-nio-5] WARN  c.d.extract.controller.AsyncExtractController - Async extract request failed - empty text content
2025-06-25 16:30:18.643 [reactor-http-nio-5] WARN  c.d.extract.controller.AsyncExtractController - Async extract request failed - empty text content
2025-06-25 16:30:18.650 [reactor-http-nio-5] WARN  c.d.extract.controller.AsyncExtractController - Async extract request failed - empty text content
2025-06-25 16:30:18.658 [reactor-http-nio-5] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1
2025-06-25 16:30:18.658 [reactor-http-nio-5] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 0ms
2025-06-25 16:30:18.658 [TextExtract-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-2, 文本长度: 32
2025-06-25 16:30:18.663 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 461
2025-06-25 16:30:18.663 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "演员",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "歌手",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出生地",
      "object": "香港",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "作品",
      "object": "《无间道》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:30:18.664 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "演员",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "歌手",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出生地",
      "object": "香港",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "作品",
      "object": "《无间道》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:30:18.666 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:30:18.666 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-25 16:30:18.668 [reactor-http-nio-5] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities, textInputType: JSONArray, arraySize: 1
2025-06-25 16:30:18.668 [reactor-http-nio-5] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 0ms
2025-06-25 16:30:18.668 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-1, 文本长度: 31
2025-06-25 16:30:18.668 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 31 字符
2025-06-25 16:30:18.668 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:30:18.668 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 31，当前并发数: 1
2025-06-25 16:30:18.668 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:30:18.668 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:30:18.673 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:30:18.675 [reactor-http-nio-5] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: relations, textInputType: JSONArray, arraySize: 1
2025-06-25 16:30:18.675 [reactor-http-nio-5] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 16:30:18.675 [TextExtract-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-3, 文本长度: 34
2025-06-25 16:30:18.675 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 34 字符
2025-06-25 16:30:18.675 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:30:18.675 [TextExtract-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 34，当前并发数: 2
2025-06-25 16:30:18.675 [TextExtract-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:30:18.677 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 刘德华 (通过三元组提取)
2025-06-25 16:30:18.679 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:30:18.681 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:30:18.682 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 演员 (通过三元组提取)
2025-06-25 16:30:18.683 [reactor-http-nio-5] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: triples, textInputType: JSONArray, arraySize: 3
2025-06-25 16:30:18.684 [reactor-http-nio-5] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 16:30:18.684 [TextExtract-4] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-4, 文本长度: 59
2025-06-25 16:30:18.684 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 59 字符
2025-06-25 16:30:18.684 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:30:18.684 [TextExtract-4] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 59，当前并发数: 3
2025-06-25 16:30:18.684 [TextExtract-4] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:30:18.695 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:30:18.697 [reactor-http-nio-5] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities, textInputType: JSONArray, arraySize: 3
2025-06-25 16:30:18.697 [reactor-http-nio-5] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 0ms
2025-06-25 16:30:18.697 [TextExtract-5] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-5, 文本长度: 52
2025-06-25 16:30:18.697 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 52 字符
2025-06-25 16:30:18.697 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:30:18.697 [TextExtract-5] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 52，当前并发数: 4
2025-06-25 16:30:18.697 [TextExtract-5] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:30:18.698 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:30:18.700 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:30:18.702 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 演员 [职业]
2025-06-25 16:30:18.702 [reactor-http-nio-5] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: relations, textInputType: JSONArray, arraySize: 4
2025-06-25 16:30:18.703 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[职业]--> 演员
2025-06-25 16:30:18.705 [reactor-http-nio-5] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 3ms
2025-06-25 16:30:18.706 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:30:18.708 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 16:30:18.708 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:30:18.710 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:30:18.711 [reactor-http-nio-5] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1
2025-06-25 16:30:18.711 [reactor-http-nio-5] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 0ms
2025-06-25 16:30:18.712 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 歌手 (通过三元组提取)
2025-06-25 16:30:18.717 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:30:18.719 [reactor-http-nio-5] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: triples, textInputType: JSONArray, arraySize: 3
2025-06-25 16:30:18.719 [reactor-http-nio-5] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 0ms
2025-06-25 16:30:18.720 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:30:18.722 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:30:18.723 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 歌手 [职业]
2025-06-25 16:30:18.723 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[职业]--> 歌手
2025-06-25 16:30:18.725 [reactor-http-nio-5] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1
2025-06-25 16:30:18.725 [reactor-http-nio-5] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 16:30:18.726 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:30:18.728 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 16:30:18.729 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:30:18.730 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:30:18.731 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 香港 (通过三元组提取)
2025-06-25 16:30:18.732 [reactor-http-nio-5] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities, textInputType: JSONArray, arraySize: 1
2025-06-25 16:30:18.732 [reactor-http-nio-5] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 0ms
2025-06-25 16:30:18.732 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:30:18.735 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:30:18.737 [reactor-http-nio-5] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: relations, textInputType: JSONArray, arraySize: 1
2025-06-25 16:30:18.738 [reactor-http-nio-5] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 16:30:18.739 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:30:18.741 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 香港 [出生地]
2025-06-25 16:30:18.741 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[出生地]--> 香港
2025-06-25 16:30:18.744 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:30:18.746 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 16:30:18.747 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:30:18.749 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:30:18.750 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《无间道》 (通过三元组提取)
2025-06-25 16:30:18.751 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:30:18.754 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 16:30:18.755 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:30:18.756 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 刘德华 -> 《无间道》 [作品]
2025-06-25 16:30:18.756 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[作品]--> 《无间道》
2025-06-25 16:30:18.756 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:30:18.759 [TextExtract-2] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 32
2025-06-25 16:30:18.759 [TextExtract-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-2, 文本长度: 74
2025-06-25 16:30:18.759 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 74 字符
2025-06-25 16:30:18.760 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:30:18.760 [TextExtract-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 74，当前并发数: 5
2025-06-25 16:30:18.760 [TextExtract-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:30:32.326 [reactor-http-nio-6] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 13658ms，响应长度: 247
2025-06-25 16:30:32.327 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 31，处理模式: 直接处理
2025-06-25 16:30:32.331 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 247
2025-06-25 16:30:32.331 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "发行",
      "object": "《叶惠美》",
      "confidence": 0.95
    },
    {
      "subject": "《叶惠美》",
      "predicate": "收录",
      "object": "《东风破》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:30:32.331 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "发行",
      "object": "《叶惠美》",
      "confidence": 0.95
    },
    {
      "subject": "《叶惠美》",
      "predicate": "收录",
      "object": "《东风破》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:30:32.334 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:30:32.334 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组，包括实体和关系保存
2025-06-25 16:30:32.335 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:30:32.338 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:30:32.340 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 周杰伦 (通过三元组提取)
2025-06-25 16:30:32.341 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:30:32.343 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:30:32.344 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《叶惠美》 (通过三元组提取)
2025-06-25 16:30:32.345 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:30:32.349 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 16:30:32.353 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:30:32.355 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 周杰伦 -> 《叶惠美》 [发行]
2025-06-25 16:30:32.355 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[发行]--> 《叶惠美》
2025-06-25 16:30:32.355 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:30:32.357 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《叶惠美》 已存在，跳过插入
2025-06-25 16:30:32.357 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:30:32.359 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:30:32.360 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《东风破》 (通过三元组提取)
2025-06-25 16:30:32.360 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《叶惠美》 --[收录]--> 《东风破》
2025-06-25 16:30:32.360 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:30:32.365 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 31
2025-06-25 16:30:32.365 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-1, 文本长度: 14
2025-06-25 16:30:32.365 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 14 字符
2025-06-25 16:30:32.365 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:30:32.365 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 14，当前并发数: 5
2025-06-25 16:30:32.365 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:30:33.890 [reactor-http-nio-7] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 15215ms，响应长度: 254
2025-06-25 16:30:33.890 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 34，处理模式: 直接处理
2025-06-25 16:30:33.894 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 254
2025-06-25 16:30:33.894 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "获得",
      "object": "最佳男主角奖",
      "confidence": 0.95
    },
    {
      "subject": "2023年金马奖颁奖典礼",
      "predicate": "举行地点",
      "object": "台北",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:30:33.894 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "获得",
      "object": "最佳男主角奖",
      "confidence": 0.95
    },
    {
      "subject": "2023年金马奖颁奖典礼",
      "predicate": "举行地点",
      "object": "台北",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:30:33.895 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:30:33.895 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组，包括实体和关系保存
2025-06-25 16:30:33.898 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:30:33.901 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 16:30:33.901 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[获得]--> 最佳男主角奖
2025-06-25 16:30:33.903 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 16:30:33.908 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-25 16:30:33.910 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 2023年金马奖颁奖典礼 (通过三元组提取)
2025-06-25 16:30:33.912 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 16:30:33.915 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-25 16:30:33.917 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 台北 (通过三元组提取)
2025-06-25 16:30:33.917 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 2023年金马奖颁奖典礼 --[举行地点]--> 台北
2025-06-25 16:30:33.917 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:30:33.928 [TextExtract-3] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 34
2025-06-25 16:30:33.928 [TextExtract-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-3, 文本长度: 45
2025-06-25 16:30:33.928 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 45 字符
2025-06-25 16:30:33.928 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:30:33.928 [TextExtract-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 45，当前并发数: 5
2025-06-25 16:30:33.929 [TextExtract-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:30:34.044 [reactor-http-nio-8] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 15360ms，响应长度: 365
2025-06-25 16:30:34.047 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 59，处理模式: 直接处理
2025-06-25 16:30:34.050 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 365
2025-06-25 16:30:34.050 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "参加",
      "object": "2023年香港电影节",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "演唱",
      "object": "《青花瓷》",
      "confidence": 0.95
    },
    {
      "subject": "张学友",
      "predicate": "获得",
      "object": "金曲奖最佳男歌手",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:30:34.050 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "参加",
      "object": "2023年香港电影节",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "演唱",
      "object": "《青花瓷》",
      "confidence": 0.95
    },
    {
      "subject": "张学友",
      "predicate": "获得",
      "object": "金曲奖最佳男歌手",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:30:34.051 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:30:34.052 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-25 16:30:34.054 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:30:34.057 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 16:30:34.059 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 16:30:34.062 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-25 16:30:34.065 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 2023年香港电影节 (通过三元组提取)
2025-06-25 16:30:34.067 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:30:34.078 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 16:30:34.082 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:30:34.090 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 刘德华 -> 2023年香港电影节 [参加]
2025-06-25 16:30:34.090 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[参加]--> 2023年香港电影节
2025-06-25 16:30:34.091 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:30:34.094 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-25 16:30:34.095 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:30:34.096 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:30:34.098 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《青花瓷》 (通过三元组提取)
2025-06-25 16:30:34.099 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:30:34.102 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 16:30:34.105 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:30:34.106 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 周杰伦 -> 《青花瓷》 [演唱]
2025-06-25 16:30:34.106 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[演唱]--> 《青花瓷》
2025-06-25 16:30:34.107 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:30:34.109 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:30:34.110 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 张学友 (通过三元组提取)
2025-06-25 16:30:34.110 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张学友 --[获得]--> 金曲奖最佳男歌手
2025-06-25 16:30:34.110 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:30:34.115 [TextExtract-4] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 59
2025-06-25 16:30:34.115 [TextExtract-4] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-4, 文本长度: 44
2025-06-25 16:30:34.115 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 44 字符
2025-06-25 16:30:34.115 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:30:34.115 [TextExtract-4] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 44，当前并发数: 5
2025-06-25 16:30:34.115 [TextExtract-4] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:30:34.119 [reactor-http-nio-9] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 15422ms，响应长度: 363
2025-06-25 16:30:34.119 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 52，处理模式: 直接处理
2025-06-25 16:30:34.120 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 363
2025-06-25 16:30:34.120 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "《流浪地球2》",
      "predicate": "上映于",
      "object": "春节档",
      "confidence": 0.95
    },
    {
      "subject": "《满江红》",
      "predicate": "票房",
      "object": "40亿",
      "confidence": 0.95
    },
    {
      "subject": "《深海》",
      "predicate": "采用",
      "object": "全新的动画技术",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:30:34.120 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "《流浪地球2》",
      "predicate": "上映于",
      "object": "春节档",
      "confidence": 0.95
    },
    {
      "subject": "《满江红》",
      "predicate": "票房",
      "object": "40亿",
      "confidence": 0.95
    },
    {
      "subject": "《深海》",
      "predicate": "采用",
      "object": "全新的动画技术",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:30:34.124 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:30:34.124 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-25 16:30:34.125 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:30:34.127 [TextExtract-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:30:34.128 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《流浪地球2》 (通过三元组提取)
2025-06-25 16:30:34.128 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《流浪地球2》 --[上映于]--> 春节档
2025-06-25 16:30:34.129 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:30:34.137 [TextExtract-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:30:34.140 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《满江红》 (通过三元组提取)
2025-06-25 16:30:34.140 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《满江红》 --[票房]--> 40亿
2025-06-25 16:30:34.142 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:30:34.146 [TextExtract-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:30:34.148 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《深海》 (通过三元组提取)
2025-06-25 16:30:34.148 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《深海》 --[采用]--> 全新的动画技术
2025-06-25 16:30:34.148 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:30:34.151 [TextExtract-5] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 52
2025-06-25 16:30:34.151 [TextExtract-5] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-5, 文本长度: 279
2025-06-25 16:30:34.151 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 279 字符
2025-06-25 16:30:34.151 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:30:34.151 [TextExtract-5] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 279，当前并发数: 5
2025-06-25 16:30:34.151 [TextExtract-5] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:30:36.016 [reactor-http-nio-10] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 17256ms，响应长度: 480
2025-06-25 16:30:36.017 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 74，处理模式: 直接处理
2025-06-25 16:30:36.021 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 480
2025-06-25 16:30:36.021 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "执导",
      "object": "《满江红》",
      "confidence": 0.95
    },
    {
      "subject": "易烊千玺",
      "predicate": "饰演",
      "object": "《满江红》主角",
      "confidence": 0.95
    },
    {
      "subject": "《满江红》",
      "predicate": "获得",
      "object": "春节档票房冠军",
      "confidence": 0.95
    },
    {
      "subject": "《满江红》",
      "predicate": "讲述",
      "object": "南宋抗金的故事",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:30:36.021 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "执导",
      "object": "《满江红》",
      "confidence": 0.95
    },
    {
      "subject": "易烊千玺",
      "predicate": "饰演",
      "object": "《满江红》主角",
      "confidence": 0.95
    },
    {
      "subject": "《满江红》",
      "predicate": "获得",
      "object": "春节档票房冠军",
      "confidence": 0.95
    },
    {
      "subject": "《满江红》",
      "predicate": "讲述",
      "object": "南宋抗金的故事",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:30:36.032 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:30:36.032 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-25 16:30:36.035 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:30:36.041 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:30:36.044 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 张艺谋 (通过三元组提取)
2025-06-25 16:30:36.045 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:30:36.047 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《满江红》 已存在，跳过插入
2025-06-25 16:30:36.049 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:30:36.053 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 16:30:36.057 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:30:36.060 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 张艺谋 -> 《满江红》 [执导]
2025-06-25 16:30:36.060 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[执导]--> 《满江红》
2025-06-25 16:30:36.060 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 易烊千玺 --[饰演]--> 《满江红》主角
2025-06-25 16:30:36.061 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:30:36.063 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《满江红》 已存在，跳过插入
2025-06-25 16:30:36.064 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《满江红》 --[获得]--> 春节档票房冠军
2025-06-25 16:30:36.064 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:30:36.066 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《满江红》 已存在，跳过插入
2025-06-25 16:30:36.066 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《满江红》 --[讲述]--> 南宋抗金的故事
2025-06-25 16:30:36.066 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:30:36.074 [TextExtract-2] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 74
2025-06-25 16:30:36.075 [TextExtract-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-2, 文本长度: 1041
2025-06-25 16:30:38.487 [reactor-http-nio-6] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 6122ms，响应长度: 133
2025-06-25 16:30:38.488 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 14，处理模式: 直接处理
2025-06-25 16:30:38.492 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 133
2025-06-25 16:30:38.492 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "职业",
      "object": "功夫电影明星",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:30:38.492 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "职业",
      "object": "功夫电影明星",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:30:38.494 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:30:38.494 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 1 个三元组，包括实体和关系保存
2025-06-25 16:30:38.498 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:30:38.501 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:30:38.504 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 成龙 (通过三元组提取)
2025-06-25 16:30:38.510 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:30:38.515 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:30:38.518 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 功夫电影明星 (通过三元组提取)
2025-06-25 16:30:38.519 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:30:38.522 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:30:38.524 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:30:38.526 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 成龙 -> 功夫电影明星 [职业]
2025-06-25 16:30:38.526 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[职业]--> 功夫电影明星
2025-06-25 16:30:38.526 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:30:38.533 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 14
2025-06-25 16:30:43.256 [reactor-http-nio-7] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 9327ms，响应长度: 356
2025-06-25 16:30:43.257 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 45，处理模式: 直接处理
2025-06-25 16:30:43.262 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 356
2025-06-25 16:30:43.262 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "李连杰",
      "predicate": "主演",
      "object": "《黄飞鸿》",
      "confidence": 0.95
    },
    {
      "subject": "甄子丹",
      "predicate": "出演",
      "object": "《叶问》系列",
      "confidence": 0.95
    },
    {
      "subject": "吴京",
      "predicate": "导演",
      "object": "《战狼》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:30:43.262 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "李连杰",
      "predicate": "主演",
      "object": "《黄飞鸿》",
      "confidence": 0.95
    },
    {
      "subject": "甄子丹",
      "predicate": "出演",
      "object": "《叶问》系列",
      "confidence": 0.95
    },
    {
      "subject": "吴京",
      "predicate": "导演",
      "object": "《战狼》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:30:43.263 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:30:43.264 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-25 16:30:43.267 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:30:43.270 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:30:43.274 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 李连杰 (通过三元组提取)
2025-06-25 16:30:43.275 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:30:43.277 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:30:43.279 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 《黄飞鸿》 (通过三元组提取)
2025-06-25 16:30:43.281 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:30:43.286 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:30:43.289 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:30:43.292 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 李连杰 -> 《黄飞鸿》 [主演]
2025-06-25 16:30:43.293 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 李连杰 --[主演]--> 《黄飞鸿》
2025-06-25 16:30:43.293 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 甄子丹 --[出演]--> 《叶问》系列
2025-06-25 16:30:43.294 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:30:43.296 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:30:43.298 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 吴京 (通过三元组提取)
2025-06-25 16:30:43.298 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:30:43.300 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:30:43.301 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 《战狼》 (通过三元组提取)
2025-06-25 16:30:43.302 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:30:43.304 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:30:43.307 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:30:43.309 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 吴京 -> 《战狼》 [导演]
2025-06-25 16:30:43.309 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 吴京 --[导演]--> 《战狼》
2025-06-25 16:30:43.310 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:30:43.316 [TextExtract-3] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 45
2025-06-25 16:30:47.327 [reactor-http-nio-8] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 13212ms，响应长度: 572
2025-06-25 16:30:47.328 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 44，处理模式: 直接处理
2025-06-25 16:30:47.331 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 572
2025-06-25 16:30:47.332 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "演员",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出生地",
      "object": "香港",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "歌手",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "作品",
      "object": "《无间道》",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "作品",
      "object": "《桃姐》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:30:47.332 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "演员",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出生地",
      "object": "香港",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "歌手",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "作品",
      "object": "《无间道》",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "作品",
      "object": "《桃姐》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:30:47.333 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:30:47.333 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 处理 5 个三元组，包括实体和关系保存
2025-06-25 16:30:47.334 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:30:47.337 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 16:30:47.337 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:30:47.340 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 人员 演员 已存在，跳过插入
2025-06-25 16:30:47.341 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:30:47.345 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:30:47.348 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:30:47.350 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 演员 [职业]
2025-06-25 16:30:47.350 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[职业]--> 演员
2025-06-25 16:30:47.351 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:30:47.353 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 16:30:47.354 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:30:47.357 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 人员 香港 已存在，跳过插入
2025-06-25 16:30:47.358 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:30:47.361 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:30:47.364 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:30:47.367 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 香港 [出生地]
2025-06-25 16:30:47.367 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[出生地]--> 香港
2025-06-25 16:30:47.368 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:30:47.370 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 16:30:47.373 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:30:47.375 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 人员 歌手 已存在，跳过插入
2025-06-25 16:30:47.376 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:30:47.381 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:30:47.386 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:30:47.388 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 歌手 [职业]
2025-06-25 16:30:47.388 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[职业]--> 歌手
2025-06-25 16:30:47.389 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:30:47.392 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 16:30:47.392 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:30:47.396 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 作品 《无间道》 已存在，跳过插入
2025-06-25 16:30:47.399 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:30:47.403 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 16:30:47.412 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:30:47.414 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 刘德华 -> 《无间道》 [作品]
2025-06-25 16:30:47.414 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[作品]--> 《无间道》
2025-06-25 16:30:47.416 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:30:47.418 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 16:30:47.419 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:30:47.421 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:30:47.423 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《桃姐》 (通过三元组提取)
2025-06-25 16:30:47.423 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:30:47.426 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 16:30:47.428 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:30:47.430 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 刘德华 -> 《桃姐》 [作品]
2025-06-25 16:30:47.430 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[作品]--> 《桃姐》
2025-06-25 16:30:47.430 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:30:47.435 [TextExtract-4] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 44
2025-06-25 16:31:04.160 [parallel-2] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30009ms，错误: Did not observe any item or terminal signal within 30000ms in 'Mono.flatMap ⇢ at org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.bodyToMono(DefaultWebClient.java:570)' (and no fallback has been configured)
2025-06-25 16:31:04.161 [TextExtract-5] ERROR com.datacenter.extract.service.SmartAIProvider - ❌ AI提取失败，类型: entities，文本长度: 279
2025-06-25 16:31:04.161 [TextExtract-5] ERROR com.datacenter.extract.service.SmartAIProvider - 💥 AI提取过程异常: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:77)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.service.TextExtractionService.processTextAsync(TextExtractionService.java:72)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.AsyncExecutionInterceptor.lambda$invoke$0(AsyncExecutionInterceptor.java:115)
	at java.base/java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:264)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 16:31:04.161 [TextExtract-5] ERROR c.datacenter.extract.service.TextExtractionService - 异步文本提取失败，错误: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-25 16:31:04.162 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 1041 字符
2025-06-25 16:31:04.162 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:31:04.162 [TextExtract-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 1041，当前并发数: 1
2025-06-25 16:31:04.162 [TextExtract-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 40秒
2025-06-25 16:31:44.171 [parallel-6] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 40009ms，错误: Did not observe any item or terminal signal within 40000ms in 'Mono.flatMap ⇢ at org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.bodyToMono(DefaultWebClient.java:570)' (and no fallback has been configured)
2025-06-25 16:31:44.175 [TextExtract-2] ERROR com.datacenter.extract.service.SmartAIProvider - ❌ AI提取失败，类型: relations，文本长度: 1041
2025-06-25 16:31:44.175 [TextExtract-2] ERROR com.datacenter.extract.service.SmartAIProvider - 💥 AI提取过程异常: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:77)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.service.TextExtractionService.processTextAsync(TextExtractionService.java:72)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.AsyncExecutionInterceptor.lambda$invoke$0(AsyncExecutionInterceptor.java:115)
	at java.base/java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:264)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 16:31:44.176 [TextExtract-2] ERROR c.datacenter.extract.service.TextExtractionService - 异步文本提取失败，错误: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-25 16:33:10.665 [reactor-http-nio-11] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1
2025-06-25 16:33:10.666 [reactor-http-nio-11] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 16:33:10.666 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-1, 文本长度: 86
2025-06-25 16:33:10.666 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 86 字符
2025-06-25 16:33:10.666 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:33:10.666 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 86，当前并发数: 1
2025-06-25 16:33:10.666 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:33:21.943 [reactor-http-nio-12] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 11277ms，响应长度: 495
2025-06-25 16:33:21.944 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 86，处理模式: 直接处理
2025-06-25 16:33:21.951 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 495
2025-06-25 16:33:21.951 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "满江红",
      "predicate": "展映于",
      "object": "2023年金马奖颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "红高粱",
      "predicate": "展映于",
      "object": "第38届柏林国际电影节",
      "confidence": 0.95
    },
    {
      "subject": "英雄",
      "predicate": "播放于",
      "object": "奥斯卡颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "青花瓷",
      "predicate": "演唱于",
      "object": "2008年北京奥运会开幕式",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:33:21.951 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "满江红",
      "predicate": "展映于",
      "object": "2023年金马奖颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "红高粱",
      "predicate": "展映于",
      "object": "第38届柏林国际电影节",
      "confidence": 0.95
    },
    {
      "subject": "英雄",
      "predicate": "播放于",
      "object": "奥斯卡颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "青花瓷",
      "predicate": "演唱于",
      "object": "2008年北京奥运会开幕式",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:33:21.953 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:33:21.953 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-25 16:33:21.956 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 16:33:21.963 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-25 16:33:21.969 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 满江红 (通过三元组提取)
2025-06-25 16:33:21.970 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 16:33:21.974 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 2023年金马奖颁奖典礼 已存在，跳过插入
2025-06-25 16:33:21.974 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 满江红 --[展映于]--> 2023年金马奖颁奖典礼
2025-06-25 16:33:21.975 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 16:33:21.978 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-25 16:33:21.981 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 红高粱 (通过三元组提取)
2025-06-25 16:33:21.982 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 16:33:21.986 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-25 16:33:21.988 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 第38届柏林国际电影节 (通过三元组提取)
2025-06-25 16:33:21.988 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 红高粱 --[展映于]--> 第38届柏林国际电影节
2025-06-25 16:33:21.990 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 16:33:21.992 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-25 16:33:21.993 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 奥斯卡颁奖典礼 (通过三元组提取)
2025-06-25 16:33:21.993 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 英雄 --[播放于]--> 奥斯卡颁奖典礼
2025-06-25 16:33:21.994 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:33:21.997 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:33:21.999 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 青花瓷 (通过三元组提取)
2025-06-25 16:33:22.001 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:33:22.009 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:33:22.013 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 2008年北京奥运会开幕式 (通过三元组提取)
2025-06-25 16:33:22.015 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 16:33:22.019 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 16:33:22.024 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:33:22.030 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 2008年北京奥运会开幕式 -> 青花瓷 [在_演唱于]
2025-06-25 16:33:22.030 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 青花瓷 --[演唱于]--> 2008年北京奥运会开幕式
2025-06-25 16:33:22.030 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:33:22.037 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 86
2025-06-25 16:37:20.778 [SpringApplicationShutdownHook] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 16:37:20.779 [SpringApplicationShutdownHook] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@2060df8] for TypeConfiguration
2025-06-25 16:37:20.779 [SpringApplicationShutdownHook] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@7a215b4c] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@2060df8]
2025-06-25 16:37:20.781 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-25 16:37:20.788 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-25 16:37:28.509 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 91581 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-25 16:37:28.512 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-25 16:37:29.445 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 16:37:29.446 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-25 16:37:29.563 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 112 ms. Found 7 JPA repository interfaces.
2025-06-25 16:37:29.585 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 16:37:29.586 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-25 16:37:29.599 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityCelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 16:37:29.599 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityEventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 16:37:29.599 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 16:37:29.599 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 16:37:29.599 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 16:37:29.599 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 16:37:29.600 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 16:37:29.600 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 0 Redis repository interfaces.
2025-06-25 16:37:32.912 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@36a1fd20
2025-06-25 16:37:32.914 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@36a1fd20
2025-06-25 16:37:32.914 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@36a1fd20
2025-06-25 16:37:32.914 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@5ffd35dd
2025-06-25 16:37:32.914 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@5ffd35dd
2025-06-25 16:37:32.914 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@311a09b2
2025-06-25 16:37:32.915 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@311a09b2
2025-06-25 16:37:32.916 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@4cacccbf
2025-06-25 16:37:32.916 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@4cacccbf
2025-06-25 16:37:32.916 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@301d84f6
2025-06-25 16:37:32.916 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@301d84f6
2025-06-25 16:37:32.917 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@301d84f6
2025-06-25 16:37:32.917 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@6f80cf5
2025-06-25 16:37:32.917 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@6f80cf5
2025-06-25 16:37:32.917 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@6f80cf5
2025-06-25 16:37:32.917 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@674ed201
2025-06-25 16:37:32.917 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@674ed201
2025-06-25 16:37:32.917 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@57920d6c
2025-06-25 16:37:32.917 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@465d1345
2025-06-25 16:37:32.918 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@465d1345
2025-06-25 16:37:32.918 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@62cf86d6
2025-06-25 16:37:32.918 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@2a6c751f
2025-06-25 16:37:32.918 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@6dd2e453
2025-06-25 16:37:32.918 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@6dd2e453
2025-06-25 16:37:32.918 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@6dd2e453
2025-06-25 16:37:32.918 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@433b1597
2025-06-25 16:37:32.918 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@433b1597
2025-06-25 16:37:32.918 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@433b1597
2025-06-25 16:37:32.918 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@5d5cd210
2025-06-25 16:37:32.919 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@5d5cd210
2025-06-25 16:37:32.919 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@5d5cd210
2025-06-25 16:37:32.919 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@14d18029
2025-06-25 16:37:32.919 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@14d18029
2025-06-25 16:37:32.919 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@14d18029
2025-06-25 16:37:32.920 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@6edb1e9c
2025-06-25 16:37:32.920 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@6edb1e9c
2025-06-25 16:37:32.920 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@6edb1e9c
2025-06-25 16:37:32.920 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@75d7297d
2025-06-25 16:37:32.920 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@75d7297d
2025-06-25 16:37:32.920 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@4e20a985
2025-06-25 16:37:32.920 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@4e20a985
2025-06-25 16:37:32.920 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@56e8a8a0
2025-06-25 16:37:32.920 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@56e8a8a0
2025-06-25 16:37:32.922 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@56e8a8a0
2025-06-25 16:37:32.922 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@6071631f
2025-06-25 16:37:32.922 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@2ca132ad
2025-06-25 16:37:32.922 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@2ca132ad
2025-06-25 16:37:32.922 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@6706da3d
2025-06-25 16:37:32.922 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@7438c3d5
2025-06-25 16:37:32.922 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@7438c3d5
2025-06-25 16:37:32.922 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@7438c3d5
2025-06-25 16:37:32.923 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@1fba3fd6
2025-06-25 16:37:32.923 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@3aab42d6
2025-06-25 16:37:32.923 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@6badb08c
2025-06-25 16:37:32.923 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@5939f047
2025-06-25 16:37:32.923 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@5939f047
2025-06-25 16:37:32.923 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@17332039
2025-06-25 16:37:32.924 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@17332039
2025-06-25 16:37:32.924 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@776e7dfb
2025-06-25 16:37:32.924 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@71418a4a
2025-06-25 16:37:32.924 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@67ecf7ed
2025-06-25 16:37:32.924 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@69d021c1
2025-06-25 16:37:32.924 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@6d5508a5
2025-06-25 16:37:32.924 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@103bcc9f
2025-06-25 16:37:32.924 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@106802ea
2025-06-25 16:37:32.924 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@106802ea
2025-06-25 16:37:32.924 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@785ef70f
2025-06-25 16:37:32.924 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@785ef70f
2025-06-25 16:37:32.924 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@3d8bd881
2025-06-25 16:37:32.924 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@3d8bd881
2025-06-25 16:37:32.925 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@731ab49b
2025-06-25 16:37:32.926 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@731ab49b
2025-06-25 16:37:32.926 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@23358740
2025-06-25 16:37:32.927 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@23358740
2025-06-25 16:37:32.927 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@2cdcfaa6
2025-06-25 16:37:32.927 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@4ff0706c
2025-06-25 16:37:32.927 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@6968bb65
2025-06-25 16:37:32.927 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@6968bb65
2025-06-25 16:37:32.928 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@66682e8f
2025-06-25 16:37:32.928 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@2d2af12e
2025-06-25 16:37:32.929 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@611587f7
2025-06-25 16:37:32.930 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@4d0abb23
2025-06-25 16:37:32.930 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@4d0abb23
2025-06-25 16:37:32.930 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@6ab1f85b
2025-06-25 16:37:32.930 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@10e8c7a2
2025-06-25 16:37:32.930 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@5d8fd077
2025-06-25 16:37:32.930 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@5d8fd077
2025-06-25 16:37:32.930 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@4544ab46
2025-06-25 16:37:32.931 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@4544ab46
2025-06-25 16:37:32.931 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@2052f095
2025-06-25 16:37:32.931 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@2052f095
2025-06-25 16:37:32.931 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@2052f095
2025-06-25 16:37:32.931 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@76d1f6ea
2025-06-25 16:37:32.931 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@76d1f6ea
2025-06-25 16:37:32.931 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@76d1f6ea
2025-06-25 16:37:32.931 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@55fe9c2f
2025-06-25 16:37:32.932 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@3580134d
2025-06-25 16:37:32.932 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@2e19b30
2025-06-25 16:37:32.932 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@2e19b30
2025-06-25 16:37:32.932 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@7b7e4b20
2025-06-25 16:37:32.932 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@7b7e4b20
2025-06-25 16:37:32.932 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@7b7e4b20
2025-06-25 16:37:32.932 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@5ac0bf84
2025-06-25 16:37:32.932 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@6fefc5ea
2025-06-25 16:37:32.932 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@6159fb3c
2025-06-25 16:37:32.932 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@6159fb3c
2025-06-25 16:37:32.933 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@68f79b7c
2025-06-25 16:37:32.934 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@68f79b7c
2025-06-25 16:37:32.934 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@68f79b7c
2025-06-25 16:37:32.934 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@37142579
2025-06-25 16:37:32.934 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@37142579
2025-06-25 16:37:32.934 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@264576e4
2025-06-25 16:37:32.934 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@264576e4
2025-06-25 16:37:32.934 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@86bf90b
2025-06-25 16:37:32.934 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@86bf90b
2025-06-25 16:37:32.935 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@5c13af01
2025-06-25 16:37:32.936 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@5c13af01
2025-06-25 16:37:32.936 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@4aba7617
2025-06-25 16:37:32.936 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@4aba7617
2025-06-25 16:37:32.936 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@47c5cbf2
2025-06-25 16:37:32.938 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@6528d339
2025-06-25 16:37:32.938 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@6528d339
2025-06-25 16:37:32.939 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@1df9f7c6
2025-06-25 16:37:32.939 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@4b5aa48b
2025-06-25 16:37:32.940 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@51c008fd
2025-06-25 16:37:32.941 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@70ed902a
2025-06-25 16:37:32.942 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@22f80e36
2025-06-25 16:37:32.942 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@3c98981e
2025-06-25 16:37:32.942 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@6dcee890
2025-06-25 16:37:32.942 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@713e49c3
2025-06-25 16:37:32.942 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@13d5606c
2025-06-25 16:37:33.013 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-25 16:37:33.024 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-25 16:37:33.132 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@102fd71d
2025-06-25 16:37:33.134 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-25 16:37:33.170 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-25 16:37:33.171 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-25 16:37:33.189 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@550574cb) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1e7113f8)
2025-06-25 16:37:33.190 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3e149513) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@787a4519)
2025-06-25 16:37:33.190 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@627d5f1) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@105fe81e)
2025-06-25 16:37:33.190 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@af94b0b) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@208185c0)
2025-06-25 16:37:33.190 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1831447c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7741507c)
2025-06-25 16:37:33.190 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@37a0fc8c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1ba3c03d)
2025-06-25 16:37:33.190 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@9a37591) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@749c0669)
2025-06-25 16:37:33.190 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4468c0ea) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@41cf4272)
2025-06-25 16:37:33.190 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@53d2b827) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4769537a)
2025-06-25 16:37:33.191 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-25 16:37:33.191 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-25 16:37:33.191 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-25 16:37:33.192 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 16:37:33.192 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 16:37:33.193 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@58679ff
2025-06-25 16:37:33.193 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@1df9f7c6`
2025-06-25 16:37:33.195 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-25 16:37:33.195 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-25 16:37:33.198 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 16:37:33.198 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 16:37:33.198 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 16:37:33.198 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 16:37:33.198 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 16:37:33.198 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 16:37:33.199 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 16:37:33.199 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 16:37:33.199 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 16:37:33.200 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@354e2bff] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@232b3b4c]
2025-06-25 16:37:33.828 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@354e2bff] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@2c3d1214]
2025-06-25 16:37:33.833 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@2c3d1214] for TypeConfiguration
2025-06-25 16:37:33.834 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 16:37:34.693 [main] INFO  c.d.extract.controller.AsyncExtractController - AsyncExtractController initialized successfully
2025-06-25 16:37:35.100 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-25 16:37:35.228 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-25 16:37:35.261 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 2
2025-06-25 16:37:35.261 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-25 16:37:35.262 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-25 16:37:35.262 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-25 16:37:35.664 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-25 16:37:35.677 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 7.769 seconds (process running for 8.553)
2025-06-25 16:37:37.787 [SpringApplicationShutdownHook] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 16:37:37.792 [SpringApplicationShutdownHook] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@2c3d1214] for TypeConfiguration
2025-06-25 16:37:37.793 [SpringApplicationShutdownHook] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@ade39fc] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@2c3d1214]
2025-06-25 16:37:37.794 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-25 16:37:37.804 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-25 16:37:41.806 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 91596 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-25 16:37:41.809 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-25 16:37:42.792 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 16:37:42.793 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-25 16:37:42.889 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 92 ms. Found 7 JPA repository interfaces.
2025-06-25 16:37:42.909 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 16:37:42.910 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-25 16:37:42.927 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityCelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 16:37:42.927 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityEventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 16:37:42.928 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 16:37:42.928 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 16:37:42.928 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 16:37:42.928 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 16:37:42.928 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 16:37:42.929 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 0 Redis repository interfaces.
2025-06-25 16:37:44.520 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@66944c7c
2025-06-25 16:37:44.522 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@66944c7c
2025-06-25 16:37:44.522 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@66944c7c
2025-06-25 16:37:44.522 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@508f4bb5
2025-06-25 16:37:44.522 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@508f4bb5
2025-06-25 16:37:44.522 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@5602e540
2025-06-25 16:37:44.522 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@5602e540
2025-06-25 16:37:44.522 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@11f9b95a
2025-06-25 16:37:44.524 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@11f9b95a
2025-06-25 16:37:44.525 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@42066f0d
2025-06-25 16:37:44.525 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@42066f0d
2025-06-25 16:37:44.525 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@42066f0d
2025-06-25 16:37:44.525 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@687e561b
2025-06-25 16:37:44.525 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@687e561b
2025-06-25 16:37:44.525 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@687e561b
2025-06-25 16:37:44.526 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@299786b1
2025-06-25 16:37:44.526 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@299786b1
2025-06-25 16:37:44.526 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@1e23ee0e
2025-06-25 16:37:44.526 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@b144175
2025-06-25 16:37:44.526 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@b144175
2025-06-25 16:37:44.526 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@38923cfe
2025-06-25 16:37:44.527 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@1ac3a6f
2025-06-25 16:37:44.527 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@fee7ca
2025-06-25 16:37:44.527 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@fee7ca
2025-06-25 16:37:44.527 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@fee7ca
2025-06-25 16:37:44.527 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@29c80149
2025-06-25 16:37:44.528 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@29c80149
2025-06-25 16:37:44.528 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@29c80149
2025-06-25 16:37:44.528 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@14ad42
2025-06-25 16:37:44.528 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@14ad42
2025-06-25 16:37:44.529 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@14ad42
2025-06-25 16:37:44.529 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@608b906d
2025-06-25 16:37:44.529 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@608b906d
2025-06-25 16:37:44.530 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@608b906d
2025-06-25 16:37:44.530 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@173cfb01
2025-06-25 16:37:44.530 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@173cfb01
2025-06-25 16:37:44.530 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@173cfb01
2025-06-25 16:37:44.530 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@7e1762e6
2025-06-25 16:37:44.530 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@7e1762e6
2025-06-25 16:37:44.530 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@5bccaedb
2025-06-25 16:37:44.530 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@5bccaedb
2025-06-25 16:37:44.530 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@67784537
2025-06-25 16:37:44.530 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@67784537
2025-06-25 16:37:44.531 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@67784537
2025-06-25 16:37:44.532 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@17ec5e2a
2025-06-25 16:37:44.532 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@52290e63
2025-06-25 16:37:44.532 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@52290e63
2025-06-25 16:37:44.532 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@6c2dd88b
2025-06-25 16:37:44.532 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@49d979c4
2025-06-25 16:37:44.532 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@49d979c4
2025-06-25 16:37:44.532 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@49d979c4
2025-06-25 16:37:44.533 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@3cb173db
2025-06-25 16:37:44.534 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@26712838
2025-06-25 16:37:44.534 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@249a45fd
2025-06-25 16:37:44.534 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@268f0ff3
2025-06-25 16:37:44.534 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@268f0ff3
2025-06-25 16:37:44.535 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@11978f52
2025-06-25 16:37:44.535 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@11978f52
2025-06-25 16:37:44.535 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@3e0855b0
2025-06-25 16:37:44.535 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@484b5a21
2025-06-25 16:37:44.535 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@16e5344c
2025-06-25 16:37:44.535 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@3ba5c4dd
2025-06-25 16:37:44.535 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@47fca3cc
2025-06-25 16:37:44.535 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@55746340
2025-06-25 16:37:44.535 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@6a0c7af6
2025-06-25 16:37:44.535 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@6a0c7af6
2025-06-25 16:37:44.535 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@7f1ad846
2025-06-25 16:37:44.535 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@7f1ad846
2025-06-25 16:37:44.536 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-25 16:37:44.536 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-25 16:37:44.536 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-25 16:37:44.536 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-25 16:37:44.537 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-25 16:37:44.538 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-25 16:37:44.538 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-25 16:37:44.538 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-25 16:37:44.538 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-25 16:37:44.538 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-25 16:37:44.539 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-25 16:37:44.539 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-25 16:37:44.540 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 16:37:44.540 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-25 16:37:44.541 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-25 16:37:44.541 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-25 16:37:44.541 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5e7e7a7e
2025-06-25 16:37:44.541 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-25 16:37:44.541 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-25 16:37:44.541 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-25 16:37:44.541 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-25 16:37:44.541 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-25 16:37:44.541 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-25 16:37:44.541 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-25 16:37:44.541 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@5abc5854
2025-06-25 16:37:44.541 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@5abc5854
2025-06-25 16:37:44.541 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@5abc5854
2025-06-25 16:37:44.541 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-25 16:37:44.541 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-25 16:37:44.541 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-25 16:37:44.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-25 16:37:44.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-25 16:37:44.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-25 16:37:44.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-25 16:37:44.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-25 16:37:44.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-25 16:37:44.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 16:37:44.543 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 16:37:44.543 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-25 16:37:44.543 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-25 16:37:44.543 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-25 16:37:44.543 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-25 16:37:44.543 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-25 16:37:44.543 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-25 16:37:44.544 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-25 16:37:44.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-25 16:37:44.548 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-25 16:37:44.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@586486c
2025-06-25 16:37:44.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@586486c
2025-06-25 16:37:44.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-25 16:37:44.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-25 16:37:44.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@7fbbdd8a
2025-06-25 16:37:44.552 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@2904bc56
2025-06-25 16:37:44.552 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@2904bc56
2025-06-25 16:37:44.553 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@4ac7856f
2025-06-25 16:37:44.553 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@432f4626
2025-06-25 16:37:44.553 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@297c3a43
2025-06-25 16:37:44.554 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@4c79ca55
2025-06-25 16:37:44.554 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@3a63d248
2025-06-25 16:37:44.554 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@3c4ad54
2025-06-25 16:37:44.556 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@4b22214d
2025-06-25 16:37:44.556 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@498b611e
2025-06-25 16:37:44.556 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@6dde1bf5
2025-06-25 16:37:44.629 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-25 16:37:44.650 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-25 16:37:44.739 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4c614d8c
2025-06-25 16:37:44.740 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-25 16:37:44.775 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-25 16:37:44.775 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-25 16:37:44.794 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@38197e82) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5516ee5)
2025-06-25 16:37:44.794 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6765b6a2) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@75c589f2)
2025-06-25 16:37:44.794 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6db04a6) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@8f374de)
2025-06-25 16:37:44.794 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@426913c4) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1bba9862)
2025-06-25 16:37:44.795 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@451a4187) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@565c887e)
2025-06-25 16:37:44.795 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5c215642) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1317ac2c)
2025-06-25 16:37:44.795 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@416c1b0) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@363ba634)
2025-06-25 16:37:44.795 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@60fe75f7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4e26c308)
2025-06-25 16:37:44.795 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7c8f803d) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@176e839e)
2025-06-25 16:37:44.796 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-25 16:37:44.796 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-25 16:37:44.796 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-25 16:37:44.797 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 16:37:44.797 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 16:37:44.798 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@1238a074
2025-06-25 16:37:44.799 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@4ac7856f`
2025-06-25 16:37:44.801 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-25 16:37:44.801 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-25 16:37:44.803 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 16:37:44.803 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 16:37:44.803 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 16:37:44.803 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 16:37:44.803 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 16:37:44.803 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 16:37:44.804 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 16:37:44.804 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 16:37:44.804 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 16:37:44.805 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@2634d000] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@1642968c]
2025-06-25 16:37:45.477 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@2634d000] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@2a5d9ede]
2025-06-25 16:37:45.482 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@2a5d9ede] for TypeConfiguration
2025-06-25 16:37:45.483 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 16:37:46.209 [main] INFO  c.d.extract.controller.AsyncExtractController - AsyncExtractController initialized successfully
2025-06-25 16:37:46.621 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-25 16:37:46.738 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-25 16:37:46.771 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 2
2025-06-25 16:37:46.772 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-25 16:37:46.772 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-25 16:37:46.772 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-25 16:37:47.193 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-25 16:37:47.206 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 6.008 seconds (process running for 6.607)
2025-06-25 16:37:52.440 [reactor-http-nio-2] WARN  c.d.extract.controller.AsyncExtractController - Async extract request failed - empty text content
2025-06-25 16:37:52.459 [reactor-http-nio-2] WARN  c.d.extract.controller.AsyncExtractController - Async extract request failed - empty text content
2025-06-25 16:37:52.468 [reactor-http-nio-2] WARN  c.d.extract.controller.AsyncExtractController - Async extract request failed - empty text content
2025-06-25 16:37:52.475 [reactor-http-nio-2] WARN  c.d.extract.controller.AsyncExtractController - Async extract request failed - empty text content
2025-06-25 16:37:52.607 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1
2025-06-25 16:37:52.627 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 144ms
2025-06-25 16:37:52.628 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-1, 文本长度: 32
2025-06-25 16:37:52.637 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 32 字符
2025-06-25 16:37:52.637 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:37:52.637 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 32，当前并发数: 1
2025-06-25 16:37:52.637 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:37:52.649 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities, textInputType: JSONArray, arraySize: 1
2025-06-25 16:37:52.650 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 16:37:52.650 [TextExtract-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-2, 文本长度: 31
2025-06-25 16:37:52.650 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 31 字符
2025-06-25 16:37:52.650 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:37:52.650 [TextExtract-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 31，当前并发数: 2
2025-06-25 16:37:52.650 [TextExtract-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:37:52.658 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: relations, textInputType: JSONArray, arraySize: 1
2025-06-25 16:37:52.659 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 16:37:52.659 [TextExtract-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-3, 文本长度: 34
2025-06-25 16:37:52.659 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 34 字符
2025-06-25 16:37:52.659 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:37:52.659 [TextExtract-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 34，当前并发数: 3
2025-06-25 16:37:52.661 [TextExtract-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:37:52.668 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: triples, textInputType: JSONArray, arraySize: 3
2025-06-25 16:37:52.669 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 16:37:52.669 [TextExtract-4] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-4, 文本长度: 59
2025-06-25 16:37:52.669 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 59 字符
2025-06-25 16:37:52.670 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:37:52.670 [TextExtract-4] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 59，当前并发数: 4
2025-06-25 16:37:52.670 [TextExtract-4] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:37:52.679 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities, textInputType: JSONArray, arraySize: 3
2025-06-25 16:37:52.679 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 0ms
2025-06-25 16:37:52.680 [TextExtract-5] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-5, 文本长度: 52
2025-06-25 16:37:52.680 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 52 字符
2025-06-25 16:37:52.680 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:37:52.680 [TextExtract-5] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 52，当前并发数: 5
2025-06-25 16:37:52.680 [TextExtract-5] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:37:52.686 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: relations, textInputType: JSONArray, arraySize: 4
2025-06-25 16:37:52.686 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 0ms
2025-06-25 16:37:52.695 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1
2025-06-25 16:37:52.695 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 0ms
2025-06-25 16:37:52.699 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: triples, textInputType: JSONArray, arraySize: 3
2025-06-25 16:37:52.699 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 0ms
2025-06-25 16:37:52.705 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1
2025-06-25 16:37:52.706 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 16:37:52.715 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities, textInputType: JSONArray, arraySize: 1
2025-06-25 16:37:52.715 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 16:37:52.721 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: relations, textInputType: JSONArray, arraySize: 1
2025-06-25 16:37:52.721 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 0ms
2025-06-25 16:38:00.892 [reactor-http-nio-9] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 8230ms，响应长度: 254
2025-06-25 16:38:00.897 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 34，处理模式: 直接处理
2025-06-25 16:38:00.968 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 254
2025-06-25 16:38:00.969 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "获得",
      "object": "最佳男主角奖",
      "confidence": 0.95
    },
    {
      "subject": "2023年金马奖颁奖典礼",
      "predicate": "举行地点",
      "object": "台北",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:38:00.971 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "获得",
      "object": "最佳男主角奖",
      "confidence": 0.95
    },
    {
      "subject": "2023年金马奖颁奖典礼",
      "predicate": "举行地点",
      "object": "台北",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:38:00.972 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:38:00.973 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组，包括实体和关系保存
2025-06-25 16:38:01.031 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:38:01.061 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:38:01.072 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 刘德华 (通过三元组提取)
2025-06-25 16:38:01.072 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[获得]--> 最佳男主角奖
2025-06-25 16:38:01.075 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 16:38:01.080 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-25 16:38:01.085 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 2023年金马奖颁奖典礼 (通过三元组提取)
2025-06-25 16:38:01.087 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 16:38:01.089 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-25 16:38:01.091 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 台北 (通过三元组提取)
2025-06-25 16:38:01.091 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 2023年金马奖颁奖典礼 --[举行地点]--> 台北
2025-06-25 16:38:01.091 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:38:01.100 [TextExtract-3] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 34
2025-06-25 16:38:01.100 [TextExtract-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-3, 文本长度: 74
2025-06-25 16:38:01.100 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 74 字符
2025-06-25 16:38:01.100 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:38:01.100 [TextExtract-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 74，当前并发数: 5
2025-06-25 16:38:01.100 [TextExtract-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:38:01.139 [reactor-http-nio-11] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 8489ms，响应长度: 247
2025-06-25 16:38:01.139 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 31，处理模式: 直接处理
2025-06-25 16:38:01.141 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 247
2025-06-25 16:38:01.141 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "发行",
      "object": "《叶惠美》",
      "confidence": 0.95
    },
    {
      "subject": "《叶惠美》",
      "predicate": "收录",
      "object": "《东风破》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:38:01.141 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "发行",
      "object": "《叶惠美》",
      "confidence": 0.95
    },
    {
      "subject": "《叶惠美》",
      "predicate": "收录",
      "object": "《东风破》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:38:01.142 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:38:01.142 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组，包括实体和关系保存
2025-06-25 16:38:01.144 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:38:01.147 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:38:01.154 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 周杰伦 (通过三元组提取)
2025-06-25 16:38:01.157 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:38:01.163 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:38:01.165 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《叶惠美》 (通过三元组提取)
2025-06-25 16:38:01.174 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:38:01.182 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 16:38:01.186 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:38:01.188 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 周杰伦 -> 《叶惠美》 [发行]
2025-06-25 16:38:01.188 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[发行]--> 《叶惠美》
2025-06-25 16:38:01.189 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:38:01.192 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《叶惠美》 已存在，跳过插入
2025-06-25 16:38:01.193 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:38:01.195 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:38:01.197 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《东风破》 (通过三元组提取)
2025-06-25 16:38:01.197 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《叶惠美》 --[收录]--> 《东风破》
2025-06-25 16:38:01.197 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:38:01.201 [TextExtract-2] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 31
2025-06-25 16:38:01.201 [TextExtract-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-2, 文本长度: 14
2025-06-25 16:38:01.201 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 14 字符
2025-06-25 16:38:01.202 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:38:01.202 [TextExtract-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 14，当前并发数: 5
2025-06-25 16:38:01.202 [TextExtract-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:38:02.698 [reactor-http-nio-12] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 10028ms，响应长度: 368
2025-06-25 16:38:02.701 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 59，处理模式: 直接处理
2025-06-25 16:38:02.707 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 368
2025-06-25 16:38:02.707 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "参加了",
      "object": "2023年香港电影节",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "演唱了",
      "object": "《青花瓷》",
      "confidence": 0.95
    },
    {
      "subject": "张学友",
      "predicate": "获得了",
      "object": "金曲奖最佳男歌手",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:38:02.708 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "参加了",
      "object": "2023年香港电影节",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "演唱了",
      "object": "《青花瓷》",
      "confidence": 0.95
    },
    {
      "subject": "张学友",
      "predicate": "获得了",
      "object": "金曲奖最佳男歌手",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:38:02.708 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:38:02.708 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-25 16:38:02.710 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:38:02.713 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 16:38:02.714 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 16:38:02.716 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-25 16:38:02.718 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 2023年香港电影节 (通过三元组提取)
2025-06-25 16:38:02.720 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:38:02.725 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 16:38:02.729 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:38:02.731 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 刘德华 -> 2023年香港电影节 [参加了]
2025-06-25 16:38:02.731 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[参加了]--> 2023年香港电影节
2025-06-25 16:38:02.733 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:38:02.739 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-25 16:38:02.741 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:38:02.744 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:38:02.745 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《青花瓷》 (通过三元组提取)
2025-06-25 16:38:02.747 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:38:02.751 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 16:38:02.755 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:38:02.757 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 周杰伦 -> 《青花瓷》 [演唱了]
2025-06-25 16:38:02.757 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[演唱了]--> 《青花瓷》
2025-06-25 16:38:02.758 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:38:02.762 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:38:02.764 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 张学友 (通过三元组提取)
2025-06-25 16:38:02.764 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张学友 --[获得了]--> 金曲奖最佳男歌手
2025-06-25 16:38:02.764 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:38:02.769 [TextExtract-4] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 59
2025-06-25 16:38:02.769 [TextExtract-4] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-4, 文本长度: 45
2025-06-25 16:38:02.769 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 45 字符
2025-06-25 16:38:02.769 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:38:02.769 [TextExtract-4] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 45，当前并发数: 5
2025-06-25 16:38:02.769 [TextExtract-4] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:38:03.077 [reactor-http-nio-7] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 10397ms，响应长度: 365
2025-06-25 16:38:03.078 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 52，处理模式: 直接处理
2025-06-25 16:38:03.081 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 365
2025-06-25 16:38:03.081 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "《流浪地球2》",
      "predicate": "上映时间",
      "object": "春节档",
      "confidence": 0.95
    },
    {
      "subject": "《满江红》",
      "predicate": "票房",
      "object": "40亿",
      "confidence": 0.95
    },
    {
      "subject": "《深海》",
      "predicate": "采用技术",
      "object": "全新动画技术",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:38:03.081 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "《流浪地球2》",
      "predicate": "上映时间",
      "object": "春节档",
      "confidence": 0.95
    },
    {
      "subject": "《满江红》",
      "predicate": "票房",
      "object": "40亿",
      "confidence": 0.95
    },
    {
      "subject": "《深海》",
      "predicate": "采用技术",
      "object": "全新动画技术",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:38:03.082 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:38:03.082 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-25 16:38:03.084 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:38:03.088 [TextExtract-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:38:03.091 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《流浪地球2》 (通过三元组提取)
2025-06-25 16:38:03.091 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《流浪地球2》 --[上映时间]--> 春节档
2025-06-25 16:38:03.092 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:38:03.095 [TextExtract-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:38:03.098 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《满江红》 (通过三元组提取)
2025-06-25 16:38:03.098 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《满江红》 --[票房]--> 40亿
2025-06-25 16:38:03.101 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:38:03.103 [TextExtract-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:38:03.106 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《深海》 (通过三元组提取)
2025-06-25 16:38:03.106 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《深海》 --[采用技术]--> 全新动画技术
2025-06-25 16:38:03.106 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:38:03.116 [TextExtract-5] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 52
2025-06-25 16:38:03.117 [TextExtract-5] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-5, 文本长度: 44
2025-06-25 16:38:03.117 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 44 字符
2025-06-25 16:38:03.117 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:38:03.117 [TextExtract-5] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 44，当前并发数: 5
2025-06-25 16:38:03.117 [TextExtract-5] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:38:04.113 [reactor-http-nio-10] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 11476ms，响应长度: 460
2025-06-25 16:38:04.114 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 32，处理模式: 直接处理
2025-06-25 16:38:04.120 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 460
2025-06-25 16:38:04.120 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "演员",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "歌手",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出演",
      "object": "《无间道》",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "地区",
      "object": "香港",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:38:04.120 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "演员",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "歌手",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出演",
      "object": "《无间道》",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "地区",
      "object": "香港",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:38:04.125 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:38:04.125 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-25 16:38:04.128 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:38:04.132 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 16:38:04.133 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:38:04.137 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:38:04.140 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 演员 (通过三元组提取)
2025-06-25 16:38:04.143 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:38:04.149 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:38:04.153 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:38:04.157 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 演员 [职业]
2025-06-25 16:38:04.157 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[职业]--> 演员
2025-06-25 16:38:04.158 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:38:04.161 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 16:38:04.162 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:38:04.164 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:38:04.166 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 歌手 (通过三元组提取)
2025-06-25 16:38:04.170 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:38:04.174 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:38:04.176 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:38:04.178 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 歌手 [职业]
2025-06-25 16:38:04.178 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[职业]--> 歌手
2025-06-25 16:38:04.180 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:38:04.183 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 16:38:04.184 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:38:04.185 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:38:04.188 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《无间道》 (通过三元组提取)
2025-06-25 16:38:04.189 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:38:04.194 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 16:38:04.197 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:38:04.199 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 刘德华 -> 《无间道》 [出演]
2025-06-25 16:38:04.199 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[出演]--> 《无间道》
2025-06-25 16:38:04.201 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:38:04.202 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 16:38:04.202 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[地区]--> 香港
2025-06-25 16:38:04.202 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:38:04.207 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 32
2025-06-25 16:38:04.208 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-1, 文本长度: 279
2025-06-25 16:38:04.208 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 279 字符
2025-06-25 16:38:04.208 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:38:04.208 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 279，当前并发数: 5
2025-06-25 16:38:04.208 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:38:07.408 [reactor-http-nio-11] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 6206ms，响应长度: 133
2025-06-25 16:38:07.408 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 14，处理模式: 直接处理
2025-06-25 16:38:07.412 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 133
2025-06-25 16:38:07.412 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "职业",
      "object": "功夫电影明星",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:38:07.412 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "职业",
      "object": "功夫电影明星",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:38:07.415 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:38:07.415 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 1 个三元组，包括实体和关系保存
2025-06-25 16:38:07.418 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:38:07.422 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:38:07.427 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 成龙 (通过三元组提取)
2025-06-25 16:38:07.428 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:38:07.431 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:38:07.434 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 功夫电影明星 (通过三元组提取)
2025-06-25 16:38:07.435 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:38:07.442 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:38:07.445 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:38:07.448 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 成龙 -> 功夫电影明星 [职业]
2025-06-25 16:38:07.448 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[职业]--> 功夫电影明星
2025-06-25 16:38:07.448 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:38:07.455 [TextExtract-2] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 14
2025-06-25 16:38:07.455 [TextExtract-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-2, 文本长度: 1041
2025-06-25 16:38:12.569 [reactor-http-nio-9] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 11469ms，响应长度: 478
2025-06-25 16:38:12.569 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 74，处理模式: 直接处理
2025-06-25 16:38:12.572 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 478
2025-06-25 16:38:12.573 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "执导",
      "object": "《满江红》",
      "confidence": 0.95
    },
    {
      "subject": "易烊千玺",
      "predicate": "饰演",
      "object": "《满江红》",
      "confidence": 0.95
    },
    {
      "subject": "《满江红》",
      "predicate": "获得",
      "object": "春节档票房冠军",
      "confidence": 0.95
    },
    {
      "subject": "《满江红》",
      "predicate": "讲述",
      "object": "南宋抗金的故事",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:38:12.573 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "执导",
      "object": "《满江红》",
      "confidence": 0.95
    },
    {
      "subject": "易烊千玺",
      "predicate": "饰演",
      "object": "《满江红》",
      "confidence": 0.95
    },
    {
      "subject": "《满江红》",
      "predicate": "获得",
      "object": "春节档票房冠军",
      "confidence": 0.95
    },
    {
      "subject": "《满江红》",
      "predicate": "讲述",
      "object": "南宋抗金的故事",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:38:12.574 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:38:12.574 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-25 16:38:12.579 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:38:12.581 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:38:12.585 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 张艺谋 (通过三元组提取)
2025-06-25 16:38:12.587 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:38:12.591 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 作品 《满江红》 已存在，跳过插入
2025-06-25 16:38:12.595 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:38:12.599 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 16:38:12.603 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:38:12.606 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 张艺谋 -> 《满江红》 [执导]
2025-06-25 16:38:12.606 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[执导]--> 《满江红》
2025-06-25 16:38:12.607 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:38:12.610 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 作品 《满江红》 已存在，跳过插入
2025-06-25 16:38:12.610 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 易烊千玺 --[饰演]--> 《满江红》
2025-06-25 16:38:12.612 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:38:12.614 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 作品 《满江红》 已存在，跳过插入
2025-06-25 16:38:12.614 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《满江红》 --[获得]--> 春节档票房冠军
2025-06-25 16:38:12.616 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:38:12.619 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 作品 《满江红》 已存在，跳过插入
2025-06-25 16:38:12.619 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《满江红》 --[讲述]--> 南宋抗金的故事
2025-06-25 16:38:12.619 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:38:12.625 [TextExtract-3] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 74
2025-06-25 16:38:12.827 [reactor-http-nio-12] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 10058ms，响应长度: 356
2025-06-25 16:38:12.828 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 45，处理模式: 直接处理
2025-06-25 16:38:12.831 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 356
2025-06-25 16:38:12.831 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "李连杰",
      "predicate": "主演",
      "object": "《黄飞鸿》",
      "confidence": 0.95
    },
    {
      "subject": "甄子丹",
      "predicate": "出演",
      "object": "《叶问》系列",
      "confidence": 0.95
    },
    {
      "subject": "吴京",
      "predicate": "导演",
      "object": "《战狼》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:38:12.831 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "李连杰",
      "predicate": "主演",
      "object": "《黄飞鸿》",
      "confidence": 0.95
    },
    {
      "subject": "甄子丹",
      "predicate": "出演",
      "object": "《叶问》系列",
      "confidence": 0.95
    },
    {
      "subject": "吴京",
      "predicate": "导演",
      "object": "《战狼》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:38:12.832 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:38:12.832 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-25 16:38:12.834 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:38:12.838 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:38:12.841 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 李连杰 (通过三元组提取)
2025-06-25 16:38:12.842 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:38:12.845 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:38:12.849 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 《黄飞鸿》 (通过三元组提取)
2025-06-25 16:38:12.855 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:38:12.860 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:38:12.863 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:38:12.865 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 李连杰 -> 《黄飞鸿》 [主演]
2025-06-25 16:38:12.865 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 李连杰 --[主演]--> 《黄飞鸿》
2025-06-25 16:38:12.866 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 甄子丹 --[出演]--> 《叶问》系列
2025-06-25 16:38:12.868 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:38:12.870 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:38:12.873 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 吴京 (通过三元组提取)
2025-06-25 16:38:12.874 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:38:12.879 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:38:12.882 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 《战狼》 (通过三元组提取)
2025-06-25 16:38:12.890 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:38:12.901 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:38:12.904 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:38:12.906 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 吴京 -> 《战狼》 [导演]
2025-06-25 16:38:12.906 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 吴京 --[导演]--> 《战狼》
2025-06-25 16:38:12.906 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:38:12.913 [TextExtract-4] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 45
2025-06-25 16:38:15.515 [reactor-http-nio-7] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 12398ms，响应长度: 572
2025-06-25 16:38:15.516 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 44，处理模式: 直接处理
2025-06-25 16:38:15.521 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 572
2025-06-25 16:38:15.521 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "演员",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "歌手",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出生地",
      "object": "香港",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出演",
      "object": "《无间道》",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出演",
      "object": "《桃姐》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:38:15.521 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "演员",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "歌手",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出生地",
      "object": "香港",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出演",
      "object": "《无间道》",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出演",
      "object": "《桃姐》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:38:15.524 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:38:15.524 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 处理 5 个三元组，包括实体和关系保存
2025-06-25 16:38:15.529 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:38:15.536 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 16:38:15.538 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:38:15.541 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 人员 演员 已存在，跳过插入
2025-06-25 16:38:15.543 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:38:15.548 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:38:15.554 [TextExtract-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:38:15.558 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 演员 [职业]
2025-06-25 16:38:15.558 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[职业]--> 演员
2025-06-25 16:38:15.559 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:38:15.563 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 16:38:15.564 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:38:15.568 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 人员 歌手 已存在，跳过插入
2025-06-25 16:38:15.569 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:38:15.575 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:38:15.579 [TextExtract-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:38:15.585 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 歌手 [职业]
2025-06-25 16:38:15.585 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[职业]--> 歌手
2025-06-25 16:38:15.587 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:38:15.590 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 16:38:15.592 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:38:15.595 [TextExtract-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:38:15.598 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 香港 (通过三元组提取)
2025-06-25 16:38:15.600 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:38:15.607 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:38:15.611 [TextExtract-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:38:15.614 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 香港 [出生地]
2025-06-25 16:38:15.614 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[出生地]--> 香港
2025-06-25 16:38:15.615 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:38:15.618 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 16:38:15.620 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:38:15.623 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 作品 《无间道》 已存在，跳过插入
2025-06-25 16:38:15.624 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:38:15.627 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 16:38:15.629 [TextExtract-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:38:15.631 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 刘德华 -> 《无间道》 [出演]
2025-06-25 16:38:15.632 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[出演]--> 《无间道》
2025-06-25 16:38:15.633 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:38:15.635 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 16:38:15.636 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:38:15.638 [TextExtract-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:38:15.641 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《桃姐》 (通过三元组提取)
2025-06-25 16:38:15.642 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:38:15.645 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 16:38:15.647 [TextExtract-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:38:15.649 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 刘德华 -> 《桃姐》 [出演]
2025-06-25 16:38:15.649 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[出演]--> 《桃姐》
2025-06-25 16:38:15.649 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:38:15.657 [TextExtract-5] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 44
2025-06-25 16:38:34.233 [parallel-12] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30025ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-25 16:38:34.234 [TextExtract-1] ERROR com.datacenter.extract.service.SmartAIProvider - ❌ AI提取失败，类型: entities，文本长度: 279
2025-06-25 16:38:34.234 [TextExtract-1] ERROR com.datacenter.extract.service.SmartAIProvider - 💥 AI提取过程异常: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:77)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.service.TextExtractionService.processTextAsync(TextExtractionService.java:72)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.AsyncExecutionInterceptor.lambda$invoke$0(AsyncExecutionInterceptor.java:115)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 16:38:34.239 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 1041 字符
2025-06-25 16:38:34.239 [TextExtract-1] ERROR c.datacenter.extract.service.TextExtractionService - 异步文本提取失败，错误: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-25 16:38:34.239 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:38:34.239 [TextExtract-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 1041，当前并发数: 1
2025-06-25 16:38:34.239 [TextExtract-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 40秒
2025-06-25 16:38:48.420 [reactor-http-nio-1] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1
2025-06-25 16:38:48.421 [reactor-http-nio-1] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 16:38:48.421 [TextExtract-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-3, 文本长度: 76
2025-06-25 16:38:48.421 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 76 字符
2025-06-25 16:38:48.421 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:38:48.421 [TextExtract-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 76，当前并发数: 2
2025-06-25 16:38:48.421 [TextExtract-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:39:00.260 [reactor-http-nio-2] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 11839ms，响应长度: 493
2025-06-25 16:39:00.261 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 76，处理模式: 直接处理
2025-06-25 16:39:00.266 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 493
2025-06-25 16:39:00.266 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "第95届奥斯卡颁奖典礼",
      "predicate": "展映",
      "object": "《瞬息全宇宙》",
      "confidence": 0.95
    },
    {
      "subject": "戛纳电影节",
      "predicate": "展映",
      "object": "《燃烧女子的肖像》",
      "confidence": 0.95
    },
    {
      "subject": "威尼斯电影节",
      "predicate": "展映",
      "object": "《小丑》",
      "confidence": 0.95
    },
    {
      "subject": "春节联欢晚会",
      "predicate": "播放",
      "object": "《我和我的祖国》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:39:00.266 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "第95届奥斯卡颁奖典礼",
      "predicate": "展映",
      "object": "《瞬息全宇宙》",
      "confidence": 0.95
    },
    {
      "subject": "戛纳电影节",
      "predicate": "展映",
      "object": "《燃烧女子的肖像》",
      "confidence": 0.95
    },
    {
      "subject": "威尼斯电影节",
      "predicate": "展映",
      "object": "《小丑》",
      "confidence": 0.95
    },
    {
      "subject": "春节联欢晚会",
      "predicate": "播放",
      "object": "《我和我的祖国》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:39:00.272 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:39:00.272 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-25 16:39:00.274 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 16:39:00.280 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-25 16:39:00.284 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 第95届奥斯卡颁奖典礼 (通过三元组提取)
2025-06-25 16:39:00.286 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:39:00.290 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:39:00.292 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《瞬息全宇宙》 (通过三元组提取)
2025-06-25 16:39:00.296 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 16:39:00.299 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 16:39:00.311 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:39:00.316 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系: 第95届奥斯卡颁奖典礼 -> 《瞬息全宇宙》 [展映]
2025-06-25 16:39:00.316 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 第95届奥斯卡颁奖典礼 --[展映]--> 《瞬息全宇宙》
2025-06-25 16:39:00.319 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 16:39:00.330 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-25 16:39:00.333 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 戛纳电影节 (通过三元组提取)
2025-06-25 16:39:00.335 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:39:00.338 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:39:00.340 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《燃烧女子的肖像》 (通过三元组提取)
2025-06-25 16:39:00.342 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 16:39:00.345 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 16:39:00.347 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:39:00.348 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系: 戛纳电影节 -> 《燃烧女子的肖像》 [展映]
2025-06-25 16:39:00.348 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 戛纳电影节 --[展映]--> 《燃烧女子的肖像》
2025-06-25 16:39:00.352 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 16:39:00.355 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-25 16:39:00.359 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 威尼斯电影节 (通过三元组提取)
2025-06-25 16:39:00.362 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:39:00.366 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:39:00.369 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《小丑》 (通过三元组提取)
2025-06-25 16:39:00.370 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 16:39:00.373 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 16:39:00.375 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:39:00.376 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系: 威尼斯电影节 -> 《小丑》 [展映]
2025-06-25 16:39:00.376 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 威尼斯电影节 --[展映]--> 《小丑》
2025-06-25 16:39:00.377 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:39:00.379 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:39:00.380 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《我和我的祖国》 (通过三元组提取)
2025-06-25 16:39:00.380 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 春节联欢晚会 --[播放]--> 《我和我的祖国》
2025-06-25 16:39:00.380 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:39:00.386 [TextExtract-3] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 76
2025-06-25 16:39:01.089 [reactor-http-nio-8] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: triples, textInputType: JSONArray, arraySize: 4
2025-06-25 16:39:01.090 [reactor-http-nio-8] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 16:39:01.090 [TextExtract-4] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-4, 文本长度: 65
2025-06-25 16:39:01.091 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 65 字符
2025-06-25 16:39:01.091 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:39:01.091 [TextExtract-4] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 65，当前并发数: 2
2025-06-25 16:39:01.091 [TextExtract-4] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:39:12.077 [reactor-http-nio-2] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 10986ms，响应长度: 480
2025-06-25 16:39:12.077 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 65，处理模式: 直接处理
2025-06-25 16:39:12.082 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 480
2025-06-25 16:39:12.082 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "金马奖颁奖典礼",
      "predicate": "播放",
      "object": "《无间道》片段",
      "confidence": 0.95
    },
    {
      "subject": "柏林电影节",
      "predicate": "展映",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "奥运会开幕式",
      "predicate": "演唱",
      "object": "《青花瓷》",
      "confidence": 0.95
    },
    {
      "subject": "音乐节",
      "predicate": "演奏",
      "object": "《东风破》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:39:12.082 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "金马奖颁奖典礼",
      "predicate": "播放",
      "object": "《无间道》片段",
      "confidence": 0.95
    },
    {
      "subject": "柏林电影节",
      "predicate": "展映",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "奥运会开幕式",
      "predicate": "演唱",
      "object": "《青花瓷》",
      "confidence": 0.95
    },
    {
      "subject": "音乐节",
      "predicate": "演奏",
      "object": "《东风破》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:39:12.083 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:39:12.084 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-25 16:39:12.089 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 16:39:12.098 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-25 16:39:12.103 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 金马奖颁奖典礼 (通过三元组提取)
2025-06-25 16:39:12.103 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 金马奖颁奖典礼 --[播放]--> 《无间道》片段
2025-06-25 16:39:12.105 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 16:39:12.109 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-25 16:39:12.112 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 柏林电影节 (通过三元组提取)
2025-06-25 16:39:12.113 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:39:12.117 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:39:12.121 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《红高粱》 (通过三元组提取)
2025-06-25 16:39:12.122 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 16:39:12.127 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 16:39:12.132 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:39:12.135 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系: 柏林电影节 -> 《红高粱》 [展映]
2025-06-25 16:39:12.135 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 柏林电影节 --[展映]--> 《红高粱》
2025-06-25 16:39:12.137 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:39:12.141 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:39:12.143 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 奥运会开幕式 (通过三元组提取)
2025-06-25 16:39:12.144 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:39:12.147 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-25 16:39:12.149 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 16:39:12.153 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 16:39:12.156 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:39:12.159 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系: 奥运会开幕式 -> 《青花瓷》 [演唱]
2025-06-25 16:39:12.159 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 奥运会开幕式 --[演唱]--> 《青花瓷》
2025-06-25 16:39:12.160 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:39:12.162 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 作品 《东风破》 已存在，跳过插入
2025-06-25 16:39:12.162 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 音乐节 --[演奏]--> 《东风破》
2025-06-25 16:39:12.162 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:39:12.169 [TextExtract-4] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 65
2025-06-25 16:39:14.246 [parallel-1] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 40007ms，错误: Did not observe any item or terminal signal within 40000ms in 'flatMap' (and no fallback has been configured)
2025-06-25 16:39:14.247 [TextExtract-2] ERROR com.datacenter.extract.service.SmartAIProvider - ❌ AI提取失败，类型: relations，文本长度: 1041
2025-06-25 16:39:14.247 [TextExtract-2] ERROR com.datacenter.extract.service.SmartAIProvider - 💥 AI提取过程异常: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:77)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.service.TextExtractionService.processTextAsync(TextExtractionService.java:72)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.AsyncExecutionInterceptor.lambda$invoke$0(AsyncExecutionInterceptor.java:115)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 16:39:14.248 [TextExtract-2] ERROR c.datacenter.extract.service.TextExtractionService - 异步文本提取失败，错误: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-25 16:44:35.187 [SpringApplicationShutdownHook] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 16:44:35.188 [SpringApplicationShutdownHook] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@2a5d9ede] for TypeConfiguration
2025-06-25 16:44:35.188 [SpringApplicationShutdownHook] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@55a1d990] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@2a5d9ede]
2025-06-25 16:44:35.190 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-25 16:44:35.198 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-25 16:44:40.055 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 92808 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-25 16:44:40.058 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-25 16:44:40.965 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 16:44:40.966 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-25 16:44:41.061 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 91 ms. Found 7 JPA repository interfaces.
2025-06-25 16:44:41.080 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 16:44:41.081 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-25 16:44:41.097 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityCelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 16:44:41.097 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityEventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 16:44:41.097 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 16:44:41.098 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 16:44:41.099 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 16:44:41.099 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 16:44:41.099 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 16:44:41.099 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 0 Redis repository interfaces.
2025-06-25 16:44:44.531 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@b144175
2025-06-25 16:44:44.533 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@b144175
2025-06-25 16:44:44.533 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@b144175
2025-06-25 16:44:44.533 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@67784537
2025-06-25 16:44:44.533 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@67784537
2025-06-25 16:44:44.533 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@17ec5e2a
2025-06-25 16:44:44.533 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@17ec5e2a
2025-06-25 16:44:44.533 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@52290e63
2025-06-25 16:44:44.533 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@52290e63
2025-06-25 16:44:44.535 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@6c2dd88b
2025-06-25 16:44:44.536 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@6c2dd88b
2025-06-25 16:44:44.536 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@6c2dd88b
2025-06-25 16:44:44.536 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@49d979c4
2025-06-25 16:44:44.536 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@49d979c4
2025-06-25 16:44:44.536 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@49d979c4
2025-06-25 16:44:44.537 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@3cb173db
2025-06-25 16:44:44.537 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@3cb173db
2025-06-25 16:44:44.537 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@268f0ff3
2025-06-25 16:44:44.537 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@11978f52
2025-06-25 16:44:44.538 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@11978f52
2025-06-25 16:44:44.538 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@3e0855b0
2025-06-25 16:44:44.538 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@484b5a21
2025-06-25 16:44:44.538 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@16e5344c
2025-06-25 16:44:44.538 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@16e5344c
2025-06-25 16:44:44.538 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@16e5344c
2025-06-25 16:44:44.538 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@3ba5c4dd
2025-06-25 16:44:44.538 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@3ba5c4dd
2025-06-25 16:44:44.538 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@3ba5c4dd
2025-06-25 16:44:44.538 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@47fca3cc
2025-06-25 16:44:44.538 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@47fca3cc
2025-06-25 16:44:44.538 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@47fca3cc
2025-06-25 16:44:44.539 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@55746340
2025-06-25 16:44:44.539 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@55746340
2025-06-25 16:44:44.539 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@55746340
2025-06-25 16:44:44.540 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@6a0c7af6
2025-06-25 16:44:44.540 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@6a0c7af6
2025-06-25 16:44:44.540 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@6a0c7af6
2025-06-25 16:44:44.541 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@7f1ad846
2025-06-25 16:44:44.541 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@7f1ad846
2025-06-25 16:44:44.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-25 16:44:44.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-25 16:44:44.542 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-25 16:44:44.543 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-25 16:44:44.543 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-25 16:44:44.543 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-25 16:44:44.543 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-25 16:44:44.543 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-25 16:44:44.543 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-25 16:44:44.543 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-25 16:44:44.543 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-25 16:44:44.543 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-25 16:44:44.544 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-25 16:44:44.544 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-25 16:44:44.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 16:44:44.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-25 16:44:44.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-25 16:44:44.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-25 16:44:44.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-25 16:44:44.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@5e7e7a7e
2025-06-25 16:44:44.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-25 16:44:44.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-25 16:44:44.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-25 16:44:44.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@5abc5854
2025-06-25 16:44:44.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-25 16:44:44.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-25 16:44:44.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-25 16:44:44.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-25 16:44:44.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-25 16:44:44.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-25 16:44:44.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-25 16:44:44.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-25 16:44:44.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-25 16:44:44.545 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-25 16:44:44.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-25 16:44:44.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 16:44:44.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-25 16:44:44.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-25 16:44:44.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-25 16:44:44.548 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-25 16:44:44.548 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-25 16:44:44.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@586486c
2025-06-25 16:44:44.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-25 16:44:44.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-25 16:44:44.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@7fbbdd8a
2025-06-25 16:44:44.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-25 16:44:44.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-25 16:44:44.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-25 16:44:44.550 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 16:44:44.550 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 16:44:44.550 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 16:44:44.550 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 16:44:44.551 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 16:44:44.551 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 16:44:44.551 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 16:44:44.551 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 16:44:44.551 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 16:44:44.551 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 16:44:44.551 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 16:44:44.551 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 16:44:44.551 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-25 16:44:44.551 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-25 16:44:44.551 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-25 16:44:44.551 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-25 16:44:44.551 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-25 16:44:44.552 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 16:44:44.553 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 16:44:44.553 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-25 16:44:44.553 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-25 16:44:44.553 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-25 16:44:44.553 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 16:44:44.553 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 16:44:44.553 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 16:44:44.553 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 16:44:44.553 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 16:44:44.553 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 16:44:44.554 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 16:44:44.555 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 16:44:44.555 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 16:44:44.556 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 16:44:44.556 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-25 16:44:44.559 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@6dde1bf5
2025-06-25 16:44:44.559 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@6dde1bf5
2025-06-25 16:44:44.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@1e50eb3f
2025-06-25 16:44:44.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@12e3f4ae
2025-06-25 16:44:44.562 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@537451d5
2025-06-25 16:44:44.562 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@785d6a98
2025-06-25 16:44:44.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@614d7fbf
2025-06-25 16:44:44.564 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@6c06b1bc
2025-06-25 16:44:44.564 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@1d8dbf10
2025-06-25 16:44:44.564 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@e171f93
2025-06-25 16:44:44.564 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@4ad3969
2025-06-25 16:44:44.642 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-25 16:44:44.654 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-25 16:44:44.740 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@f60c14e
2025-06-25 16:44:44.740 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-25 16:44:44.774 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-25 16:44:44.775 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-25 16:44:44.792 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7c6ab057) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7ce4498f)
2025-06-25 16:44:44.792 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1f7557fe) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7bd7d71c)
2025-06-25 16:44:44.792 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@52963839) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@ce0bbd5)
2025-06-25 16:44:44.792 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@399fd710) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7c359808)
2025-06-25 16:44:44.792 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1f013047) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@16361e61)
2025-06-25 16:44:44.792 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@51566ce0) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1734b1a)
2025-06-25 16:44:44.792 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@17e6d07b) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@318511f0)
2025-06-25 16:44:44.793 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@53564a4c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4866e0a7)
2025-06-25 16:44:44.793 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@69a294d8) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@70b1028d)
2025-06-25 16:44:44.794 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-25 16:44:44.795 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-25 16:44:44.795 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-25 16:44:44.796 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 16:44:44.796 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 16:44:44.798 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@3b6c740b
2025-06-25 16:44:44.798 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@1e50eb3f`
2025-06-25 16:44:44.800 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-25 16:44:44.800 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-25 16:44:44.802 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 16:44:44.802 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 16:44:44.802 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 16:44:44.802 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 16:44:44.802 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 16:44:44.802 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 16:44:44.803 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 16:44:44.803 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 16:44:44.803 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 16:44:44.804 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@32ddcca] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@1ddc8fc]
2025-06-25 16:44:45.406 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@32ddcca] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@1bd5b1c8]
2025-06-25 16:44:45.411 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@1bd5b1c8] for TypeConfiguration
2025-06-25 16:44:45.412 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 16:44:46.028 [main] INFO  c.d.extract.controller.AsyncExtractController - AsyncExtractController initialized successfully
2025-06-25 16:44:46.427 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-25 16:44:46.543 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-25 16:44:46.576 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 2
2025-06-25 16:44:46.576 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-25 16:44:46.577 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-25 16:44:46.577 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-25 16:44:46.980 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-25 16:44:46.993 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 7.495 seconds (process running for 8.07)
2025-06-25 16:44:56.897 [reactor-http-nio-2] WARN  c.d.extract.controller.AsyncExtractController - Async extract request failed - empty text content
2025-06-25 16:44:56.920 [reactor-http-nio-2] WARN  c.d.extract.controller.AsyncExtractController - Async extract request failed - empty text content
2025-06-25 16:44:56.928 [reactor-http-nio-2] WARN  c.d.extract.controller.AsyncExtractController - Async extract request failed - empty text content
2025-06-25 16:44:56.936 [reactor-http-nio-2] WARN  c.d.extract.controller.AsyncExtractController - Async extract request failed - empty text content
2025-06-25 16:44:57.067 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1
2025-06-25 16:44:57.086 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 143ms
2025-06-25 16:44:57.087 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-1, 文本长度: 32
2025-06-25 16:44:57.094 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 32 字符
2025-06-25 16:44:57.094 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:44:57.094 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 32，当前并发数: 1
2025-06-25 16:44:57.094 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:44:57.106 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities, textInputType: JSONArray, arraySize: 1
2025-06-25 16:44:57.107 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 16:44:57.107 [TextExtract-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-2, 文本长度: 31
2025-06-25 16:44:57.107 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 31 字符
2025-06-25 16:44:57.107 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:44:57.107 [TextExtract-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 31，当前并发数: 2
2025-06-25 16:44:57.107 [TextExtract-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:44:57.114 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: relations, textInputType: JSONArray, arraySize: 1
2025-06-25 16:44:57.115 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 16:44:57.115 [TextExtract-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-3, 文本长度: 34
2025-06-25 16:44:57.115 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 34 字符
2025-06-25 16:44:57.116 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:44:57.118 [TextExtract-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 34，当前并发数: 3
2025-06-25 16:44:57.118 [TextExtract-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:44:57.125 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: triples, textInputType: JSONArray, arraySize: 3
2025-06-25 16:44:57.126 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 16:44:57.126 [TextExtract-4] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-4, 文本长度: 59
2025-06-25 16:44:57.126 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 59 字符
2025-06-25 16:44:57.126 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:44:57.126 [TextExtract-4] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 59，当前并发数: 4
2025-06-25 16:44:57.126 [TextExtract-4] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:44:57.131 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities, textInputType: JSONArray, arraySize: 3
2025-06-25 16:44:57.132 [TextExtract-5] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-5, 文本长度: 52
2025-06-25 16:44:57.132 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 16:44:57.132 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 52 字符
2025-06-25 16:44:57.132 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:44:57.132 [TextExtract-5] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 52，当前并发数: 5
2025-06-25 16:44:57.132 [TextExtract-5] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:44:57.140 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: relations, textInputType: JSONArray, arraySize: 4
2025-06-25 16:44:57.140 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 0ms
2025-06-25 16:44:57.150 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1
2025-06-25 16:44:57.150 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 0ms
2025-06-25 16:44:57.154 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: triples, textInputType: JSONArray, arraySize: 3
2025-06-25 16:44:57.154 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 0ms
2025-06-25 16:44:57.162 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: triples, textInputType: JSONArray, arraySize: 4
2025-06-25 16:44:57.162 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 0ms
2025-06-25 16:44:57.169 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1
2025-06-25 16:44:57.169 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 16:44:57.174 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: relations, textInputType: JSONArray, arraySize: 1
2025-06-25 16:44:57.174 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 0ms
2025-06-25 16:44:57.184 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1
2025-06-25 16:44:57.184 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 0ms
2025-06-25 16:44:57.191 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities, textInputType: JSONArray, arraySize: 1
2025-06-25 16:44:57.191 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 16:44:57.203 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: relations, textInputType: JSONArray, arraySize: 1
2025-06-25 16:44:57.208 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 4ms
2025-06-25 16:45:04.661 [reactor-http-nio-9] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 7543ms，响应长度: 254
2025-06-25 16:45:04.663 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 34，处理模式: 直接处理
2025-06-25 16:45:04.678 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 254
2025-06-25 16:45:04.678 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "获得",
      "object": "最佳男主角奖",
      "confidence": 0.95
    },
    {
      "subject": "2023年金马奖颁奖典礼",
      "predicate": "举行地点",
      "object": "台北",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:45:04.678 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "获得",
      "object": "最佳男主角奖",
      "confidence": 0.95
    },
    {
      "subject": "2023年金马奖颁奖典礼",
      "predicate": "举行地点",
      "object": "台北",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:45:04.680 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:45:04.680 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组，包括实体和关系保存
2025-06-25 16:45:04.746 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:45:04.780 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:45:04.793 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 刘德华 (通过三元组提取)
2025-06-25 16:45:04.793 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[获得]--> 最佳男主角奖
2025-06-25 16:45:04.796 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 16:45:04.799 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-25 16:45:04.801 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 2023年金马奖颁奖典礼 (通过三元组提取)
2025-06-25 16:45:04.803 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 16:45:04.808 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-25 16:45:04.811 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 台北 (通过三元组提取)
2025-06-25 16:45:04.811 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 2023年金马奖颁奖典礼 --[举行地点]--> 台北
2025-06-25 16:45:04.811 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:45:04.816 [TextExtract-3] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 34
2025-06-25 16:45:04.816 [TextExtract-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-3, 文本长度: 74
2025-06-25 16:45:04.816 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 74 字符
2025-06-25 16:45:04.816 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:45:04.816 [TextExtract-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 74，当前并发数: 5
2025-06-25 16:45:04.816 [TextExtract-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:45:05.613 [reactor-http-nio-12] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 8505ms，响应长度: 247
2025-06-25 16:45:05.614 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 31，处理模式: 直接处理
2025-06-25 16:45:05.618 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 247
2025-06-25 16:45:05.618 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "发行",
      "object": "《叶惠美》",
      "confidence": 0.95
    },
    {
      "subject": "《叶惠美》",
      "predicate": "收录",
      "object": "《东风破》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:45:05.619 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "发行",
      "object": "《叶惠美》",
      "confidence": 0.95
    },
    {
      "subject": "《叶惠美》",
      "predicate": "收录",
      "object": "《东风破》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:45:05.619 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:45:05.619 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组，包括实体和关系保存
2025-06-25 16:45:05.622 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:45:05.625 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:45:05.631 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 周杰伦 (通过三元组提取)
2025-06-25 16:45:05.635 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:45:05.640 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:45:05.642 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《叶惠美》 (通过三元组提取)
2025-06-25 16:45:05.651 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:45:05.659 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 16:45:05.663 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:45:05.665 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 周杰伦 -> 《叶惠美》 [发行]
2025-06-25 16:45:05.665 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[发行]--> 《叶惠美》
2025-06-25 16:45:05.666 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:45:05.669 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《叶惠美》 已存在，跳过插入
2025-06-25 16:45:05.670 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:45:05.673 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:45:05.674 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《东风破》 (通过三元组提取)
2025-06-25 16:45:05.674 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《叶惠美》 --[收录]--> 《东风破》
2025-06-25 16:45:05.674 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:45:05.678 [TextExtract-2] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 31
2025-06-25 16:45:05.678 [TextExtract-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-2, 文本长度: 14
2025-06-25 16:45:05.678 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 14 字符
2025-06-25 16:45:05.678 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:45:05.678 [TextExtract-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 14，当前并发数: 5
2025-06-25 16:45:05.678 [TextExtract-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:45:06.379 [reactor-http-nio-10] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 9247ms，响应长度: 363
2025-06-25 16:45:06.379 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 52，处理模式: 直接处理
2025-06-25 16:45:06.385 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 363
2025-06-25 16:45:06.386 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "《流浪地球2》",
      "predicate": "上映于",
      "object": "春节档",
      "confidence": 0.95
    },
    {
      "subject": "《满江红》",
      "predicate": "票房",
      "object": "40亿",
      "confidence": 0.95
    },
    {
      "subject": "《深海》",
      "predicate": "采用",
      "object": "全新的动画技术",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:45:06.386 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "《流浪地球2》",
      "predicate": "上映于",
      "object": "春节档",
      "confidence": 0.95
    },
    {
      "subject": "《满江红》",
      "predicate": "票房",
      "object": "40亿",
      "confidence": 0.95
    },
    {
      "subject": "《深海》",
      "predicate": "采用",
      "object": "全新的动画技术",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:45:06.386 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:45:06.386 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-25 16:45:06.388 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:45:06.393 [TextExtract-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:45:06.398 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《流浪地球2》 (通过三元组提取)
2025-06-25 16:45:06.398 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《流浪地球2》 --[上映于]--> 春节档
2025-06-25 16:45:06.399 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:45:06.403 [TextExtract-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:45:06.407 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《满江红》 (通过三元组提取)
2025-06-25 16:45:06.408 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《满江红》 --[票房]--> 40亿
2025-06-25 16:45:06.410 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:45:06.414 [TextExtract-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:45:06.416 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《深海》 (通过三元组提取)
2025-06-25 16:45:06.417 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《深海》 --[采用]--> 全新的动画技术
2025-06-25 16:45:06.417 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:45:06.426 [TextExtract-5] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 52
2025-06-25 16:45:06.426 [TextExtract-5] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-5, 文本长度: 45
2025-06-25 16:45:06.426 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 45 字符
2025-06-25 16:45:06.426 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:45:06.426 [TextExtract-5] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 45，当前并发数: 5
2025-06-25 16:45:06.426 [TextExtract-5] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:45:07.090 [reactor-http-nio-11] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 9964ms，响应长度: 365
2025-06-25 16:45:07.094 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 59，处理模式: 直接处理
2025-06-25 16:45:07.098 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 365
2025-06-25 16:45:07.098 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "参加",
      "object": "2023年香港电影节",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "演唱",
      "object": "《青花瓷》",
      "confidence": 0.95
    },
    {
      "subject": "张学友",
      "predicate": "获得",
      "object": "金曲奖最佳男歌手",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:45:07.099 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "参加",
      "object": "2023年香港电影节",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "演唱",
      "object": "《青花瓷》",
      "confidence": 0.95
    },
    {
      "subject": "张学友",
      "predicate": "获得",
      "object": "金曲奖最佳男歌手",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:45:07.100 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:45:07.101 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-25 16:45:07.103 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:45:07.107 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 16:45:07.109 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 16:45:07.113 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-25 16:45:07.116 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 2023年香港电影节 (通过三元组提取)
2025-06-25 16:45:07.120 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:45:07.132 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 16:45:07.148 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:45:07.153 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 刘德华 -> 2023年香港电影节 [参加]
2025-06-25 16:45:07.154 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[参加]--> 2023年香港电影节
2025-06-25 16:45:07.155 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:45:07.158 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-25 16:45:07.160 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:45:07.162 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:45:07.165 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《青花瓷》 (通过三元组提取)
2025-06-25 16:45:07.167 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:45:07.173 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 16:45:07.178 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:45:07.182 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 周杰伦 -> 《青花瓷》 [演唱]
2025-06-25 16:45:07.182 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[演唱]--> 《青花瓷》
2025-06-25 16:45:07.185 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:45:07.190 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:45:07.193 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 张学友 (通过三元组提取)
2025-06-25 16:45:07.193 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张学友 --[获得]--> 金曲奖最佳男歌手
2025-06-25 16:45:07.193 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:45:07.200 [TextExtract-4] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 59
2025-06-25 16:45:07.201 [TextExtract-4] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-4, 文本长度: 65
2025-06-25 16:45:07.201 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 65 字符
2025-06-25 16:45:07.201 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:45:07.201 [TextExtract-4] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 65，当前并发数: 5
2025-06-25 16:45:07.201 [TextExtract-4] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:45:07.835 [reactor-http-nio-8] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 10740ms，响应长度: 461
2025-06-25 16:45:07.836 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 32，处理模式: 直接处理
2025-06-25 16:45:07.841 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 461
2025-06-25 16:45:07.841 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "演员",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "歌手",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出生地",
      "object": "香港",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "作品",
      "object": "《无间道》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:45:07.841 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "演员",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "歌手",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出生地",
      "object": "香港",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "作品",
      "object": "《无间道》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:45:07.846 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:45:07.846 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-25 16:45:07.848 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:45:07.850 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 16:45:07.851 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:45:07.853 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:45:07.855 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 演员 (通过三元组提取)
2025-06-25 16:45:07.859 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:45:07.863 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:45:07.868 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:45:07.871 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 演员 [职业]
2025-06-25 16:45:07.872 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[职业]--> 演员
2025-06-25 16:45:07.877 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:45:07.880 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 16:45:07.882 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:45:07.884 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:45:07.886 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 歌手 (通过三元组提取)
2025-06-25 16:45:07.887 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:45:07.890 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:45:07.893 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:45:07.894 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 歌手 [职业]
2025-06-25 16:45:07.894 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[职业]--> 歌手
2025-06-25 16:45:07.897 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:45:07.900 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 16:45:07.901 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:45:07.903 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:45:07.906 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 香港 (通过三元组提取)
2025-06-25 16:45:07.908 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:45:07.912 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:45:07.916 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:45:07.917 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 香港 [出生地]
2025-06-25 16:45:07.917 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[出生地]--> 香港
2025-06-25 16:45:07.919 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:45:07.921 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 16:45:07.922 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:45:07.924 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:45:07.925 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《无间道》 (通过三元组提取)
2025-06-25 16:45:07.927 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:45:07.930 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 16:45:07.931 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:45:07.933 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 刘德华 -> 《无间道》 [作品]
2025-06-25 16:45:07.933 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[作品]--> 《无间道》
2025-06-25 16:45:07.933 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:45:07.942 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 32
2025-06-25 16:45:07.942 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-1, 文本长度: 36
2025-06-25 16:45:07.942 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 36 字符
2025-06-25 16:45:07.942 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:45:07.942 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 36，当前并发数: 5
2025-06-25 16:45:07.942 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:45:12.775 [reactor-http-nio-12] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 7097ms，响应长度: 133
2025-06-25 16:45:12.775 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 14，处理模式: 直接处理
2025-06-25 16:45:12.780 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 133
2025-06-25 16:45:12.780 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "职业",
      "object": "功夫电影明星",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:45:12.780 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "职业",
      "object": "功夫电影明星",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:45:12.782 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:45:12.782 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 1 个三元组，包括实体和关系保存
2025-06-25 16:45:12.785 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:45:12.790 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:45:12.795 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 成龙 (通过三元组提取)
2025-06-25 16:45:12.801 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:45:12.809 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:45:12.814 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 功夫电影明星 (通过三元组提取)
2025-06-25 16:45:12.817 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:45:12.824 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:45:12.827 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:45:12.830 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 成龙 -> 功夫电影明星 [职业]
2025-06-25 16:45:12.830 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[职业]--> 功夫电影明星
2025-06-25 16:45:12.830 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:45:12.838 [TextExtract-2] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 14
2025-06-25 16:45:12.838 [TextExtract-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-2, 文本长度: 32
2025-06-25 16:45:12.838 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 32 字符
2025-06-25 16:45:12.838 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:45:12.838 [TextExtract-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 32，当前并发数: 5
2025-06-25 16:45:12.838 [TextExtract-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:45:15.751 [reactor-http-nio-8] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 7809ms，响应长度: 259
2025-06-25 16:45:15.752 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 36，处理模式: 直接处理
2025-06-25 16:45:15.758 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 259
2025-06-25 16:45:15.759 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "《瞬息全宇宙》",
      "predicate": "获得",
      "object": "最佳影片奖",
      "confidence": 0.95
    },
    {
      "subject": "第95届奥斯卡颁奖典礼",
      "predicate": "展映",
      "object": "《瞬息全宇宙》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:45:15.759 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "《瞬息全宇宙》",
      "predicate": "获得",
      "object": "最佳影片奖",
      "confidence": 0.95
    },
    {
      "subject": "第95届奥斯卡颁奖典礼",
      "predicate": "展映",
      "object": "《瞬息全宇宙》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:45:15.760 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:45:15.760 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组，包括实体和关系保存
2025-06-25 16:45:15.763 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:45:15.768 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:45:15.773 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《瞬息全宇宙》 (通过三元组提取)
2025-06-25 16:45:15.774 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《瞬息全宇宙》 --[获得]--> 最佳影片奖
2025-06-25 16:45:15.777 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 16:45:15.780 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-25 16:45:15.784 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 第95届奥斯卡颁奖典礼 (通过三元组提取)
2025-06-25 16:45:15.785 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:45:15.788 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《瞬息全宇宙》 已存在，跳过插入
2025-06-25 16:45:15.794 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 16:45:15.799 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 16:45:15.802 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:45:15.805 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系: 第95届奥斯卡颁奖典礼 -> 《瞬息全宇宙》 [展映]
2025-06-25 16:45:15.805 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 第95届奥斯卡颁奖典礼 --[展映]--> 《瞬息全宇宙》
2025-06-25 16:45:15.805 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:45:15.811 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 36
2025-06-25 16:45:15.811 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-1, 文本长度: 44
2025-06-25 16:45:15.811 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 44 字符
2025-06-25 16:45:15.811 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:45:15.811 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 44，当前并发数: 5
2025-06-25 16:45:15.812 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:45:16.159 [reactor-http-nio-9] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 11343ms，响应长度: 478
2025-06-25 16:45:16.159 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 74，处理模式: 直接处理
2025-06-25 16:45:16.163 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 478
2025-06-25 16:45:16.164 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "执导",
      "object": "《满江红》",
      "confidence": 0.95
    },
    {
      "subject": "易烊千玺",
      "predicate": "饰演",
      "object": "《满江红》",
      "confidence": 0.95
    },
    {
      "subject": "《满江红》",
      "predicate": "获得",
      "object": "春节档票房冠军",
      "confidence": 0.95
    },
    {
      "subject": "《满江红》",
      "predicate": "讲述",
      "object": "南宋抗金的故事",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:45:16.164 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "执导",
      "object": "《满江红》",
      "confidence": 0.95
    },
    {
      "subject": "易烊千玺",
      "predicate": "饰演",
      "object": "《满江红》",
      "confidence": 0.95
    },
    {
      "subject": "《满江红》",
      "predicate": "获得",
      "object": "春节档票房冠军",
      "confidence": 0.95
    },
    {
      "subject": "《满江红》",
      "predicate": "讲述",
      "object": "南宋抗金的故事",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:45:16.167 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:45:16.167 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-25 16:45:16.170 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:45:16.174 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:45:16.179 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 张艺谋 (通过三元组提取)
2025-06-25 16:45:16.181 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:45:16.185 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 作品 《满江红》 已存在，跳过插入
2025-06-25 16:45:16.195 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:45:16.202 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 16:45:16.206 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:45:16.209 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 张艺谋 -> 《满江红》 [执导]
2025-06-25 16:45:16.209 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[执导]--> 《满江红》
2025-06-25 16:45:16.211 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:45:16.214 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 作品 《满江红》 已存在，跳过插入
2025-06-25 16:45:16.214 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 易烊千玺 --[饰演]--> 《满江红》
2025-06-25 16:45:16.216 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:45:16.220 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 作品 《满江红》 已存在，跳过插入
2025-06-25 16:45:16.220 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《满江红》 --[获得]--> 春节档票房冠军
2025-06-25 16:45:16.221 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:45:16.223 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 作品 《满江红》 已存在，跳过插入
2025-06-25 16:45:16.223 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《满江红》 --[讲述]--> 南宋抗金的故事
2025-06-25 16:45:16.223 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:45:16.229 [TextExtract-3] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 74
2025-06-25 16:45:16.229 [TextExtract-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-3, 文本长度: 279
2025-06-25 16:45:16.229 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 279 字符
2025-06-25 16:45:16.229 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:45:16.230 [TextExtract-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 279，当前并发数: 5
2025-06-25 16:45:16.230 [TextExtract-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 16:45:16.246 [reactor-http-nio-10] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 9820ms，响应长度: 356
2025-06-25 16:45:16.246 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 45，处理模式: 直接处理
2025-06-25 16:45:16.248 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 356
2025-06-25 16:45:16.249 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "李连杰",
      "predicate": "主演",
      "object": "《黄飞鸿》",
      "confidence": 0.95
    },
    {
      "subject": "甄子丹",
      "predicate": "出演",
      "object": "《叶问》系列",
      "confidence": 0.95
    },
    {
      "subject": "吴京",
      "predicate": "导演",
      "object": "《战狼》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:45:16.249 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "李连杰",
      "predicate": "主演",
      "object": "《黄飞鸿》",
      "confidence": 0.95
    },
    {
      "subject": "甄子丹",
      "predicate": "出演",
      "object": "《叶问》系列",
      "confidence": 0.95
    },
    {
      "subject": "吴京",
      "predicate": "导演",
      "object": "《战狼》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:45:16.251 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:45:16.251 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-25 16:45:16.253 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:45:16.257 [TextExtract-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:45:16.260 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 李连杰 (通过三元组提取)
2025-06-25 16:45:16.261 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:45:16.264 [TextExtract-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:45:16.266 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 《黄飞鸿》 (通过三元组提取)
2025-06-25 16:45:16.272 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:45:16.276 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:45:16.279 [TextExtract-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:45:16.281 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 李连杰 -> 《黄飞鸿》 [主演]
2025-06-25 16:45:16.281 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 李连杰 --[主演]--> 《黄飞鸿》
2025-06-25 16:45:16.281 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 甄子丹 --[出演]--> 《叶问》系列
2025-06-25 16:45:16.282 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:45:16.285 [TextExtract-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:45:16.288 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 吴京 (通过三元组提取)
2025-06-25 16:45:16.289 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:45:16.294 [TextExtract-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:45:16.295 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 《战狼》 (通过三元组提取)
2025-06-25 16:45:16.296 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:45:16.302 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:45:16.304 [TextExtract-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:45:16.306 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 吴京 -> 《战狼》 [导演]
2025-06-25 16:45:16.306 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 吴京 --[导演]--> 《战狼》
2025-06-25 16:45:16.306 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:45:16.311 [TextExtract-5] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 45
2025-06-25 16:45:16.311 [TextExtract-5] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-5, 文本长度: 1041
2025-06-25 16:45:19.851 [reactor-http-nio-11] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 12650ms，响应长度: 480
2025-06-25 16:45:19.852 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 65，处理模式: 直接处理
2025-06-25 16:45:19.856 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 480
2025-06-25 16:45:19.856 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "金马奖颁奖典礼",
      "predicate": "播放",
      "object": "《无间道》片段",
      "confidence": 0.95
    },
    {
      "subject": "柏林电影节",
      "predicate": "展映",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "奥运会开幕式",
      "predicate": "演唱",
      "object": "《青花瓷》",
      "confidence": 0.95
    },
    {
      "subject": "音乐节",
      "predicate": "演奏",
      "object": "《东风破》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:45:19.856 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "金马奖颁奖典礼",
      "predicate": "播放",
      "object": "《无间道》片段",
      "confidence": 0.95
    },
    {
      "subject": "柏林电影节",
      "predicate": "展映",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "奥运会开幕式",
      "predicate": "演唱",
      "object": "《青花瓷》",
      "confidence": 0.95
    },
    {
      "subject": "音乐节",
      "predicate": "演奏",
      "object": "《东风破》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:45:19.862 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:45:19.862 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-25 16:45:19.863 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 16:45:19.867 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-25 16:45:19.869 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 金马奖颁奖典礼 (通过三元组提取)
2025-06-25 16:45:19.869 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 金马奖颁奖典礼 --[播放]--> 《无间道》片段
2025-06-25 16:45:19.871 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 16:45:19.873 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-25 16:45:19.874 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 柏林电影节 (通过三元组提取)
2025-06-25 16:45:19.875 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:45:19.877 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:45:19.878 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《红高粱》 (通过三元组提取)
2025-06-25 16:45:19.882 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 16:45:19.884 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 16:45:19.885 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:45:19.888 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系: 柏林电影节 -> 《红高粱》 [展映]
2025-06-25 16:45:19.888 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 柏林电影节 --[展映]--> 《红高粱》
2025-06-25 16:45:19.889 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:45:19.890 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:45:19.892 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 奥运会开幕式 (通过三元组提取)
2025-06-25 16:45:19.893 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:45:19.895 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-25 16:45:19.897 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 16:45:19.899 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 16:45:19.901 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:45:19.921 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系: 奥运会开幕式 -> 《青花瓷》 [演唱]
2025-06-25 16:45:19.921 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 奥运会开幕式 --[演唱]--> 《青花瓷》
2025-06-25 16:45:19.923 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:45:19.931 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 作品 《东风破》 已存在，跳过插入
2025-06-25 16:45:19.931 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 音乐节 --[演奏]--> 《东风破》
2025-06-25 16:45:19.931 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:45:19.934 [TextExtract-4] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 65
2025-06-25 16:45:20.448 [reactor-http-nio-12] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 7610ms，响应长度: 256
2025-06-25 16:45:20.449 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 32，处理模式: 直接处理
2025-06-25 16:45:20.451 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 256
2025-06-25 16:45:20.452 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "维也纳新年音乐会",
      "predicate": "演奏",
      "object": "《蓝色多瑙河》",
      "confidence": 0.95
    },
    {
      "subject": "现场观众",
      "predicate": "鼓掌",
      "object": "维也纳新年音乐会",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:45:20.452 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "维也纳新年音乐会",
      "predicate": "演奏",
      "object": "《蓝色多瑙河》",
      "confidence": 0.95
    },
    {
      "subject": "现场观众",
      "predicate": "鼓掌",
      "object": "维也纳新年音乐会",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:45:20.453 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:45:20.453 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组，包括实体和关系保存
2025-06-25 16:45:20.455 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:45:20.458 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:45:20.461 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《蓝色多瑙河》 (通过三元组提取)
2025-06-25 16:45:20.461 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 维也纳新年音乐会 --[演奏]--> 《蓝色多瑙河》
2025-06-25 16:45:20.461 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 现场观众 --[鼓掌]--> 维也纳新年音乐会
2025-06-25 16:45:20.461 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:45:20.466 [TextExtract-2] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 32
2025-06-25 16:45:28.951 [reactor-http-nio-8] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 13139ms，响应长度: 572
2025-06-25 16:45:28.952 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 44，处理模式: 直接处理
2025-06-25 16:45:28.957 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 572
2025-06-25 16:45:28.958 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "演员",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "歌手",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出生地",
      "object": "香港",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出演",
      "object": "《无间道》",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出演",
      "object": "《桃姐》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:45:28.958 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "演员",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "歌手",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出生地",
      "object": "香港",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出演",
      "object": "《无间道》",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出演",
      "object": "《桃姐》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 16:45:28.959 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 16:45:28.959 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 5 个三元组，包括实体和关系保存
2025-06-25 16:45:28.961 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:45:28.967 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:45:28.971 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 刘德华 (通过三元组提取)
2025-06-25 16:45:28.973 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:45:28.975 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:45:28.980 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 演员 (通过三元组提取)
2025-06-25 16:45:28.982 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:45:28.988 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:45:28.994 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:45:28.998 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 演员 [职业]
2025-06-25 16:45:28.998 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[职业]--> 演员
2025-06-25 16:45:29.000 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:45:29.002 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 16:45:29.003 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:45:29.005 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:45:29.009 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 歌手 (通过三元组提取)
2025-06-25 16:45:29.010 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:45:29.015 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:45:29.021 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:45:29.026 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 歌手 [职业]
2025-06-25 16:45:29.026 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[职业]--> 歌手
2025-06-25 16:45:29.031 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:45:29.034 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 16:45:29.035 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:45:29.037 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:45:29.039 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 香港 (通过三元组提取)
2025-06-25 16:45:29.040 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:45:29.044 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:45:29.046 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:45:29.048 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 香港 [出生地]
2025-06-25 16:45:29.048 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[出生地]--> 香港
2025-06-25 16:45:29.049 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:45:29.051 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 16:45:29.052 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:45:29.054 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:45:29.057 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《无间道》 (通过三元组提取)
2025-06-25 16:45:29.060 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:45:29.063 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 16:45:29.065 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:45:29.067 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 刘德华 -> 《无间道》 [出演]
2025-06-25 16:45:29.067 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[出演]--> 《无间道》
2025-06-25 16:45:29.068 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 16:45:29.070 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 16:45:29.071 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 16:45:29.073 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 16:45:29.075 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《桃姐》 (通过三元组提取)
2025-06-25 16:45:29.076 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 16:45:29.080 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 16:45:29.083 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 16:45:29.085 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 刘德华 -> 《桃姐》 [出演]
2025-06-25 16:45:29.085 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[出演]--> 《桃姐》
2025-06-25 16:45:29.085 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 16:45:29.090 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 44
2025-06-25 16:45:46.255 [parallel-3] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30024ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-25 16:45:46.256 [TextExtract-3] ERROR com.datacenter.extract.service.SmartAIProvider - ❌ AI提取失败，类型: entities，文本长度: 279
2025-06-25 16:45:46.256 [TextExtract-3] ERROR com.datacenter.extract.service.SmartAIProvider - 💥 AI提取过程异常: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:77)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.service.TextExtractionService.processTextAsync(TextExtractionService.java:72)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.AsyncExecutionInterceptor.lambda$invoke$0(AsyncExecutionInterceptor.java:115)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 16:45:46.261 [TextExtract-3] ERROR c.datacenter.extract.service.TextExtractionService - 异步文本提取失败，错误: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-25 16:45:46.261 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 1041 字符
2025-06-25 16:45:46.262 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 16:45:46.263 [TextExtract-5] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 1041，当前并发数: 1
2025-06-25 16:45:46.263 [TextExtract-5] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 40秒
