2025-06-25 10:26:58.028 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 55526 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-25 10:26:58.030 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-25 10:26:59.131 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 10:26:59.133 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-25 10:26:59.257 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 120 ms. Found 7 JPA repository interfaces.
2025-06-25 10:26:59.278 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 10:26:59.279 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-25 10:26:59.298 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityCelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 10:26:59.298 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityEventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 10:26:59.298 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 10:26:59.298 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 10:26:59.299 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 10:26:59.299 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 10:26:59.299 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 10:26:59.299 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14 ms. Found 0 Redis repository interfaces.
2025-06-25 10:27:04.558 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@14ad42
2025-06-25 10:27:04.559 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@14ad42
2025-06-25 10:27:04.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@14ad42
2025-06-25 10:27:04.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@3cb173db
2025-06-25 10:27:04.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@3cb173db
2025-06-25 10:27:04.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@26712838
2025-06-25 10:27:04.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@26712838
2025-06-25 10:27:04.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@249a45fd
2025-06-25 10:27:04.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@249a45fd
2025-06-25 10:27:04.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@268f0ff3
2025-06-25 10:27:04.562 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@268f0ff3
2025-06-25 10:27:04.562 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@268f0ff3
2025-06-25 10:27:04.562 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@11978f52
2025-06-25 10:27:04.562 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@11978f52
2025-06-25 10:27:04.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@11978f52
2025-06-25 10:27:04.564 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@3e0855b0
2025-06-25 10:27:04.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@3e0855b0
2025-06-25 10:27:04.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@3ba5c4dd
2025-06-25 10:27:04.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@47fca3cc
2025-06-25 10:27:04.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@47fca3cc
2025-06-25 10:27:04.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@55746340
2025-06-25 10:27:04.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@6a0c7af6
2025-06-25 10:27:04.566 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@7f1ad846
2025-06-25 10:27:04.566 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@7f1ad846
2025-06-25 10:27:04.566 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@7f1ad846
2025-06-25 10:27:04.566 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-25 10:27:04.566 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-25 10:27:04.566 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-25 10:27:04.566 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-25 10:27:04.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-25 10:27:04.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-25 10:27:04.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-25 10:27:04.568 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-25 10:27:04.568 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-25 10:27:04.568 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-25 10:27:04.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-25 10:27:04.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-25 10:27:04.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-25 10:27:04.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-25 10:27:04.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-25 10:27:04.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-25 10:27:04.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-25 10:27:04.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-25 10:27:04.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-25 10:27:04.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-25 10:27:04.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 10:27:04.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 10:27:04.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-25 10:27:04.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-25 10:27:04.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-25 10:27:04.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-25 10:27:04.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@5e7e7a7e
2025-06-25 10:27:04.571 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-25 10:27:04.571 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-25 10:27:04.571 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-25 10:27:04.572 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@5abc5854
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@5abc5854
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-25 10:27:04.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-25 10:27:04.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-25 10:27:04.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-25 10:27:04.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-25 10:27:04.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-25 10:27:04.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-25 10:27:04.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@586486c
2025-06-25 10:27:04.575 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-25 10:27:04.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@7fbbdd8a
2025-06-25 10:27:04.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@7fbbdd8a
2025-06-25 10:27:04.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-25 10:27:04.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-25 10:27:04.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 10:27:04.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 10:27:04.577 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 10:27:04.577 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 10:27:04.577 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 10:27:04.577 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-25 10:27:04.579 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-25 10:27:04.579 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 10:27:04.579 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 10:27:04.579 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 10:27:04.579 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 10:27:04.579 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 10:27:04.579 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 10:27:04.580 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 10:27:04.580 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 10:27:04.581 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 10:27:04.581 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 10:27:04.581 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-25 10:27:04.581 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-25 10:27:04.582 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-25 10:27:04.583 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-25 10:27:04.583 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-25 10:27:04.583 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-25 10:27:04.585 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-25 10:27:04.585 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-25 10:27:04.585 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@2a259f6f
2025-06-25 10:27:04.585 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@2a259f6f
2025-06-25 10:27:04.585 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@7ccf6114
2025-06-25 10:27:04.589 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@60a99f3d
2025-06-25 10:27:04.589 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@60a99f3d
2025-06-25 10:27:04.590 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@6c06b1bc
2025-06-25 10:27:04.590 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@1d8dbf10
2025-06-25 10:27:04.591 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@e171f93
2025-06-25 10:27:04.592 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@4ad3969
2025-06-25 10:27:04.592 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@5d7ff311
2025-06-25 10:27:04.592 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@2d7aa291
2025-06-25 10:27:04.592 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@1ba7db2a
2025-06-25 10:27:04.592 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@762cdf46
2025-06-25 10:27:04.592 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@54e94de9
2025-06-25 10:27:04.686 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-25 10:27:04.699 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-25 10:27:04.802 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@48b9773b
2025-06-25 10:27:04.803 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-25 10:27:04.838 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-25 10:27:04.838 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-25 10:27:04.856 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@ce0bbd5) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@399fd710)
2025-06-25 10:27:04.856 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7c359808) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1f013047)
2025-06-25 10:27:04.856 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@16361e61) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@51566ce0)
2025-06-25 10:27:04.856 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1734b1a) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@17e6d07b)
2025-06-25 10:27:04.856 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@318511f0) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@53564a4c)
2025-06-25 10:27:04.856 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4866e0a7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@69a294d8)
2025-06-25 10:27:04.856 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@70b1028d) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@11d422fd)
2025-06-25 10:27:04.856 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6e489bb8) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1331d6fd)
2025-06-25 10:27:04.857 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6b6c0b7c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5b1f0f26)
2025-06-25 10:27:04.858 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-25 10:27:04.858 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-25 10:27:04.858 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-25 10:27:04.859 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 10:27:04.860 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 10:27:04.861 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@7169d668
2025-06-25 10:27:04.862 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@6c06b1bc`
2025-06-25 10:27:04.864 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-25 10:27:04.864 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-25 10:27:04.865 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 10:27:04.866 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 10:27:04.866 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 10:27:04.866 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 10:27:04.866 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 10:27:04.866 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 10:27:04.867 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 10:27:04.867 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 10:27:04.867 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 10:27:04.868 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@1cfb7450] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@478c84aa]
2025-06-25 10:27:05.522 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@1cfb7450] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@2f59cb6f]
2025-06-25 10:27:05.526 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@2f59cb6f] for TypeConfiguration
2025-06-25 10:27:05.527 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 10:27:06.187 [main] INFO  c.d.extract.controller.AsyncExtractController - AsyncExtractController initialized successfully
2025-06-25 10:27:06.192 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-25 10:27:06.655 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-25 10:27:06.783 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-25 10:27:06.820 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 2
2025-06-25 10:27:06.821 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-25 10:27:06.822 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-25 10:27:06.822 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-25 10:27:07.259 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-25 10:27:07.276 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 9.85 seconds (process running for 11.527)
2025-06-25 10:27:34.918 [reactor-http-nio-3] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: triples, textInputType: JSONArray, arraySize: 4
2025-06-25 10:27:34.938 [reactor-http-nio-3] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 157ms
2025-06-25 10:27:34.939 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-1
2025-06-25 10:27:34.946 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 88，当前并发数: 1
2025-06-25 10:27:34.947 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 10:27:53.902 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 18954ms，响应长度: 806
2025-06-25 10:27:53.909 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 88
2025-06-25 10:27:53.925 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 806
2025-06-25 10:27:53.925 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "主演",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映于",
      "object": "香港电影节",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "参加",
      "object": "电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "终身成就奖",
      "confidence": 0.95
    },
    {
      "subject": "李小龙",
      "predicate": "师父",
      "object": "成龙",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《龙争虎斗》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 10:27:53.926 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "主演",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映于",
      "object": "香港电影节",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "参加",
      "object": "电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "终身成就奖",
      "confidence": 0.95
    },
    {
      "subject": "李小龙",
      "predicate": "师父",
      "object": "成龙",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《龙争虎斗》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 10:27:53.928 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 10:27:53.928 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 7 个三元组，包括实体和关系保存
2025-06-25 10:27:53.998 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 10:27:54.015 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 10:27:54.015 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 10:27:54.018 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 《醉拳》 已存在，跳过插入
2025-06-25 10:27:54.023 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 10:27:54.034 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 10:27:54.046 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 10:27:54.053 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 成龙 -> 《醉拳》 [主演]
2025-06-25 10:27:54.053 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[主演]--> 《醉拳》
2025-06-25 10:27:54.055 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 10:27:54.057 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《醉拳》 已存在，跳过插入
2025-06-25 10:27:54.059 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 10:27:54.060 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 香港电影节 已存在，跳过插入
2025-06-25 10:27:54.061 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 10:27:54.065 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 10:27:54.068 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 10:27:54.071 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 香港电影节 -> 《醉拳》 [在_首映于]
2025-06-25 10:27:54.071 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《醉拳》 --[首映于]--> 香港电影节
2025-06-25 10:27:54.072 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 10:27:54.074 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 10:27:54.075 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 10:27:54.077 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 电影节颁奖典礼 已存在，跳过插入
2025-06-25 10:27:54.078 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 10:27:54.083 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 10:27:54.090 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 10:27:54.092 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 成龙 -> 电影节颁奖典礼 [参加]
2025-06-25 10:27:54.093 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[参加]--> 电影节颁奖典礼
2025-06-25 10:27:54.094 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 10:27:54.097 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 10:27:54.099 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 10:27:54.101 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 终身成就奖 已存在，跳过插入
2025-06-25 10:27:54.103 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 10:27:54.107 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 10:27:54.110 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 10:27:54.113 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 成龙 -> 终身成就奖 [获得]
2025-06-25 10:27:54.113 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[获得]--> 终身成就奖
2025-06-25 10:27:54.114 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 10:27:54.116 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 李小龙 已存在，跳过插入
2025-06-25 10:27:54.117 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 10:27:54.124 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 10:27:54.125 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 10:27:54.129 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 10:27:54.132 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 10:27:54.133 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 李小龙 -> 成龙 [师父]
2025-06-25 10:27:54.133 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 李小龙 --[师父]--> 成龙
2025-06-25 10:27:54.134 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 10:27:54.136 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 功夫电影节 已存在，跳过插入
2025-06-25 10:27:54.138 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 10:27:54.139 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《醉拳》 已存在，跳过插入
2025-06-25 10:27:54.141 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 10:27:54.144 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 10:27:54.146 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 10:27:54.148 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系: 功夫电影节 -> 《醉拳》 [展映]
2025-06-25 10:27:54.148 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 功夫电影节 --[展映]--> 《醉拳》
2025-06-25 10:27:54.150 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 10:27:54.152 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 功夫电影节 已存在，跳过插入
2025-06-25 10:27:54.153 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 10:27:54.154 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 《龙争虎斗》 已存在，跳过插入
2025-06-25 10:27:54.155 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 10:27:54.159 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 10:27:54.162 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 10:27:54.163 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系(反向): 《龙争虎斗》 -> 功夫电影节 [参与_展映]
2025-06-25 10:27:54.164 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 功夫电影节 --[展映]--> 《龙争虎斗》
2025-06-25 10:27:54.164 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 10:27:54.170 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成
2025-06-25 10:28:33.413 [SpringApplicationShutdownHook] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 10:28:33.414 [SpringApplicationShutdownHook] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@2f59cb6f] for TypeConfiguration
2025-06-25 10:28:33.414 [SpringApplicationShutdownHook] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@5640bf2d] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@2f59cb6f]
2025-06-25 10:28:33.417 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-25 10:28:33.425 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-25 11:22:29.205 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 56998 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-25 11:22:29.207 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-25 11:22:30.145 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 11:22:30.146 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-25 11:22:30.249 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 99 ms. Found 7 JPA repository interfaces.
2025-06-25 11:22:30.270 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 11:22:30.271 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-25 11:22:30.287 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityCelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:22:30.287 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityEventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:22:30.287 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:22:30.287 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:22:30.288 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:22:30.288 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:22:30.288 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:22:30.288 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 12 ms. Found 0 Redis repository interfaces.
2025-06-25 11:22:33.548 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 11:22:33.553 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 11:22:33.554 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 11:22:33.554 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 11:22:33.554 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 11:22:33.554 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 11:22:33.558 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 11:22:33.559 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 11:22:33.559 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 11:22:33.559 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 11:22:33.559 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 11:22:33.559 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 11:22:33.559 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 11:22:33.559 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 11:22:33.559 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 11:22:33.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 11:22:33.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 11:22:33.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-25 11:22:33.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 11:22:33.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 11:22:33.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-25 11:22:33.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 11:22:33.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 11:22:33.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 11:22:33.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 11:22:33.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 11:22:33.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 11:22:33.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 11:22:33.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 11:22:33.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 11:22:33.562 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 11:22:33.562 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 11:22:33.562 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 11:22:33.562 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@2a259f6f
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@7ccf6114
2025-06-25 11:22:33.564 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@7ccf6114
2025-06-25 11:22:33.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@3df3410a
2025-06-25 11:22:33.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-25 11:22:33.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-25 11:22:33.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-25 11:22:33.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@61d42275
2025-06-25 11:22:33.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@6614289a
2025-06-25 11:22:33.566 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@4148ce43
2025-06-25 11:22:33.566 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@46fb9581
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@46fb9581
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@6fcc0a1
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@6fcc0a1
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@416b681c
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@46d69ca4
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@5c9b5e62
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@3c826498
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@2633d09c
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@54f25b42
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@521c67f0
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@521c67f0
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@7d156f8f
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@7d156f8f
2025-06-25 11:22:33.568 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@451af781
2025-06-25 11:22:33.568 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@451af781
2025-06-25 11:22:33.568 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@3749c2b
2025-06-25 11:22:33.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@3749c2b
2025-06-25 11:22:33.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@32e65852
2025-06-25 11:22:33.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@32e65852
2025-06-25 11:22:33.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@64d93096
2025-06-25 11:22:33.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@76ed7573
2025-06-25 11:22:33.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@51df2a41
2025-06-25 11:22:33.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@51df2a41
2025-06-25 11:22:33.571 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@517bdce0
2025-06-25 11:22:33.571 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@7c0b0bd9
2025-06-25 11:22:33.572 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6150afc6
2025-06-25 11:22:33.572 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@49f50c8f
2025-06-25 11:22:33.572 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@49f50c8f
2025-06-25 11:22:33.572 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@46e6458d
2025-06-25 11:22:33.572 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6297cb4b
2025-06-25 11:22:33.572 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@65d6640
2025-06-25 11:22:33.572 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@65d6640
2025-06-25 11:22:33.572 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@672d8370
2025-06-25 11:22:33.572 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@672d8370
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@13137835
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@13137835
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@13137835
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@4f82248f
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@4f82248f
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@4f82248f
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@22002459
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@29bd056a
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@21e702b8
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@21e702b8
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@7f1fec57
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@7f1fec57
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@7f1fec57
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@5c9e3d01
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@1dc9f5ad
2025-06-25 11:22:33.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@4a2d66e
2025-06-25 11:22:33.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@4a2d66e
2025-06-25 11:22:33.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@4dffff9
2025-06-25 11:22:33.575 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@4dffff9
2025-06-25 11:22:33.575 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@4dffff9
2025-06-25 11:22:33.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@2904bc56
2025-06-25 11:22:33.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@2904bc56
2025-06-25 11:22:33.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@7bb25046
2025-06-25 11:22:33.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@7bb25046
2025-06-25 11:22:33.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@69b1e8f8
2025-06-25 11:22:33.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@69b1e8f8
2025-06-25 11:22:33.577 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@126af200
2025-06-25 11:22:33.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@126af200
2025-06-25 11:22:33.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@1e000a17
2025-06-25 11:22:33.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@1e000a17
2025-06-25 11:22:33.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@77d959f1
2025-06-25 11:22:33.580 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@1f3f434
2025-06-25 11:22:33.580 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@1f3f434
2025-06-25 11:22:33.581 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@38b54694
2025-06-25 11:22:33.584 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@7619fbe7
2025-06-25 11:22:33.585 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@39ead1b7
2025-06-25 11:22:33.585 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@27ec74a3
2025-06-25 11:22:33.585 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@35ff072c
2025-06-25 11:22:33.585 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@c0004b7
2025-06-25 11:22:33.585 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@63880be9
2025-06-25 11:22:33.586 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@27053257
2025-06-25 11:22:33.587 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@6a0e97fc
2025-06-25 11:22:33.671 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-25 11:22:33.684 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-25 11:22:33.782 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4aea57dc
2025-06-25 11:22:33.783 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-25 11:22:33.813 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-25 11:22:33.814 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-25 11:22:33.831 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@27d6467) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5bf1b528)
2025-06-25 11:22:33.831 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2c92f094) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1c3b221f)
2025-06-25 11:22:33.831 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@750c23a3) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@238280df)
2025-06-25 11:22:33.831 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@182fd26b) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5dc120ab)
2025-06-25 11:22:33.831 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@49c4118b) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7ef7f414)
2025-06-25 11:22:33.831 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@182dcd2b) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4c3d72fd)
2025-06-25 11:22:33.832 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@259c6ab8) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@640a6d4b)
2025-06-25 11:22:33.832 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1238a074) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@35b58254)
2025-06-25 11:22:33.832 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@73baf7f0) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@446dacf9)
2025-06-25 11:22:33.832 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-25 11:22:33.832 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-25 11:22:33.832 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-25 11:22:33.833 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 11:22:33.833 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 11:22:33.834 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@34d72f06
2025-06-25 11:22:33.835 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@38b54694`
2025-06-25 11:22:33.836 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-25 11:22:33.836 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-25 11:22:33.838 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:22:33.838 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:22:33.838 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:22:33.838 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:22:33.838 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:22:33.838 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:22:33.839 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:22:33.839 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:22:33.839 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:22:33.840 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@2ab39942] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@64186f60]
2025-06-25 11:22:34.506 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@2ab39942] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@60660d21]
2025-06-25 11:22:34.512 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@60660d21] for TypeConfiguration
2025-06-25 11:22:34.512 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 11:22:35.188 [main] INFO  c.d.extract.controller.AsyncExtractController - AsyncExtractController initialized successfully
2025-06-25 11:22:35.193 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-25 11:22:35.602 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-25 11:22:35.720 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-25 11:22:35.754 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 2
2025-06-25 11:22:35.754 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-25 11:22:35.755 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-25 11:22:35.756 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-25 11:22:36.143 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-25 11:22:36.159 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 7.545 seconds (process running for 8.175)
2025-06-25 11:24:48.412 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 57100 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-25 11:24:48.415 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-25 11:24:49.335 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 11:24:49.336 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-25 11:24:49.434 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 95 ms. Found 7 JPA repository interfaces.
2025-06-25 11:24:49.458 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 11:24:49.460 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-25 11:24:49.479 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityCelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:24:49.479 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityEventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:24:49.479 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:24:49.479 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:24:49.479 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:24:49.479 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:24:49.480 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:24:49.480 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 0 Redis repository interfaces.
2025-06-25 11:24:50.963 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 11:24:50.965 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 11:24:50.965 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 11:24:50.965 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-25 11:24:50.965 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-25 11:24:50.965 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-25 11:24:50.967 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-25 11:24:50.968 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-25 11:24:50.968 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-25 11:24:50.968 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-25 11:24:50.968 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-25 11:24:50.968 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-25 11:24:50.968 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 11:24:50.968 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 11:24:50.968 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 11:24:50.969 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-25 11:24:50.969 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-25 11:24:50.969 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-25 11:24:50.969 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@586486c
2025-06-25 11:24:50.970 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@586486c
2025-06-25 11:24:50.970 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-25 11:24:50.970 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@7fbbdd8a
2025-06-25 11:24:50.970 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-25 11:24:50.970 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-25 11:24:50.970 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-25 11:24:50.970 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-25 11:24:50.970 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-25 11:24:50.971 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-25 11:24:50.971 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 11:24:50.971 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 11:24:50.971 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 11:24:50.971 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 11:24:50.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 11:24:50.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 11:24:50.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 11:24:50.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 11:24:50.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 11:24:50.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 11:24:50.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 11:24:50.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 11:24:50.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 11:24:50.973 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 11:24:50.974 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 11:24:50.974 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 11:24:50.975 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-25 11:24:50.975 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-25 11:24:50.975 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-25 11:24:50.975 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-25 11:24:50.975 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 11:24:50.975 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 11:24:50.975 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 11:24:50.975 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-25 11:24:50.975 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 11:24:50.976 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 11:24:50.976 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 11:24:50.976 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 11:24:50.976 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 11:24:50.976 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 11:24:50.977 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 11:24:50.977 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-25 11:24:50.977 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-25 11:24:50.977 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-25 11:24:50.977 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-25 11:24:50.977 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@2a259f6f
2025-06-25 11:24:50.977 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@7ccf6114
2025-06-25 11:24:50.977 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@7ccf6114
2025-06-25 11:24:50.977 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@3df3410a
2025-06-25 11:24:50.977 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@3df3410a
2025-06-25 11:24:50.977 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-25 11:24:50.978 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-25 11:24:50.978 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@61d42275
2025-06-25 11:24:50.978 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@61d42275
2025-06-25 11:24:50.979 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@6614289a
2025-06-25 11:24:50.980 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@6614289a
2025-06-25 11:24:50.980 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@4148ce43
2025-06-25 11:24:50.980 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@46fb9581
2025-06-25 11:24:50.980 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@6fcc0a1
2025-06-25 11:24:50.980 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@6fcc0a1
2025-06-25 11:24:50.980 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@416b681c
2025-06-25 11:24:50.982 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@46d69ca4
2025-06-25 11:24:50.983 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5c9b5e62
2025-06-25 11:24:50.983 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@3c826498
2025-06-25 11:24:50.983 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@3c826498
2025-06-25 11:24:50.983 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@2633d09c
2025-06-25 11:24:50.983 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@54f25b42
2025-06-25 11:24:50.983 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@521c67f0
2025-06-25 11:24:50.984 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@521c67f0
2025-06-25 11:24:50.984 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@7d156f8f
2025-06-25 11:24:50.984 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@7d156f8f
2025-06-25 11:24:50.984 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@451af781
2025-06-25 11:24:50.984 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@451af781
2025-06-25 11:24:50.984 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@451af781
2025-06-25 11:24:50.984 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@3749c2b
2025-06-25 11:24:50.984 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@3749c2b
2025-06-25 11:24:50.984 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@3749c2b
2025-06-25 11:24:50.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@32e65852
2025-06-25 11:24:50.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@64d93096
2025-06-25 11:24:50.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@76ed7573
2025-06-25 11:24:50.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@76ed7573
2025-06-25 11:24:50.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@51df2a41
2025-06-25 11:24:50.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@51df2a41
2025-06-25 11:24:50.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@51df2a41
2025-06-25 11:24:50.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@517bdce0
2025-06-25 11:24:50.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@7c0b0bd9
2025-06-25 11:24:50.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@6150afc6
2025-06-25 11:24:50.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@6150afc6
2025-06-25 11:24:50.986 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@49f50c8f
2025-06-25 11:24:50.987 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@49f50c8f
2025-06-25 11:24:50.987 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@49f50c8f
2025-06-25 11:24:50.987 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@46e6458d
2025-06-25 11:24:50.988 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@46e6458d
2025-06-25 11:24:50.988 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@6297cb4b
2025-06-25 11:24:50.988 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@6297cb4b
2025-06-25 11:24:50.989 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@65d6640
2025-06-25 11:24:50.990 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@65d6640
2025-06-25 11:24:50.992 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@672d8370
2025-06-25 11:24:50.992 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@672d8370
2025-06-25 11:24:50.992 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@13137835
2025-06-25 11:24:50.992 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@13137835
2025-06-25 11:24:50.992 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@4f82248f
2025-06-25 11:24:50.995 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@627d35ff
2025-06-25 11:24:50.995 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@627d35ff
2025-06-25 11:24:50.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@6879e983
2025-06-25 11:24:50.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@196d684b
2025-06-25 11:24:50.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@45d38165
2025-06-25 11:24:50.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@1f3f434
2025-06-25 11:24:50.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@26612078
2025-06-25 11:24:50.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@54bc3bcf
2025-06-25 11:24:50.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@d3d5094
2025-06-25 11:24:50.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@13714753
2025-06-25 11:24:50.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@3c3cd7a5
2025-06-25 11:24:51.072 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-25 11:24:51.085 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-25 11:24:51.167 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@532ea86b
2025-06-25 11:24:51.168 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-25 11:24:51.202 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-25 11:24:51.202 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-25 11:24:51.217 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@55cb3b7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@497fd334)
2025-06-25 11:24:51.218 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@280c3dc0) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6f89ad03)
2025-06-25 11:24:51.218 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@f287a4e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3879feec)
2025-06-25 11:24:51.218 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@71d2261e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@53917c92)
2025-06-25 11:24:51.218 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1fa796a4) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@68de8522)
2025-06-25 11:24:51.218 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@8dcacf1) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@50f13494)
2025-06-25 11:24:51.218 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@73c09a98) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6f2bf657)
2025-06-25 11:24:51.218 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@27d6467) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5bf1b528)
2025-06-25 11:24:51.218 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2c92f094) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1c3b221f)
2025-06-25 11:24:51.219 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-25 11:24:51.219 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-25 11:24:51.219 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-25 11:24:51.220 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 11:24:51.220 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 11:24:51.221 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@1be4a7e3
2025-06-25 11:24:51.221 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@6879e983`
2025-06-25 11:24:51.222 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-25 11:24:51.222 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-25 11:24:51.224 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:24:51.224 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:24:51.224 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:24:51.225 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:24:51.225 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:24:51.225 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:24:51.225 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:24:51.225 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:24:51.225 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:24:51.226 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@221cdd87] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@4d66cb]
2025-06-25 11:24:51.835 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@221cdd87] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@40dcbf7]
2025-06-25 11:24:51.839 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@40dcbf7] for TypeConfiguration
2025-06-25 11:24:51.839 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 11:24:52.534 [main] INFO  c.d.extract.controller.AsyncExtractController - AsyncExtractController initialized successfully
2025-06-25 11:24:52.541 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-25 11:24:52.955 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-25 11:24:53.088 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-25 11:24:53.121 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 2
2025-06-25 11:24:53.121 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-25 11:24:53.122 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-25 11:24:53.123 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-25 11:24:53.503 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-25 11:24:53.520 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 5.671 seconds (process running for 6.232)
2025-06-25 11:27:12.815 [reactor-http-nio-4] INFO  c.datacenter.extract.controller.LongTextController - 🔍 收到长文本提取请求，文本长度: 91 字符
2025-06-25 11:27:12.832 [reactor-http-nio-4] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 91 字符
2025-06-25 11:27:12.834 [reactor-http-nio-4] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 11:27:12.834 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 91，当前并发数: 1
2025-06-25 11:27:12.834 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 11:27:13.115 [reactor-http-nio-4] ERROR com.datacenter.extract.service.AIModelCaller - 💥 AI调用异常: block()/blockFirst()/blockLast() are blocking, which is not supported in thread reactor-http-nio-4
java.lang.IllegalStateException: block()/blockFirst()/blockLast() are blocking, which is not supported in thread reactor-http-nio-4
	at reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:86)
	at reactor.core.publisher.Mono.block(Mono.java:1728)
	at com.datacenter.extract.service.AIModelCaller.callAI(AIModelCaller.java:94)
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:67)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.controller.LongTextController.extractLongText(LongTextController.java:53)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:27:13.120 [reactor-http-nio-4] ERROR com.datacenter.extract.service.SmartAIProvider - ❌ AI提取失败，类型: entities,relations，文本长度: 91
2025-06-25 11:27:13.120 [reactor-http-nio-4] ERROR com.datacenter.extract.service.SmartAIProvider - 💥 AI提取过程异常: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:77)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.controller.LongTextController.extractLongText(LongTextController.java:53)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:27:13.125 [reactor-http-nio-4] ERROR c.datacenter.extract.controller.LongTextController - ❌ 长文本提取失败，耗时: 310ms，错误: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:82)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.controller.LongTextController.extractLongText(LongTextController.java:53)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:27:13.186 [reactor-http-nio-5] INFO  c.datacenter.extract.controller.LongTextController - 🔍 收到长文本提取请求，文本长度: 1564 字符
2025-06-25 11:27:13.187 [reactor-http-nio-5] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 1564 字符
2025-06-25 11:27:13.187 [reactor-http-nio-5] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 11:27:13.187 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 1564，当前并发数: 1
2025-06-25 11:27:13.187 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 40秒
2025-06-25 11:27:13.191 [reactor-http-nio-5] ERROR com.datacenter.extract.service.AIModelCaller - 💥 AI调用异常: block()/blockFirst()/blockLast() are blocking, which is not supported in thread reactor-http-nio-5
java.lang.IllegalStateException: block()/blockFirst()/blockLast() are blocking, which is not supported in thread reactor-http-nio-5
	at reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:86)
	at reactor.core.publisher.Mono.block(Mono.java:1728)
	at com.datacenter.extract.service.AIModelCaller.callAI(AIModelCaller.java:94)
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:67)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.controller.LongTextController.extractLongText(LongTextController.java:53)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:27:13.192 [reactor-http-nio-5] ERROR com.datacenter.extract.service.SmartAIProvider - ❌ AI提取失败，类型: entities,relations，文本长度: 1564
2025-06-25 11:27:13.192 [reactor-http-nio-5] ERROR com.datacenter.extract.service.SmartAIProvider - 💥 AI提取过程异常: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:77)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.controller.LongTextController.extractLongText(LongTextController.java:53)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:27:13.192 [reactor-http-nio-5] ERROR c.datacenter.extract.controller.LongTextController - ❌ 长文本提取失败，耗时: 6ms，错误: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:82)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.controller.LongTextController.extractLongText(LongTextController.java:53)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:27:13.226 [reactor-http-nio-6] INFO  c.datacenter.extract.controller.LongTextController - 🔥 收到强制分批提取请求，文本长度: 306 字符
2025-06-25 11:27:13.226 [reactor-http-nio-6] INFO  com.datacenter.extract.service.LongTextProcessor - 🔍 开始处理长文本，长度: 306 字符
2025-06-25 11:27:13.227 [reactor-http-nio-6] INFO  com.datacenter.extract.service.LongTextProcessor - 📝 文本较短，直接处理
2025-06-25 11:27:13.227 [reactor-http-nio-6] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 306，当前并发数: 1
2025-06-25 11:27:13.228 [reactor-http-nio-6] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 11:27:13.231 [reactor-http-nio-6] ERROR com.datacenter.extract.service.AIModelCaller - 💥 AI调用异常: block()/blockFirst()/blockLast() are blocking, which is not supported in thread reactor-http-nio-6
java.lang.IllegalStateException: block()/blockFirst()/blockLast() are blocking, which is not supported in thread reactor-http-nio-6
	at reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:86)
	at reactor.core.publisher.Mono.block(Mono.java:1728)
	at com.datacenter.extract.service.AIModelCaller.callAI(AIModelCaller.java:94)
	at com.datacenter.extract.service.LongTextProcessor.processLongText(LongTextProcessor.java:58)
	at com.datacenter.extract.controller.LongTextController.forceBatchExtract(LongTextController.java:91)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:27:13.236 [reactor-http-nio-6] INFO  c.datacenter.extract.controller.LongTextController - ✅ 强制分批提取完成，耗时: 10ms
2025-06-25 11:27:13.270 [reactor-http-nio-9] INFO  com.datacenter.extract.service.SmartAIProvider - 🔥 开始缓存预热，文本长度: 16
2025-06-25 11:27:13.270 [reactor-http-nio-9] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 16 字符
2025-06-25 11:27:13.270 [reactor-http-nio-9] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 11:27:13.271 [reactor-http-nio-9] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 16，当前并发数: 1
2025-06-25 11:27:13.271 [reactor-http-nio-9] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 11:27:13.273 [reactor-http-nio-9] ERROR com.datacenter.extract.service.AIModelCaller - 💥 AI调用异常: block()/blockFirst()/blockLast() are blocking, which is not supported in thread reactor-http-nio-9
java.lang.IllegalStateException: block()/blockFirst()/blockLast() are blocking, which is not supported in thread reactor-http-nio-9
	at reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:86)
	at reactor.core.publisher.Mono.block(Mono.java:1728)
	at com.datacenter.extract.service.AIModelCaller.callAI(AIModelCaller.java:94)
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:67)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.service.SmartAIProvider.warmupCache(SmartAIProvider.java:170)
	at com.datacenter.extract.controller.LongTextController.warmupCache(LongTextController.java:159)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:27:13.273 [reactor-http-nio-9] ERROR com.datacenter.extract.service.SmartAIProvider - ❌ AI提取失败，类型: entities,relations，文本长度: 16
2025-06-25 11:27:13.273 [reactor-http-nio-9] ERROR com.datacenter.extract.service.SmartAIProvider - 💥 AI提取过程异常: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:77)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.service.SmartAIProvider.warmupCache(SmartAIProvider.java:170)
	at com.datacenter.extract.controller.LongTextController.warmupCache(LongTextController.java:159)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:27:13.274 [reactor-http-nio-9] WARN  com.datacenter.extract.service.SmartAIProvider - ⚠️  缓存预热失败: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-25 11:27:13.285 [reactor-http-nio-10] INFO  com.datacenter.extract.service.SmartAIProvider - 🧹 缓存已清理
2025-06-25 11:27:25.174 [reactor-http-nio-9] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 11903ms，响应长度: 240
2025-06-25 11:27:31.380 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 18546ms，响应长度: 812
2025-06-25 11:27:39.392 [reactor-http-nio-6] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 26163ms，响应长度: 1468
2025-06-25 11:27:51.777 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 38590ms，响应长度: 2481
2025-06-25 11:28:17.926 [reactor-http-nio-11] INFO  c.datacenter.extract.controller.LongTextController - 🔍 收到长文本提取请求，文本长度: 26 字符
2025-06-25 11:28:17.926 [reactor-http-nio-11] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 26 字符
2025-06-25 11:28:17.926 [reactor-http-nio-11] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 11:28:17.926 [reactor-http-nio-11] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 26，当前并发数: 1
2025-06-25 11:28:17.926 [reactor-http-nio-11] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 11:28:17.928 [reactor-http-nio-11] ERROR com.datacenter.extract.service.AIModelCaller - 💥 AI调用异常: block()/blockFirst()/blockLast() are blocking, which is not supported in thread reactor-http-nio-11
java.lang.IllegalStateException: block()/blockFirst()/blockLast() are blocking, which is not supported in thread reactor-http-nio-11
	at reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:86)
	at reactor.core.publisher.Mono.block(Mono.java:1728)
	at com.datacenter.extract.service.AIModelCaller.callAI(AIModelCaller.java:94)
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:67)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.controller.LongTextController.extractLongText(LongTextController.java:53)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:28:17.929 [reactor-http-nio-11] ERROR com.datacenter.extract.service.SmartAIProvider - ❌ AI提取失败，类型: entities,relations，文本长度: 26
2025-06-25 11:28:17.929 [reactor-http-nio-11] ERROR com.datacenter.extract.service.SmartAIProvider - 💥 AI提取过程异常: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:77)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.controller.LongTextController.extractLongText(LongTextController.java:53)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:28:17.929 [reactor-http-nio-11] ERROR c.datacenter.extract.controller.LongTextController - ❌ 长文本提取失败，耗时: 3ms，错误: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:82)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.controller.LongTextController.extractLongText(LongTextController.java:53)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:28:25.479 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 7552ms，响应长度: 353
2025-06-25 11:28:59.314 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-25 11:29:12.124 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1, textLength: 30
2025-06-25 11:29:12.130 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 30, 参数: triples
2025-06-25 11:29:12.130 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-1
2025-06-25 11:29:12.131 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 30 字符
2025-06-25 11:29:12.131 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 11:29:12.131 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 30，当前并发数: 1
2025-06-25 11:29:12.131 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 11:29:22.040 [reactor-http-nio-2] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 9909ms，响应长度: 353
2025-06-25 11:29:22.041 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 30，处理模式: 直接处理
2025-06-25 11:29:22.067 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 353
2025-06-25 11:29:22.068 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张三",
      "predicate": "职业",
      "object": "科学家",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "出生于",
      "object": "1980年",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "毕业于",
      "object": "清华大学",
      "confidence": 0.95
    }
  ]
}
2025-06-25 11:29:22.068 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张三",
      "predicate": "职业",
      "object": "科学家",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "出生于",
      "object": "1980年",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "毕业于",
      "object": "清华大学",
      "confidence": 0.95
    }
  ]
}
2025-06-25 11:29:22.071 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 11:29:22.071 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-25 11:29:22.149 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:29:22.180 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:29:22.192 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 张三 (通过三元组提取)
2025-06-25 11:29:22.195 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:29:22.197 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:29:22.199 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 科学家 (通过三元组提取)
2025-06-25 11:29:22.206 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:29:22.216 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:29:22.220 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 11:29:22.222 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 科学家 [职业]
2025-06-25 11:29:22.223 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[职业]--> 科学家
2025-06-25 11:29:22.225 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:29:22.232 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张三 已存在，跳过插入
2025-06-25 11:29:22.232 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:29:22.235 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:29:22.241 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 1980年 (通过三元组提取)
2025-06-25 11:29:22.242 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:29:22.247 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:29:22.250 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 11:29:22.254 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 1980年 [出生于]
2025-06-25 11:29:22.254 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[出生于]--> 1980年
2025-06-25 11:29:22.256 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:29:22.261 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:29:22.263 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 清华大学 (通过三元组提取)
2025-06-25 11:29:22.263 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[毕业于]--> 清华大学
2025-06-25 11:29:22.263 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 11:29:22.272 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成
2025-06-25 11:29:22.272 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 10240ms
2025-06-25 11:31:02.007 [reactor-http-nio-3] ERROR c.datacenter.extract.controller.LongTextController - ❌ 长文本提取失败，耗时: 0ms，错误: Cannot invoke "String.length()" because "textInput" is null
java.lang.NullPointerException: Cannot invoke "String.length()" because "textInput" is null
	at com.datacenter.extract.controller.LongTextController.extractLongText(LongTextController.java:50)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:32:10.618 [reactor-http-nio-4] ERROR c.datacenter.extract.controller.LongTextController - ❌ 长文本提取失败，耗时: 0ms，错误: Cannot invoke "String.length()" because "textInput" is null
java.lang.NullPointerException: Cannot invoke "String.length()" because "textInput" is null
	at com.datacenter.extract.controller.LongTextController.extractLongText(LongTextController.java:50)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:32:49.636 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 59217 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-25 11:32:49.639 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-25 11:32:50.567 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 11:32:50.568 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-25 11:32:50.674 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 102 ms. Found 7 JPA repository interfaces.
2025-06-25 11:32:50.696 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 11:32:50.697 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-25 11:32:50.714 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityCelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:32:50.715 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityEventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:32:50.715 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:32:50.715 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:32:50.715 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:32:50.715 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:32:50.715 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:32:50.715 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 13 ms. Found 0 Redis repository interfaces.
2025-06-25 11:32:54.277 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@3ba5c4dd
2025-06-25 11:32:54.280 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@3ba5c4dd
2025-06-25 11:32:54.280 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@3ba5c4dd
2025-06-25 11:32:54.280 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-25 11:32:54.280 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-25 11:32:54.280 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-25 11:32:54.280 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-25 11:32:54.282 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-25 11:32:54.284 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-25 11:32:54.284 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 11:32:54.285 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 11:32:54.285 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 11:32:54.285 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-25 11:32:54.285 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-25 11:32:54.285 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-25 11:32:54.285 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-25 11:32:54.286 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-25 11:32:54.286 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-25 11:32:54.286 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-25 11:32:54.286 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-25 11:32:54.286 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@5abc5854
2025-06-25 11:32:54.286 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-25 11:32:54.286 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-25 11:32:54.287 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-25 11:32:54.287 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-25 11:32:54.287 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-25 11:32:54.287 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-25 11:32:54.287 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-25 11:32:54.287 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-25 11:32:54.287 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-25 11:32:54.288 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-25 11:32:54.288 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-25 11:32:54.288 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-25 11:32:54.288 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-25 11:32:54.288 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-25 11:32:54.288 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-25 11:32:54.289 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-25 11:32:54.289 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 11:32:54.289 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 11:32:54.290 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-25 11:32:54.291 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-25 11:32:54.291 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-25 11:32:54.291 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-25 11:32:54.291 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-25 11:32:54.291 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-25 11:32:54.291 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-25 11:32:54.292 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-25 11:32:54.292 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@586486c
2025-06-25 11:32:54.292 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-25 11:32:54.292 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-25 11:32:54.294 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-25 11:32:54.294 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@7fbbdd8a
2025-06-25 11:32:54.294 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-25 11:32:54.294 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-25 11:32:54.294 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 11:32:54.294 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 11:32:54.294 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 11:32:54.294 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 11:32:54.295 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 11:32:54.295 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 11:32:54.295 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 11:32:54.295 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 11:32:54.295 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-25 11:32:54.295 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-25 11:32:54.295 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-25 11:32:54.295 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-25 11:32:54.295 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 11:32:54.295 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 11:32:54.296 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-25 11:32:54.296 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-25 11:32:54.296 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 11:32:54.296 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 11:32:54.296 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 11:32:54.297 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 11:32:54.298 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 11:32:54.298 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 11:32:54.298 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 11:32:54.299 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 11:32:54.300 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-25 11:32:54.300 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@2a259f6f
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@7ccf6114
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@3df3410a
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@3df3410a
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@61d42275
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@61d42275
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@61d42275
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@6614289a
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@6614289a
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@6614289a
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@4148ce43
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@46fb9581
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@6fcc0a1
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@6fcc0a1
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@416b681c
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@416b681c
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@416b681c
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@46d69ca4
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@5c9b5e62
2025-06-25 11:32:54.303 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@3c826498
2025-06-25 11:32:54.303 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@3c826498
2025-06-25 11:32:54.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@2633d09c
2025-06-25 11:32:54.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@2633d09c
2025-06-25 11:32:54.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@2633d09c
2025-06-25 11:32:54.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@54f25b42
2025-06-25 11:32:54.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@54f25b42
2025-06-25 11:32:54.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@521c67f0
2025-06-25 11:32:54.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@521c67f0
2025-06-25 11:32:54.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@7d156f8f
2025-06-25 11:32:54.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@7d156f8f
2025-06-25 11:32:54.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@451af781
2025-06-25 11:32:54.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@451af781
2025-06-25 11:32:54.305 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@3749c2b
2025-06-25 11:32:54.306 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@3749c2b
2025-06-25 11:32:54.306 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@32e65852
2025-06-25 11:32:54.308 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@762cdf46
2025-06-25 11:32:54.309 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@762cdf46
2025-06-25 11:32:54.309 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@27dc81be
2025-06-25 11:32:54.310 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@3595086b
2025-06-25 11:32:54.310 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@627d35ff
2025-06-25 11:32:54.312 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@7157413e
2025-06-25 11:32:54.312 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@3245efdb
2025-06-25 11:32:54.312 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@2f0e7fa8
2025-06-25 11:32:54.312 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@24d7657b
2025-06-25 11:32:54.312 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@6f428e6e
2025-06-25 11:32:54.312 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@72e49f6a
2025-06-25 11:32:54.392 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-25 11:32:54.404 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-25 11:32:54.492 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7852ab30
2025-06-25 11:32:54.494 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-25 11:32:54.527 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-25 11:32:54.527 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-25 11:32:54.542 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7120daa6) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6cbb6c41)
2025-06-25 11:32:54.542 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6787bd41) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@44c2e8a8)
2025-06-25 11:32:54.543 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3340ff7c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@42e4431)
2025-06-25 11:32:54.543 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5e198c40) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@dcdb883)
2025-06-25 11:32:54.543 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@39420d59) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4fbbd98c)
2025-06-25 11:32:54.543 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5dd227b7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3d3b852e)
2025-06-25 11:32:54.543 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@14ba7f15) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@55cb3b7)
2025-06-25 11:32:54.543 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@497fd334) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@280c3dc0)
2025-06-25 11:32:54.543 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6f89ad03) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@f287a4e)
2025-06-25 11:32:54.544 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-25 11:32:54.544 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-25 11:32:54.544 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-25 11:32:54.545 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 11:32:54.545 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 11:32:54.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@19f1f330
2025-06-25 11:32:54.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@27dc81be`
2025-06-25 11:32:54.547 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-25 11:32:54.548 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-25 11:32:54.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:32:54.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:32:54.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:32:54.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:32:54.550 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:32:54.550 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:32:54.550 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:32:54.550 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:32:54.550 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:32:54.551 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@35dc849b] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@276aa33f]
2025-06-25 11:32:55.149 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@35dc849b] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@292b7a02]
2025-06-25 11:32:55.154 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@292b7a02] for TypeConfiguration
2025-06-25 11:32:55.154 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 11:32:55.861 [main] INFO  c.d.extract.controller.AsyncExtractController - AsyncExtractController initialized successfully
2025-06-25 11:32:55.866 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-25 11:32:56.324 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-25 11:32:56.468 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-25 11:32:56.505 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 2
2025-06-25 11:32:56.505 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-25 11:32:56.506 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-25 11:32:56.506 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-25 11:32:56.914 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-25 11:32:56.928 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 7.805 seconds (process running for 8.356)
2025-06-25 11:34:02.435 [SpringApplicationShutdownHook] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 11:34:02.437 [SpringApplicationShutdownHook] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@292b7a02] for TypeConfiguration
2025-06-25 11:34:02.438 [SpringApplicationShutdownHook] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@a187bf5] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@292b7a02]
2025-06-25 11:34:02.440 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-25 11:34:02.451 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-25 11:40:34.258 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 59716 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-25 11:40:34.261 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-25 11:40:35.390 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 11:40:35.391 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-25 11:40:35.507 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 111 ms. Found 7 JPA repository interfaces.
2025-06-25 11:40:35.530 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 11:40:35.531 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-25 11:40:35.551 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityCelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:40:35.551 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityEventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:40:35.551 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:40:35.551 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:40:35.551 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:40:35.551 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:40:35.552 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:40:35.552 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 0 Redis repository interfaces.
2025-06-25 11:40:37.034 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1e23ee0e
2025-06-25 11:40:37.037 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1e23ee0e
2025-06-25 11:40:37.037 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@1e23ee0e
2025-06-25 11:40:37.037 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@5bccaedb
2025-06-25 11:40:37.037 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@5bccaedb
2025-06-25 11:40:37.037 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@67784537
2025-06-25 11:40:37.038 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@67784537
2025-06-25 11:40:37.040 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@17ec5e2a
2025-06-25 11:40:37.040 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@17ec5e2a
2025-06-25 11:40:37.040 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@52290e63
2025-06-25 11:40:37.040 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@52290e63
2025-06-25 11:40:37.040 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@52290e63
2025-06-25 11:40:37.040 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@6c2dd88b
2025-06-25 11:40:37.041 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@6c2dd88b
2025-06-25 11:40:37.041 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@6c2dd88b
2025-06-25 11:40:37.042 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@49d979c4
2025-06-25 11:40:37.042 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@49d979c4
2025-06-25 11:40:37.042 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@249a45fd
2025-06-25 11:40:37.042 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@268f0ff3
2025-06-25 11:40:37.042 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@268f0ff3
2025-06-25 11:40:37.043 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@11978f52
2025-06-25 11:40:37.043 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@3e0855b0
2025-06-25 11:40:37.043 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@484b5a21
2025-06-25 11:40:37.043 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@484b5a21
2025-06-25 11:40:37.043 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@484b5a21
2025-06-25 11:40:37.044 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@16e5344c
2025-06-25 11:40:37.044 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@16e5344c
2025-06-25 11:40:37.044 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@16e5344c
2025-06-25 11:40:37.044 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@3ba5c4dd
2025-06-25 11:40:37.044 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@3ba5c4dd
2025-06-25 11:40:37.044 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@3ba5c4dd
2025-06-25 11:40:37.045 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@47fca3cc
2025-06-25 11:40:37.045 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@47fca3cc
2025-06-25 11:40:37.045 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@47fca3cc
2025-06-25 11:40:37.045 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@55746340
2025-06-25 11:40:37.045 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@55746340
2025-06-25 11:40:37.046 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@55746340
2025-06-25 11:40:37.046 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@6a0c7af6
2025-06-25 11:40:37.046 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@6a0c7af6
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@7f1ad846
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@7f1ad846
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-25 11:40:37.049 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-25 11:40:37.050 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-25 11:40:37.050 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 11:40:37.050 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 11:40:37.050 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-25 11:40:37.050 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-25 11:40:37.050 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-25 11:40:37.050 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@5e7e7a7e
2025-06-25 11:40:37.051 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-25 11:40:37.051 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-25 11:40:37.051 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-25 11:40:37.051 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@5abc5854
2025-06-25 11:40:37.051 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-25 11:40:37.051 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-25 11:40:37.051 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-25 11:40:37.051 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-25 11:40:37.052 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-25 11:40:37.052 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-25 11:40:37.053 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-25 11:40:37.054 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-25 11:40:37.054 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-25 11:40:37.054 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-25 11:40:37.054 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-25 11:40:37.054 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 11:40:37.054 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-25 11:40:37.054 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-25 11:40:37.055 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-25 11:40:37.056 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-25 11:40:37.056 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-25 11:40:37.056 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@586486c
2025-06-25 11:40:37.056 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@586486c
2025-06-25 11:40:37.056 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-25 11:40:37.056 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@7fbbdd8a
2025-06-25 11:40:37.056 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-25 11:40:37.057 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-25 11:40:37.057 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-25 11:40:37.057 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-25 11:40:37.057 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 11:40:37.057 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 11:40:37.057 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 11:40:37.057 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 11:40:37.057 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 11:40:37.057 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 11:40:37.057 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 11:40:37.057 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 11:40:37.058 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 11:40:37.058 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 11:40:37.058 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 11:40:37.058 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 11:40:37.058 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 11:40:37.058 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-25 11:40:37.058 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-25 11:40:37.058 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-25 11:40:37.059 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-25 11:40:37.059 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 11:40:37.060 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 11:40:37.061 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 11:40:37.061 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-25 11:40:37.061 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-25 11:40:37.061 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 11:40:37.061 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 11:40:37.061 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 11:40:37.061 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 11:40:37.063 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 11:40:37.064 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 11:40:37.064 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 11:40:37.064 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 11:40:37.065 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 11:40:37.069 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@498b611e
2025-06-25 11:40:37.070 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@498b611e
2025-06-25 11:40:37.071 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@5e9ea380
2025-06-25 11:40:37.071 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@1e50eb3f
2025-06-25 11:40:37.071 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@12e3f4ae
2025-06-25 11:40:37.071 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@537451d5
2025-06-25 11:40:37.071 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@785d6a98
2025-06-25 11:40:37.071 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@614d7fbf
2025-06-25 11:40:37.071 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@6c06b1bc
2025-06-25 11:40:37.071 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@1d8dbf10
2025-06-25 11:40:37.071 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@e171f93
2025-06-25 11:40:37.147 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-25 11:40:37.158 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-25 11:40:37.249 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@becb93a
2025-06-25 11:40:37.250 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-25 11:40:37.277 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-25 11:40:37.278 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-25 11:40:37.293 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4ac0d49) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7c6ab057)
2025-06-25 11:40:37.293 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7ce4498f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1f7557fe)
2025-06-25 11:40:37.293 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7bd7d71c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@52963839)
2025-06-25 11:40:37.293 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@ce0bbd5) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@399fd710)
2025-06-25 11:40:37.294 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7c359808) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1f013047)
2025-06-25 11:40:37.294 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@16361e61) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@51566ce0)
2025-06-25 11:40:37.294 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1734b1a) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@17e6d07b)
2025-06-25 11:40:37.294 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@318511f0) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@53564a4c)
2025-06-25 11:40:37.294 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4866e0a7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@69a294d8)
2025-06-25 11:40:37.295 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-25 11:40:37.295 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-25 11:40:37.295 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-25 11:40:37.296 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 11:40:37.296 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 11:40:37.297 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@71cc0e35
2025-06-25 11:40:37.297 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@5e9ea380`
2025-06-25 11:40:37.299 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-25 11:40:37.299 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-25 11:40:37.300 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:40:37.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:40:37.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:40:37.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:40:37.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:40:37.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:40:37.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:40:37.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:40:37.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:40:37.302 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@221961af] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@32ddcca]
2025-06-25 11:40:37.934 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@221961af] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@186fc6e]
2025-06-25 11:40:37.939 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@186fc6e] for TypeConfiguration
2025-06-25 11:40:37.939 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 11:40:38.573 [main] INFO  c.d.extract.controller.AsyncExtractController - AsyncExtractController initialized successfully
2025-06-25 11:40:38.577 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-25 11:40:39.037 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-25 11:40:39.158 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-25 11:40:39.194 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 2
2025-06-25 11:40:39.194 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-25 11:40:39.195 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-25 11:40:39.195 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-25 11:40:39.588 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-25 11:40:39.605 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 5.956 seconds (process running for 6.56)
2025-06-25 11:40:45.088 [reactor-http-nio-4] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 11:40:45.111 [reactor-http-nio-4] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 144ms
2025-06-25 11:40:45.111 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-1, 文本长度: 82
2025-06-25 11:40:45.120 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 82 字符
2025-06-25 11:40:45.123 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 11:40:45.124 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 82，当前并发数: 1
2025-06-25 11:40:45.124 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 11:40:47.163 [reactor-http-nio-7] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 11:40:47.168 [reactor-http-nio-7] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 6ms
2025-06-25 11:40:47.168 [TextExtract-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-2, 文本长度: 427
2025-06-25 11:40:47.170 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 427 字符
2025-06-25 11:40:47.170 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 11:40:47.170 [TextExtract-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 427，当前并发数: 2
2025-06-25 11:40:47.170 [TextExtract-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 11:40:49.201 [reactor-http-nio-9] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 11:40:49.202 [reactor-http-nio-9] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 2ms
2025-06-25 11:40:49.202 [TextExtract-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-3, 文本长度: 1970
2025-06-25 11:40:49.203 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 1970 字符
2025-06-25 11:40:49.204 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 11:40:49.204 [TextExtract-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 1970，当前并发数: 3
2025-06-25 11:40:49.205 [TextExtract-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 40秒
2025-06-25 11:41:00.609 [reactor-http-nio-6] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 15485ms，响应长度: 694
2025-06-25 11:41:00.610 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 82，处理模式: 直接处理
2025-06-25 11:41:00.630 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 694
2025-06-25 11:41:00.631 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张三",
      "predicate": "职业",
      "object": "软件工程师",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "工作地点",
      "object": "北京的一家科技公司",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "负责",
      "object": "开发人工智能系统",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "李四",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "王五",
      "confidence": 0.95
    },
    {
      "subject": "张三的团队",
      "predicate": "开发",
      "object": "智能对话系统",
      "confidence": 0.95
    }
  ]
}
2025-06-25 11:41:00.631 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张三",
      "predicate": "职业",
      "object": "软件工程师",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "工作地点",
      "object": "北京的一家科技公司",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "负责",
      "object": "开发人工智能系统",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "李四",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "王五",
      "confidence": 0.95
    },
    {
      "subject": "张三的团队",
      "predicate": "开发",
      "object": "智能对话系统",
      "confidence": 0.95
    }
  ]
}
2025-06-25 11:41:00.632 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 11:41:00.633 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 6 个三元组，包括实体和关系保存
2025-06-25 11:41:00.696 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:41:00.713 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张三 已存在，跳过插入
2025-06-25 11:41:00.714 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:41:00.726 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:41:00.735 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 软件工程师 (通过三元组提取)
2025-06-25 11:41:00.742 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:41:00.752 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:41:00.754 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 11:41:00.757 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 软件工程师 [职业]
2025-06-25 11:41:00.757 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[职业]--> 软件工程师
2025-06-25 11:41:00.757 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[工作地点]--> 北京的一家科技公司
2025-06-25 11:41:00.758 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:41:00.761 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:41:00.768 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 开发人工智能系统 (通过三元组提取)
2025-06-25 11:41:00.769 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[负责]--> 开发人工智能系统
2025-06-25 11:41:00.769 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:41:00.772 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张三 已存在，跳过插入
2025-06-25 11:41:00.773 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:41:00.776 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:41:00.778 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 李四 (通过三元组提取)
2025-06-25 11:41:00.780 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:41:00.783 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:41:00.786 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 11:41:00.789 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 李四 [合作]
2025-06-25 11:41:00.789 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[合作]--> 李四
2025-06-25 11:41:00.790 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:41:00.795 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张三 已存在，跳过插入
2025-06-25 11:41:00.796 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:41:00.798 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:41:00.800 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 王五 (通过三元组提取)
2025-06-25 11:41:00.801 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:41:00.804 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:41:00.806 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 11:41:00.807 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 王五 [合作]
2025-06-25 11:41:00.807 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[合作]--> 王五
2025-06-25 11:41:00.807 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三的团队 --[开发]--> 智能对话系统
2025-06-25 11:41:00.808 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 11:41:00.813 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 82
2025-06-25 11:41:17.191 [parallel-3] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30021ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-25 11:41:17.192 [TextExtract-2] ERROR com.datacenter.extract.service.SmartAIProvider - ❌ AI提取失败，类型: entities,relations，文本长度: 427
2025-06-25 11:41:17.193 [TextExtract-2] ERROR com.datacenter.extract.service.SmartAIProvider - 💥 AI提取过程异常: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:77)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.service.TextExtractionService.processTextAsync(TextExtractionService.java:72)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.AsyncExecutionInterceptor.lambda$invoke$0(AsyncExecutionInterceptor.java:115)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:41:17.196 [TextExtract-2] ERROR c.datacenter.extract.service.TextExtractionService - 异步文本提取失败，错误: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-25 11:41:29.211 [parallel-4] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 40006ms，错误: Did not observe any item or terminal signal within 40000ms in 'flatMap' (and no fallback has been configured)
2025-06-25 11:41:29.212 [TextExtract-3] ERROR com.datacenter.extract.service.SmartAIProvider - ❌ AI提取失败，类型: entities,relations，文本长度: 1970
2025-06-25 11:41:29.212 [TextExtract-3] ERROR com.datacenter.extract.service.SmartAIProvider - 💥 AI提取过程异常: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:77)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.service.TextExtractionService.processTextAsync(TextExtractionService.java:72)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.AsyncExecutionInterceptor.lambda$invoke$0(AsyncExecutionInterceptor.java:115)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:41:29.213 [TextExtract-3] ERROR c.datacenter.extract.service.TextExtractionService - 异步文本提取失败，错误: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-25 11:41:43.059 [reactor-http-nio-11] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 11:41:43.059 [reactor-http-nio-11] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 0ms
2025-06-25 11:41:43.060 [TextExtract-4] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-4, 文本长度: 2386
2025-06-25 11:41:43.061 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 2386 字符
2025-06-25 11:41:43.061 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 📄 检测到长文本，启用分批处理模式
2025-06-25 11:41:43.061 [TextExtract-4] INFO  com.datacenter.extract.service.LongTextProcessor - 🔍 开始处理长文本，长度: 2386 字符
2025-06-25 11:41:43.062 [TextExtract-4] INFO  com.datacenter.extract.service.LongTextProcessor - 📊 文本分片完成，共 2 个分片
2025-06-25 11:41:43.063 [pool-5-thread-1] INFO  com.datacenter.extract.service.LongTextProcessor - ⚡ 处理分片 1 (1985 字符)
2025-06-25 11:41:43.063 [pool-5-thread-2] INFO  com.datacenter.extract.service.LongTextProcessor - ⚡ 处理分片 2 (587 字符)
2025-06-25 11:41:43.063 [pool-5-thread-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 1985，当前并发数: 1
2025-06-25 11:41:43.064 [pool-5-thread-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 587，当前并发数: 2
2025-06-25 11:41:43.064 [pool-5-thread-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 40秒
2025-06-25 11:41:43.064 [pool-5-thread-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 11:42:06.710 [reactor-http-nio-12] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 23646ms，响应长度: 1699
2025-06-25 11:42:23.069 [parallel-11] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 40004ms，错误: Did not observe any item or terminal signal within 40000ms in 'flatMap' (and no fallback has been configured)
2025-06-25 11:42:23.078 [TextExtract-4] INFO  com.datacenter.extract.service.LongTextProcessor - ✅ 分片合并完成，成功率: 2/2 ({:.1f}%)，提取三元组: 100.0
2025-06-25 11:42:23.080 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 2386，处理模式: 分批处理
2025-06-25 11:42:23.085 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 1686
2025-06-25 11:42:23.085 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"团队","predicate":"使用","object":"PyTorch","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"使用","object":"TensorFlow","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"使用","object":"Paddle","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"开发","object":"分布式训练系统","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"签署","object":"技术转让协议","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"计划研究","object":"多模态知识图谱","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"医疗","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"金融","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"教育","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"陈研究员","predicate":"研究","object":"联邦学习","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"陈研究员","predicate":"研究","object":"隐私保护技术","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"合作","object":"华为公司","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"合作","object":"牛津大学","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"合作","object":"剑桥大学","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"合作","object":"斯坦福大学","confidence":0.95,"chunk_index":1,"chunk_start":0}],"total_chunks":2,"success_chunks":2,"success_rate":"100.00%","total_triples":15,"processing_method":"batch_processing","timestamp":1750822943078}
2025-06-25 11:42:23.085 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"团队","predicate":"使用","object":"PyTorch","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"使用","object":"TensorFlow","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"使用","object":"Paddle","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"开发","object":"分布式训练系统","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"签署","object":"技术转让协议","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"计划研究","object":"多模态知识图谱","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"医疗","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"金融","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"教育","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"陈研究员","predicate":"研究","object":"联邦学习","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"陈研究员","predicate":"研究","object":"隐私保护技术","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"合作","object":"华为公司","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"合作","object":"牛津大学","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"合作","object":"剑桥大学","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"合作","object":"斯坦福大学","confidence":0.95,"chunk_index":1,"chunk_start":0}],"total_chunks":2,"success_chunks":2,"success_rate":"100.00%","total_triples":15,"processing_method":"batch_processing","timestamp":1750822943078}
2025-06-25 11:42:23.096 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 7 个主要字段: [triples, total_chunks, success_chunks, success_rate, total_triples, processing_method, timestamp]
2025-06-25 11:42:23.096 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 处理 15 个三元组，包括实体和关系保存
2025-06-25 11:42:23.096 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[使用]--> PyTorch
2025-06-25 11:42:23.096 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[使用]--> TensorFlow
2025-06-25 11:42:23.096 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[使用]--> Paddle
2025-06-25 11:42:23.096 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[开发]--> 分布式训练系统
2025-06-25 11:42:23.096 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[签署]--> 技术转让协议
2025-06-25 11:42:23.096 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[计划研究]--> 多模态知识图谱
2025-06-25 11:42:23.097 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[探索应用]--> 医疗
2025-06-25 11:42:23.097 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[探索应用]--> 金融
2025-06-25 11:42:23.097 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[探索应用]--> 教育
2025-06-25 11:42:23.100 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:42:23.105 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:42:23.109 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 联邦学习 (通过三元组提取)
2025-06-25 11:42:23.110 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 陈研究员 --[研究]--> 联邦学习
2025-06-25 11:42:23.110 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 陈研究员 --[研究]--> 隐私保护技术
2025-06-25 11:42:23.111 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:42:23.115 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:42:23.117 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 团队 (通过三元组提取)
2025-06-25 11:42:23.119 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:42:23.121 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:42:23.122 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 华为公司 (通过三元组提取)
2025-06-25 11:42:23.125 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:42:23.129 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:42:23.131 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 11:42:23.133 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 团队 -> 华为公司 [合作]
2025-06-25 11:42:23.133 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[合作]--> 华为公司
2025-06-25 11:42:23.134 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:42:23.137 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 人员 团队 已存在，跳过插入
2025-06-25 11:42:23.137 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:42:23.140 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:42:23.143 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 牛津大学 (通过三元组提取)
2025-06-25 11:42:23.144 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:42:23.148 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:42:23.150 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 11:42:23.152 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 团队 -> 牛津大学 [合作]
2025-06-25 11:42:23.152 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[合作]--> 牛津大学
2025-06-25 11:42:23.155 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:42:23.157 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 人员 团队 已存在，跳过插入
2025-06-25 11:42:23.159 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:42:23.160 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:42:23.162 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 剑桥大学 (通过三元组提取)
2025-06-25 11:42:23.164 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:42:23.168 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:42:23.171 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 11:42:23.172 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 团队 -> 剑桥大学 [合作]
2025-06-25 11:42:23.172 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[合作]--> 剑桥大学
2025-06-25 11:42:23.175 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:42:23.177 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 人员 团队 已存在，跳过插入
2025-06-25 11:42:23.178 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:42:23.180 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:42:23.183 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 斯坦福大学 (通过三元组提取)
2025-06-25 11:42:23.185 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:42:23.192 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:42:23.194 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 11:42:23.196 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 团队 -> 斯坦福大学 [合作]
2025-06-25 11:42:23.199 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[合作]--> 斯坦福大学
2025-06-25 11:42:23.200 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 11:42:23.205 [TextExtract-4] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 2386
2025-06-25 11:43:35.182 [SpringApplicationShutdownHook] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 11:43:35.183 [SpringApplicationShutdownHook] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@186fc6e] for TypeConfiguration
2025-06-25 11:43:35.183 [SpringApplicationShutdownHook] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@588d78da] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@186fc6e]
2025-06-25 11:43:35.185 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-25 11:43:35.195 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-25 12:08:27.106 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 69280 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-25 12:08:27.109 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-25 12:08:28.105 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 12:08:28.106 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-25 12:08:28.215 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 105 ms. Found 7 JPA repository interfaces.
2025-06-25 12:08:28.238 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 12:08:28.239 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-25 12:08:28.257 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityCelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 12:08:28.258 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityEventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 12:08:28.258 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 12:08:28.258 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 12:08:28.259 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 12:08:28.259 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 12:08:28.259 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 12:08:28.259 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 0 Redis repository interfaces.
2025-06-25 12:08:31.609 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-25 12:08:31.627 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-25 12:08:31.627 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-25 12:08:31.627 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 12:08:31.627 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 12:08:31.627 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-25 12:08:31.628 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-25 12:08:31.630 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-25 12:08:31.632 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-25 12:08:31.633 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-25 12:08:31.633 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-25 12:08:31.633 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-25 12:08:31.633 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-25 12:08:31.633 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-25 12:08:31.633 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-25 12:08:31.634 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@586486c
2025-06-25 12:08:31.634 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@586486c
2025-06-25 12:08:31.634 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-25 12:08:31.634 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-25 12:08:31.634 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-25 12:08:31.634 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 12:08:31.635 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 12:08:31.635 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 12:08:31.635 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 12:08:31.635 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 12:08:31.636 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 12:08:31.636 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 12:08:31.636 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 12:08:31.636 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 12:08:31.636 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 12:08:31.637 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 12:08:31.637 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 12:08:31.637 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 12:08:31.637 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 12:08:31.637 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-25 12:08:31.637 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-25 12:08:31.637 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-25 12:08:31.637 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-25 12:08:31.638 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-25 12:08:31.638 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-25 12:08:31.639 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-25 12:08:31.640 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 12:08:31.640 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 12:08:31.640 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 12:08:31.640 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-25 12:08:31.640 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 12:08:31.640 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 12:08:31.640 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 12:08:31.640 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 12:08:31.641 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 12:08:31.641 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 12:08:31.641 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 12:08:31.641 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 12:08:31.642 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-25 12:08:31.642 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-25 12:08:31.642 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-25 12:08:31.642 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-25 12:08:31.642 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-25 12:08:31.642 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-25 12:08:31.642 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@2a259f6f
2025-06-25 12:08:31.642 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@7ccf6114
2025-06-25 12:08:31.642 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@3df3410a
2025-06-25 12:08:31.642 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-25 12:08:31.642 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@61d42275
2025-06-25 12:08:31.643 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@6614289a
2025-06-25 12:08:31.643 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@6614289a
2025-06-25 12:08:31.643 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@4148ce43
2025-06-25 12:08:31.643 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@4148ce43
2025-06-25 12:08:31.643 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@46fb9581
2025-06-25 12:08:31.643 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@46fb9581
2025-06-25 12:08:31.644 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@6fcc0a1
2025-06-25 12:08:31.645 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@6fcc0a1
2025-06-25 12:08:31.646 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@416b681c
2025-06-25 12:08:31.646 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@416b681c
2025-06-25 12:08:31.646 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@46d69ca4
2025-06-25 12:08:31.646 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5c9b5e62
2025-06-25 12:08:31.647 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@3c826498
2025-06-25 12:08:31.647 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@3c826498
2025-06-25 12:08:31.648 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@2633d09c
2025-06-25 12:08:31.648 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@54f25b42
2025-06-25 12:08:31.648 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@521c67f0
2025-06-25 12:08:31.649 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@7d156f8f
2025-06-25 12:08:31.650 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@7d156f8f
2025-06-25 12:08:31.650 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@451af781
2025-06-25 12:08:31.651 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@3749c2b
2025-06-25 12:08:31.651 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@32e65852
2025-06-25 12:08:31.651 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@32e65852
2025-06-25 12:08:31.651 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@64d93096
2025-06-25 12:08:31.651 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@64d93096
2025-06-25 12:08:31.651 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@76ed7573
2025-06-25 12:08:31.651 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@76ed7573
2025-06-25 12:08:31.651 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@76ed7573
2025-06-25 12:08:31.651 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@51df2a41
2025-06-25 12:08:31.652 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@51df2a41
2025-06-25 12:08:31.652 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@51df2a41
2025-06-25 12:08:31.652 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@517bdce0
2025-06-25 12:08:31.652 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@7c0b0bd9
2025-06-25 12:08:31.652 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@6150afc6
2025-06-25 12:08:31.652 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@6150afc6
2025-06-25 12:08:31.652 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@49f50c8f
2025-06-25 12:08:31.652 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@49f50c8f
2025-06-25 12:08:31.652 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@49f50c8f
2025-06-25 12:08:31.652 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@46e6458d
2025-06-25 12:08:31.652 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@6297cb4b
2025-06-25 12:08:31.653 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@65d6640
2025-06-25 12:08:31.653 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@65d6640
2025-06-25 12:08:31.654 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@672d8370
2025-06-25 12:08:31.654 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@672d8370
2025-06-25 12:08:31.654 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@672d8370
2025-06-25 12:08:31.654 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@13137835
2025-06-25 12:08:31.654 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@13137835
2025-06-25 12:08:31.654 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@4f82248f
2025-06-25 12:08:31.654 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@4f82248f
2025-06-25 12:08:31.654 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@22002459
2025-06-25 12:08:31.654 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@22002459
2025-06-25 12:08:31.654 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@29bd056a
2025-06-25 12:08:31.654 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@29bd056a
2025-06-25 12:08:31.654 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@21e702b8
2025-06-25 12:08:31.655 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@21e702b8
2025-06-25 12:08:31.657 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@7f1fec57
2025-06-25 12:08:31.660 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@24d7657b
2025-06-25 12:08:31.660 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@24d7657b
2025-06-25 12:08:31.661 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@26612078
2025-06-25 12:08:31.661 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@54bc3bcf
2025-06-25 12:08:31.662 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@d3d5094
2025-06-25 12:08:31.662 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@13714753
2025-06-25 12:08:31.662 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@3c3cd7a5
2025-06-25 12:08:31.662 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@96be1ae
2025-06-25 12:08:31.664 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@6eb5b9e7
2025-06-25 12:08:31.664 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@77e730bd
2025-06-25 12:08:31.664 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@2d3c501b
2025-06-25 12:08:31.768 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-25 12:08:31.781 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-25 12:08:32.022 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@17fb5184
2025-06-25 12:08:32.023 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-25 12:08:32.074 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-25 12:08:32.074 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-25 12:08:32.091 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@f287a4e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3879feec)
2025-06-25 12:08:32.092 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@71d2261e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@53917c92)
2025-06-25 12:08:32.092 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1fa796a4) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@68de8522)
2025-06-25 12:08:32.092 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@8dcacf1) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@50f13494)
2025-06-25 12:08:32.092 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@73c09a98) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6f2bf657)
2025-06-25 12:08:32.092 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@27d6467) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5bf1b528)
2025-06-25 12:08:32.092 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2c92f094) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1c3b221f)
2025-06-25 12:08:32.092 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@750c23a3) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@238280df)
2025-06-25 12:08:32.092 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@182fd26b) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5dc120ab)
2025-06-25 12:08:32.093 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-25 12:08:32.093 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-25 12:08:32.093 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-25 12:08:32.094 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 12:08:32.094 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 12:08:32.095 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@65a66a75
2025-06-25 12:08:32.096 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@26612078`
2025-06-25 12:08:32.098 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-25 12:08:32.098 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-25 12:08:32.099 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 12:08:32.100 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 12:08:32.100 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 12:08:32.100 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 12:08:32.100 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 12:08:32.100 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 12:08:32.100 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 12:08:32.100 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 12:08:32.100 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 12:08:32.101 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@2761156e] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@4cf15477]
2025-06-25 12:08:32.754 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@2761156e] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@407ff25f]
2025-06-25 12:08:32.758 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@407ff25f] for TypeConfiguration
2025-06-25 12:08:32.759 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 12:08:33.506 [main] INFO  c.d.extract.controller.AsyncExtractController - AsyncExtractController initialized successfully
2025-06-25 12:08:33.512 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-25 12:08:33.932 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-25 12:08:34.065 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-25 12:08:34.101 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 2
2025-06-25 12:08:34.101 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-25 12:08:34.102 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-25 12:08:34.102 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-25 12:08:34.513 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-25 12:08:34.537 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 7.988 seconds (process running for 8.555)
2025-06-25 12:08:35.344 [boundedElastic-1] WARN  o.s.b.a.data.redis.RedisReactiveHealthIndicator - Redis health check failed
org.springframework.data.redis.RedisConnectionFailureException: Unable to connect to Redis
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$ExceptionTranslatingConnectionProvider.translateException(LettuceConnectionFactory.java:1805)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$ExceptionTranslatingConnectionProvider.getConnection(LettuceConnectionFactory.java:1736)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getNativeConnection(LettuceConnectionFactory.java:1538)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.lambda$getConnection$0(LettuceConnectionFactory.java:1518)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.doInLock(LettuceConnectionFactory.java:1478)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getConnection(LettuceConnectionFactory.java:1515)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getSharedReactiveConnection(LettuceConnectionFactory.java:1224)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getReactiveConnection(LettuceConnectionFactory.java:1099)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getReactiveConnection(LettuceConnectionFactory.java:130)
	at reactor.core.publisher.MonoSupplier.call(MonoSupplier.java:67)
	at reactor.core.publisher.FluxSubscribeOnCallable$CallableSubscribeOnSubscription.run(FluxSubscribeOnCallable.java:228)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: io.lettuce.core.RedisConnectionException: Unable to connect to 192.168.3.78/<unresolved>:6380
	at io.lettuce.core.RedisConnectionException.create(RedisConnectionException.java:78)
	at io.lettuce.core.RedisConnectionException.create(RedisConnectionException.java:56)
	at io.lettuce.core.AbstractRedisClient.getConnection(AbstractRedisClient.java:350)
	at io.lettuce.core.RedisClient.connect(RedisClient.java:215)
	at org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider.lambda$getConnection$1(StandaloneConnectionProvider.java:112)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider.getConnection(StandaloneConnectionProvider.java:112)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$ExceptionTranslatingConnectionProvider.getConnection(LettuceConnectionFactory.java:1734)
	... 16 common frames omitted
Caused by: io.lettuce.core.RedisCommandExecutionException: NOAUTH HELLO must be called with the client already authenticated, otherwise the HELLO <proto> AUTH <user> <pass> option can be used to authenticate the client and select the RESP protocol version at the same time
	at io.lettuce.core.internal.ExceptionFactory.createExecutionException(ExceptionFactory.java:147)
	at io.lettuce.core.internal.ExceptionFactory.createExecutionException(ExceptionFactory.java:116)
	at io.lettuce.core.protocol.AsyncCommand.completeResult(AsyncCommand.java:120)
	at io.lettuce.core.protocol.AsyncCommand.complete(AsyncCommand.java:111)
	at io.lettuce.core.protocol.CommandWrapper.complete(CommandWrapper.java:63)
	at io.lettuce.core.protocol.CommandHandler.complete(CommandHandler.java:745)
	at io.lettuce.core.protocol.CommandHandler.decode(CommandHandler.java:680)
	at io.lettuce.core.protocol.CommandHandler.channelRead(CommandHandler.java:597)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	... 1 common frames omitted
2025-06-25 12:09:17.316 [SpringApplicationShutdownHook] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 12:09:17.317 [SpringApplicationShutdownHook] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@407ff25f] for TypeConfiguration
2025-06-25 12:09:17.317 [SpringApplicationShutdownHook] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@675151c2] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@407ff25f]
2025-06-25 12:09:17.319 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-25 12:09:17.328 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-25 12:09:20.106 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 69332 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-25 12:09:20.108 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-25 12:09:21.080 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 12:09:21.082 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-25 12:09:21.197 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 111 ms. Found 7 JPA repository interfaces.
2025-06-25 12:09:21.222 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 12:09:21.223 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-25 12:09:21.236 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityCelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 12:09:21.236 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityEventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 12:09:21.236 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 12:09:21.236 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 12:09:21.236 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 12:09:21.236 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 12:09:21.236 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 12:09:21.236 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 0 Redis repository interfaces.
2025-06-25 12:09:23.605 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@6706da3d
2025-06-25 12:09:23.607 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@6706da3d
2025-06-25 12:09:23.607 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@6706da3d
2025-06-25 12:09:23.607 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@69d021c1
2025-06-25 12:09:23.607 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@69d021c1
2025-06-25 12:09:23.607 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@6d5508a5
2025-06-25 12:09:23.607 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@6d5508a5
2025-06-25 12:09:23.607 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@103bcc9f
2025-06-25 12:09:23.609 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@103bcc9f
2025-06-25 12:09:23.610 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@106802ea
2025-06-25 12:09:23.610 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@106802ea
2025-06-25 12:09:23.610 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@106802ea
2025-06-25 12:09:23.610 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@785ef70f
2025-06-25 12:09:23.610 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@785ef70f
2025-06-25 12:09:23.610 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@785ef70f
2025-06-25 12:09:23.611 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@3d8bd881
2025-06-25 12:09:23.611 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@3d8bd881
2025-06-25 12:09:23.611 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@2cdcfaa6
2025-06-25 12:09:23.611 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@4ff0706c
2025-06-25 12:09:23.611 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@4ff0706c
2025-06-25 12:09:23.612 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@6968bb65
2025-06-25 12:09:23.612 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@66682e8f
2025-06-25 12:09:23.612 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@2d2af12e
2025-06-25 12:09:23.613 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@2d2af12e
2025-06-25 12:09:23.613 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@2d2af12e
2025-06-25 12:09:23.613 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@611587f7
2025-06-25 12:09:23.613 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@611587f7
2025-06-25 12:09:23.613 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@611587f7
2025-06-25 12:09:23.613 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@4d0abb23
2025-06-25 12:09:23.613 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@4d0abb23
2025-06-25 12:09:23.613 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@4d0abb23
2025-06-25 12:09:23.613 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@6ab1f85b
2025-06-25 12:09:23.613 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@6ab1f85b
2025-06-25 12:09:23.614 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@6ab1f85b
2025-06-25 12:09:23.614 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@10e8c7a2
2025-06-25 12:09:23.615 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@10e8c7a2
2025-06-25 12:09:23.615 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@10e8c7a2
2025-06-25 12:09:23.616 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@5d8fd077
2025-06-25 12:09:23.616 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@5d8fd077
2025-06-25 12:09:23.616 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@4544ab46
2025-06-25 12:09:23.616 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@4544ab46
2025-06-25 12:09:23.616 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@2052f095
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@2052f095
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@2052f095
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@76d1f6ea
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@55fe9c2f
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@55fe9c2f
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@3580134d
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@2e19b30
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@2e19b30
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@2e19b30
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@7b7e4b20
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@5ac0bf84
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@6fefc5ea
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@6159fb3c
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@6159fb3c
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@68f79b7c
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@68f79b7c
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@37142579
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@264576e4
2025-06-25 12:09:23.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@86bf90b
2025-06-25 12:09:23.619 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@5c13af01
2025-06-25 12:09:23.619 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@4aba7617
2025-06-25 12:09:23.619 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@47c5cbf2
2025-06-25 12:09:23.620 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@1031c1a0
2025-06-25 12:09:23.620 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@1031c1a0
2025-06-25 12:09:23.620 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@519b0f00
2025-06-25 12:09:23.621 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@519b0f00
2025-06-25 12:09:23.621 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@4888d1ea
2025-06-25 12:09:23.621 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@4888d1ea
2025-06-25 12:09:23.621 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@217b0952
2025-06-25 12:09:23.621 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@217b0952
2025-06-25 12:09:23.622 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@3fd9e01c
2025-06-25 12:09:23.622 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@3fd9e01c
2025-06-25 12:09:23.622 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@36330be8
2025-06-25 12:09:23.623 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@38ba8b45
2025-06-25 12:09:23.623 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@41f23499
2025-06-25 12:09:23.623 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@41f23499
2025-06-25 12:09:23.623 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@31dbf5bb
2025-06-25 12:09:23.623 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@1f19d423
2025-06-25 12:09:23.623 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@73958426
2025-06-25 12:09:23.623 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@23933031
2025-06-25 12:09:23.623 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@23933031
2025-06-25 12:09:23.623 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@4d0b7fd5
2025-06-25 12:09:23.624 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@1ce2029b
2025-06-25 12:09:23.624 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@43090195
2025-06-25 12:09:23.624 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@43090195
2025-06-25 12:09:23.624 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@7921a37d
2025-06-25 12:09:23.624 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@7921a37d
2025-06-25 12:09:23.624 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@6fc28e5b
2025-06-25 12:09:23.624 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@6fc28e5b
2025-06-25 12:09:23.625 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@6fc28e5b
2025-06-25 12:09:23.625 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@6338afe2
2025-06-25 12:09:23.625 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@6338afe2
2025-06-25 12:09:23.625 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@6338afe2
2025-06-25 12:09:23.625 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@68360fb9
2025-06-25 12:09:23.625 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@1c787389
2025-06-25 12:09:23.625 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@67b3960b
2025-06-25 12:09:23.625 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@67b3960b
2025-06-25 12:09:23.626 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@415262a0
2025-06-25 12:09:23.626 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@415262a0
2025-06-25 12:09:23.626 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@415262a0
2025-06-25 12:09:23.626 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@19c1f6f4
2025-06-25 12:09:23.626 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@46fa2a7e
2025-06-25 12:09:23.626 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@3d02ff64
2025-06-25 12:09:23.626 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@3d02ff64
2025-06-25 12:09:23.626 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@6f17dd06
2025-06-25 12:09:23.627 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@6f17dd06
2025-06-25 12:09:23.627 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@6f17dd06
2025-06-25 12:09:23.628 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@7977f046
2025-06-25 12:09:23.628 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@7977f046
2025-06-25 12:09:23.628 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@6ec98ccc
2025-06-25 12:09:23.628 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@6ec98ccc
2025-06-25 12:09:23.628 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@441aa7ae
2025-06-25 12:09:23.629 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@441aa7ae
2025-06-25 12:09:23.629 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@1534bdc6
2025-06-25 12:09:23.630 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@1534bdc6
2025-06-25 12:09:23.631 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@53079ae6
2025-06-25 12:09:23.631 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@53079ae6
2025-06-25 12:09:23.632 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@718ad3a6
2025-06-25 12:09:23.635 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@572b4072
2025-06-25 12:09:23.635 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@572b4072
2025-06-25 12:09:23.635 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@53e166ad
2025-06-25 12:09:23.635 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@30c03473
2025-06-25 12:09:23.635 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@20fa5277
2025-06-25 12:09:23.635 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@17a7d6c8
2025-06-25 12:09:23.636 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@4f2b1e9f
2025-06-25 12:09:23.636 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@7ef9c8a5
2025-06-25 12:09:23.636 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@c6244e7
2025-06-25 12:09:23.636 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@25dad235
2025-06-25 12:09:23.636 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@3292eff7
2025-06-25 12:09:23.734 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-25 12:09:23.748 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-25 12:09:23.846 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1842dc39
2025-06-25 12:09:23.847 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-25 12:09:23.876 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-25 12:09:23.876 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-25 12:09:23.892 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@27e3dc9a) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@49cd08f9)
2025-06-25 12:09:23.892 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@43549c6c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7792e14f)
2025-06-25 12:09:23.892 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4eace42b) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6f87a7c7)
2025-06-25 12:09:23.892 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@857f1a7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@682fe17b)
2025-06-25 12:09:23.892 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@418bdde9) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@13e0f380)
2025-06-25 12:09:23.892 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@240df292) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@333efb51)
2025-06-25 12:09:23.892 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2c451c4a) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@38ad86b1)
2025-06-25 12:09:23.892 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@73ff7a54) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@375ff309)
2025-06-25 12:09:23.893 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@337c0ee4) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@67b09e34)
2025-06-25 12:09:23.894 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-25 12:09:23.894 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-25 12:09:23.894 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-25 12:09:23.896 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 12:09:23.896 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 12:09:23.897 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@7f9e6167
2025-06-25 12:09:23.897 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@53e166ad`
2025-06-25 12:09:23.899 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-25 12:09:23.899 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-25 12:09:23.901 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 12:09:23.901 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 12:09:23.901 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 12:09:23.902 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 12:09:23.902 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 12:09:23.902 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 12:09:23.902 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 12:09:23.902 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 12:09:23.902 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 12:09:23.903 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@15a2fddd] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@452e2210]
2025-06-25 12:09:24.562 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@15a2fddd] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@18f1a81a]
2025-06-25 12:09:24.566 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@18f1a81a] for TypeConfiguration
2025-06-25 12:09:24.566 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 12:09:25.502 [main] INFO  c.d.extract.controller.AsyncExtractController - AsyncExtractController initialized successfully
2025-06-25 12:09:25.508 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-25 12:09:25.984 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-25 12:09:26.138 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-25 12:09:26.179 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 2
2025-06-25 12:09:26.179 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-25 12:09:26.180 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-25 12:09:26.181 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-25 12:09:26.613 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-25 12:09:26.627 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 7.154 seconds (process running for 7.987)
2025-06-25 12:09:57.793 [reactor-http-nio-6] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1
2025-06-25 12:09:57.812 [reactor-http-nio-6] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 121ms
2025-06-25 12:09:57.813 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-1, 文本长度: 32
2025-06-25 12:09:57.825 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 32 字符
2025-06-25 12:09:57.825 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 12:09:57.825 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 32，当前并发数: 1
2025-06-25 12:09:57.826 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 12:09:58.855 [reactor-http-nio-9] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities, textInputType: JSONArray, arraySize: 2
2025-06-25 12:09:58.856 [reactor-http-nio-9] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 12:09:58.856 [TextExtract-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-2, 文本长度: 44
2025-06-25 12:09:58.858 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 44 字符
2025-06-25 12:09:58.858 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 12:09:58.858 [TextExtract-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 44，当前并发数: 2
2025-06-25 12:09:58.858 [TextExtract-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 12:10:00.887 [reactor-http-nio-11] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 12:10:00.888 [reactor-http-nio-11] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 4ms
2025-06-25 12:10:00.888 [TextExtract-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-3, 文本长度: 90
2025-06-25 12:10:00.889 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 90 字符
2025-06-25 12:10:00.889 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 12:10:00.889 [TextExtract-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 90，当前并发数: 3
2025-06-25 12:10:00.889 [TextExtract-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 12:10:02.930 [reactor-http-nio-1] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 12:10:02.931 [reactor-http-nio-1] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 12:10:02.931 [TextExtract-4] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-4, 文本长度: 439
2025-06-25 12:10:02.931 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 439 字符
2025-06-25 12:10:02.931 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 12:10:02.931 [TextExtract-4] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 439，当前并发数: 4
2025-06-25 12:10:02.932 [TextExtract-4] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 12:10:04.959 [reactor-http-nio-3] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 12:10:04.960 [reactor-http-nio-3] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 12:10:04.961 [TextExtract-5] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-5, 文本长度: 2050
2025-06-25 12:10:04.961 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 2050 字符
2025-06-25 12:10:04.961 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - 📄 检测到长文本，启用分批处理模式
2025-06-25 12:10:04.961 [TextExtract-5] INFO  com.datacenter.extract.service.LongTextProcessor - 🔍 开始处理长文本，长度: 2050 字符
2025-06-25 12:10:04.964 [TextExtract-5] INFO  com.datacenter.extract.service.LongTextProcessor - 📊 文本分片完成，共 2 个分片
2025-06-25 12:10:04.968 [pool-5-thread-1] INFO  com.datacenter.extract.service.LongTextProcessor - ⚡ 处理分片 1 (1990 字符)
2025-06-25 12:10:04.968 [pool-5-thread-2] INFO  com.datacenter.extract.service.LongTextProcessor - ⚡ 处理分片 2 (238 字符)
2025-06-25 12:10:04.968 [pool-5-thread-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 1990，当前并发数: 5
2025-06-25 12:10:04.969 [pool-5-thread-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 40秒
2025-06-25 12:10:06.216 [reactor-http-nio-10] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 7358ms，响应长度: 362
2025-06-25 12:10:06.218 [pool-5-thread-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 238，当前并发数: 5
2025-06-25 12:10:06.218 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 44，处理模式: 直接处理
2025-06-25 12:10:06.218 [pool-5-thread-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 12:10:06.237 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 362
2025-06-25 12:10:06.238 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "执导",
      "object": "《英雄》",
      "confidence": 0.95
    },
    {
      "subject": "《英雄》",
      "predicate": "类型",
      "object": "古装武侠电影",
      "confidence": 0.95
    },
    {
      "subject": "《三体》三部曲",
      "predicate": "代表作品",
      "object": "刘慈欣",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:10:06.238 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "执导",
      "object": "《英雄》",
      "confidence": 0.95
    },
    {
      "subject": "《英雄》",
      "predicate": "类型",
      "object": "古装武侠电影",
      "confidence": 0.95
    },
    {
      "subject": "《三体》三部曲",
      "predicate": "代表作品",
      "object": "刘慈欣",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:10:06.239 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 12:10:06.239 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-25 12:10:06.316 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:10:06.338 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 12:10:06.340 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:10:06.355 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 12:10:06.367 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《英雄》 (通过三元组提取)
2025-06-25 12:10:06.375 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:10:06.384 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 12:10:06.389 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:10:06.391 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 张艺谋 -> 《英雄》 [执导]
2025-06-25 12:10:06.391 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[执导]--> 《英雄》
2025-06-25 12:10:06.393 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:10:06.395 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《英雄》 已存在，跳过插入
2025-06-25 12:10:06.395 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《英雄》 --[类型]--> 古装武侠电影
2025-06-25 12:10:06.396 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:10:06.399 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 12:10:06.403 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《三体》三部曲 (通过三元组提取)
2025-06-25 12:10:06.406 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:10:06.410 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 12:10:06.413 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 刘慈欣 (通过三元组提取)
2025-06-25 12:10:06.413 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《三体》三部曲 --[代表作品]--> 刘慈欣
2025-06-25 12:10:06.413 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 12:10:06.419 [TextExtract-2] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 44
2025-06-25 12:10:06.495 [reactor-http-nio-8] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 8669ms，响应长度: 463
2025-06-25 12:10:06.496 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 32，处理模式: 直接处理
2025-06-25 12:10:06.499 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 463
2025-06-25 12:10:06.499 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "演员",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "歌手",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出生地",
      "object": "香港",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出演作品",
      "object": "《无间道》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:10:06.499 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "演员",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "歌手",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出生地",
      "object": "香港",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出演作品",
      "object": "《无间道》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:10:06.501 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 12:10:06.501 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-25 12:10:06.503 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:10:06.506 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 12:10:06.507 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:10:06.510 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 12:10:06.514 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 演员 (通过三元组提取)
2025-06-25 12:10:06.516 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:10:06.522 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:10:06.525 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:10:06.527 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 演员 [职业]
2025-06-25 12:10:06.527 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[职业]--> 演员
2025-06-25 12:10:06.528 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:10:06.533 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 12:10:06.534 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:10:06.536 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 12:10:06.538 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 歌手 (通过三元组提取)
2025-06-25 12:10:06.540 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:10:06.543 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:10:06.545 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:10:06.547 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 歌手 [职业]
2025-06-25 12:10:06.547 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[职业]--> 歌手
2025-06-25 12:10:06.549 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:10:06.550 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 12:10:06.553 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:10:06.556 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 12:10:06.558 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 香港 (通过三元组提取)
2025-06-25 12:10:06.560 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:10:06.563 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:10:06.565 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:10:06.566 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 香港 [出生地]
2025-06-25 12:10:06.566 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[出生地]--> 香港
2025-06-25 12:10:06.567 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:10:06.569 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 12:10:06.570 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:10:06.572 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        work
        (awards, baike, description, `group`, platform, release_date, role, title, work_id, work_type) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 12:10:06.573 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存作品: 《无间道》 (通过三元组提取)
2025-06-25 12:10:06.575 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:10:06.579 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 12:10:06.582 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:10:06.583 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 刘德华 -> 《无间道》 [出演作品]
2025-06-25 12:10:06.583 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[出演作品]--> 《无间道》
2025-06-25 12:10:06.583 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 12:10:06.587 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 32
2025-06-25 12:10:11.469 [reactor-http-nio-12] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 10580ms，响应长度: 694
2025-06-25 12:10:11.471 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 90，处理模式: 直接处理
2025-06-25 12:10:11.476 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 694
2025-06-25 12:10:11.476 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张三",
      "predicate": "职业",
      "object": "软件工程师",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "工作地点",
      "object": "北京的一家科技公司",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "负责",
      "object": "开发人工智能系统",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "李四",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "王五",
      "confidence": 0.95
    },
    {
      "subject": "张三的团队",
      "predicate": "开发",
      "object": "智能对话系统",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:10:11.476 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张三",
      "predicate": "职业",
      "object": "软件工程师",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "工作地点",
      "object": "北京的一家科技公司",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "负责",
      "object": "开发人工智能系统",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "李四",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "王五",
      "confidence": 0.95
    },
    {
      "subject": "张三的团队",
      "predicate": "开发",
      "object": "智能对话系统",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:10:11.479 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 12:10:11.479 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 处理 6 个三元组，包括实体和关系保存
2025-06-25 12:10:11.485 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:10:11.491 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 张三 已存在，跳过插入
2025-06-25 12:10:11.492 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:10:11.494 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 软件工程师 已存在，跳过插入
2025-06-25 12:10:11.495 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:10:11.499 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:10:11.502 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:10:11.504 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 软件工程师 [职业]
2025-06-25 12:10:11.504 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[职业]--> 软件工程师
2025-06-25 12:10:11.505 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[工作地点]--> 北京的一家科技公司
2025-06-25 12:10:11.507 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:10:11.509 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 开发人工智能系统 已存在，跳过插入
2025-06-25 12:10:11.509 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[负责]--> 开发人工智能系统
2025-06-25 12:10:11.510 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:10:11.515 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 张三 已存在，跳过插入
2025-06-25 12:10:11.516 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:10:11.518 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 李四 已存在，跳过插入
2025-06-25 12:10:11.520 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:10:11.525 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:10:11.527 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:10:11.529 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 李四 [合作]
2025-06-25 12:10:11.529 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[合作]--> 李四
2025-06-25 12:10:11.531 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:10:11.533 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 张三 已存在，跳过插入
2025-06-25 12:10:11.535 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:10:11.537 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 王五 已存在，跳过插入
2025-06-25 12:10:11.538 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:10:11.546 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:10:11.549 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:10:11.551 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 王五 [合作]
2025-06-25 12:10:11.551 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[合作]--> 王五
2025-06-25 12:10:11.551 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三的团队 --[开发]--> 智能对话系统
2025-06-25 12:10:11.551 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 12:10:11.559 [TextExtract-3] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 90
2025-06-25 12:10:19.495 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 13277ms，响应长度: 910
2025-06-25 12:10:32.960 [parallel-5] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30028ms，错误: Did not observe any item or terminal signal within 30000ms in 'Mono.flatMap ⇢ at org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.bodyToMono(DefaultWebClient.java:570)' (and no fallback has been configured)
2025-06-25 12:10:32.961 [TextExtract-4] ERROR com.datacenter.extract.service.SmartAIProvider - ❌ AI提取失败，类型: entities,relations，文本长度: 439
2025-06-25 12:10:32.962 [TextExtract-4] ERROR com.datacenter.extract.service.SmartAIProvider - 💥 AI提取过程异常: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:77)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.service.TextExtractionService.processTextAsync(TextExtractionService.java:72)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.AsyncExecutionInterceptor.lambda$invoke$0(AsyncExecutionInterceptor.java:115)
	at java.base/java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:264)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 12:10:32.966 [TextExtract-4] ERROR c.datacenter.extract.service.TextExtractionService - 异步文本提取失败，错误: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-25 12:10:44.978 [parallel-6] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 40009ms，错误: Did not observe any item or terminal signal within 40000ms in 'Mono.flatMap ⇢ at org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.bodyToMono(DefaultWebClient.java:570)' (and no fallback has been configured)
2025-06-25 12:10:44.993 [TextExtract-5] INFO  com.datacenter.extract.service.LongTextProcessor - ✅ 分片合并完成，成功率: 2/2 ({:.1f}%)，提取三元组: 100.0
2025-06-25 12:10:44.995 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 2050，处理模式: 分批处理
2025-06-25 12:10:45.000 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 966
2025-06-25 12:10:45.000 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"团队","predicate":"签署","object":"技术转让协议","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"合作","object":"科技公司","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"研究","object":"多模态知识图谱","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"医疗","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"金融","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"教育","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"取得成就","object":"人工智能","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"取得成就","object":"知识图谱","confidence":0.95,"chunk_index":1,"chunk_start":0}],"total_chunks":2,"success_chunks":2,"success_rate":"100.00%","total_triples":8,"processing_method":"batch_processing","timestamp":1750824644993}
2025-06-25 12:10:45.000 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"团队","predicate":"签署","object":"技术转让协议","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"合作","object":"科技公司","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"研究","object":"多模态知识图谱","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"医疗","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"金融","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"教育","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"取得成就","object":"人工智能","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"取得成就","object":"知识图谱","confidence":0.95,"chunk_index":1,"chunk_start":0}],"total_chunks":2,"success_chunks":2,"success_rate":"100.00%","total_triples":8,"processing_method":"batch_processing","timestamp":1750824644993}
2025-06-25 12:10:45.004 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 7 个主要字段: [triples, total_chunks, success_chunks, success_rate, total_triples, processing_method, timestamp]
2025-06-25 12:10:45.005 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 处理 8 个三元组，包括实体和关系保存
2025-06-25 12:10:45.005 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[签署]--> 技术转让协议
2025-06-25 12:10:45.008 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:10:45.013 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 人员 团队 已存在，跳过插入
2025-06-25 12:10:45.014 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:10:45.018 [TextExtract-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 12:10:45.022 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 科技公司 (通过三元组提取)
2025-06-25 12:10:45.031 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:10:45.036 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:10:45.040 [TextExtract-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:10:45.042 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 团队 -> 科技公司 [合作]
2025-06-25 12:10:45.042 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[合作]--> 科技公司
2025-06-25 12:10:45.042 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[研究]--> 多模态知识图谱
2025-06-25 12:10:45.042 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[探索应用]--> 医疗
2025-06-25 12:10:45.042 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[探索应用]--> 金融
2025-06-25 12:10:45.042 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[探索应用]--> 教育
2025-06-25 12:10:45.042 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[取得成就]--> 人工智能
2025-06-25 12:10:45.043 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[取得成就]--> 知识图谱
2025-06-25 12:10:45.043 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 12:10:45.050 [TextExtract-5] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 2050
2025-06-25 12:17:04.808 [ForkJoinPool.commonPool-worker-2] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-25 12:17:04.817 [ForkJoinPool.commonPool-worker-2] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-25 12:17:04.824 [ForkJoinPool.commonPool-worker-2] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-25 12:17:04.829 [ForkJoinPool.commonPool-worker-2] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-25 12:17:04.835 [ForkJoinPool.commonPool-worker-2] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-25 12:17:04.843 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1, textLength: 38
2025-06-25 12:17:04.844 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 38, 参数: triples
2025-06-25 12:17:04.844 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-2, 文本长度: 38
2025-06-25 12:17:04.844 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 38 字符
2025-06-25 12:17:04.844 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 12:17:04.844 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 38，当前并发数: 1
2025-06-25 12:17:04.844 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 12:17:11.968 [reactor-http-nio-7] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 7124ms，响应长度: 351
2025-06-25 12:17:11.969 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 38，处理模式: 直接处理
2025-06-25 12:17:11.974 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 351
2025-06-25 12:17:11.974 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "合作伙伴",
      "object": "巩俐",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "配偶",
      "object": "陈婷",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "好友",
      "object": "梁朝伟",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:17:11.974 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "合作伙伴",
      "object": "巩俐",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "配偶",
      "object": "陈婷",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "好友",
      "object": "梁朝伟",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:17:11.977 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 12:17:11.977 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-25 12:17:11.979 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:17:11.983 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 12:17:11.985 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:17:11.989 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 巩俐 已存在，跳过插入
2025-06-25 12:17:12.000 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:17:12.009 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:17:12.014 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:17:12.017 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 巩俐 [合作伙伴]
2025-06-25 12:17:12.017 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[合作伙伴]--> 巩俐
2025-06-25 12:17:12.020 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:17:12.025 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 12:17:12.026 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:17:12.029 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 陈婷 已存在，跳过插入
2025-06-25 12:17:12.030 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:17:12.035 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:17:12.040 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:17:12.042 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 陈婷 [配偶]
2025-06-25 12:17:12.043 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[配偶]--> 陈婷
2025-06-25 12:17:12.045 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:17:12.047 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 12:17:12.049 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:17:12.052 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 梁朝伟 已存在，跳过插入
2025-06-25 12:17:12.053 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:17:12.056 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:17:12.059 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:17:12.061 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 梁朝伟 [好友]
2025-06-25 12:17:12.061 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[好友]--> 梁朝伟
2025-06-25 12:17:12.061 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 12:17:12.068 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 38
2025-06-25 12:17:12.068 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 7225ms
2025-06-25 12:17:13.094 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1, textLength: 40
2025-06-25 12:17:13.094 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 40, 参数: triples
2025-06-25 12:17:13.094 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-2, 文本长度: 40
2025-06-25 12:17:13.094 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 40 字符
2025-06-25 12:17:13.095 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 12:17:13.095 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 40，当前并发数: 1
2025-06-25 12:17:13.095 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 12:17:21.351 [reactor-http-nio-7] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 8256ms，响应长度: 356
2025-06-25 12:17:21.352 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 40，处理模式: 直接处理
2025-06-25 12:17:21.357 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 356
2025-06-25 12:17:21.357 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "巩俐",
      "predicate": "主演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "演唱",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:17:21.358 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "巩俐",
      "predicate": "主演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "演唱",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:17:21.358 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 12:17:21.359 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-25 12:17:21.361 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:17:21.366 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 12:17:21.368 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:17:21.372 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-25 12:17:21.375 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:17:21.382 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:17:21.388 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:17:21.393 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 《红高粱》 [导演]
2025-06-25 12:17:21.393 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《红高粱》
2025-06-25 12:17:21.394 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:17:21.398 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 巩俐 已存在，跳过插入
2025-06-25 12:17:21.399 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:17:21.402 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-25 12:17:21.404 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:17:21.410 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:17:21.418 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:17:21.421 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 巩俐 -> 《红高粱》 [主演]
2025-06-25 12:17:21.422 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 巩俐 --[主演]--> 《红高粱》
2025-06-25 12:17:21.423 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:17:21.426 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-25 12:17:21.431 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:17:21.435 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-25 12:17:21.437 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:17:21.442 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 12:17:21.446 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:17:21.448 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 周杰伦 -> 《青花瓷》 [演唱]
2025-06-25 12:17:21.448 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[演唱]--> 《青花瓷》
2025-06-25 12:17:21.448 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 12:17:21.453 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 40
2025-06-25 12:17:21.453 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 8359ms
2025-06-25 12:17:22.481 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1, textLength: 47
2025-06-25 12:17:22.481 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 47, 参数: triples
2025-06-25 12:17:22.481 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-2, 文本长度: 47
2025-06-25 12:17:22.481 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 47 字符
2025-06-25 12:17:22.481 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 12:17:22.482 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 47，当前并发数: 1
2025-06-25 12:17:22.482 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 12:17:29.376 [reactor-http-nio-7] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 6894ms，响应长度: 266
2025-06-25 12:17:29.377 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 47，处理模式: 直接处理
2025-06-25 12:17:29.383 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 266
2025-06-25 12:17:29.383 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "第41届柏林国际电影节颁奖典礼",
      "predicate": "举行于",
      "object": "1991年",
      "confidence": 0.95
    },
    {
      "subject": "2008年北京奥运会开幕式",
      "predicate": "举办于",
      "object": "鸟巢",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:17:29.384 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "第41届柏林国际电影节颁奖典礼",
      "predicate": "举行于",
      "object": "1991年",
      "confidence": 0.95
    },
    {
      "subject": "2008年北京奥运会开幕式",
      "predicate": "举办于",
      "object": "鸟巢",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:17:29.386 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 12:17:29.387 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组，包括实体和关系保存
2025-06-25 12:17:29.391 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 12:17:29.397 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        event
        (event_id, event_name, event_type, `group`, time) 
    values
        (?, ?, ?, ?, ?)
2025-06-25 12:17:29.400 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存事件: 第41届柏林国际电影节颁奖典礼 (通过三元组提取)
2025-06-25 12:17:29.403 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 12:17:29.406 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 事件 1991年 已存在，跳过插入
2025-06-25 12:17:29.406 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 第41届柏林国际电影节颁奖典礼 --[举行于]--> 1991年
2025-06-25 12:17:29.408 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 12:17:29.411 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 事件 2008年北京奥运会开幕式 已存在，跳过插入
2025-06-25 12:17:29.411 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 2008年北京奥运会开幕式 --[举办于]--> 鸟巢
2025-06-25 12:17:29.411 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 12:17:29.421 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 47
2025-06-25 12:17:29.421 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 6940ms
2025-06-25 12:17:29.443 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 3, textLength: 58
2025-06-25 12:17:29.444 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 58, 参数: triples
2025-06-25 12:17:29.444 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-2, 文本长度: 58
2025-06-25 12:17:29.444 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 58 字符
2025-06-25 12:17:29.444 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 12:17:29.444 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 58，当前并发数: 1
2025-06-25 12:17:29.444 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 12:17:38.083 [reactor-http-nio-7] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 8639ms，响应长度: 485
2025-06-25 12:17:38.083 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 58，处理模式: 直接处理
2025-06-25 12:17:38.089 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 485
2025-06-25 12:17:38.090 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "参加",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "获奖",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "担任",
      "object": "北京奥运会开幕式总导演",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "电影节终身成就奖",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:17:38.090 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "参加",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "获奖",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "担任",
      "object": "北京奥运会开幕式总导演",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "电影节终身成就奖",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:17:38.093 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 12:17:38.093 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-25 12:17:38.096 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:17:38.101 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 12:17:38.102 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 12:17:38.105 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 事件 柏林电影节颁奖典礼 已存在，跳过插入
2025-06-25 12:17:38.106 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:17:38.117 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 12:17:38.124 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:17:38.130 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 张艺谋 -> 柏林电影节颁奖典礼 [参加]
2025-06-25 12:17:38.130 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[参加]--> 柏林电影节颁奖典礼
2025-06-25 12:17:38.131 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:17:38.134 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 12:17:38.136 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 12:17:38.138 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 事件 柏林电影节颁奖典礼 已存在，跳过插入
2025-06-25 12:17:38.140 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:17:38.143 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 12:17:38.145 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:17:38.148 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 张艺谋 -> 柏林电影节颁奖典礼 [获奖]
2025-06-25 12:17:38.148 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[获奖]--> 柏林电影节颁奖典礼
2025-06-25 12:17:38.149 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:17:38.151 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 12:17:38.152 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 12:17:38.153 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 事件 北京奥运会开幕式总导演 已存在，跳过插入
2025-06-25 12:17:38.154 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:17:38.158 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 12:17:38.162 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:17:38.164 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 张艺谋 -> 北京奥运会开幕式总导演 [担任]
2025-06-25 12:17:38.165 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[担任]--> 北京奥运会开幕式总导演
2025-06-25 12:17:38.166 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:17:38.170 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 12:17:38.171 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:17:38.178 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 电影节终身成就奖 已存在，跳过插入
2025-06-25 12:17:38.179 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:17:38.184 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:17:38.187 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:17:38.190 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 成龙 -> 电影节终身成就奖 [获得]
2025-06-25 12:17:38.190 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[获得]--> 电影节终身成就奖
2025-06-25 12:17:38.190 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 12:17:38.194 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 58
2025-06-25 12:17:38.194 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 8751ms
2025-06-25 12:17:39.219 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 3, textLength: 56
2025-06-25 12:17:39.220 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 56, 参数: triples
2025-06-25 12:17:39.220 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-2, 文本长度: 56
2025-06-25 12:17:39.220 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 56 字符
2025-06-25 12:17:39.220 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 12:17:39.220 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 56，当前并发数: 1
2025-06-25 12:17:39.221 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 12:17:47.392 [reactor-http-nio-7] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 8171ms，响应长度: 481
2025-06-25 12:17:47.393 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 56，处理模式: 直接处理
2025-06-25 12:17:47.398 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 481
2025-06-25 12:17:47.399 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "《红高粱》",
      "predicate": "获得",
      "object": "金熊奖",
      "confidence": 0.95
    },
    {
      "subject": "《红高粱》",
      "predicate": "获奖地点",
      "object": "柏林电影节",
      "confidence": 0.95
    },
    {
      "subject": "《青花瓷》",
      "predicate": "演出地点",
      "object": "奥运会开幕式",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映地点",
      "object": "香港电影节",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:17:47.399 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "《红高粱》",
      "predicate": "获得",
      "object": "金熊奖",
      "confidence": 0.95
    },
    {
      "subject": "《红高粱》",
      "predicate": "获奖地点",
      "object": "柏林电影节",
      "confidence": 0.95
    },
    {
      "subject": "《青花瓷》",
      "predicate": "演出地点",
      "object": "奥运会开幕式",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映地点",
      "object": "香港电影节",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:17:47.400 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 12:17:47.400 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-25 12:17:47.404 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:17:47.408 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《红高粱》 已存在，跳过插入
2025-06-25 12:17:47.408 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《红高粱》 --[获得]--> 金熊奖
2025-06-25 12:17:47.408 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:17:47.410 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《红高粱》 已存在，跳过插入
2025-06-25 12:17:47.411 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 12:17:47.413 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 事件 柏林电影节 已存在，跳过插入
2025-06-25 12:17:47.417 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 12:17:47.422 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 12:17:47.425 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:17:47.427 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 柏林电影节 -> 《红高粱》 [在_获奖地点]
2025-06-25 12:17:47.427 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《红高粱》 --[获奖地点]--> 柏林电影节
2025-06-25 12:17:47.428 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:17:47.430 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-25 12:17:47.432 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 12:17:47.434 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 事件 奥运会开幕式 已存在，跳过插入
2025-06-25 12:17:47.436 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 12:17:47.439 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 12:17:47.442 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:17:47.444 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 奥运会开幕式 -> 《青花瓷》 [在_演出地点]
2025-06-25 12:17:47.445 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《青花瓷》 --[演出地点]--> 奥运会开幕式
2025-06-25 12:17:47.446 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:17:47.449 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《醉拳》 已存在，跳过插入
2025-06-25 12:17:47.450 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 12:17:47.451 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 事件 香港电影节 已存在，跳过插入
2025-06-25 12:17:47.453 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 12:17:47.456 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 12:17:47.460 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:17:47.463 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 香港电影节 -> 《醉拳》 [在_首映地点]
2025-06-25 12:17:47.463 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《醉拳》 --[首映地点]--> 香港电影节
2025-06-25 12:17:47.463 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 12:17:47.468 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 56
2025-06-25 12:17:47.468 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 8249ms
2025-06-25 12:17:48.490 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 4, textLength: 88
2025-06-25 12:17:48.490 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 88, 参数: triples
2025-06-25 12:17:48.490 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-2, 文本长度: 88
2025-06-25 12:17:48.490 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 88 字符
2025-06-25 12:17:48.491 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 12:17:48.491 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 88，当前并发数: 1
2025-06-25 12:17:48.491 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 12:18:00.698 [reactor-http-nio-7] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 12207ms，响应长度: 806
2025-06-25 12:18:00.699 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 88，处理模式: 直接处理
2025-06-25 12:18:00.703 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 806
2025-06-25 12:18:00.703 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "主演",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映于",
      "object": "香港电影节",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "参加",
      "object": "电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "终身成就奖",
      "confidence": 0.95
    },
    {
      "subject": "李小龙",
      "predicate": "师父",
      "object": "成龙",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《龙争虎斗》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:18:00.703 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "主演",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映于",
      "object": "香港电影节",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "参加",
      "object": "电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "终身成就奖",
      "confidence": 0.95
    },
    {
      "subject": "李小龙",
      "predicate": "师父",
      "object": "成龙",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《龙争虎斗》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:18:00.705 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 12:18:00.705 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 7 个三元组，包括实体和关系保存
2025-06-25 12:18:00.708 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:00.715 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 12:18:00.723 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:00.728 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 《醉拳》 已存在，跳过插入
2025-06-25 12:18:00.734 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:00.739 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:00.747 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:00.750 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 成龙 -> 《醉拳》 [主演]
2025-06-25 12:18:00.750 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[主演]--> 《醉拳》
2025-06-25 12:18:00.751 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:18:00.753 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《醉拳》 已存在，跳过插入
2025-06-25 12:18:00.757 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 12:18:00.758 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 事件 香港电影节 已存在，跳过插入
2025-06-25 12:18:00.759 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 12:18:00.762 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 12:18:00.765 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:00.767 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 香港电影节 -> 《醉拳》 [在_首映于]
2025-06-25 12:18:00.767 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《醉拳》 --[首映于]--> 香港电影节
2025-06-25 12:18:00.768 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:00.770 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 12:18:00.771 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 12:18:00.773 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 事件 电影节颁奖典礼 已存在，跳过插入
2025-06-25 12:18:00.774 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:00.776 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 12:18:00.779 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:00.781 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 成龙 -> 电影节颁奖典礼 [参加]
2025-06-25 12:18:00.781 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[参加]--> 电影节颁奖典礼
2025-06-25 12:18:00.782 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:00.784 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 12:18:00.788 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:00.790 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 终身成就奖 已存在，跳过插入
2025-06-25 12:18:00.791 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:00.794 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:00.797 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:00.799 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 成龙 -> 终身成就奖 [获得]
2025-06-25 12:18:00.799 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[获得]--> 终身成就奖
2025-06-25 12:18:00.800 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:00.801 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 李小龙 已存在，跳过插入
2025-06-25 12:18:00.802 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:00.804 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 12:18:00.804 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:00.809 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:00.812 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:00.815 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 李小龙 -> 成龙 [师父]
2025-06-25 12:18:00.815 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 李小龙 --[师父]--> 成龙
2025-06-25 12:18:00.816 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 12:18:00.818 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 事件 功夫电影节 已存在，跳过插入
2025-06-25 12:18:00.819 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:18:00.821 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《醉拳》 已存在，跳过插入
2025-06-25 12:18:00.822 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 12:18:00.825 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 12:18:00.826 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:00.828 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系: 功夫电影节 -> 《醉拳》 [展映]
2025-06-25 12:18:00.828 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 功夫电影节 --[展映]--> 《醉拳》
2025-06-25 12:18:00.829 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 12:18:00.830 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 事件 功夫电影节 已存在，跳过插入
2025-06-25 12:18:00.834 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:00.836 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 《龙争虎斗》 已存在，跳过插入
2025-06-25 12:18:00.837 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:00.840 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 12:18:00.842 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:00.844 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系(反向): 《龙争虎斗》 -> 功夫电影节 [参与_展映]
2025-06-25 12:18:00.844 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 功夫电影节 --[展映]--> 《龙争虎斗》
2025-06-25 12:18:00.844 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 12:18:00.849 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 88
2025-06-25 12:18:00.850 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 12361ms
2025-06-25 12:18:00.858 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1, textLength: 25
2025-06-25 12:18:00.858 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 25, 参数: triples
2025-06-25 12:18:00.858 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-2, 文本长度: 25
2025-06-25 12:18:00.858 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 25 字符
2025-06-25 12:18:00.858 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 12:18:00.858 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 25，当前并发数: 1
2025-06-25 12:18:00.858 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 12:18:06.640 [reactor-http-nio-7] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 5781ms，响应长度: 248
2025-06-25 12:18:06.640 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 25，处理模式: 直接处理
2025-06-25 12:18:06.646 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 248
2025-06-25 12:18:06.646 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语流行音乐歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "创作",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:18:06.646 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语流行音乐歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "创作",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:18:06.648 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 12:18:06.648 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组，包括实体和关系保存
2025-06-25 12:18:06.653 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:06.655 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-25 12:18:06.656 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:06.658 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 华语流行音乐歌手 已存在，跳过插入
2025-06-25 12:18:06.658 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:06.663 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:06.666 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:06.668 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 周杰伦 -> 华语流行音乐歌手 [职业]
2025-06-25 12:18:06.668 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[职业]--> 华语流行音乐歌手
2025-06-25 12:18:06.670 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:06.671 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-25 12:18:06.672 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:18:06.674 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-25 12:18:06.675 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:06.678 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 12:18:06.682 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:06.684 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 周杰伦 -> 《青花瓷》 [创作]
2025-06-25 12:18:06.684 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[创作]--> 《青花瓷》
2025-06-25 12:18:06.684 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 12:18:06.688 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 25
2025-06-25 12:18:06.688 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 5830ms
2025-06-25 12:18:07.706 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 3, textLength: 42
2025-06-25 12:18:07.706 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 42, 参数: triples
2025-06-25 12:18:07.707 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-2, 文本长度: 42
2025-06-25 12:18:07.707 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 42 字符
2025-06-25 12:18:07.707 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 12:18:07.707 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 42，当前并发数: 1
2025-06-25 12:18:07.707 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 12:18:15.355 [reactor-http-nio-8] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 7648ms，响应长度: 360
2025-06-25 12:18:15.355 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 42，处理模式: 直接处理
2025-06-25 12:18:15.361 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 360
2025-06-25 12:18:15.362 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语流行音乐歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "创作",
      "object": "《青花瓷》",
      "confidence": 0.95
    },
    {
      "subject": "《青花瓷》",
      "predicate": "获奖",
      "object": "金曲奖",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:18:15.362 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语流行音乐歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "创作",
      "object": "《青花瓷》",
      "confidence": 0.95
    },
    {
      "subject": "《青花瓷》",
      "predicate": "获奖",
      "object": "金曲奖",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:18:15.367 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 12:18:15.368 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-25 12:18:15.370 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:15.373 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-25 12:18:15.374 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:15.381 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 华语流行音乐歌手 已存在，跳过插入
2025-06-25 12:18:15.383 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:15.388 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:15.390 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:15.393 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 周杰伦 -> 华语流行音乐歌手 [职业]
2025-06-25 12:18:15.393 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[职业]--> 华语流行音乐歌手
2025-06-25 12:18:15.395 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:15.397 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-25 12:18:15.398 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:18:15.400 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-25 12:18:15.401 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:15.404 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 12:18:15.408 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:15.411 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 周杰伦 -> 《青花瓷》 [创作]
2025-06-25 12:18:15.411 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[创作]--> 《青花瓷》
2025-06-25 12:18:15.412 [ForkJoinPool.commonPool-worker-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:18:15.415 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-25 12:18:15.415 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《青花瓷》 --[获奖]--> 金曲奖
2025-06-25 12:18:15.415 [ForkJoinPool.commonPool-worker-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 12:18:15.424 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 42
2025-06-25 12:18:15.424 [ForkJoinPool.commonPool-worker-2] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 7718ms
2025-06-25 12:18:15.462 [reactor-http-nio-11] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1
2025-06-25 12:18:15.462 [reactor-http-nio-11] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 0ms
2025-06-25 12:18:15.462 [TextExtract-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-2, 文本长度: 32
2025-06-25 12:18:15.465 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 463
2025-06-25 12:18:15.465 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "演员",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "歌手",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出生地",
      "object": "香港",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出演作品",
      "object": "《无间道》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:18:15.465 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "演员",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "歌手",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出生地",
      "object": "香港",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出演作品",
      "object": "《无间道》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:18:15.466 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 12:18:15.466 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-25 12:18:15.467 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:15.470 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 12:18:15.472 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:15.475 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 演员 已存在，跳过插入
2025-06-25 12:18:15.476 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:15.479 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:15.482 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:15.486 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 演员 [职业]
2025-06-25 12:18:15.486 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[职业]--> 演员
2025-06-25 12:18:15.487 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:15.491 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 12:18:15.492 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:15.494 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 歌手 已存在，跳过插入
2025-06-25 12:18:15.494 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:15.496 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:15.499 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:15.501 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 歌手 [职业]
2025-06-25 12:18:15.501 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[职业]--> 歌手
2025-06-25 12:18:15.501 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:15.503 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 12:18:15.503 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:15.505 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 香港 已存在，跳过插入
2025-06-25 12:18:15.506 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:15.509 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:15.511 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:15.512 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 香港 [出生地]
2025-06-25 12:18:15.512 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[出生地]--> 香港
2025-06-25 12:18:15.513 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:15.515 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 12:18:15.515 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:18:15.517 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《无间道》 已存在，跳过插入
2025-06-25 12:18:15.517 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:15.519 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 12:18:15.521 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:15.522 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 刘德华 -> 《无间道》 [出演作品]
2025-06-25 12:18:15.522 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[出演作品]--> 《无间道》
2025-06-25 12:18:15.522 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 12:18:15.525 [TextExtract-2] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 32
2025-06-25 12:18:16.483 [reactor-http-nio-12] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities, textInputType: JSONArray, arraySize: 2
2025-06-25 12:18:16.484 [reactor-http-nio-12] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 12:18:16.484 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-1, 文本长度: 44
2025-06-25 12:18:16.486 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 362
2025-06-25 12:18:16.486 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "执导",
      "object": "《英雄》",
      "confidence": 0.95
    },
    {
      "subject": "《英雄》",
      "predicate": "类型",
      "object": "古装武侠电影",
      "confidence": 0.95
    },
    {
      "subject": "《三体》三部曲",
      "predicate": "代表作品",
      "object": "刘慈欣",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:18:16.486 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "执导",
      "object": "《英雄》",
      "confidence": 0.95
    },
    {
      "subject": "《英雄》",
      "predicate": "类型",
      "object": "古装武侠电影",
      "confidence": 0.95
    },
    {
      "subject": "《三体》三部曲",
      "predicate": "代表作品",
      "object": "刘慈欣",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:18:16.487 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 12:18:16.487 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-25 12:18:16.487 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:16.489 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 12:18:16.490 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:18:16.491 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《英雄》 已存在，跳过插入
2025-06-25 12:18:16.491 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:16.494 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 12:18:16.496 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:16.498 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 张艺谋 -> 《英雄》 [执导]
2025-06-25 12:18:16.498 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[执导]--> 《英雄》
2025-06-25 12:18:16.499 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:18:16.502 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《英雄》 已存在，跳过插入
2025-06-25 12:18:16.502 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《英雄》 --[类型]--> 古装武侠电影
2025-06-25 12:18:16.503 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:18:16.507 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《三体》三部曲 已存在，跳过插入
2025-06-25 12:18:16.510 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 12:18:16.513 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 刘慈欣 已存在，跳过插入
2025-06-25 12:18:16.513 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《三体》三部曲 --[代表作品]--> 刘慈欣
2025-06-25 12:18:16.513 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 12:18:16.518 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 44
2025-06-25 12:18:18.502 [reactor-http-nio-1] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 12:18:18.502 [reactor-http-nio-1] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 0ms
2025-06-25 12:18:18.502 [TextExtract-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-3, 文本长度: 90
2025-06-25 12:18:18.506 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 694
2025-06-25 12:18:18.506 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张三",
      "predicate": "职业",
      "object": "软件工程师",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "工作地点",
      "object": "北京的一家科技公司",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "负责",
      "object": "开发人工智能系统",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "李四",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "王五",
      "confidence": 0.95
    },
    {
      "subject": "张三的团队",
      "predicate": "开发",
      "object": "智能对话系统",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:18:18.506 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张三",
      "predicate": "职业",
      "object": "软件工程师",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "工作地点",
      "object": "北京的一家科技公司",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "负责",
      "object": "开发人工智能系统",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "李四",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "王五",
      "confidence": 0.95
    },
    {
      "subject": "张三的团队",
      "predicate": "开发",
      "object": "智能对话系统",
      "confidence": 0.95
    }
  ]
}
2025-06-25 12:18:18.507 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 12:18:18.507 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 处理 6 个三元组，包括实体和关系保存
2025-06-25 12:18:18.508 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:18.510 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 张三 已存在，跳过插入
2025-06-25 12:18:18.510 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:18.512 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 软件工程师 已存在，跳过插入
2025-06-25 12:18:18.514 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:18.519 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:18.522 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:18.525 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 软件工程师 [职业]
2025-06-25 12:18:18.525 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[职业]--> 软件工程师
2025-06-25 12:18:18.525 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[工作地点]--> 北京的一家科技公司
2025-06-25 12:18:18.527 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:18.529 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 开发人工智能系统 已存在，跳过插入
2025-06-25 12:18:18.529 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[负责]--> 开发人工智能系统
2025-06-25 12:18:18.530 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:18.532 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 张三 已存在，跳过插入
2025-06-25 12:18:18.533 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:18.536 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 李四 已存在，跳过插入
2025-06-25 12:18:18.537 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:18.541 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:18.543 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:18.545 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 李四 [合作]
2025-06-25 12:18:18.545 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[合作]--> 李四
2025-06-25 12:18:18.545 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:18.547 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 张三 已存在，跳过插入
2025-06-25 12:18:18.548 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:18.550 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 王五 已存在，跳过插入
2025-06-25 12:18:18.550 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:18.555 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:18.560 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:18.562 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 王五 [合作]
2025-06-25 12:18:18.562 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[合作]--> 王五
2025-06-25 12:18:18.562 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三的团队 --[开发]--> 智能对话系统
2025-06-25 12:18:18.562 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 12:18:18.566 [TextExtract-3] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 90
2025-06-25 12:18:20.520 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 12:18:20.521 [reactor-http-nio-2] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 12:18:20.521 [TextExtract-4] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-4, 文本长度: 439
2025-06-25 12:18:20.521 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 439 字符
2025-06-25 12:18:20.521 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 12:18:20.521 [TextExtract-4] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 439，当前并发数: 1
2025-06-25 12:18:20.521 [TextExtract-4] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 12:18:22.542 [reactor-http-nio-3] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 12:18:22.542 [reactor-http-nio-3] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 12:18:22.542 [TextExtract-5] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-5, 文本长度: 2050
2025-06-25 12:18:22.546 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 966
2025-06-25 12:18:22.546 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"团队","predicate":"签署","object":"技术转让协议","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"合作","object":"科技公司","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"研究","object":"多模态知识图谱","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"医疗","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"金融","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"教育","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"取得成就","object":"人工智能","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"取得成就","object":"知识图谱","confidence":0.95,"chunk_index":1,"chunk_start":0}],"total_chunks":2,"success_chunks":2,"success_rate":"100.00%","total_triples":8,"processing_method":"batch_processing","timestamp":1750824644993}
2025-06-25 12:18:22.546 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"团队","predicate":"签署","object":"技术转让协议","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"合作","object":"科技公司","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"研究","object":"多模态知识图谱","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"医疗","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"金融","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"教育","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"取得成就","object":"人工智能","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"取得成就","object":"知识图谱","confidence":0.95,"chunk_index":1,"chunk_start":0}],"total_chunks":2,"success_chunks":2,"success_rate":"100.00%","total_triples":8,"processing_method":"batch_processing","timestamp":1750824644993}
2025-06-25 12:18:22.548 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 7 个主要字段: [triples, total_chunks, success_chunks, success_rate, total_triples, processing_method, timestamp]
2025-06-25 12:18:22.548 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 处理 8 个三元组，包括实体和关系保存
2025-06-25 12:18:22.548 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[签署]--> 技术转让协议
2025-06-25 12:18:22.549 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:22.552 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 人员 团队 已存在，跳过插入
2025-06-25 12:18:22.552 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 12:18:22.554 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 人员 科技公司 已存在，跳过插入
2025-06-25 12:18:22.555 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:22.557 [TextExtract-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 12:18:22.559 [TextExtract-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 12:18:22.561 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 团队 -> 科技公司 [合作]
2025-06-25 12:18:22.562 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[合作]--> 科技公司
2025-06-25 12:18:22.564 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[研究]--> 多模态知识图谱
2025-06-25 12:18:22.564 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[探索应用]--> 医疗
2025-06-25 12:18:22.564 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[探索应用]--> 金融
2025-06-25 12:18:22.564 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[探索应用]--> 教育
2025-06-25 12:18:22.564 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[取得成就]--> 人工智能
2025-06-25 12:18:22.564 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[取得成就]--> 知识图谱
2025-06-25 12:18:22.564 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 12:18:22.571 [TextExtract-5] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 2050
2025-06-25 12:18:50.525 [parallel-6] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30004ms，错误: Did not observe any item or terminal signal within 30000ms in 'Mono.flatMap ⇢ at org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.bodyToMono(DefaultWebClient.java:570)' (and no fallback has been configured)
2025-06-25 12:18:50.526 [TextExtract-4] ERROR com.datacenter.extract.service.SmartAIProvider - ❌ AI提取失败，类型: entities,relations，文本长度: 439
2025-06-25 12:18:50.526 [TextExtract-4] ERROR com.datacenter.extract.service.SmartAIProvider - 💥 AI提取过程异常: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:77)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.service.TextExtractionService.processTextAsync(TextExtractionService.java:72)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.AsyncExecutionInterceptor.lambda$invoke$0(AsyncExecutionInterceptor.java:115)
	at java.base/java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:264)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 12:18:50.526 [TextExtract-4] ERROR c.datacenter.extract.service.TextExtractionService - 异步文本提取失败，错误: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-25 12:18:55.663 [SpringApplicationShutdownHook] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 12:18:55.664 [SpringApplicationShutdownHook] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@18f1a81a] for TypeConfiguration
2025-06-25 12:18:55.664 [SpringApplicationShutdownHook] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@69f0485a] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@18f1a81a]
2025-06-25 12:18:55.666 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-25 12:18:55.674 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-25 15:43:07.073 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 85527 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-25 15:43:07.075 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-25 15:43:08.037 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 15:43:08.038 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-25 15:43:08.148 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 106 ms. Found 7 JPA repository interfaces.
2025-06-25 15:43:08.172 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 15:43:08.174 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-25 15:43:08.190 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityCelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 15:43:08.191 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityEventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 15:43:08.191 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 15:43:08.191 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 15:43:08.191 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 15:43:08.191 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 15:43:08.191 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 15:43:08.192 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 13 ms. Found 0 Redis repository interfaces.
2025-06-25 15:43:11.315 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@173cfb01
2025-06-25 15:43:11.316 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@173cfb01
2025-06-25 15:43:11.316 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@173cfb01
2025-06-25 15:43:11.316 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@249a45fd
2025-06-25 15:43:11.316 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@249a45fd
2025-06-25 15:43:11.316 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@268f0ff3
2025-06-25 15:43:11.317 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@268f0ff3
2025-06-25 15:43:11.319 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@11978f52
2025-06-25 15:43:11.319 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@11978f52
2025-06-25 15:43:11.319 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@3e0855b0
2025-06-25 15:43:11.319 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@3e0855b0
2025-06-25 15:43:11.319 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@3e0855b0
2025-06-25 15:43:11.319 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@484b5a21
2025-06-25 15:43:11.320 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@484b5a21
2025-06-25 15:43:11.320 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@484b5a21
2025-06-25 15:43:11.321 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@16e5344c
2025-06-25 15:43:11.321 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@16e5344c
2025-06-25 15:43:11.321 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@55746340
2025-06-25 15:43:11.321 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@6a0c7af6
2025-06-25 15:43:11.321 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@6a0c7af6
2025-06-25 15:43:11.321 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@7f1ad846
2025-06-25 15:43:11.321 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-25 15:43:11.322 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-25 15:43:11.322 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-25 15:43:11.322 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-25 15:43:11.322 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-25 15:43:11.322 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-25 15:43:11.322 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-25 15:43:11.322 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-25 15:43:11.322 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-25 15:43:11.322 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-25 15:43:11.322 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-25 15:43:11.322 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-25 15:43:11.323 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-25 15:43:11.323 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-25 15:43:11.324 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-25 15:43:11.324 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-25 15:43:11.324 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-25 15:43:11.325 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-25 15:43:11.325 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-25 15:43:11.325 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-25 15:43:11.325 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 15:43:11.325 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 15:43:11.325 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 15:43:11.325 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-25 15:43:11.326 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-25 15:43:11.326 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-25 15:43:11.326 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@5e7e7a7e
2025-06-25 15:43:11.326 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-25 15:43:11.326 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-25 15:43:11.326 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-25 15:43:11.326 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-25 15:43:11.327 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-25 15:43:11.328 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@5abc5854
2025-06-25 15:43:11.328 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-25 15:43:11.328 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-25 15:43:11.328 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-25 15:43:11.328 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-25 15:43:11.328 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-25 15:43:11.328 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-25 15:43:11.328 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-25 15:43:11.328 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-25 15:43:11.328 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 15:43:11.329 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-25 15:43:11.329 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-25 15:43:11.329 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-25 15:43:11.329 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-25 15:43:11.329 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-25 15:43:11.329 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-25 15:43:11.329 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-25 15:43:11.329 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@586486c
2025-06-25 15:43:11.329 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@586486c
2025-06-25 15:43:11.329 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-25 15:43:11.329 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-25 15:43:11.329 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@7fbbdd8a
2025-06-25 15:43:11.329 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-25 15:43:11.330 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-25 15:43:11.332 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-25 15:43:11.333 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 15:43:11.333 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 15:43:11.333 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 15:43:11.334 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 15:43:11.334 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 15:43:11.334 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 15:43:11.334 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 15:43:11.335 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-25 15:43:11.335 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-25 15:43:11.335 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-25 15:43:11.335 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-25 15:43:11.335 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-25 15:43:11.335 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-25 15:43:11.335 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-25 15:43:11.335 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 15:43:11.335 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 15:43:11.336 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 15:43:11.336 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-25 15:43:11.336 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 15:43:11.336 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 15:43:11.336 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 15:43:11.336 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 15:43:11.336 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 15:43:11.336 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 15:43:11.336 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 15:43:11.336 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 15:43:11.336 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-25 15:43:11.337 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-25 15:43:11.337 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-25 15:43:11.338 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-25 15:43:11.338 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-25 15:43:11.338 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-25 15:43:11.338 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-25 15:43:11.339 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-25 15:43:11.340 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-25 15:43:11.340 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@2a259f6f
2025-06-25 15:43:11.341 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@2a259f6f
2025-06-25 15:43:11.341 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@7ccf6114
2025-06-25 15:43:11.342 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@7ccf6114
2025-06-25 15:43:11.342 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@3df3410a
2025-06-25 15:43:11.342 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@3df3410a
2025-06-25 15:43:11.342 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-25 15:43:11.344 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@7a274521
2025-06-25 15:43:11.344 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@7a274521
2025-06-25 15:43:11.346 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@e171f93
2025-06-25 15:43:11.346 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@4ad3969
2025-06-25 15:43:11.348 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@5d7ff311
2025-06-25 15:43:11.349 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@2d7aa291
2025-06-25 15:43:11.350 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@1ba7db2a
2025-06-25 15:43:11.351 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@762cdf46
2025-06-25 15:43:11.352 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@54e94de9
2025-06-25 15:43:11.352 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@2cff03cf
2025-06-25 15:43:11.352 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@924f3f1
2025-06-25 15:43:11.448 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-25 15:43:11.462 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-25 15:43:11.559 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7c68a63c
2025-06-25 15:43:11.560 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-25 15:43:11.591 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-25 15:43:11.591 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-25 15:43:11.609 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7c359808) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1f013047)
2025-06-25 15:43:11.610 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@16361e61) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@51566ce0)
2025-06-25 15:43:11.610 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1734b1a) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@17e6d07b)
2025-06-25 15:43:11.610 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@318511f0) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@53564a4c)
2025-06-25 15:43:11.610 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4866e0a7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@69a294d8)
2025-06-25 15:43:11.610 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@70b1028d) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@11d422fd)
2025-06-25 15:43:11.610 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6e489bb8) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1331d6fd)
2025-06-25 15:43:11.611 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6b6c0b7c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5b1f0f26)
2025-06-25 15:43:11.612 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7120daa6) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6cbb6c41)
2025-06-25 15:43:11.613 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-25 15:43:11.613 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-25 15:43:11.614 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-25 15:43:11.614 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 15:43:11.615 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 15:43:11.616 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@90394d
2025-06-25 15:43:11.616 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@e171f93`
2025-06-25 15:43:11.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-25 15:43:11.618 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-25 15:43:11.619 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 15:43:11.619 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 15:43:11.619 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 15:43:11.620 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 15:43:11.620 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 15:43:11.620 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 15:43:11.620 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 15:43:11.620 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 15:43:11.620 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 15:43:11.621 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@1d1deb11] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@18d1d137]
2025-06-25 15:43:12.274 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@1d1deb11] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@614d01b]
2025-06-25 15:43:12.279 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@614d01b] for TypeConfiguration
2025-06-25 15:43:12.279 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 15:43:12.952 [main] INFO  c.d.extract.controller.AsyncExtractController - AsyncExtractController initialized successfully
2025-06-25 15:43:12.957 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-25 15:43:13.385 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-25 15:43:13.508 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-25 15:43:13.541 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 2
2025-06-25 15:43:13.542 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-25 15:43:13.542 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-25 15:43:13.543 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-25 15:43:13.966 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-25 15:43:13.983 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 7.502 seconds (process running for 8.129)
2025-06-25 15:44:27.148 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-25 15:44:27.172 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-25 15:44:27.180 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-25 15:44:27.186 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-25 15:44:27.193 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-25 15:44:27.209 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1, textLength: 38
2025-06-25 15:44:27.212 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 38, 参数: triples
2025-06-25 15:44:27.214 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-1, 文本长度: 38
2025-06-25 15:44:27.225 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 38 字符
2025-06-25 15:44:27.225 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:44:27.225 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 38，当前并发数: 1
2025-06-25 15:44:27.225 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:44:37.090 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 9864ms，响应长度: 351
2025-06-25 15:44:37.096 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 38，处理模式: 直接处理
2025-06-25 15:44:37.116 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 351
2025-06-25 15:44:37.117 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "合作伙伴",
      "object": "巩俐",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "配偶",
      "object": "陈婷",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "好友",
      "object": "梁朝伟",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:44:37.117 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "合作伙伴",
      "object": "巩俐",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "配偶",
      "object": "陈婷",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "好友",
      "object": "梁朝伟",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:44:37.119 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 15:44:37.120 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-25 15:44:37.196 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:44:37.215 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 15:44:37.216 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:44:37.220 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 巩俐 已存在，跳过插入
2025-06-25 15:44:37.227 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:44:37.273 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:44:37.313 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:44:37.331 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 巩俐 [合作伙伴]
2025-06-25 15:44:37.332 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[合作伙伴]--> 巩俐
2025-06-25 15:44:37.336 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:44:37.340 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 15:44:37.341 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:44:37.343 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 陈婷 已存在，跳过插入
2025-06-25 15:44:37.345 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:44:37.349 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:44:37.351 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:44:37.355 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 陈婷 [配偶]
2025-06-25 15:44:37.355 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[配偶]--> 陈婷
2025-06-25 15:44:37.358 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:44:37.364 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 15:44:37.365 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:44:37.367 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 梁朝伟 已存在，跳过插入
2025-06-25 15:44:37.368 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:44:37.374 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:44:37.376 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:44:37.378 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 梁朝伟 [好友]
2025-06-25 15:44:37.378 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[好友]--> 梁朝伟
2025-06-25 15:44:37.378 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:44:37.386 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 38
2025-06-25 15:44:37.387 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 10182ms
2025-06-25 15:44:38.418 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1, textLength: 40
2025-06-25 15:44:38.419 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 40, 参数: triples
2025-06-25 15:44:38.421 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-1, 文本长度: 40
2025-06-25 15:44:38.426 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 40 字符
2025-06-25 15:44:38.427 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:44:38.427 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 40，当前并发数: 1
2025-06-25 15:44:38.427 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:44:48.299 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 9872ms，响应长度: 356
2025-06-25 15:44:48.300 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 40，处理模式: 直接处理
2025-06-25 15:44:48.305 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 356
2025-06-25 15:44:48.305 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "巩俐",
      "predicate": "主演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "演唱",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:44:48.305 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "导演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "巩俐",
      "predicate": "主演",
      "object": "《红高粱》",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "演唱",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:44:48.308 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 15:44:48.308 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-25 15:44:48.310 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:44:48.315 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 15:44:48.317 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:44:48.319 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-25 15:44:48.321 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:44:48.328 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:44:48.333 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:44:48.336 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张艺谋 -> 《红高粱》 [导演]
2025-06-25 15:44:48.337 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[导演]--> 《红高粱》
2025-06-25 15:44:48.338 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:44:48.341 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 巩俐 已存在，跳过插入
2025-06-25 15:44:48.342 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:44:48.345 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 《红高粱》 已存在，跳过插入
2025-06-25 15:44:48.346 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:44:48.352 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:44:48.356 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:44:48.358 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 巩俐 -> 《红高粱》 [主演]
2025-06-25 15:44:48.358 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 巩俐 --[主演]--> 《红高粱》
2025-06-25 15:44:48.360 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:44:48.363 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-25 15:44:48.368 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:44:48.371 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-25 15:44:48.373 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:44:48.379 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 15:44:48.384 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:44:48.386 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 周杰伦 -> 《青花瓷》 [演唱]
2025-06-25 15:44:48.387 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[演唱]--> 《青花瓷》
2025-06-25 15:44:48.387 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:44:48.391 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 40
2025-06-25 15:44:48.391 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 9974ms
2025-06-25 15:44:49.411 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1, textLength: 47
2025-06-25 15:44:49.412 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 47, 参数: triples
2025-06-25 15:44:49.412 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-1, 文本长度: 47
2025-06-25 15:44:49.412 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 47 字符
2025-06-25 15:44:49.412 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:44:49.412 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 47，当前并发数: 1
2025-06-25 15:44:49.413 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:44:57.993 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 8579ms，响应长度: 264
2025-06-25 15:44:57.994 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 47，处理模式: 直接处理
2025-06-25 15:44:58.001 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 264
2025-06-25 15:44:58.002 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "第41届柏林国际电影节",
      "predicate": "举行时间",
      "object": "1991年",
      "confidence": 0.95
    },
    {
      "subject": "2008年北京奥运会开幕式",
      "predicate": "举办地点",
      "object": "鸟巢",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:44:58.003 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "第41届柏林国际电影节",
      "predicate": "举行时间",
      "object": "1991年",
      "confidence": 0.95
    },
    {
      "subject": "2008年北京奥运会开幕式",
      "predicate": "举办地点",
      "object": "鸟巢",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:44:58.004 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 15:44:58.004 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组，包括实体和关系保存
2025-06-25 15:44:58.008 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:44:58.012 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 第41届柏林国际电影节 已存在，跳过插入
2025-06-25 15:44:58.014 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:44:58.019 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 1991年 已存在，跳过插入
2025-06-25 15:44:58.019 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 第41届柏林国际电影节 --[举行时间]--> 1991年
2025-06-25 15:44:58.021 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:44:58.024 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 2008年北京奥运会开幕式 已存在，跳过插入
2025-06-25 15:44:58.024 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 2008年北京奥运会开幕式 --[举办地点]--> 鸟巢
2025-06-25 15:44:58.024 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:44:58.026 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 47
2025-06-25 15:44:58.027 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 8616ms
2025-06-25 15:44:58.045 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 3, textLength: 58
2025-06-25 15:44:58.045 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 58, 参数: triples
2025-06-25 15:44:58.045 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-1, 文本长度: 58
2025-06-25 15:44:58.045 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 58 字符
2025-06-25 15:44:58.045 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:44:58.045 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 58，当前并发数: 1
2025-06-25 15:44:58.045 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:45:08.697 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 10652ms，响应长度: 485
2025-06-25 15:45:08.697 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 58，处理模式: 直接处理
2025-06-25 15:45:08.701 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 485
2025-06-25 15:45:08.701 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "参加",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "获奖",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "担任",
      "object": "北京奥运会开幕式总导演",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "电影节终身成就奖",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:45:08.701 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "参加",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "获奖",
      "object": "柏林电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "张艺谋",
      "predicate": "担任",
      "object": "北京奥运会开幕式总导演",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "电影节终身成就奖",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:45:08.703 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 15:45:08.703 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-25 15:45:08.705 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:08.708 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 15:45:08.710 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:45:08.713 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 柏林电影节颁奖典礼 已存在，跳过插入
2025-06-25 15:45:08.714 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:08.728 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 15:45:08.732 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:08.737 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 张艺谋 -> 柏林电影节颁奖典礼 [参加]
2025-06-25 15:45:08.737 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[参加]--> 柏林电影节颁奖典礼
2025-06-25 15:45:08.739 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:08.743 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 15:45:08.744 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:45:08.745 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 柏林电影节颁奖典礼 已存在，跳过插入
2025-06-25 15:45:08.748 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:08.752 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 15:45:08.754 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:08.758 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 张艺谋 -> 柏林电影节颁奖典礼 [获奖]
2025-06-25 15:45:08.758 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[获奖]--> 柏林电影节颁奖典礼
2025-06-25 15:45:08.759 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:08.761 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 15:45:08.762 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:45:08.763 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 北京奥运会开幕式总导演 已存在，跳过插入
2025-06-25 15:45:08.766 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:08.775 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 15:45:08.778 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:08.780 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 张艺谋 -> 北京奥运会开幕式总导演 [担任]
2025-06-25 15:45:08.780 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[担任]--> 北京奥运会开幕式总导演
2025-06-25 15:45:08.782 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:08.784 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 15:45:08.785 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:08.787 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 电影节终身成就奖 已存在，跳过插入
2025-06-25 15:45:08.789 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:08.792 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:08.794 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:08.795 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 成龙 -> 电影节终身成就奖 [获得]
2025-06-25 15:45:08.795 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[获得]--> 电影节终身成就奖
2025-06-25 15:45:08.795 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:45:08.799 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 58
2025-06-25 15:45:08.800 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 10756ms
2025-06-25 15:45:09.818 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 3, textLength: 56
2025-06-25 15:45:09.818 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 56, 参数: triples
2025-06-25 15:45:09.818 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-1, 文本长度: 56
2025-06-25 15:45:09.818 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 56 字符
2025-06-25 15:45:09.819 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:45:09.819 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 56，当前并发数: 1
2025-06-25 15:45:09.819 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:45:21.193 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 11374ms，响应长度: 477
2025-06-25 15:45:21.193 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 56，处理模式: 直接处理
2025-06-25 15:45:21.196 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 477
2025-06-25 15:45:21.196 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "《红高粱》",
      "predicate": "获奖",
      "object": "金熊奖",
      "confidence": 0.95
    },
    {
      "subject": "《红高粱》",
      "predicate": "获奖地点",
      "object": "柏林电影节",
      "confidence": 0.95
    },
    {
      "subject": "《青花瓷》",
      "predicate": "演出",
      "object": "奥运会开幕式",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映",
      "object": "香港电影节",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:45:21.196 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "《红高粱》",
      "predicate": "获奖",
      "object": "金熊奖",
      "confidence": 0.95
    },
    {
      "subject": "《红高粱》",
      "predicate": "获奖地点",
      "object": "柏林电影节",
      "confidence": 0.95
    },
    {
      "subject": "《青花瓷》",
      "predicate": "演出",
      "object": "奥运会开幕式",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映",
      "object": "香港电影节",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:45:21.197 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 15:45:21.197 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-25 15:45:21.200 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:45:21.203 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《红高粱》 已存在，跳过插入
2025-06-25 15:45:21.203 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《红高粱》 --[获奖]--> 金熊奖
2025-06-25 15:45:21.204 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:45:21.206 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《红高粱》 已存在，跳过插入
2025-06-25 15:45:21.206 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:45:21.208 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 柏林电影节 已存在，跳过插入
2025-06-25 15:45:21.215 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 15:45:21.221 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 15:45:21.229 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:21.232 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 柏林电影节 -> 《红高粱》 [在_获奖地点]
2025-06-25 15:45:21.232 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《红高粱》 --[获奖地点]--> 柏林电影节
2025-06-25 15:45:21.233 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:45:21.235 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-25 15:45:21.236 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:45:21.238 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 奥运会开幕式 已存在，跳过插入
2025-06-25 15:45:21.239 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 15:45:21.244 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 15:45:21.249 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:21.252 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 奥运会开幕式 -> 《青花瓷》 [在_演出]
2025-06-25 15:45:21.252 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《青花瓷》 --[演出]--> 奥运会开幕式
2025-06-25 15:45:21.253 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:45:21.257 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《醉拳》 已存在，跳过插入
2025-06-25 15:45:21.258 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:45:21.261 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 香港电影节 已存在，跳过插入
2025-06-25 15:45:21.261 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 15:45:21.268 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 15:45:21.271 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:21.274 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 香港电影节 -> 《醉拳》 [在_首映]
2025-06-25 15:45:21.274 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《醉拳》 --[首映]--> 香港电影节
2025-06-25 15:45:21.274 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:45:21.280 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 56
2025-06-25 15:45:21.280 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 11462ms
2025-06-25 15:45:22.302 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 4, textLength: 88
2025-06-25 15:45:22.302 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 88, 参数: triples
2025-06-25 15:45:22.302 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-1, 文本长度: 88
2025-06-25 15:45:22.302 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 88 字符
2025-06-25 15:45:22.302 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:45:22.302 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 88，当前并发数: 1
2025-06-25 15:45:22.302 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:45:38.801 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 16499ms，响应长度: 806
2025-06-25 15:45:38.801 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 88，处理模式: 直接处理
2025-06-25 15:45:38.804 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 806
2025-06-25 15:45:38.804 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "主演",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映于",
      "object": "香港电影节",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "参加",
      "object": "电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "终身成就奖",
      "confidence": 0.95
    },
    {
      "subject": "李小龙",
      "predicate": "师父",
      "object": "成龙",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《龙争虎斗》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:45:38.804 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "主演",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映于",
      "object": "香港电影节",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "参加",
      "object": "电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "终身成就奖",
      "confidence": 0.95
    },
    {
      "subject": "李小龙",
      "predicate": "师父",
      "object": "成龙",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《龙争虎斗》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:45:38.805 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 15:45:38.805 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 7 个三元组，包括实体和关系保存
2025-06-25 15:45:38.810 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:38.812 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 15:45:38.813 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:38.814 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 《醉拳》 已存在，跳过插入
2025-06-25 15:45:38.815 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:38.818 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:38.821 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:38.823 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 成龙 -> 《醉拳》 [主演]
2025-06-25 15:45:38.823 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[主演]--> 《醉拳》
2025-06-25 15:45:38.824 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:45:38.825 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《醉拳》 已存在，跳过插入
2025-06-25 15:45:38.826 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:45:38.827 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 香港电影节 已存在，跳过插入
2025-06-25 15:45:38.829 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 15:45:38.832 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 15:45:38.835 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:38.837 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 香港电影节 -> 《醉拳》 [在_首映于]
2025-06-25 15:45:38.837 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《醉拳》 --[首映于]--> 香港电影节
2025-06-25 15:45:38.838 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:38.839 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 15:45:38.840 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:45:38.842 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 电影节颁奖典礼 已存在，跳过插入
2025-06-25 15:45:38.844 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:38.849 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 15:45:38.852 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:38.855 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 成龙 -> 电影节颁奖典礼 [参加]
2025-06-25 15:45:38.855 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[参加]--> 电影节颁奖典礼
2025-06-25 15:45:38.855 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:38.857 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 15:45:38.858 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:38.859 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 终身成就奖 已存在，跳过插入
2025-06-25 15:45:38.860 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:38.865 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:38.867 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:38.868 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 成龙 -> 终身成就奖 [获得]
2025-06-25 15:45:38.868 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[获得]--> 终身成就奖
2025-06-25 15:45:38.869 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:38.870 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 李小龙 已存在，跳过插入
2025-06-25 15:45:38.871 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:38.873 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 15:45:38.873 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:38.876 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:38.878 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:38.879 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 李小龙 -> 成龙 [师父]
2025-06-25 15:45:38.879 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 李小龙 --[师父]--> 成龙
2025-06-25 15:45:38.881 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:45:38.882 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 功夫电影节 已存在，跳过插入
2025-06-25 15:45:38.883 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:45:38.884 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《醉拳》 已存在，跳过插入
2025-06-25 15:45:38.885 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 15:45:38.887 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 15:45:38.888 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:38.889 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系: 功夫电影节 -> 《醉拳》 [展映]
2025-06-25 15:45:38.889 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 功夫电影节 --[展映]--> 《醉拳》
2025-06-25 15:45:38.890 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 15:45:38.891 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 功夫电影节 已存在，跳过插入
2025-06-25 15:45:38.892 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:38.893 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 《龙争虎斗》 已存在，跳过插入
2025-06-25 15:45:38.896 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:38.898 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 15:45:38.899 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:38.900 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系(反向): 《龙争虎斗》 -> 功夫电影节 [参与_展映]
2025-06-25 15:45:38.900 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 功夫电影节 --[展映]--> 《龙争虎斗》
2025-06-25 15:45:38.900 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:45:38.905 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 88
2025-06-25 15:45:38.905 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 16604ms
2025-06-25 15:45:38.915 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1, textLength: 25
2025-06-25 15:45:38.915 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 25, 参数: triples
2025-06-25 15:45:38.915 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-1, 文本长度: 25
2025-06-25 15:45:38.915 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 25 字符
2025-06-25 15:45:38.915 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:45:38.915 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 25，当前并发数: 1
2025-06-25 15:45:38.915 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:45:46.707 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 7792ms，响应长度: 248
2025-06-25 15:45:46.708 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 25，处理模式: 直接处理
2025-06-25 15:45:46.713 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 248
2025-06-25 15:45:46.713 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语流行音乐歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "创作",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:45:46.713 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语流行音乐歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "创作",
      "object": "《青花瓷》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:45:46.716 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 15:45:46.716 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 2 个三元组，包括实体和关系保存
2025-06-25 15:45:46.724 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:46.728 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-25 15:45:46.728 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:46.731 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 华语流行音乐歌手 已存在，跳过插入
2025-06-25 15:45:46.734 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:46.739 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:46.741 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:46.743 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 周杰伦 -> 华语流行音乐歌手 [职业]
2025-06-25 15:45:46.743 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[职业]--> 华语流行音乐歌手
2025-06-25 15:45:46.744 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:46.752 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-25 15:45:46.756 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:45:46.759 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-25 15:45:46.763 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:46.766 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 15:45:46.771 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:46.774 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 周杰伦 -> 《青花瓷》 [创作]
2025-06-25 15:45:46.774 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[创作]--> 《青花瓷》
2025-06-25 15:45:46.774 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:45:46.783 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 25
2025-06-25 15:45:46.783 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 7868ms
2025-06-25 15:45:47.801 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 3, textLength: 42
2025-06-25 15:45:47.802 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 42, 参数: triples
2025-06-25 15:45:47.802 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-1, 文本长度: 42
2025-06-25 15:45:47.802 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 42 字符
2025-06-25 15:45:47.802 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:45:47.802 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 42，当前并发数: 1
2025-06-25 15:45:47.802 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:45:58.777 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 10975ms，响应长度: 360
2025-06-25 15:45:58.778 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 42，处理模式: 直接处理
2025-06-25 15:45:58.781 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 360
2025-06-25 15:45:58.781 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语流行音乐歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "创作",
      "object": "《青花瓷》",
      "confidence": 0.95
    },
    {
      "subject": "《青花瓷》",
      "predicate": "获奖",
      "object": "金曲奖",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:45:58.782 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "周杰伦",
      "predicate": "职业",
      "object": "华语流行音乐歌手",
      "confidence": 0.95
    },
    {
      "subject": "周杰伦",
      "predicate": "创作",
      "object": "《青花瓷》",
      "confidence": 0.95
    },
    {
      "subject": "《青花瓷》",
      "predicate": "获奖",
      "object": "金曲奖",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:45:58.784 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 15:45:58.784 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-25 15:45:58.786 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:58.790 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-25 15:45:58.793 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:58.797 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 华语流行音乐歌手 已存在，跳过插入
2025-06-25 15:45:58.798 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:58.801 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:58.803 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:58.805 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 周杰伦 -> 华语流行音乐歌手 [职业]
2025-06-25 15:45:58.805 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[职业]--> 华语流行音乐歌手
2025-06-25 15:45:58.806 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:45:58.808 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 周杰伦 已存在，跳过插入
2025-06-25 15:45:58.809 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:45:58.811 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-25 15:45:58.812 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:45:58.816 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 15:45:58.819 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:45:58.822 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 周杰伦 -> 《青花瓷》 [创作]
2025-06-25 15:45:58.822 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 周杰伦 --[创作]--> 《青花瓷》
2025-06-25 15:45:58.823 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:45:58.825 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《青花瓷》 已存在，跳过插入
2025-06-25 15:45:58.825 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《青花瓷》 --[获奖]--> 金曲奖
2025-06-25 15:45:58.825 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:45:58.829 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 42
2025-06-25 15:45:58.829 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 11028ms
2025-06-25 15:45:58.866 [reactor-http-nio-8] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1
2025-06-25 15:45:58.870 [reactor-http-nio-8] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 4ms
2025-06-25 15:45:58.870 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-1, 文本长度: 32
2025-06-25 15:45:58.871 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 32 字符
2025-06-25 15:45:58.871 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:45:58.871 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 32，当前并发数: 1
2025-06-25 15:45:58.871 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:45:59.894 [reactor-http-nio-9] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities, textInputType: JSONArray, arraySize: 2
2025-06-25 15:45:59.895 [reactor-http-nio-9] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 15:45:59.895 [TextExtract-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-2, 文本长度: 44
2025-06-25 15:45:59.895 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 44 字符
2025-06-25 15:45:59.895 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:45:59.895 [TextExtract-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 44，当前并发数: 2
2025-06-25 15:45:59.895 [TextExtract-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:46:01.925 [reactor-http-nio-11] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 15:46:01.925 [reactor-http-nio-11] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 15:46:01.925 [TextExtract-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-3, 文本长度: 90
2025-06-25 15:46:01.925 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 90 字符
2025-06-25 15:46:01.926 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:46:01.926 [TextExtract-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 90，当前并发数: 3
2025-06-25 15:46:01.926 [TextExtract-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:46:03.951 [reactor-http-nio-1] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 15:46:03.952 [reactor-http-nio-1] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 15:46:03.952 [TextExtract-4] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-4, 文本长度: 439
2025-06-25 15:46:03.952 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 439 字符
2025-06-25 15:46:03.952 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 15:46:03.952 [TextExtract-4] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 439，当前并发数: 4
2025-06-25 15:46:03.952 [TextExtract-4] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:46:05.980 [reactor-http-nio-3] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 15:46:05.980 [reactor-http-nio-3] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 1ms
2025-06-25 15:46:05.980 [TextExtract-5] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-5, 文本长度: 2050
2025-06-25 15:46:05.981 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 2050 字符
2025-06-25 15:46:05.981 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - 📄 检测到长文本，启用分批处理模式
2025-06-25 15:46:05.981 [TextExtract-5] INFO  com.datacenter.extract.service.LongTextProcessor - 🔍 开始处理长文本，长度: 2050 字符
2025-06-25 15:46:05.984 [TextExtract-5] INFO  com.datacenter.extract.service.LongTextProcessor - 📊 文本分片完成，共 2 个分片
2025-06-25 15:46:05.986 [pool-5-thread-1] INFO  com.datacenter.extract.service.LongTextProcessor - ⚡ 处理分片 1 (1990 字符)
2025-06-25 15:46:05.986 [pool-5-thread-2] INFO  com.datacenter.extract.service.LongTextProcessor - ⚡ 处理分片 2 (238 字符)
2025-06-25 15:46:05.986 [pool-5-thread-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 1990，当前并发数: 5
2025-06-25 15:46:05.986 [pool-5-thread-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 40秒
2025-06-25 15:46:10.157 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 11286ms，响应长度: 463
2025-06-25 15:46:10.158 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 32，处理模式: 直接处理
2025-06-25 15:46:10.159 [pool-5-thread-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 238，当前并发数: 5
2025-06-25 15:46:10.159 [pool-5-thread-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 15:46:10.161 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 463
2025-06-25 15:46:10.162 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "演员",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "歌手",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出生地",
      "object": "香港",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出演作品",
      "object": "《无间道》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:46:10.162 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "演员",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "职业",
      "object": "歌手",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出生地",
      "object": "香港",
      "confidence": 0.95
    },
    {
      "subject": "刘德华",
      "predicate": "出演作品",
      "object": "《无间道》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:46:10.165 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 15:46:10.165 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-25 15:46:10.167 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:46:10.170 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 15:46:10.174 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:46:10.177 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 演员 已存在，跳过插入
2025-06-25 15:46:10.178 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:46:10.186 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:46:10.192 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:46:10.195 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 演员 [职业]
2025-06-25 15:46:10.195 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[职业]--> 演员
2025-06-25 15:46:10.196 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:46:10.199 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 15:46:10.200 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:46:10.202 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 歌手 已存在，跳过插入
2025-06-25 15:46:10.203 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:46:10.206 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:46:10.209 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:46:10.211 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 歌手 [职业]
2025-06-25 15:46:10.211 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[职业]--> 歌手
2025-06-25 15:46:10.212 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:46:10.213 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 15:46:10.214 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:46:10.215 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 香港 已存在，跳过插入
2025-06-25 15:46:10.217 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:46:10.219 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:46:10.222 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:46:10.223 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 刘德华 -> 香港 [出生地]
2025-06-25 15:46:10.223 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[出生地]--> 香港
2025-06-25 15:46:10.224 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:46:10.226 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 刘德华 已存在，跳过插入
2025-06-25 15:46:10.227 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:46:10.228 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《无间道》 已存在，跳过插入
2025-06-25 15:46:10.231 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:46:10.234 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 15:46:10.236 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:46:10.238 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 刘德华 -> 《无间道》 [出演作品]
2025-06-25 15:46:10.238 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 刘德华 --[出演作品]--> 《无间道》
2025-06-25 15:46:10.238 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:46:10.245 [reactor-http-nio-10] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 10350ms，响应长度: 362
2025-06-25 15:46:10.245 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 44，处理模式: 直接处理
2025-06-25 15:46:10.247 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 32
2025-06-25 15:46:10.248 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 362
2025-06-25 15:46:10.248 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "执导",
      "object": "《英雄》",
      "confidence": 0.95
    },
    {
      "subject": "《英雄》",
      "predicate": "类型",
      "object": "古装武侠电影",
      "confidence": 0.95
    },
    {
      "subject": "《三体》三部曲",
      "predicate": "代表作品",
      "object": "刘慈欣",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:46:10.248 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张艺谋",
      "predicate": "执导",
      "object": "《英雄》",
      "confidence": 0.95
    },
    {
      "subject": "《英雄》",
      "predicate": "类型",
      "object": "古装武侠电影",
      "confidence": 0.95
    },
    {
      "subject": "《三体》三部曲",
      "predicate": "代表作品",
      "object": "刘慈欣",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:46:10.249 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 15:46:10.249 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-25 15:46:10.250 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:46:10.253 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 人员 张艺谋 已存在，跳过插入
2025-06-25 15:46:10.253 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:46:10.255 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《英雄》 已存在，跳过插入
2025-06-25 15:46:10.256 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:46:10.259 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 15:46:10.261 [TextExtract-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:46:10.263 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人作品关系: 张艺谋 -> 《英雄》 [执导]
2025-06-25 15:46:10.263 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张艺谋 --[执导]--> 《英雄》
2025-06-25 15:46:10.264 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:46:10.266 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《英雄》 已存在，跳过插入
2025-06-25 15:46:10.266 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《英雄》 --[类型]--> 古装武侠电影
2025-06-25 15:46:10.267 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:46:10.268 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 《三体》三部曲 已存在，跳过插入
2025-06-25 15:46:10.269 [TextExtract-2] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 15:46:10.270 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 作品 刘慈欣 已存在，跳过插入
2025-06-25 15:46:10.270 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《三体》三部曲 --[代表作品]--> 刘慈欣
2025-06-25 15:46:10.270 [TextExtract-2] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:46:10.274 [TextExtract-2] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 44
2025-06-25 15:46:21.686 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 11527ms，响应长度: 483
2025-06-25 15:46:29.260 [reactor-http-nio-12] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 27334ms，响应长度: 694
2025-06-25 15:46:29.261 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 90，处理模式: 直接处理
2025-06-25 15:46:29.266 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 694
2025-06-25 15:46:29.267 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张三",
      "predicate": "职业",
      "object": "软件工程师",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "工作地点",
      "object": "北京的一家科技公司",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "负责",
      "object": "开发人工智能系统",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "李四",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "王五",
      "confidence": 0.95
    },
    {
      "subject": "他们的团队",
      "predicate": "开发",
      "object": "智能对话系统",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:46:29.267 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张三",
      "predicate": "职业",
      "object": "软件工程师",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "工作地点",
      "object": "北京的一家科技公司",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "负责",
      "object": "开发人工智能系统",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "李四",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "王五",
      "confidence": 0.95
    },
    {
      "subject": "他们的团队",
      "predicate": "开发",
      "object": "智能对话系统",
      "confidence": 0.95
    }
  ]
}
2025-06-25 15:46:29.270 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 15:46:29.271 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 处理 6 个三元组，包括实体和关系保存
2025-06-25 15:46:29.281 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:46:29.287 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 张三 已存在，跳过插入
2025-06-25 15:46:29.290 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:46:29.293 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 软件工程师 已存在，跳过插入
2025-06-25 15:46:29.295 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:46:29.301 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:46:29.306 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:46:29.309 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 软件工程师 [职业]
2025-06-25 15:46:29.309 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[职业]--> 软件工程师
2025-06-25 15:46:29.309 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[工作地点]--> 北京的一家科技公司
2025-06-25 15:46:29.312 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:46:29.315 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 开发人工智能系统 已存在，跳过插入
2025-06-25 15:46:29.316 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[负责]--> 开发人工智能系统
2025-06-25 15:46:29.317 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:46:29.320 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 张三 已存在，跳过插入
2025-06-25 15:46:29.321 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:46:29.324 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 李四 已存在，跳过插入
2025-06-25 15:46:29.325 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:46:29.328 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:46:29.330 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:46:29.333 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 李四 [合作]
2025-06-25 15:46:29.333 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[合作]--> 李四
2025-06-25 15:46:29.334 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:46:29.337 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 张三 已存在，跳过插入
2025-06-25 15:46:29.337 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 15:46:29.339 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 人员 王五 已存在，跳过插入
2025-06-25 15:46:29.340 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:46:29.344 [TextExtract-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 15:46:29.346 [TextExtract-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 15:46:29.348 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 王五 [合作]
2025-06-25 15:46:29.348 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[合作]--> 王五
2025-06-25 15:46:29.348 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 他们的团队 --[开发]--> 智能对话系统
2025-06-25 15:46:29.349 [TextExtract-3] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:46:29.356 [TextExtract-3] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 90
2025-06-25 15:46:33.978 [parallel-10] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30026ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-25 15:46:33.979 [TextExtract-4] ERROR com.datacenter.extract.service.SmartAIProvider - ❌ AI提取失败，类型: entities,relations，文本长度: 439
2025-06-25 15:46:33.979 [TextExtract-4] ERROR com.datacenter.extract.service.SmartAIProvider - 💥 AI提取过程异常: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$0(SmartAIProvider.java:77)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.service.TextExtractionService.processTextAsync(TextExtractionService.java:72)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.AsyncExecutionInterceptor.lambda$invoke$0(AsyncExecutionInterceptor.java:115)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 15:46:33.983 [TextExtract-4] ERROR c.datacenter.extract.service.TextExtractionService - 异步文本提取失败，错误: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-25 15:46:45.992 [parallel-11] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 40006ms，错误: Did not observe any item or terminal signal within 40000ms in 'flatMap' (and no fallback has been configured)
2025-06-25 15:46:45.998 [TextExtract-5] INFO  com.datacenter.extract.service.LongTextProcessor - ✅ 分片合并完成，成功率: 2/2 ({:.1f}%)，提取三元组: 100.0
2025-06-25 15:46:45.998 [TextExtract-5] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 2050，处理模式: 分批处理
2025-06-25 15:46:46.001 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 579
2025-06-25 15:46:46.001 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"团队","predicate":"签署","object":"技术转让协议","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"计划研究","object":"多模态知识图谱","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"医疗、金融和教育","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"取得成就","object":"人工智能和知识图谱领域","confidence":0.95,"chunk_index":1,"chunk_start":0}],"total_chunks":2,"success_chunks":2,"success_rate":"100.00%","total_triples":4,"processing_method":"batch_processing","timestamp":1750837605998}
2025-06-25 15:46:46.001 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"团队","predicate":"签署","object":"技术转让协议","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"计划研究","object":"多模态知识图谱","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"医疗、金融和教育","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"取得成就","object":"人工智能和知识图谱领域","confidence":0.95,"chunk_index":1,"chunk_start":0}],"total_chunks":2,"success_chunks":2,"success_rate":"100.00%","total_triples":4,"processing_method":"batch_processing","timestamp":1750837605998}
2025-06-25 15:46:46.006 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 7 个主要字段: [triples, total_chunks, success_chunks, success_rate, total_triples, processing_method, timestamp]
2025-06-25 15:46:46.007 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 处理 4 个三元组，包括实体和关系保存
2025-06-25 15:46:46.007 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[签署]--> 技术转让协议
2025-06-25 15:46:46.007 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[计划研究]--> 多模态知识图谱
2025-06-25 15:46:46.007 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[探索应用]--> 医疗、金融和教育
2025-06-25 15:46:46.007 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[取得成就]--> 人工智能和知识图谱领域
2025-06-25 15:46:46.007 [TextExtract-5] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 15:46:46.010 [TextExtract-5] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 2050
