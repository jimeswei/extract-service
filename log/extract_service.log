2025-06-25 10:26:58.028 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 55526 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-25 10:26:58.030 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-25 10:26:59.131 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 10:26:59.133 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-25 10:26:59.257 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 120 ms. Found 7 JPA repository interfaces.
2025-06-25 10:26:59.278 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 10:26:59.279 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-25 10:26:59.298 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityCelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 10:26:59.298 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityEventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 10:26:59.298 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 10:26:59.298 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 10:26:59.299 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 10:26:59.299 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 10:26:59.299 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 10:26:59.299 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14 ms. Found 0 Redis repository interfaces.
2025-06-25 10:27:04.558 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@14ad42
2025-06-25 10:27:04.559 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@14ad42
2025-06-25 10:27:04.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@14ad42
2025-06-25 10:27:04.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@3cb173db
2025-06-25 10:27:04.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@3cb173db
2025-06-25 10:27:04.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@26712838
2025-06-25 10:27:04.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@26712838
2025-06-25 10:27:04.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@249a45fd
2025-06-25 10:27:04.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@249a45fd
2025-06-25 10:27:04.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@268f0ff3
2025-06-25 10:27:04.562 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@268f0ff3
2025-06-25 10:27:04.562 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@268f0ff3
2025-06-25 10:27:04.562 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@11978f52
2025-06-25 10:27:04.562 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@11978f52
2025-06-25 10:27:04.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@11978f52
2025-06-25 10:27:04.564 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@3e0855b0
2025-06-25 10:27:04.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@3e0855b0
2025-06-25 10:27:04.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@3ba5c4dd
2025-06-25 10:27:04.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@47fca3cc
2025-06-25 10:27:04.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@47fca3cc
2025-06-25 10:27:04.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@55746340
2025-06-25 10:27:04.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@6a0c7af6
2025-06-25 10:27:04.566 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@7f1ad846
2025-06-25 10:27:04.566 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@7f1ad846
2025-06-25 10:27:04.566 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@7f1ad846
2025-06-25 10:27:04.566 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-25 10:27:04.566 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-25 10:27:04.566 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-25 10:27:04.566 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-25 10:27:04.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-25 10:27:04.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-25 10:27:04.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-25 10:27:04.568 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-25 10:27:04.568 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-25 10:27:04.568 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-25 10:27:04.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-25 10:27:04.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-25 10:27:04.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-25 10:27:04.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-25 10:27:04.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-25 10:27:04.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-25 10:27:04.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-25 10:27:04.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-25 10:27:04.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-25 10:27:04.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-25 10:27:04.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 10:27:04.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 10:27:04.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-25 10:27:04.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-25 10:27:04.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-25 10:27:04.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-25 10:27:04.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@5e7e7a7e
2025-06-25 10:27:04.571 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-25 10:27:04.571 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-25 10:27:04.571 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-25 10:27:04.572 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@5abc5854
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@5abc5854
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-25 10:27:04.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-25 10:27:04.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-25 10:27:04.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-25 10:27:04.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-25 10:27:04.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-25 10:27:04.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-25 10:27:04.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-25 10:27:04.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@586486c
2025-06-25 10:27:04.575 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-25 10:27:04.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@7fbbdd8a
2025-06-25 10:27:04.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@7fbbdd8a
2025-06-25 10:27:04.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-25 10:27:04.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-25 10:27:04.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 10:27:04.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 10:27:04.577 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 10:27:04.577 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 10:27:04.577 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 10:27:04.577 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 10:27:04.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-25 10:27:04.579 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-25 10:27:04.579 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 10:27:04.579 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 10:27:04.579 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 10:27:04.579 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 10:27:04.579 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 10:27:04.579 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 10:27:04.580 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 10:27:04.580 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 10:27:04.581 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 10:27:04.581 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 10:27:04.581 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-25 10:27:04.581 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-25 10:27:04.582 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-25 10:27:04.583 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-25 10:27:04.583 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-25 10:27:04.583 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-25 10:27:04.585 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-25 10:27:04.585 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-25 10:27:04.585 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@2a259f6f
2025-06-25 10:27:04.585 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@2a259f6f
2025-06-25 10:27:04.585 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@7ccf6114
2025-06-25 10:27:04.589 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@60a99f3d
2025-06-25 10:27:04.589 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@60a99f3d
2025-06-25 10:27:04.590 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@6c06b1bc
2025-06-25 10:27:04.590 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@1d8dbf10
2025-06-25 10:27:04.591 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@e171f93
2025-06-25 10:27:04.592 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@4ad3969
2025-06-25 10:27:04.592 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@5d7ff311
2025-06-25 10:27:04.592 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@2d7aa291
2025-06-25 10:27:04.592 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@1ba7db2a
2025-06-25 10:27:04.592 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@762cdf46
2025-06-25 10:27:04.592 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@54e94de9
2025-06-25 10:27:04.686 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-25 10:27:04.699 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-25 10:27:04.802 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@48b9773b
2025-06-25 10:27:04.803 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-25 10:27:04.838 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-25 10:27:04.838 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-25 10:27:04.856 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@ce0bbd5) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@399fd710)
2025-06-25 10:27:04.856 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7c359808) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1f013047)
2025-06-25 10:27:04.856 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@16361e61) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@51566ce0)
2025-06-25 10:27:04.856 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1734b1a) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@17e6d07b)
2025-06-25 10:27:04.856 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@318511f0) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@53564a4c)
2025-06-25 10:27:04.856 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4866e0a7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@69a294d8)
2025-06-25 10:27:04.856 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@70b1028d) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@11d422fd)
2025-06-25 10:27:04.856 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6e489bb8) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1331d6fd)
2025-06-25 10:27:04.857 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6b6c0b7c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5b1f0f26)
2025-06-25 10:27:04.858 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-25 10:27:04.858 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-25 10:27:04.858 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-25 10:27:04.859 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 10:27:04.860 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 10:27:04.861 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@7169d668
2025-06-25 10:27:04.862 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@6c06b1bc`
2025-06-25 10:27:04.864 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-25 10:27:04.864 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-25 10:27:04.865 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 10:27:04.866 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 10:27:04.866 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 10:27:04.866 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 10:27:04.866 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 10:27:04.866 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 10:27:04.867 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 10:27:04.867 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 10:27:04.867 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 10:27:04.868 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@1cfb7450] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@478c84aa]
2025-06-25 10:27:05.522 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@1cfb7450] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@2f59cb6f]
2025-06-25 10:27:05.526 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@2f59cb6f] for TypeConfiguration
2025-06-25 10:27:05.527 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 10:27:06.187 [main] INFO  c.d.extract.controller.AsyncExtractController - AsyncExtractController initialized successfully
2025-06-25 10:27:06.192 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-25 10:27:06.655 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-25 10:27:06.783 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-25 10:27:06.820 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 2
2025-06-25 10:27:06.821 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-25 10:27:06.822 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-25 10:27:06.822 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-25 10:27:07.259 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-25 10:27:07.276 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 9.85 seconds (process running for 11.527)
2025-06-25 10:27:34.918 [reactor-http-nio-3] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: triples, textInputType: JSONArray, arraySize: 4
2025-06-25 10:27:34.938 [reactor-http-nio-3] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 157ms
2025-06-25 10:27:34.939 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-1
2025-06-25 10:27:34.946 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 88，当前并发数: 1
2025-06-25 10:27:34.947 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 10:27:53.902 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 18954ms，响应长度: 806
2025-06-25 10:27:53.909 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - AI提取成功，文本长度: 88
2025-06-25 10:27:53.925 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 806
2025-06-25 10:27:53.925 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "主演",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映于",
      "object": "香港电影节",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "参加",
      "object": "电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "终身成就奖",
      "confidence": 0.95
    },
    {
      "subject": "李小龙",
      "predicate": "师父",
      "object": "成龙",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《龙争虎斗》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 10:27:53.926 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "成龙",
      "predicate": "主演",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "《醉拳》",
      "predicate": "首映于",
      "object": "香港电影节",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "参加",
      "object": "电影节颁奖典礼",
      "confidence": 0.95
    },
    {
      "subject": "成龙",
      "predicate": "获得",
      "object": "终身成就奖",
      "confidence": 0.95
    },
    {
      "subject": "李小龙",
      "predicate": "师父",
      "object": "成龙",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《醉拳》",
      "confidence": 0.95
    },
    {
      "subject": "功夫电影节",
      "predicate": "展映",
      "object": "《龙争虎斗》",
      "confidence": 0.95
    }
  ]
}
2025-06-25 10:27:53.928 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 10:27:53.928 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 7 个三元组，包括实体和关系保存
2025-06-25 10:27:53.998 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 10:27:54.015 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 10:27:54.015 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 10:27:54.018 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 《醉拳》 已存在，跳过插入
2025-06-25 10:27:54.023 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 10:27:54.034 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 10:27:54.046 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 10:27:54.053 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 成龙 -> 《醉拳》 [主演]
2025-06-25 10:27:54.053 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[主演]--> 《醉拳》
2025-06-25 10:27:54.055 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 10:27:54.057 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《醉拳》 已存在，跳过插入
2025-06-25 10:27:54.059 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 10:27:54.060 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 香港电影节 已存在，跳过插入
2025-06-25 10:27:54.061 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 10:27:54.065 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 10:27:54.068 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 10:27:54.071 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系(反向): 香港电影节 -> 《醉拳》 [在_首映于]
2025-06-25 10:27:54.071 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 《醉拳》 --[首映于]--> 香港电影节
2025-06-25 10:27:54.072 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 10:27:54.074 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 10:27:54.075 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 10:27:54.077 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 电影节颁奖典礼 已存在，跳过插入
2025-06-25 10:27:54.078 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 10:27:54.083 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 10:27:54.090 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 10:27:54.092 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系: 成龙 -> 电影节颁奖典礼 [参加]
2025-06-25 10:27:54.093 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[参加]--> 电影节颁奖典礼
2025-06-25 10:27:54.094 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 10:27:54.097 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 10:27:54.099 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 10:27:54.101 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 终身成就奖 已存在，跳过插入
2025-06-25 10:27:54.103 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 10:27:54.107 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 10:27:54.110 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 10:27:54.113 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 成龙 -> 终身成就奖 [获得]
2025-06-25 10:27:54.113 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 成龙 --[获得]--> 终身成就奖
2025-06-25 10:27:54.114 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 10:27:54.116 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 李小龙 已存在，跳过插入
2025-06-25 10:27:54.117 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 10:27:54.124 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 成龙 已存在，跳过插入
2025-06-25 10:27:54.125 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 10:27:54.129 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 10:27:54.132 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 10:27:54.133 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 李小龙 -> 成龙 [师父]
2025-06-25 10:27:54.133 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 李小龙 --[师父]--> 成龙
2025-06-25 10:27:54.134 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 10:27:54.136 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 功夫电影节 已存在，跳过插入
2025-06-25 10:27:54.138 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id 
    from
        work w1_0 
    where
        w1_0.title=? 
    limit
        ?
2025-06-25 10:27:54.139 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 作品 《醉拳》 已存在，跳过插入
2025-06-25 10:27:54.141 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 10:27:54.144 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        w1_0.id,
        w1_0.awards,
        w1_0.baike,
        w1_0.description,
        w1_0.`group`,
        w1_0.platform,
        w1_0.release_date,
        w1_0.role,
        w1_0.title,
        w1_0.work_id,
        w1_0.work_type 
    from
        work w1_0 
    where
        w1_0.title=?
2025-06-25 10:27:54.146 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        event_work
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 10:27:54.148 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存事件作品关系: 功夫电影节 -> 《醉拳》 [展映]
2025-06-25 10:27:54.148 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 功夫电影节 --[展映]--> 《醉拳》
2025-06-25 10:27:54.150 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id 
    from
        event e1_0 
    where
        e1_0.event_name=? 
    limit
        ?
2025-06-25 10:27:54.152 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 事件 功夫电影节 已存在，跳过插入
2025-06-25 10:27:54.153 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 10:27:54.154 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 《龙争虎斗》 已存在，跳过插入
2025-06-25 10:27:54.155 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 10:27:54.159 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        e1_0.id,
        e1_0.event_id,
        e1_0.event_name,
        e1_0.event_type,
        e1_0.`group`,
        e1_0.time 
    from
        event e1_0 
    where
        e1_0.event_name=?
2025-06-25 10:27:54.162 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_event
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 10:27:54.163 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人事件关系(反向): 《龙争虎斗》 -> 功夫电影节 [参与_展映]
2025-06-25 10:27:54.164 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 功夫电影节 --[展映]--> 《龙争虎斗》
2025-06-25 10:27:54.164 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 10:27:54.170 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成
2025-06-25 10:28:33.413 [SpringApplicationShutdownHook] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 10:28:33.414 [SpringApplicationShutdownHook] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@2f59cb6f] for TypeConfiguration
2025-06-25 10:28:33.414 [SpringApplicationShutdownHook] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@5640bf2d] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@2f59cb6f]
2025-06-25 10:28:33.417 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-25 10:28:33.425 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-25 11:22:29.205 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 56998 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-25 11:22:29.207 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-25 11:22:30.145 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 11:22:30.146 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-25 11:22:30.249 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 99 ms. Found 7 JPA repository interfaces.
2025-06-25 11:22:30.270 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 11:22:30.271 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-25 11:22:30.287 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityCelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:22:30.287 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityEventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:22:30.287 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:22:30.287 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:22:30.288 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:22:30.288 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:22:30.288 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:22:30.288 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 12 ms. Found 0 Redis repository interfaces.
2025-06-25 11:22:33.548 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 11:22:33.553 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 11:22:33.554 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 11:22:33.554 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 11:22:33.554 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 11:22:33.554 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 11:22:33.558 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 11:22:33.559 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 11:22:33.559 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 11:22:33.559 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 11:22:33.559 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 11:22:33.559 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 11:22:33.559 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 11:22:33.559 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 11:22:33.559 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 11:22:33.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 11:22:33.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 11:22:33.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-25 11:22:33.560 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 11:22:33.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 11:22:33.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-25 11:22:33.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 11:22:33.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 11:22:33.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 11:22:33.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 11:22:33.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 11:22:33.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 11:22:33.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 11:22:33.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 11:22:33.561 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 11:22:33.562 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 11:22:33.562 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 11:22:33.562 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 11:22:33.562 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@2a259f6f
2025-06-25 11:22:33.563 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@7ccf6114
2025-06-25 11:22:33.564 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@7ccf6114
2025-06-25 11:22:33.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@3df3410a
2025-06-25 11:22:33.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-25 11:22:33.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-25 11:22:33.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-25 11:22:33.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@61d42275
2025-06-25 11:22:33.565 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@6614289a
2025-06-25 11:22:33.566 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@4148ce43
2025-06-25 11:22:33.566 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@46fb9581
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@46fb9581
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@6fcc0a1
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@6fcc0a1
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@416b681c
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@46d69ca4
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@5c9b5e62
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@3c826498
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@2633d09c
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@54f25b42
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@521c67f0
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@521c67f0
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@7d156f8f
2025-06-25 11:22:33.567 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@7d156f8f
2025-06-25 11:22:33.568 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@451af781
2025-06-25 11:22:33.568 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@451af781
2025-06-25 11:22:33.568 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@3749c2b
2025-06-25 11:22:33.569 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@3749c2b
2025-06-25 11:22:33.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@32e65852
2025-06-25 11:22:33.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@32e65852
2025-06-25 11:22:33.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@64d93096
2025-06-25 11:22:33.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@76ed7573
2025-06-25 11:22:33.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@51df2a41
2025-06-25 11:22:33.570 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@51df2a41
2025-06-25 11:22:33.571 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@517bdce0
2025-06-25 11:22:33.571 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@7c0b0bd9
2025-06-25 11:22:33.572 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6150afc6
2025-06-25 11:22:33.572 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@49f50c8f
2025-06-25 11:22:33.572 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@49f50c8f
2025-06-25 11:22:33.572 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@46e6458d
2025-06-25 11:22:33.572 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@6297cb4b
2025-06-25 11:22:33.572 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@65d6640
2025-06-25 11:22:33.572 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@65d6640
2025-06-25 11:22:33.572 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@672d8370
2025-06-25 11:22:33.572 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@672d8370
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@13137835
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@13137835
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@13137835
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@4f82248f
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@4f82248f
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@4f82248f
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@22002459
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@29bd056a
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@21e702b8
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@21e702b8
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@7f1fec57
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@7f1fec57
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@7f1fec57
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@5c9e3d01
2025-06-25 11:22:33.573 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@1dc9f5ad
2025-06-25 11:22:33.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@4a2d66e
2025-06-25 11:22:33.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@4a2d66e
2025-06-25 11:22:33.574 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@4dffff9
2025-06-25 11:22:33.575 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@4dffff9
2025-06-25 11:22:33.575 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@4dffff9
2025-06-25 11:22:33.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@2904bc56
2025-06-25 11:22:33.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@2904bc56
2025-06-25 11:22:33.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@7bb25046
2025-06-25 11:22:33.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@7bb25046
2025-06-25 11:22:33.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@69b1e8f8
2025-06-25 11:22:33.576 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@69b1e8f8
2025-06-25 11:22:33.577 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@126af200
2025-06-25 11:22:33.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@126af200
2025-06-25 11:22:33.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@1e000a17
2025-06-25 11:22:33.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@1e000a17
2025-06-25 11:22:33.578 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@77d959f1
2025-06-25 11:22:33.580 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@1f3f434
2025-06-25 11:22:33.580 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@1f3f434
2025-06-25 11:22:33.581 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@38b54694
2025-06-25 11:22:33.584 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@7619fbe7
2025-06-25 11:22:33.585 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@39ead1b7
2025-06-25 11:22:33.585 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@27ec74a3
2025-06-25 11:22:33.585 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@35ff072c
2025-06-25 11:22:33.585 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@c0004b7
2025-06-25 11:22:33.585 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@63880be9
2025-06-25 11:22:33.586 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@27053257
2025-06-25 11:22:33.587 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@6a0e97fc
2025-06-25 11:22:33.671 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-25 11:22:33.684 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-25 11:22:33.782 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4aea57dc
2025-06-25 11:22:33.783 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-25 11:22:33.813 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-25 11:22:33.814 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-25 11:22:33.831 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@27d6467) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@5bf1b528)
2025-06-25 11:22:33.831 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2c92f094) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1c3b221f)
2025-06-25 11:22:33.831 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@750c23a3) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@238280df)
2025-06-25 11:22:33.831 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@182fd26b) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5dc120ab)
2025-06-25 11:22:33.831 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@49c4118b) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7ef7f414)
2025-06-25 11:22:33.831 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@182dcd2b) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4c3d72fd)
2025-06-25 11:22:33.832 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@259c6ab8) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@640a6d4b)
2025-06-25 11:22:33.832 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1238a074) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@35b58254)
2025-06-25 11:22:33.832 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@73baf7f0) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@446dacf9)
2025-06-25 11:22:33.832 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-25 11:22:33.832 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-25 11:22:33.832 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-25 11:22:33.833 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 11:22:33.833 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 11:22:33.834 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@34d72f06
2025-06-25 11:22:33.835 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@38b54694`
2025-06-25 11:22:33.836 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-25 11:22:33.836 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-25 11:22:33.838 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:22:33.838 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:22:33.838 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:22:33.838 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:22:33.838 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:22:33.838 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:22:33.839 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:22:33.839 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:22:33.839 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:22:33.840 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@2ab39942] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@64186f60]
2025-06-25 11:22:34.506 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@2ab39942] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@60660d21]
2025-06-25 11:22:34.512 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@60660d21] for TypeConfiguration
2025-06-25 11:22:34.512 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 11:22:35.188 [main] INFO  c.d.extract.controller.AsyncExtractController - AsyncExtractController initialized successfully
2025-06-25 11:22:35.193 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-25 11:22:35.602 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-25 11:22:35.720 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-25 11:22:35.754 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 2
2025-06-25 11:22:35.754 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-25 11:22:35.755 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-25 11:22:35.756 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-25 11:22:36.143 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-25 11:22:36.159 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 7.545 seconds (process running for 8.175)
2025-06-25 11:24:48.412 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 57100 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-25 11:24:48.415 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-25 11:24:49.335 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 11:24:49.336 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-25 11:24:49.434 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 95 ms. Found 7 JPA repository interfaces.
2025-06-25 11:24:49.458 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 11:24:49.460 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-25 11:24:49.479 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityCelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:24:49.479 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityEventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:24:49.479 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:24:49.479 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:24:49.479 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:24:49.479 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:24:49.480 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:24:49.480 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 0 Redis repository interfaces.
2025-06-25 11:24:50.963 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 11:24:50.965 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 11:24:50.965 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 11:24:50.965 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-25 11:24:50.965 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-25 11:24:50.965 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-25 11:24:50.967 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-25 11:24:50.968 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-25 11:24:50.968 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-25 11:24:50.968 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-25 11:24:50.968 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-25 11:24:50.968 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-25 11:24:50.968 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 11:24:50.968 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 11:24:50.968 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 11:24:50.969 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-25 11:24:50.969 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-25 11:24:50.969 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-25 11:24:50.969 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@586486c
2025-06-25 11:24:50.970 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@586486c
2025-06-25 11:24:50.970 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-25 11:24:50.970 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@7fbbdd8a
2025-06-25 11:24:50.970 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-25 11:24:50.970 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-25 11:24:50.970 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-25 11:24:50.970 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-25 11:24:50.970 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-25 11:24:50.971 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-25 11:24:50.971 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 11:24:50.971 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 11:24:50.971 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 11:24:50.971 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 11:24:50.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 11:24:50.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 11:24:50.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 11:24:50.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 11:24:50.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 11:24:50.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 11:24:50.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 11:24:50.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 11:24:50.972 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 11:24:50.973 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 11:24:50.974 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 11:24:50.974 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 11:24:50.975 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-25 11:24:50.975 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-25 11:24:50.975 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-25 11:24:50.975 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-25 11:24:50.975 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 11:24:50.975 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 11:24:50.975 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 11:24:50.975 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-25 11:24:50.975 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 11:24:50.976 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 11:24:50.976 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 11:24:50.976 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 11:24:50.976 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 11:24:50.976 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 11:24:50.977 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 11:24:50.977 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-25 11:24:50.977 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-25 11:24:50.977 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-25 11:24:50.977 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-25 11:24:50.977 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@2a259f6f
2025-06-25 11:24:50.977 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@7ccf6114
2025-06-25 11:24:50.977 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@7ccf6114
2025-06-25 11:24:50.977 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@3df3410a
2025-06-25 11:24:50.977 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@3df3410a
2025-06-25 11:24:50.977 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-25 11:24:50.978 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-25 11:24:50.978 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@61d42275
2025-06-25 11:24:50.978 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@61d42275
2025-06-25 11:24:50.979 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@6614289a
2025-06-25 11:24:50.980 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@6614289a
2025-06-25 11:24:50.980 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@4148ce43
2025-06-25 11:24:50.980 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@46fb9581
2025-06-25 11:24:50.980 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@6fcc0a1
2025-06-25 11:24:50.980 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@6fcc0a1
2025-06-25 11:24:50.980 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@416b681c
2025-06-25 11:24:50.982 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@46d69ca4
2025-06-25 11:24:50.983 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5c9b5e62
2025-06-25 11:24:50.983 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@3c826498
2025-06-25 11:24:50.983 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@3c826498
2025-06-25 11:24:50.983 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@2633d09c
2025-06-25 11:24:50.983 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@54f25b42
2025-06-25 11:24:50.983 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@521c67f0
2025-06-25 11:24:50.984 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@521c67f0
2025-06-25 11:24:50.984 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@7d156f8f
2025-06-25 11:24:50.984 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@7d156f8f
2025-06-25 11:24:50.984 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@451af781
2025-06-25 11:24:50.984 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@451af781
2025-06-25 11:24:50.984 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@451af781
2025-06-25 11:24:50.984 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@3749c2b
2025-06-25 11:24:50.984 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@3749c2b
2025-06-25 11:24:50.984 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@3749c2b
2025-06-25 11:24:50.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@32e65852
2025-06-25 11:24:50.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@64d93096
2025-06-25 11:24:50.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@76ed7573
2025-06-25 11:24:50.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@76ed7573
2025-06-25 11:24:50.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@51df2a41
2025-06-25 11:24:50.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@51df2a41
2025-06-25 11:24:50.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@51df2a41
2025-06-25 11:24:50.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@517bdce0
2025-06-25 11:24:50.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@7c0b0bd9
2025-06-25 11:24:50.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@6150afc6
2025-06-25 11:24:50.985 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@6150afc6
2025-06-25 11:24:50.986 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@49f50c8f
2025-06-25 11:24:50.987 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@49f50c8f
2025-06-25 11:24:50.987 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@49f50c8f
2025-06-25 11:24:50.987 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@46e6458d
2025-06-25 11:24:50.988 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@46e6458d
2025-06-25 11:24:50.988 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@6297cb4b
2025-06-25 11:24:50.988 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@6297cb4b
2025-06-25 11:24:50.989 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@65d6640
2025-06-25 11:24:50.990 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@65d6640
2025-06-25 11:24:50.992 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@672d8370
2025-06-25 11:24:50.992 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@672d8370
2025-06-25 11:24:50.992 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@13137835
2025-06-25 11:24:50.992 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@13137835
2025-06-25 11:24:50.992 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@4f82248f
2025-06-25 11:24:50.995 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@627d35ff
2025-06-25 11:24:50.995 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@627d35ff
2025-06-25 11:24:50.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@6879e983
2025-06-25 11:24:50.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@196d684b
2025-06-25 11:24:50.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@45d38165
2025-06-25 11:24:50.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@1f3f434
2025-06-25 11:24:50.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@26612078
2025-06-25 11:24:50.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@54bc3bcf
2025-06-25 11:24:50.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@d3d5094
2025-06-25 11:24:50.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@13714753
2025-06-25 11:24:50.996 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@3c3cd7a5
2025-06-25 11:24:51.072 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-25 11:24:51.085 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-25 11:24:51.167 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@532ea86b
2025-06-25 11:24:51.168 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-25 11:24:51.202 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-25 11:24:51.202 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-25 11:24:51.217 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@55cb3b7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@497fd334)
2025-06-25 11:24:51.218 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@280c3dc0) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6f89ad03)
2025-06-25 11:24:51.218 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@f287a4e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3879feec)
2025-06-25 11:24:51.218 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@71d2261e) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@53917c92)
2025-06-25 11:24:51.218 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1fa796a4) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@68de8522)
2025-06-25 11:24:51.218 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@8dcacf1) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@50f13494)
2025-06-25 11:24:51.218 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@73c09a98) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@6f2bf657)
2025-06-25 11:24:51.218 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@27d6467) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5bf1b528)
2025-06-25 11:24:51.218 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@2c92f094) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1c3b221f)
2025-06-25 11:24:51.219 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-25 11:24:51.219 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-25 11:24:51.219 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-25 11:24:51.220 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 11:24:51.220 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 11:24:51.221 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@1be4a7e3
2025-06-25 11:24:51.221 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@6879e983`
2025-06-25 11:24:51.222 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-25 11:24:51.222 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-25 11:24:51.224 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:24:51.224 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:24:51.224 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:24:51.225 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:24:51.225 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:24:51.225 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:24:51.225 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:24:51.225 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:24:51.225 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:24:51.226 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@221cdd87] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@4d66cb]
2025-06-25 11:24:51.835 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@221cdd87] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@40dcbf7]
2025-06-25 11:24:51.839 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@40dcbf7] for TypeConfiguration
2025-06-25 11:24:51.839 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 11:24:52.534 [main] INFO  c.d.extract.controller.AsyncExtractController - AsyncExtractController initialized successfully
2025-06-25 11:24:52.541 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-25 11:24:52.955 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-25 11:24:53.088 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-25 11:24:53.121 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 2
2025-06-25 11:24:53.121 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-25 11:24:53.122 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-25 11:24:53.123 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-25 11:24:53.503 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-25 11:24:53.520 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 5.671 seconds (process running for 6.232)
2025-06-25 11:27:12.815 [reactor-http-nio-4] INFO  c.datacenter.extract.controller.LongTextController - 🔍 收到长文本提取请求，文本长度: 91 字符
2025-06-25 11:27:12.832 [reactor-http-nio-4] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 91 字符
2025-06-25 11:27:12.834 [reactor-http-nio-4] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 11:27:12.834 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 91，当前并发数: 1
2025-06-25 11:27:12.834 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 11:27:13.115 [reactor-http-nio-4] ERROR com.datacenter.extract.service.AIModelCaller - 💥 AI调用异常: block()/blockFirst()/blockLast() are blocking, which is not supported in thread reactor-http-nio-4
java.lang.IllegalStateException: block()/blockFirst()/blockLast() are blocking, which is not supported in thread reactor-http-nio-4
	at reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:86)
	at reactor.core.publisher.Mono.block(Mono.java:1728)
	at com.datacenter.extract.service.AIModelCaller.callAI(AIModelCaller.java:94)
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:67)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.controller.LongTextController.extractLongText(LongTextController.java:53)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:27:13.120 [reactor-http-nio-4] ERROR com.datacenter.extract.service.SmartAIProvider - ❌ AI提取失败，类型: entities,relations，文本长度: 91
2025-06-25 11:27:13.120 [reactor-http-nio-4] ERROR com.datacenter.extract.service.SmartAIProvider - 💥 AI提取过程异常: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:77)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.controller.LongTextController.extractLongText(LongTextController.java:53)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:27:13.125 [reactor-http-nio-4] ERROR c.datacenter.extract.controller.LongTextController - ❌ 长文本提取失败，耗时: 310ms，错误: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:82)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.controller.LongTextController.extractLongText(LongTextController.java:53)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:27:13.186 [reactor-http-nio-5] INFO  c.datacenter.extract.controller.LongTextController - 🔍 收到长文本提取请求，文本长度: 1564 字符
2025-06-25 11:27:13.187 [reactor-http-nio-5] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 1564 字符
2025-06-25 11:27:13.187 [reactor-http-nio-5] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 11:27:13.187 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 1564，当前并发数: 1
2025-06-25 11:27:13.187 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 40秒
2025-06-25 11:27:13.191 [reactor-http-nio-5] ERROR com.datacenter.extract.service.AIModelCaller - 💥 AI调用异常: block()/blockFirst()/blockLast() are blocking, which is not supported in thread reactor-http-nio-5
java.lang.IllegalStateException: block()/blockFirst()/blockLast() are blocking, which is not supported in thread reactor-http-nio-5
	at reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:86)
	at reactor.core.publisher.Mono.block(Mono.java:1728)
	at com.datacenter.extract.service.AIModelCaller.callAI(AIModelCaller.java:94)
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:67)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.controller.LongTextController.extractLongText(LongTextController.java:53)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:27:13.192 [reactor-http-nio-5] ERROR com.datacenter.extract.service.SmartAIProvider - ❌ AI提取失败，类型: entities,relations，文本长度: 1564
2025-06-25 11:27:13.192 [reactor-http-nio-5] ERROR com.datacenter.extract.service.SmartAIProvider - 💥 AI提取过程异常: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:77)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.controller.LongTextController.extractLongText(LongTextController.java:53)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:27:13.192 [reactor-http-nio-5] ERROR c.datacenter.extract.controller.LongTextController - ❌ 长文本提取失败，耗时: 6ms，错误: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:82)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.controller.LongTextController.extractLongText(LongTextController.java:53)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:27:13.226 [reactor-http-nio-6] INFO  c.datacenter.extract.controller.LongTextController - 🔥 收到强制分批提取请求，文本长度: 306 字符
2025-06-25 11:27:13.226 [reactor-http-nio-6] INFO  com.datacenter.extract.service.LongTextProcessor - 🔍 开始处理长文本，长度: 306 字符
2025-06-25 11:27:13.227 [reactor-http-nio-6] INFO  com.datacenter.extract.service.LongTextProcessor - 📝 文本较短，直接处理
2025-06-25 11:27:13.227 [reactor-http-nio-6] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 306，当前并发数: 1
2025-06-25 11:27:13.228 [reactor-http-nio-6] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 11:27:13.231 [reactor-http-nio-6] ERROR com.datacenter.extract.service.AIModelCaller - 💥 AI调用异常: block()/blockFirst()/blockLast() are blocking, which is not supported in thread reactor-http-nio-6
java.lang.IllegalStateException: block()/blockFirst()/blockLast() are blocking, which is not supported in thread reactor-http-nio-6
	at reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:86)
	at reactor.core.publisher.Mono.block(Mono.java:1728)
	at com.datacenter.extract.service.AIModelCaller.callAI(AIModelCaller.java:94)
	at com.datacenter.extract.service.LongTextProcessor.processLongText(LongTextProcessor.java:58)
	at com.datacenter.extract.controller.LongTextController.forceBatchExtract(LongTextController.java:91)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:27:13.236 [reactor-http-nio-6] INFO  c.datacenter.extract.controller.LongTextController - ✅ 强制分批提取完成，耗时: 10ms
2025-06-25 11:27:13.270 [reactor-http-nio-9] INFO  com.datacenter.extract.service.SmartAIProvider - 🔥 开始缓存预热，文本长度: 16
2025-06-25 11:27:13.270 [reactor-http-nio-9] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 16 字符
2025-06-25 11:27:13.270 [reactor-http-nio-9] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 11:27:13.271 [reactor-http-nio-9] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 16，当前并发数: 1
2025-06-25 11:27:13.271 [reactor-http-nio-9] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 11:27:13.273 [reactor-http-nio-9] ERROR com.datacenter.extract.service.AIModelCaller - 💥 AI调用异常: block()/blockFirst()/blockLast() are blocking, which is not supported in thread reactor-http-nio-9
java.lang.IllegalStateException: block()/blockFirst()/blockLast() are blocking, which is not supported in thread reactor-http-nio-9
	at reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:86)
	at reactor.core.publisher.Mono.block(Mono.java:1728)
	at com.datacenter.extract.service.AIModelCaller.callAI(AIModelCaller.java:94)
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:67)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.service.SmartAIProvider.warmupCache(SmartAIProvider.java:170)
	at com.datacenter.extract.controller.LongTextController.warmupCache(LongTextController.java:159)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:27:13.273 [reactor-http-nio-9] ERROR com.datacenter.extract.service.SmartAIProvider - ❌ AI提取失败，类型: entities,relations，文本长度: 16
2025-06-25 11:27:13.273 [reactor-http-nio-9] ERROR com.datacenter.extract.service.SmartAIProvider - 💥 AI提取过程异常: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:77)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.service.SmartAIProvider.warmupCache(SmartAIProvider.java:170)
	at com.datacenter.extract.controller.LongTextController.warmupCache(LongTextController.java:159)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:27:13.274 [reactor-http-nio-9] WARN  com.datacenter.extract.service.SmartAIProvider - ⚠️  缓存预热失败: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-25 11:27:13.285 [reactor-http-nio-10] INFO  com.datacenter.extract.service.SmartAIProvider - 🧹 缓存已清理
2025-06-25 11:27:25.174 [reactor-http-nio-9] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 11903ms，响应长度: 240
2025-06-25 11:27:31.380 [reactor-http-nio-4] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 18546ms，响应长度: 812
2025-06-25 11:27:39.392 [reactor-http-nio-6] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 26163ms，响应长度: 1468
2025-06-25 11:27:51.777 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 38590ms，响应长度: 2481
2025-06-25 11:28:17.926 [reactor-http-nio-11] INFO  c.datacenter.extract.controller.LongTextController - 🔍 收到长文本提取请求，文本长度: 26 字符
2025-06-25 11:28:17.926 [reactor-http-nio-11] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 26 字符
2025-06-25 11:28:17.926 [reactor-http-nio-11] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 11:28:17.926 [reactor-http-nio-11] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 26，当前并发数: 1
2025-06-25 11:28:17.926 [reactor-http-nio-11] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 11:28:17.928 [reactor-http-nio-11] ERROR com.datacenter.extract.service.AIModelCaller - 💥 AI调用异常: block()/blockFirst()/blockLast() are blocking, which is not supported in thread reactor-http-nio-11
java.lang.IllegalStateException: block()/blockFirst()/blockLast() are blocking, which is not supported in thread reactor-http-nio-11
	at reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:86)
	at reactor.core.publisher.Mono.block(Mono.java:1728)
	at com.datacenter.extract.service.AIModelCaller.callAI(AIModelCaller.java:94)
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:67)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.controller.LongTextController.extractLongText(LongTextController.java:53)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:28:17.929 [reactor-http-nio-11] ERROR com.datacenter.extract.service.SmartAIProvider - ❌ AI提取失败，类型: entities,relations，文本长度: 26
2025-06-25 11:28:17.929 [reactor-http-nio-11] ERROR com.datacenter.extract.service.SmartAIProvider - 💥 AI提取过程异常: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:77)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.controller.LongTextController.extractLongText(LongTextController.java:53)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:28:17.929 [reactor-http-nio-11] ERROR c.datacenter.extract.controller.LongTextController - ❌ 长文本提取失败，耗时: 3ms，错误: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:82)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.controller.LongTextController.extractLongText(LongTextController.java:53)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:28:25.479 [reactor-http-nio-5] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 7552ms，响应长度: 353
2025-06-25 11:28:59.314 [ForkJoinPool.commonPool-worker-1] WARN  c.datacenter.extract.controller.ExtractController - Extract request failed - empty text content
2025-06-25 11:29:12.124 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Received extract request - extractParams: triples, textInputType: JSONArray, arraySize: 1, textLength: 30
2025-06-25 11:29:12.130 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 提交异步文本提取任务，输入长度: 30, 参数: triples
2025-06-25 11:29:12.130 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: ForkJoinPool.commonPool-worker-1
2025-06-25 11:29:12.131 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 30 字符
2025-06-25 11:29:12.131 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 11:29:12.131 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 30，当前并发数: 1
2025-06-25 11:29:12.131 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 11:29:22.040 [reactor-http-nio-2] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 9909ms，响应长度: 353
2025-06-25 11:29:22.041 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 30，处理模式: 直接处理
2025-06-25 11:29:22.067 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 353
2025-06-25 11:29:22.068 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张三",
      "predicate": "职业",
      "object": "科学家",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "出生于",
      "object": "1980年",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "毕业于",
      "object": "清华大学",
      "confidence": 0.95
    }
  ]
}
2025-06-25 11:29:22.068 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张三",
      "predicate": "职业",
      "object": "科学家",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "出生于",
      "object": "1980年",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "毕业于",
      "object": "清华大学",
      "confidence": 0.95
    }
  ]
}
2025-06-25 11:29:22.071 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 11:29:22.071 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 3 个三元组，包括实体和关系保存
2025-06-25 11:29:22.149 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:29:22.180 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:29:22.192 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 张三 (通过三元组提取)
2025-06-25 11:29:22.195 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:29:22.197 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:29:22.199 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 科学家 (通过三元组提取)
2025-06-25 11:29:22.206 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:29:22.216 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:29:22.220 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 11:29:22.222 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 科学家 [职业]
2025-06-25 11:29:22.223 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[职业]--> 科学家
2025-06-25 11:29:22.225 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:29:22.232 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张三 已存在，跳过插入
2025-06-25 11:29:22.232 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:29:22.235 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:29:22.241 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 1980年 (通过三元组提取)
2025-06-25 11:29:22.242 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:29:22.247 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:29:22.250 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 11:29:22.254 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 1980年 [出生于]
2025-06-25 11:29:22.254 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[出生于]--> 1980年
2025-06-25 11:29:22.256 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:29:22.261 [ForkJoinPool.commonPool-worker-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:29:22.263 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 清华大学 (通过三元组提取)
2025-06-25 11:29:22.263 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[毕业于]--> 清华大学
2025-06-25 11:29:22.263 [ForkJoinPool.commonPool-worker-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 11:29:22.272 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成
2025-06-25 11:29:22.272 [ForkJoinPool.commonPool-worker-1] INFO  c.datacenter.extract.controller.ExtractController - Extract request completed successfully in 10240ms
2025-06-25 11:31:02.007 [reactor-http-nio-3] ERROR c.datacenter.extract.controller.LongTextController - ❌ 长文本提取失败，耗时: 0ms，错误: Cannot invoke "String.length()" because "textInput" is null
java.lang.NullPointerException: Cannot invoke "String.length()" because "textInput" is null
	at com.datacenter.extract.controller.LongTextController.extractLongText(LongTextController.java:50)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:32:10.618 [reactor-http-nio-4] ERROR c.datacenter.extract.controller.LongTextController - ❌ 长文本提取失败，耗时: 0ms，错误: Cannot invoke "String.length()" because "textInput" is null
java.lang.NullPointerException: Cannot invoke "String.length()" because "textInput" is null
	at com.datacenter.extract.controller.LongTextController.extractLongText(LongTextController.java:50)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.reactive.result.method.InvocableHandlerMethod.lambda$invoke$0(InvocableHandlerMethod.java:175)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:32:49.636 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 59217 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-25 11:32:49.639 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-25 11:32:50.567 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 11:32:50.568 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-25 11:32:50.674 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 102 ms. Found 7 JPA repository interfaces.
2025-06-25 11:32:50.696 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 11:32:50.697 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-25 11:32:50.714 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityCelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:32:50.715 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityEventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:32:50.715 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:32:50.715 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:32:50.715 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:32:50.715 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:32:50.715 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:32:50.715 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 13 ms. Found 0 Redis repository interfaces.
2025-06-25 11:32:54.277 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@3ba5c4dd
2025-06-25 11:32:54.280 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@3ba5c4dd
2025-06-25 11:32:54.280 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@3ba5c4dd
2025-06-25 11:32:54.280 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-25 11:32:54.280 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-25 11:32:54.280 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-25 11:32:54.280 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-25 11:32:54.282 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-25 11:32:54.284 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-25 11:32:54.284 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 11:32:54.285 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 11:32:54.285 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 11:32:54.285 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-25 11:32:54.285 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-25 11:32:54.285 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-25 11:32:54.285 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-25 11:32:54.286 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-25 11:32:54.286 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-25 11:32:54.286 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-25 11:32:54.286 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-25 11:32:54.286 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@5abc5854
2025-06-25 11:32:54.286 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-25 11:32:54.286 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-25 11:32:54.287 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-25 11:32:54.287 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-25 11:32:54.287 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-25 11:32:54.287 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-25 11:32:54.287 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-25 11:32:54.287 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-25 11:32:54.287 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-25 11:32:54.288 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-25 11:32:54.288 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-25 11:32:54.288 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-25 11:32:54.288 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-25 11:32:54.288 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-25 11:32:54.288 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-25 11:32:54.289 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-25 11:32:54.289 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 11:32:54.289 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 11:32:54.290 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-25 11:32:54.291 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-25 11:32:54.291 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-25 11:32:54.291 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-25 11:32:54.291 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-25 11:32:54.291 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-25 11:32:54.291 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-25 11:32:54.292 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-25 11:32:54.292 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@586486c
2025-06-25 11:32:54.292 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-25 11:32:54.292 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-25 11:32:54.294 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-25 11:32:54.294 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@7fbbdd8a
2025-06-25 11:32:54.294 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-25 11:32:54.294 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-25 11:32:54.294 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 11:32:54.294 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 11:32:54.294 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 11:32:54.294 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 11:32:54.295 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 11:32:54.295 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 11:32:54.295 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 11:32:54.295 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 11:32:54.295 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-25 11:32:54.295 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-25 11:32:54.295 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-25 11:32:54.295 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-25 11:32:54.295 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 11:32:54.295 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 11:32:54.296 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-25 11:32:54.296 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-25 11:32:54.296 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 11:32:54.296 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 11:32:54.296 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 11:32:54.297 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 11:32:54.298 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 11:32:54.298 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 11:32:54.298 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 11:32:54.299 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 11:32:54.300 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@78861d9e
2025-06-25 11:32:54.300 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@6a878778
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@1eabfad5
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@6207145c
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@2a259f6f
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@7ccf6114
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@3df3410a
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@3df3410a
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@670c171c
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@61d42275
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@61d42275
2025-06-25 11:32:54.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@61d42275
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@6614289a
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@6614289a
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@6614289a
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@4148ce43
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@46fb9581
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@6fcc0a1
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@6fcc0a1
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@416b681c
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@416b681c
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@416b681c
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@46d69ca4
2025-06-25 11:32:54.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@5c9b5e62
2025-06-25 11:32:54.303 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@3c826498
2025-06-25 11:32:54.303 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@3c826498
2025-06-25 11:32:54.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@2633d09c
2025-06-25 11:32:54.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@2633d09c
2025-06-25 11:32:54.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@2633d09c
2025-06-25 11:32:54.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@54f25b42
2025-06-25 11:32:54.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@54f25b42
2025-06-25 11:32:54.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@521c67f0
2025-06-25 11:32:54.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@521c67f0
2025-06-25 11:32:54.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@7d156f8f
2025-06-25 11:32:54.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@7d156f8f
2025-06-25 11:32:54.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@451af781
2025-06-25 11:32:54.304 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@451af781
2025-06-25 11:32:54.305 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@3749c2b
2025-06-25 11:32:54.306 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@3749c2b
2025-06-25 11:32:54.306 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@32e65852
2025-06-25 11:32:54.308 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@762cdf46
2025-06-25 11:32:54.309 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@762cdf46
2025-06-25 11:32:54.309 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@27dc81be
2025-06-25 11:32:54.310 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@3595086b
2025-06-25 11:32:54.310 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@627d35ff
2025-06-25 11:32:54.312 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@7157413e
2025-06-25 11:32:54.312 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@3245efdb
2025-06-25 11:32:54.312 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@2f0e7fa8
2025-06-25 11:32:54.312 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@24d7657b
2025-06-25 11:32:54.312 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@6f428e6e
2025-06-25 11:32:54.312 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@72e49f6a
2025-06-25 11:32:54.392 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-25 11:32:54.404 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-25 11:32:54.492 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7852ab30
2025-06-25 11:32:54.494 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-25 11:32:54.527 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-25 11:32:54.527 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-25 11:32:54.542 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7120daa6) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6cbb6c41)
2025-06-25 11:32:54.542 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6787bd41) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@44c2e8a8)
2025-06-25 11:32:54.543 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@3340ff7c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@42e4431)
2025-06-25 11:32:54.543 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5e198c40) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@dcdb883)
2025-06-25 11:32:54.543 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@39420d59) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@4fbbd98c)
2025-06-25 11:32:54.543 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@5dd227b7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@3d3b852e)
2025-06-25 11:32:54.543 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@14ba7f15) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@55cb3b7)
2025-06-25 11:32:54.543 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@497fd334) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@280c3dc0)
2025-06-25 11:32:54.543 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@6f89ad03) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@f287a4e)
2025-06-25 11:32:54.544 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-25 11:32:54.544 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-25 11:32:54.544 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-25 11:32:54.545 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 11:32:54.545 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 11:32:54.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@19f1f330
2025-06-25 11:32:54.546 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@27dc81be`
2025-06-25 11:32:54.547 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-25 11:32:54.548 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-25 11:32:54.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:32:54.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:32:54.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:32:54.549 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:32:54.550 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:32:54.550 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:32:54.550 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:32:54.550 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:32:54.550 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:32:54.551 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@35dc849b] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@276aa33f]
2025-06-25 11:32:55.149 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@35dc849b] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@292b7a02]
2025-06-25 11:32:55.154 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@292b7a02] for TypeConfiguration
2025-06-25 11:32:55.154 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 11:32:55.861 [main] INFO  c.d.extract.controller.AsyncExtractController - AsyncExtractController initialized successfully
2025-06-25 11:32:55.866 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-25 11:32:56.324 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-25 11:32:56.468 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-25 11:32:56.505 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 2
2025-06-25 11:32:56.505 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-25 11:32:56.506 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-25 11:32:56.506 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-25 11:32:56.914 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-25 11:32:56.928 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 7.805 seconds (process running for 8.356)
2025-06-25 11:34:02.435 [SpringApplicationShutdownHook] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 11:34:02.437 [SpringApplicationShutdownHook] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@292b7a02] for TypeConfiguration
2025-06-25 11:34:02.438 [SpringApplicationShutdownHook] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@a187bf5] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@292b7a02]
2025-06-25 11:34:02.440 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-25 11:34:02.451 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-25 11:40:34.258 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Starting ExtractServiceApplication using Java 17.0.6 with PID 59716 (/Users/admin/workspace/AGENT/extract-service/target/classes started by admin in /Users/admin/workspace/AGENT/extract-service)
2025-06-25 11:40:34.261 [main] INFO  com.datacenter.extract.ExtractServiceApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-25 11:40:35.390 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 11:40:35.391 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-25 11:40:35.507 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 111 ms. Found 7 JPA repository interfaces.
2025-06-25 11:40:35.530 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-25 11:40:35.531 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-25 11:40:35.551 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityCelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:40:35.551 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityEventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:40:35.551 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:40:35.551 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.CelebrityWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:40:35.551 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:40:35.551 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.EventWorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:40:35.552 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.datacenter.extract.repository.WorkRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-25 11:40:35.552 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 0 Redis repository interfaces.
2025-06-25 11:40:37.034 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1e23ee0e
2025-06-25 11:40:37.037 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BasicTypeReference@1e23ee0e
2025-06-25 11:40:37.037 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BasicTypeReference@1e23ee0e
2025-06-25 11:40:37.037 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.BasicTypeReference@5bccaedb
2025-06-25 11:40:37.037 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.NumericBooleanConverter -> org.hibernate.type.BasicTypeReference@5bccaedb
2025-06-25 11:40:37.037 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.BasicTypeReference@67784537
2025-06-25 11:40:37.038 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.TrueFalseConverter -> org.hibernate.type.BasicTypeReference@67784537
2025-06-25 11:40:37.040 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.BasicTypeReference@17ec5e2a
2025-06-25 11:40:37.040 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.YesNoConverter -> org.hibernate.type.BasicTypeReference@17ec5e2a
2025-06-25 11:40:37.040 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@52290e63
2025-06-25 11:40:37.040 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.BasicTypeReference@52290e63
2025-06-25 11:40:37.040 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.BasicTypeReference@52290e63
2025-06-25 11:40:37.040 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BasicTypeReference@6c2dd88b
2025-06-25 11:40:37.041 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BasicTypeReference@6c2dd88b
2025-06-25 11:40:37.041 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BasicTypeReference@6c2dd88b
2025-06-25 11:40:37.042 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration binary_wrapper -> org.hibernate.type.BasicTypeReference@49d979c4
2025-06-25 11:40:37.042 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.BasicTypeReference@49d979c4
2025-06-25 11:40:37.042 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration image -> org.hibernate.type.BasicTypeReference@249a45fd
2025-06-25 11:40:37.042 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BasicTypeReference@268f0ff3
2025-06-25 11:40:37.042 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BasicTypeReference@268f0ff3
2025-06-25 11:40:37.043 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.BasicTypeReference@11978f52
2025-06-25 11:40:37.043 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_blob_wrapper -> org.hibernate.type.BasicTypeReference@3e0855b0
2025-06-25 11:40:37.043 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@484b5a21
2025-06-25 11:40:37.043 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration short -> org.hibernate.type.BasicTypeReference@484b5a21
2025-06-25 11:40:37.043 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.BasicTypeReference@484b5a21
2025-06-25 11:40:37.044 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.BasicTypeReference@16e5344c
2025-06-25 11:40:37.044 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration int -> org.hibernate.type.BasicTypeReference@16e5344c
2025-06-25 11:40:37.044 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.BasicTypeReference@16e5344c
2025-06-25 11:40:37.044 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@3ba5c4dd
2025-06-25 11:40:37.044 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration long -> org.hibernate.type.BasicTypeReference@3ba5c4dd
2025-06-25 11:40:37.044 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.BasicTypeReference@3ba5c4dd
2025-06-25 11:40:37.045 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@47fca3cc
2025-06-25 11:40:37.045 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration float -> org.hibernate.type.BasicTypeReference@47fca3cc
2025-06-25 11:40:37.045 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.BasicTypeReference@47fca3cc
2025-06-25 11:40:37.045 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@55746340
2025-06-25 11:40:37.045 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration double -> org.hibernate.type.BasicTypeReference@55746340
2025-06-25 11:40:37.046 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.BasicTypeReference@55746340
2025-06-25 11:40:37.046 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BasicTypeReference@6a0c7af6
2025-06-25 11:40:37.046 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BasicTypeReference@6a0c7af6
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BasicTypeReference@7f1ad846
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BasicTypeReference@7f1ad846
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.BasicTypeReference@5d5ae6aa
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration character_nchar -> org.hibernate.type.BasicTypeReference@2bc2e022
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration string -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.BasicTypeReference@2210e466
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.BasicTypeReference@be1c08a
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.BasicTypeReference@10408ea
2025-06-25 11:40:37.048 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.BasicTypeReference@3d7b3b18
2025-06-25 11:40:37.049 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration text -> org.hibernate.type.BasicTypeReference@186dcb05
2025-06-25 11:40:37.050 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.BasicTypeReference@1d0dad12
2025-06-25 11:40:37.050 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 11:40:37.050 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.BasicTypeReference@3c6fb501
2025-06-25 11:40:37.050 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-25 11:40:37.050 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.BasicTypeReference@58a8ea6f
2025-06-25 11:40:37.050 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.BasicTypeReference@2e6b379c
2025-06-25 11:40:37.050 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_char_array -> org.hibernate.type.BasicTypeReference@5e7e7a7e
2025-06-25 11:40:37.051 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_clob_character_array -> org.hibernate.type.BasicTypeReference@1ff81b0d
2025-06-25 11:40:37.051 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.BasicTypeReference@1c610f
2025-06-25 11:40:37.051 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_character_array -> org.hibernate.type.BasicTypeReference@773c7147
2025-06-25 11:40:37.051 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration materialized_nclob_char_array -> org.hibernate.type.BasicTypeReference@5abc5854
2025-06-25 11:40:37.051 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-25 11:40:37.051 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.BasicTypeReference@5c3007d
2025-06-25 11:40:37.051 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-25 11:40:37.051 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.BasicTypeReference@66b40dd3
2025-06-25 11:40:37.052 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-25 11:40:37.052 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.BasicTypeReference@7296fe0b
2025-06-25 11:40:37.053 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-25 11:40:37.054 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.BasicTypeReference@4a5066f5
2025-06-25 11:40:37.054 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-25 11:40:37.054 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.BasicTypeReference@578d472a
2025-06-25 11:40:37.054 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@1191029d
2025-06-25 11:40:37.054 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@54b2d002
2025-06-25 11:40:37.054 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-25 11:40:37.054 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.BasicTypeReference@1d1c63af
2025-06-25 11:40:37.055 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeUtc -> org.hibernate.type.BasicTypeReference@2095c331
2025-06-25 11:40:37.056 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithTimezone -> org.hibernate.type.BasicTypeReference@3909a854
2025-06-25 11:40:37.056 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@7b795db7
2025-06-25 11:40:37.056 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.BasicTypeReference@586486c
2025-06-25 11:40:37.056 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.BasicTypeReference@586486c
2025-06-25 11:40:37.056 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithTimezone -> org.hibernate.type.BasicTypeReference@b849fa6
2025-06-25 11:40:37.056 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTimeWithoutTimezone -> org.hibernate.type.BasicTypeReference@7fbbdd8a
2025-06-25 11:40:37.056 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration date -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-25 11:40:37.057 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.BasicTypeReference@4e9ea32f
2025-06-25 11:40:37.057 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration time -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-25 11:40:37.057 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.BasicTypeReference@79ec57b8
2025-06-25 11:40:37.057 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 11:40:37.057 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 11:40:37.057 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.BasicTypeReference@56ba8e8c
2025-06-25 11:40:37.057 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 11:40:37.057 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 11:40:37.057 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.BasicTypeReference@774c5e5c
2025-06-25 11:40:37.057 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.BasicTypeReference@4cf01c41
2025-06-25 11:40:37.057 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration calendar_time -> org.hibernate.type.BasicTypeReference@57bac3f0
2025-06-25 11:40:37.058 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration instant -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 11:40:37.058 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.BasicTypeReference@55f6f965
2025-06-25 11:40:37.058 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 11:40:37.058 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 11:40:37.058 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration pg-uuid -> org.hibernate.type.BasicTypeReference@40ddf339
2025-06-25 11:40:37.058 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.BasicTypeReference@c83ed77
2025-06-25 11:40:37.058 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.BasicTypeReference@d271a54
2025-06-25 11:40:37.058 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration class -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-25 11:40:37.059 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.BasicTypeReference@6ff8e744
2025-06-25 11:40:37.059 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 11:40:37.060 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Currency -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 11:40:37.061 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.BasicTypeReference@409395b9
2025-06-25 11:40:37.061 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-25 11:40:37.061 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.BasicTypeReference@53e82089
2025-06-25 11:40:37.061 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 11:40:37.061 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.io.Serializable -> org.hibernate.type.BasicTypeReference@66a8751a
2025-06-25 11:40:37.061 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 11:40:37.061 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.BasicTypeReference@4ec27c4c
2025-06-25 11:40:37.063 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZoneOffset -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 11:40:37.064 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZoneOffset -> org.hibernate.type.BasicTypeReference@12200670
2025-06-25 11:40:37.064 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration url -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 11:40:37.064 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.BasicTypeReference@5e80d5
2025-06-25 11:40:37.065 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.BasicTypeReference@257b3561
2025-06-25 11:40:37.069 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration object -> org.hibernate.type.JavaObjectType@498b611e
2025-06-25 11:40:37.070 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.JavaObjectType@498b611e
2025-06-25 11:40:37.071 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@5e9ea380
2025-06-25 11:40:37.071 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.BasicTypeReference@1e50eb3f
2025-06-25 11:40:37.071 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.BasicTypeReference@12e3f4ae
2025-06-25 11:40:37.071 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.BasicTypeReference@537451d5
2025-06-25 11:40:37.071 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.BasicTypeReference@785d6a98
2025-06-25 11:40:37.071 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.BasicTypeReference@614d7fbf
2025-06-25 11:40:37.071 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_calendar_time -> org.hibernate.type.BasicTypeReference@6c06b1bc
2025-06-25 11:40:37.071 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.BasicTypeReference@1d8dbf10
2025-06-25 11:40:37.071 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.BasicTypeReference@e171f93
2025-06-25 11:40:37.147 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-25 11:40:37.158 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-25 11:40:37.249 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@becb93a
2025-06-25 11:40:37.250 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-25 11:40:37.277 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-25 11:40:37.278 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-25 11:40:37.293 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(12, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4ac0d49) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7c6ab057)
2025-06-25 11:40:37.293 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-9, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7ce4498f) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1f7557fe)
2025-06-25 11:40:37.293 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(-3, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@7bd7d71c) replaced previous registration(org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@52963839)
2025-06-25 11:40:37.293 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4003, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@ce0bbd5) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@399fd710)
2025-06-25 11:40:37.294 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4001, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@7c359808) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@1f013047)
2025-06-25 11:40:37.294 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(4002, org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@16361e61) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@51566ce0)
2025-06-25 11:40:37.294 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2004, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@1734b1a) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@17e6d07b)
2025-06-25 11:40:37.294 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2005, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@318511f0) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@53564a4c)
2025-06-25 11:40:37.294 [main] DEBUG o.h.type.descriptor.sql.spi.DdlTypeRegistry - addDescriptor(2011, org.hibernate.type.descriptor.sql.internal.CapacityDependentDdlType@4866e0a7) replaced previous registration(org.hibernate.type.descriptor.sql.internal.DdlTypeImpl@69a294d8)
2025-06-25 11:40:37.295 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NCharTypeDescriptor) replaced previous registration(CharTypeDescriptor)
2025-06-25 11:40:37.295 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NVarcharTypeDescriptor) replaced previous registration(VarcharTypeDescriptor)
2025-06-25 11:40:37.295 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(LongNVarcharTypeDescriptor) replaced previous registration(LongVarcharTypeDescriptor)
2025-06-25 11:40:37.296 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(NClobTypeDescriptor(DEFAULT)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 11:40:37.296 [main] DEBUG o.h.type.descriptor.jdbc.spi.JdbcTypeRegistry - addDescriptor(2005, ClobTypeDescriptor(STREAM_BINDING)) replaced previous registration(ClobTypeDescriptor(DEFAULT))
2025-06-25 11:40:37.297 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration null -> org.hibernate.type.NullType@71cc0e35
2025-06-25 11:40:37.297 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Type registration key [null] overrode previous entry : `org.hibernate.type.NullType@5e9ea380`
2025-06-25 11:40:37.299 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration Duration -> basicType@1(java.time.Duration,2)
2025-06-25 11:40:37.299 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.Duration -> basicType@1(java.time.Duration,2)
2025-06-25 11:40:37.300 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetDateTimeType -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:40:37.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:40:37.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> basicType@2(java.time.OffsetDateTime,3003)
2025-06-25 11:40:37.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.ZonedDateTimeType -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:40:37.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:40:37.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> basicType@3(java.time.ZonedDateTime,3003)
2025-06-25 11:40:37.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration org.hibernate.type.OffsetTimeType -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:40:37.301 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:40:37.302 [main] DEBUG org.hibernate.type.BasicTypeRegistry - Adding type registration java.time.OffsetTime -> basicType@4(java.time.OffsetTime,3007)
2025-06-25 11:40:37.302 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@221961af] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@32ddcca]
2025-06-25 11:40:37.934 [main] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@221961af] to SessionFactoryImplementor [org.hibernate.internal.SessionFactoryImpl@186fc6e]
2025-06-25 11:40:37.939 [main] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryCreated from [org.hibernate.internal.SessionFactoryImpl@186fc6e] for TypeConfiguration
2025-06-25 11:40:37.939 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 11:40:38.573 [main] INFO  c.d.extract.controller.AsyncExtractController - AsyncExtractController initialized successfully
2025-06-25 11:40:38.577 [main] INFO  c.datacenter.extract.controller.ExtractController - ExtractController initialized successfully
2025-06-25 11:40:39.037 [main] INFO  o.s.b.actuate.endpoint.web.EndpointLinksResolver - Exposing 3 endpoint(s) beneath base path '/actuator'
2025-06-25 11:40:39.158 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable tools capabilities, notification: true
2025-06-25 11:40:39.194 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Registered tools: 2
2025-06-25 11:40:39.194 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable resources capabilities, notification: true
2025-06-25 11:40:39.195 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable prompts capabilities, notification: true
2025-06-25 11:40:39.195 [main] INFO  o.s.a.m.s.autoconfigure.McpServerAutoConfiguration - Enable completions capabilities
2025-06-25 11:40:39.588 [main] INFO  o.s.boot.web.embedded.netty.NettyWebServer - Netty started on port 2701
2025-06-25 11:40:39.605 [main] INFO  com.datacenter.extract.ExtractServiceApplication - Started ExtractServiceApplication in 5.956 seconds (process running for 6.56)
2025-06-25 11:40:45.088 [reactor-http-nio-4] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 11:40:45.111 [reactor-http-nio-4] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 144ms
2025-06-25 11:40:45.111 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-1, 文本长度: 82
2025-06-25 11:40:45.120 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 82 字符
2025-06-25 11:40:45.123 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 11:40:45.124 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 82，当前并发数: 1
2025-06-25 11:40:45.124 [TextExtract-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 11:40:47.163 [reactor-http-nio-7] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 11:40:47.168 [reactor-http-nio-7] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 6ms
2025-06-25 11:40:47.168 [TextExtract-2] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-2, 文本长度: 427
2025-06-25 11:40:47.170 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 427 字符
2025-06-25 11:40:47.170 [TextExtract-2] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 11:40:47.170 [TextExtract-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 427，当前并发数: 2
2025-06-25 11:40:47.170 [TextExtract-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 11:40:49.201 [reactor-http-nio-9] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 11:40:49.202 [reactor-http-nio-9] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 2ms
2025-06-25 11:40:49.202 [TextExtract-3] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-3, 文本长度: 1970
2025-06-25 11:40:49.203 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 1970 字符
2025-06-25 11:40:49.204 [TextExtract-3] INFO  com.datacenter.extract.service.SmartAIProvider - 📝 短文本，使用直接处理模式
2025-06-25 11:40:49.204 [TextExtract-3] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 1970，当前并发数: 3
2025-06-25 11:40:49.205 [TextExtract-3] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 40秒
2025-06-25 11:41:00.609 [reactor-http-nio-6] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 15485ms，响应长度: 694
2025-06-25 11:41:00.610 [TextExtract-1] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 82，处理模式: 直接处理
2025-06-25 11:41:00.630 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 694
2025-06-25 11:41:00.631 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {
  "triples": [
    {
      "subject": "张三",
      "predicate": "职业",
      "object": "软件工程师",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "工作地点",
      "object": "北京的一家科技公司",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "负责",
      "object": "开发人工智能系统",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "李四",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "王五",
      "confidence": 0.95
    },
    {
      "subject": "张三的团队",
      "predicate": "开发",
      "object": "智能对话系统",
      "confidence": 0.95
    }
  ]
}
2025-06-25 11:41:00.631 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {
  "triples": [
    {
      "subject": "张三",
      "predicate": "职业",
      "object": "软件工程师",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "工作地点",
      "object": "北京的一家科技公司",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "负责",
      "object": "开发人工智能系统",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "李四",
      "confidence": 0.95
    },
    {
      "subject": "张三",
      "predicate": "合作",
      "object": "王五",
      "confidence": 0.95
    },
    {
      "subject": "张三的团队",
      "predicate": "开发",
      "object": "智能对话系统",
      "confidence": 0.95
    }
  ]
}
2025-06-25 11:41:00.632 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 1 个主要字段: [triples]
2025-06-25 11:41:00.633 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 处理 6 个三元组，包括实体和关系保存
2025-06-25 11:41:00.696 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:41:00.713 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张三 已存在，跳过插入
2025-06-25 11:41:00.714 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:41:00.726 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:41:00.735 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 软件工程师 (通过三元组提取)
2025-06-25 11:41:00.742 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:41:00.752 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:41:00.754 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 11:41:00.757 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 软件工程师 [职业]
2025-06-25 11:41:00.757 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[职业]--> 软件工程师
2025-06-25 11:41:00.757 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[工作地点]--> 北京的一家科技公司
2025-06-25 11:41:00.758 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:41:00.761 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:41:00.768 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 开发人工智能系统 (通过三元组提取)
2025-06-25 11:41:00.769 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[负责]--> 开发人工智能系统
2025-06-25 11:41:00.769 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:41:00.772 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张三 已存在，跳过插入
2025-06-25 11:41:00.773 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:41:00.776 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:41:00.778 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 李四 (通过三元组提取)
2025-06-25 11:41:00.780 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:41:00.783 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:41:00.786 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 11:41:00.789 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 李四 [合作]
2025-06-25 11:41:00.789 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[合作]--> 李四
2025-06-25 11:41:00.790 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:41:00.795 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 人员 张三 已存在，跳过插入
2025-06-25 11:41:00.796 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:41:00.798 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:41:00.800 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 王五 (通过三元组提取)
2025-06-25 11:41:00.801 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:41:00.804 [TextExtract-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:41:00.806 [TextExtract-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 11:41:00.807 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 张三 -> 王五 [合作]
2025-06-25 11:41:00.807 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三 --[合作]--> 王五
2025-06-25 11:41:00.807 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 张三的团队 --[开发]--> 智能对话系统
2025-06-25 11:41:00.808 [TextExtract-1] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 11:41:00.813 [TextExtract-1] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 82
2025-06-25 11:41:17.191 [parallel-3] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 30021ms，错误: Did not observe any item or terminal signal within 30000ms in 'flatMap' (and no fallback has been configured)
2025-06-25 11:41:17.192 [TextExtract-2] ERROR com.datacenter.extract.service.SmartAIProvider - ❌ AI提取失败，类型: entities,relations，文本长度: 427
2025-06-25 11:41:17.193 [TextExtract-2] ERROR com.datacenter.extract.service.SmartAIProvider - 💥 AI提取过程异常: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:77)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.service.TextExtractionService.processTextAsync(TextExtractionService.java:72)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.AsyncExecutionInterceptor.lambda$invoke$0(AsyncExecutionInterceptor.java:115)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:41:17.196 [TextExtract-2] ERROR c.datacenter.extract.service.TextExtractionService - 异步文本提取失败，错误: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-25 11:41:29.211 [parallel-4] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 40006ms，错误: Did not observe any item or terminal signal within 40000ms in 'flatMap' (and no fallback has been configured)
2025-06-25 11:41:29.212 [TextExtract-3] ERROR com.datacenter.extract.service.SmartAIProvider - ❌ AI提取失败，类型: entities,relations，文本长度: 1970
2025-06-25 11:41:29.212 [TextExtract-3] ERROR com.datacenter.extract.service.SmartAIProvider - 💥 AI提取过程异常: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
java.lang.RuntimeException: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
	at com.datacenter.extract.service.SmartAIProvider.lambda$process$0(SmartAIProvider.java:77)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2688)
	at java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2686)
	at com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2669)
	at com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:112)
	at com.github.benmanes.caffeine.cache.LocalManualCache.get(LocalManualCache.java:62)
	at com.datacenter.extract.service.SmartAIProvider.process(SmartAIProvider.java:54)
	at com.datacenter.extract.service.TextExtractionService.processTextAsync(TextExtractionService.java:72)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.AsyncExecutionInterceptor.lambda$invoke$0(AsyncExecutionInterceptor.java:115)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-06-25 11:41:29.213 [TextExtract-3] ERROR c.datacenter.extract.service.TextExtractionService - 异步文本提取失败，错误: AI提取失败: AI提取失败，无法处理请求。请检查AI服务状态或稍后重试。
2025-06-25 11:41:43.059 [reactor-http-nio-11] INFO  c.d.extract.controller.AsyncExtractController - Received async extract request - extractParams: entities,relations, textInputType: JSONArray, arraySize: 1
2025-06-25 11:41:43.059 [reactor-http-nio-11] INFO  c.d.extract.controller.AsyncExtractController - Async extract request submitted successfully in 0ms
2025-06-25 11:41:43.060 [TextExtract-4] INFO  c.datacenter.extract.service.TextExtractionService - 开始异步文本提取，线程: TextExtract-4, 文本长度: 2386
2025-06-25 11:41:43.061 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 🚀 开始AI提取，文本长度: 2386 字符
2025-06-25 11:41:43.061 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - 📄 检测到长文本，启用分批处理模式
2025-06-25 11:41:43.061 [TextExtract-4] INFO  com.datacenter.extract.service.LongTextProcessor - 🔍 开始处理长文本，长度: 2386 字符
2025-06-25 11:41:43.062 [TextExtract-4] INFO  com.datacenter.extract.service.LongTextProcessor - 📊 文本分片完成，共 2 个分片
2025-06-25 11:41:43.063 [pool-5-thread-1] INFO  com.datacenter.extract.service.LongTextProcessor - ⚡ 处理分片 1 (1985 字符)
2025-06-25 11:41:43.063 [pool-5-thread-2] INFO  com.datacenter.extract.service.LongTextProcessor - ⚡ 处理分片 2 (587 字符)
2025-06-25 11:41:43.063 [pool-5-thread-1] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 1985，当前并发数: 1
2025-06-25 11:41:43.064 [pool-5-thread-2] INFO  com.datacenter.extract.service.AIModelCaller - 🎯 开始AI调用，文本长度: 587，当前并发数: 2
2025-06-25 11:41:43.064 [pool-5-thread-1] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 40秒
2025-06-25 11:41:43.064 [pool-5-thread-2] INFO  com.datacenter.extract.service.AIModelCaller - ⏱️  动态计算超时时间: 30秒
2025-06-25 11:42:06.710 [reactor-http-nio-12] INFO  com.datacenter.extract.service.AIModelCaller - ✅ AI调用成功，耗时: 23646ms，响应长度: 1699
2025-06-25 11:42:23.069 [parallel-11] ERROR com.datacenter.extract.service.AIModelCaller - ❌ AI调用失败，耗时: 40004ms，错误: Did not observe any item or terminal signal within 40000ms in 'flatMap' (and no fallback has been configured)
2025-06-25 11:42:23.078 [TextExtract-4] INFO  com.datacenter.extract.service.LongTextProcessor - ✅ 分片合并完成，成功率: 2/2 ({:.1f}%)，提取三元组: 100.0
2025-06-25 11:42:23.080 [TextExtract-4] INFO  com.datacenter.extract.service.SmartAIProvider - ✅ AI提取成功，文本长度: 2386，处理模式: 分批处理
2025-06-25 11:42:23.085 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 开始保存提取数据到数据库，数据长度: 1686
2025-06-25 11:42:23.085 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 原始AI返回数据: {"triples":[{"subject":"团队","predicate":"使用","object":"PyTorch","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"使用","object":"TensorFlow","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"使用","object":"Paddle","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"开发","object":"分布式训练系统","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"签署","object":"技术转让协议","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"计划研究","object":"多模态知识图谱","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"医疗","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"金融","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"教育","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"陈研究员","predicate":"研究","object":"联邦学习","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"陈研究员","predicate":"研究","object":"隐私保护技术","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"合作","object":"华为公司","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"合作","object":"牛津大学","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"合作","object":"剑桥大学","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"合作","object":"斯坦福大学","confidence":0.95,"chunk_index":1,"chunk_start":0}],"total_chunks":2,"success_chunks":2,"success_rate":"100.00%","total_triples":15,"processing_method":"batch_processing","timestamp":1750822943078}
2025-06-25 11:42:23.085 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 提取的JSON部分: {"triples":[{"subject":"团队","predicate":"使用","object":"PyTorch","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"使用","object":"TensorFlow","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"使用","object":"Paddle","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"开发","object":"分布式训练系统","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"签署","object":"技术转让协议","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"计划研究","object":"多模态知识图谱","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"医疗","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"金融","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"探索应用","object":"教育","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"陈研究员","predicate":"研究","object":"联邦学习","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"陈研究员","predicate":"研究","object":"隐私保护技术","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"合作","object":"华为公司","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"合作","object":"牛津大学","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"合作","object":"剑桥大学","confidence":0.95,"chunk_index":1,"chunk_start":0},{"subject":"团队","predicate":"合作","object":"斯坦福大学","confidence":0.95,"chunk_index":1,"chunk_start":0}],"total_chunks":2,"success_chunks":2,"success_rate":"100.00%","total_triples":15,"processing_method":"batch_processing","timestamp":1750822943078}
2025-06-25 11:42:23.096 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 成功解析提取结果，包含 7 个主要字段: [triples, total_chunks, success_chunks, success_rate, total_triples, processing_method, timestamp]
2025-06-25 11:42:23.096 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 处理 15 个三元组，包括实体和关系保存
2025-06-25 11:42:23.096 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[使用]--> PyTorch
2025-06-25 11:42:23.096 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[使用]--> TensorFlow
2025-06-25 11:42:23.096 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[使用]--> Paddle
2025-06-25 11:42:23.096 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[开发]--> 分布式训练系统
2025-06-25 11:42:23.096 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[签署]--> 技术转让协议
2025-06-25 11:42:23.096 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[计划研究]--> 多模态知识图谱
2025-06-25 11:42:23.097 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[探索应用]--> 医疗
2025-06-25 11:42:23.097 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[探索应用]--> 金融
2025-06-25 11:42:23.097 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[探索应用]--> 教育
2025-06-25 11:42:23.100 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:42:23.105 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:42:23.109 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 联邦学习 (通过三元组提取)
2025-06-25 11:42:23.110 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 陈研究员 --[研究]--> 联邦学习
2025-06-25 11:42:23.110 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 陈研究员 --[研究]--> 隐私保护技术
2025-06-25 11:42:23.111 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:42:23.115 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:42:23.117 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 团队 (通过三元组提取)
2025-06-25 11:42:23.119 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:42:23.121 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:42:23.122 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 华为公司 (通过三元组提取)
2025-06-25 11:42:23.125 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:42:23.129 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:42:23.131 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 11:42:23.133 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 团队 -> 华为公司 [合作]
2025-06-25 11:42:23.133 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[合作]--> 华为公司
2025-06-25 11:42:23.134 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:42:23.137 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 人员 团队 已存在，跳过插入
2025-06-25 11:42:23.137 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:42:23.140 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:42:23.143 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 牛津大学 (通过三元组提取)
2025-06-25 11:42:23.144 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:42:23.148 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:42:23.150 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 11:42:23.152 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 团队 -> 牛津大学 [合作]
2025-06-25 11:42:23.152 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[合作]--> 牛津大学
2025-06-25 11:42:23.155 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:42:23.157 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 人员 团队 已存在，跳过插入
2025-06-25 11:42:23.159 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:42:23.160 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:42:23.162 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 剑桥大学 (通过三元组提取)
2025-06-25 11:42:23.164 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:42:23.168 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:42:23.171 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 11:42:23.172 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 团队 -> 剑桥大学 [合作]
2025-06-25 11:42:23.172 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[合作]--> 剑桥大学
2025-06-25 11:42:23.175 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:42:23.177 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 人员 团队 已存在，跳过插入
2025-06-25 11:42:23.178 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id 
    from
        celebrity c1_0 
    where
        c1_0.name=? 
    limit
        ?
2025-06-25 11:42:23.180 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity
        (baike, birthdate, celebrity_id, company, education, gender, `group`, name, nationality, position, profession, relatives, resume, spouse) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-25 11:42:23.183 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 成功保存人员: 斯坦福大学 (通过三元组提取)
2025-06-25 11:42:23.185 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:42:23.192 [TextExtract-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.baike,
        c1_0.birthdate,
        c1_0.celebrity_id,
        c1_0.company,
        c1_0.education,
        c1_0.gender,
        c1_0.`group`,
        c1_0.name,
        c1_0.nationality,
        c1_0.position,
        c1_0.profession,
        c1_0.relatives,
        c1_0.resume,
        c1_0.spouse 
    from
        celebrity c1_0 
    where
        c1_0.name=?
2025-06-25 11:42:23.194 [TextExtract-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        celebrity_celebrity
        (e_type, `from`, `to`) 
    values
        (?, ?, ?)
2025-06-25 11:42:23.196 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - ✅ 保存人人关系: 团队 -> 斯坦福大学 [合作]
2025-06-25 11:42:23.199 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🔗 关系记录: 团队 --[合作]--> 斯坦福大学
2025-06-25 11:42:23.200 [TextExtract-4] INFO  com.datacenter.extract.service.DatabaseService - 🎉 成功保存提取数据到MySQL数据库 (localhost:3306/extract-graph)
2025-06-25 11:42:23.205 [TextExtract-4] INFO  c.datacenter.extract.service.TextExtractionService - 异步文本提取完成，处理文本长度: 2386
2025-06-25 11:43:35.182 [SpringApplicationShutdownHook] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-25 11:43:35.183 [SpringApplicationShutdownHook] TRACE org.hibernate.type.spi.TypeConfiguration$Scope - Handling #sessionFactoryClosed from [org.hibernate.internal.SessionFactoryImpl@186fc6e] for TypeConfiguration
2025-06-25 11:43:35.183 [SpringApplicationShutdownHook] DEBUG org.hibernate.type.spi.TypeConfiguration$Scope - Un-scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration$Scope@588d78da] from SessionFactory [org.hibernate.internal.SessionFactoryImpl@186fc6e]
2025-06-25 11:43:35.185 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-25 11:43:35.195 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
